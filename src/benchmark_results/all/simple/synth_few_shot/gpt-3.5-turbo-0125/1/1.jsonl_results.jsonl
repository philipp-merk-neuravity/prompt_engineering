{"task_id": "HumanEval/0", "generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(1, len(numbers)):\n        if abs(numbers[i] - numbers[i-1]) <= threshold:\n            return True\n    return False", "prompt_tokens": 436, "completion_tokens": 521, "duration": 8.783498048782349, "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    current_group = ''\n    for char in paren_string:\n        if char == '(': \n            stack.append(char)\n        elif char == ')':\n            stack.pop()\n        current_group += char\n        if not stack:\n            result.append(current_group)\n            current_group = ''\n    return result", "prompt_tokens": 427, "completion_tokens": 742, "duration": 16.200170755386353, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 397, "completion_tokens": 355, "duration": 6.333184719085693, "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "generated_code": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 431, "completion_tokens": 583, "duration": 9.851169109344482, "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "generated_code": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 429, "completion_tokens": 562, "duration": 10.022179365158081, "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "generated_code": "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for num in numbers[:-1]:\n        result.extend([num, delimiter])\n    if numbers:\n        result.append(numbers[-1])\n    return result", "prompt_tokens": 404, "completion_tokens": 484, "duration": 6.906358242034912, "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    max_depth = 0\n    current_depth = 0\n    for char in paren_string:\n        if char == '(': current_depth += 1\n        elif char == ')': current_depth -= 1\n        max_depth = max(max_depth, current_depth)\n        if char == ' ': depths.append(max_depth)\n    return depths", "prompt_tokens": 424, "completion_tokens": 921, "duration": 19.23134446144104, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/7", "generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]: \n    return [s for s in strings if substring in s]", "prompt_tokens": 405, "completion_tokens": 503, "duration": 8.0620756149292, "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "generated_code": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    sum_result = 0\n    product_result = 1\n    for num in numbers:\n        sum_result += num\n        product_result *= num\n    return sum_result, product_result", "prompt_tokens": 422, "completion_tokens": 477, "duration": 9.264649868011475, "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "generated_code": "from collections import deque\n\ndef rolling_max(numbers):\n    result = []\n    dq = deque()\n    for i, num in enumerate(numbers):\n        while dq and numbers[dq[-1]] < num:\n            dq.pop()\n        dq.append(i)\n        if dq[0] == i - len(dq):\n            dq.popleft()\n        result.append(numbers[dq[0]])\n    return result", "prompt_tokens": 412, "completion_tokens": 741, "duration": 14.424638271331787, "result": "passed", "passed": true}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string: str) -> str:\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string", "prompt_tokens": 454, "completion_tokens": 860, "duration": 20.01991057395935, "result": "passed", "passed": true}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result", "prompt_tokens": 388, "completion_tokens": 524, "duration": 7.808239459991455, "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "prompt_tokens": 414, "completion_tokens": 489, "duration": 12.2005033493042, "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 382, "completion_tokens": 442, "duration": 9.36768388748169, "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 557, "completion_tokens": 431, "duration": 7.12491250038147, "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1))", "prompt_tokens": 380, "completion_tokens": 362, "duration": 12.384697675704956, "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 382, "completion_tokens": 379, "duration": 6.4613916873931885, "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    note_duration = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    result = [note_duration[note] for note in notes]\n    return result", "prompt_tokens": 484, "completion_tokens": 501, "duration": 8.687718629837036, "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 400, "completion_tokens": 440, "duration": 7.777849197387695, "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    number_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers_list = numbers.split()\n    sorted_numbers = sorted(numbers_list, key=lambda x: number_map[x])\n    return ' '.join(sorted_numbers)", "prompt_tokens": 417, "completion_tokens": 525, "duration": 11.599790334701538, "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = []\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            result = [numbers[i], numbers[i+1]]\n    return tuple(result)", "prompt_tokens": 478, "completion_tokens": 655, "duration": 10.755098342895508, "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]", "prompt_tokens": 435, "completion_tokens": 468, "duration": 9.186380386352539, "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [val for val in values if isinstance(val, int)]", "prompt_tokens": 403, "completion_tokens": 415, "duration": 15.337738037109375, "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 355, "completion_tokens": 319, "duration": 9.594054937362671, "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    largest = 1\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            largest = i\n    return largest", "prompt_tokens": 364, "completion_tokens": 512, "duration": 10.980993747711182, "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    for i in range(2, int(n**0.5) + 1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 438, "completion_tokens": 771, "duration": 16.975391387939453, "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "generated_code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result", "prompt_tokens": 396, "completion_tokens": 467, "duration": 10.016920566558838, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)", "prompt_tokens": 360, "completion_tokens": 433, "duration": 8.579669952392578, "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 369, "completion_tokens": 406, "duration": 10.935158252716064, "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 399, "completion_tokens": 411, "duration": 7.175906419754028, "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 656, "completion_tokens": 405, "duration": 8.153930902481079, "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 411, "completion_tokens": 575, "duration": 11.671858787536621, "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "generated_code": "def find_zero(xs: list):\n    x = -10.0\n    while True:\n        if abs(poly(xs, x)) < 1e-9:\n            return x\n        x += 0.001", "prompt_tokens": 571, "completion_tokens": 640, "duration": 9.90540099143982, "result": "failed: name 'poly' is not defined", "passed": false}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list) -> list:\n    sorted_indices = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = [l[i] for i in sorted_indices]\n    sorted_values.sort()\n    for i in sorted_indices:\n        l[i] = sorted_values.pop(0)\n    return l", "prompt_tokens": 462, "completion_tokens": 535, "duration": 8.352078199386597, "result": "passed", "passed": true}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 385, "completion_tokens": 332, "duration": 6.841283082962036, "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list) -> int:\n    return max(l)", "prompt_tokens": 394, "completion_tokens": 327, "duration": 6.371485471725464, "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 391, "completion_tokens": 527, "duration": 9.15093183517456, "result": "passed", "passed": true}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list) -> list:\n    even_indices = sorted(l[::2])\n    for i, val in enumerate(even_indices):\n        l[2*i] = val\n    return l", "prompt_tokens": 435, "completion_tokens": 401, "duration": 8.245853662490845, "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "prompt_tokens": 470, "completion_tokens": 601, "duration": 11.436465740203857, "result": "failed: name 'decode_cyclic' is not defined", "passed": false}
{"task_id": "HumanEval/39", "generated_code": "import math\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n\ndef prime_fib(n: int) -> int:\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num) and fibonacci(num):\n            count += 1\n        num += 1\n    return num - 1", "prompt_tokens": 409, "completion_tokens": 680, "duration": 13.422446250915527, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list) -> bool:\n    l.sort()\n    n = len(l)\n    for i in range(n-2):\n        left, right = i+1, n-1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "prompt_tokens": 471, "completion_tokens": 976, "duration": 15.022465467453003, "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n * (n - 1) // 2", "prompt_tokens": 463, "completion_tokens": 498, "duration": 9.096455335617065, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 420, "completion_tokens": 288, "duration": 9.487048864364624, "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 469, "completion_tokens": 567, "duration": 11.63744068145752, "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int): \n    result = '' \n    while x > 0: \n        result = str(x % base) + result \n        x //= base \n    return result", "prompt_tokens": 403, "completion_tokens": 386, "duration": 7.744381904602051, "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 358, "completion_tokens": 309, "duration": 4.955280542373657, "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    if n <= 1:\n        return n\n    dp = [0] * (n + 1)\n    dp[1] = 0\n    dp[2] = 2\n    dp[3] = 0\n    dp[4] = 0\n    for i in range(5, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] + dp[i - 4]\n    return dp[n]", "prompt_tokens": 483, "completion_tokens": 685, "duration": 13.919017791748047, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 387, "completion_tokens": 416, "duration": 6.283623695373535, "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "prompt_tokens": 383, "completion_tokens": 397, "duration": 5.814276218414307, "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int): \n    return pow(2, n, p)", "prompt_tokens": 417, "completion_tokens": 445, "duration": 8.950209856033325, "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return ''.join([chr(((ord(ch) + 5 - ord('a')) % 26) + ord('a')) for ch in s])", "prompt_tokens": 402, "completion_tokens": 438, "duration": 9.03049087524414, "result": "failed: name 'decode_shift' is not defined", "passed": false}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result", "prompt_tokens": 434, "completion_tokens": 614, "duration": 9.185795068740845, "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    return all(num < t for num in l)", "prompt_tokens": 592, "completion_tokens": 441, "duration": 14.467867851257324, "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    return x + y", "prompt_tokens": 365, "completion_tokens": 246, "duration": 7.308230638504028, "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 452, "completion_tokens": 402, "duration": 8.440375804901123, "result": "passed", "passed": true}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    fib_nums = [0] * (n+1)\n    fib_nums[1] = 1\n    for i in range(2, n+1):\n        fib_nums[i] = fib_nums[i-1] + fib_nums[i-2]\n    return fib_nums[n]", "prompt_tokens": 364, "completion_tokens": 605, "duration": 12.002084016799927, "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>' and (not stack or stack.pop() != '<'):\n            return False\n    return len(stack) == 0", "prompt_tokens": 404, "completion_tokens": 569, "duration": 12.572816848754883, "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))", "prompt_tokens": 631, "completion_tokens": 550, "duration": 14.436808347702026, "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 426, "completion_tokens": 384, "duration": 10.392011404037476, "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "generated_code": "import math\n\ndef largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 375, "completion_tokens": 571, "duration": 12.312594175338745, "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    return n*(n+1)//2", "prompt_tokens": 406, "completion_tokens": 397, "duration": 9.044393539428711, "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':  \n            stack.append(bracket)\n        else:  \n            if not stack or stack.pop() != '(':  \n                return False\n    return len(stack) == 0", "prompt_tokens": 401, "completion_tokens": 750, "duration": 17.13979434967041, "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list) -> list:\n    return [xs[i] * i for i in range(1, len(xs))]", "prompt_tokens": 420, "completion_tokens": 419, "duration": 7.337794542312622, "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n <= 1:\n        return 0\n    if n == 2:\n        return 1\n    fibfib = [0, 0, 1]\n    for i in range(3, n+1):\n        fibfib.append(fibfib[i-1] + fibfib[i-2] + fibfib[i-3])\n    return fibfib[n]", "prompt_tokens": 461, "completion_tokens": 608, "duration": 13.389949321746826, "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    count = 0\n    for char in s.lower():\n        if char in vowels or (char == 'y' and s.index(char) == len(s) - 1):\n            count += 1\n    return count", "prompt_tokens": 438, "completion_tokens": 458, "duration": 7.836483955383301, "result": "failed: substring not found", "passed": false}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 394, "completion_tokens": 490, "duration": 8.094313144683838, "result": "passed", "passed": true}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 424, "completion_tokens": 358, "duration": 7.591423273086548, "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "generated_code": "import re\n\ndef fruit_distribution(s, n):\n    apples, oranges = map(int, re.findall(r'\b(\b)\b', s))\n    return n - apples - oranges", "prompt_tokens": 522, "completion_tokens": 463, "duration": 8.514958143234253, "result": "failed: not enough values to unpack (expected 2, got 0)", "passed": false}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even = float('inf')\n    smallest_index = float('inf')\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            smallest_index = i\n        elif num % 2 == 0 and num == smallest_even:\n            smallest_index = min(smallest_index, i)\n    if smallest_even == float('inf'):\n        return []\n    return [smallest_even, smallest_index]", "prompt_tokens": 624, "completion_tokens": 440, "duration": 9.007397413253784, "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n    result = -1\n    for num, frequency in freq.items():\n        if num > frequency and frequency > result:\n            result = frequency\n    return result if result != -1 else -1", "prompt_tokens": 477, "completion_tokens": 550, "duration": 11.103982925415039, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    i, j = 0, len(lst) - 1\n    while i <= j:\n        if i == j:\n            result.append(lst[i])\n        else:\n            result.append(lst[i])\n            result.append(lst[j])\n        i += 1\n        j -= 1\n    return result", "prompt_tokens": 436, "completion_tokens": 615, "duration": 15.017309188842773, "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 433, "completion_tokens": 539, "duration": 13.611274242401123, "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 542, "completion_tokens": 343, "duration": 7.2446839809417725, "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    changes = 0\n    left, right = 0, len(arr) - 1\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "prompt_tokens": 469, "completion_tokens": 757, "duration": 11.7957284450531, "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    return lst1 if total_chars_lst1 <= total_chars_lst2 else lst2", "prompt_tokens": 505, "completion_tokens": 486, "duration": 10.704865217208862, "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            for k in range(j+1, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False", "prompt_tokens": 391, "completion_tokens": 720, "duration": 16.30905842781067, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/76", "generated_code": "import math\n\ndef is_simple_power(x, n):\n    return math.log(x, n).is_integer()", "prompt_tokens": 454, "completion_tokens": 392, "duration": 7.024986743927002, "result": "failed: float division by zero", "passed": false}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (a >= 0) and (int(a**(1/3))**3 == a)", "prompt_tokens": 422, "completion_tokens": 366, "duration": 6.543957948684692, "result": "failed: Third test error: False", "passed": false}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count", "prompt_tokens": 611, "completion_tokens": 503, "duration": 10.302867412567139, "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal): \n    binary = '' \n    while decimal > 0: \n        binary = str(decimal % 2) + binary \n        decimal = decimal // 2 \n    return 'db' + binary + 'db'", "prompt_tokens": 451, "completion_tokens": 475, "duration": 10.524368286132812, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) < 3:\n            return False\n    return True", "prompt_tokens": 433, "completion_tokens": 541, "duration": 8.174078941345215, "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 582, "completion_tokens": 872, "duration": 16.844040155410767, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    length = len(string)\n    if length <= 1:\n        return False\n    for i in range(2, int(math.sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True", "prompt_tokens": 393, "completion_tokens": 634, "duration": 12.192118644714355, "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count_start_with_one = 9 * 10 ** (n - 2)\n    count_end_with_one = 10 ** (n - 1)\n    return count_start_with_one + count_end_with_one", "prompt_tokens": 356, "completion_tokens": 625, "duration": 14.070215463638306, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(int(digit) for digit in str(N)))[2:]", "prompt_tokens": 445, "completion_tokens": 254, "duration": 4.543542861938477, "result": "passed", "passed": true}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 367, "completion_tokens": 447, "duration": 13.625219583511353, "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(word)) for word in s.split()])", "prompt_tokens": 442, "completion_tokens": 376, "duration": 9.599231719970703, "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates", "prompt_tokens": 1000, "completion_tokens": 580, "duration": 14.079068899154663, "result": "passed", "passed": true}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    return sorted(array, key=lambda x: x[0] + x[-1], reverse=(sum(array[:2]) % 2 == 0))", "prompt_tokens": 515, "completion_tokens": 601, "duration": 13.391510725021362, "result": "failed: 'int' object is not subscriptable", "passed": false}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            shifted = ord(char) + 2 * 2\n            if char.islower():\n                encrypted += chr((shifted - 97) % 26 + 97)\n            else:\n                encrypted += chr((shifted - 65) % 26 + 65)\n        else:\n            encrypted += char\n    return encrypted", "prompt_tokens": 422, "completion_tokens": 664, "duration": 14.44312858581543, "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    sorted_lst = sorted(lst)\n    return sorted_lst[1] if len(sorted_lst) > 1 else None", "prompt_tokens": 436, "completion_tokens": 461, "duration": 8.844121932983398, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/91", "generated_code": "import re\n\ndef is_bored(S):\n    sentences = re.split('[.!?]', S)\n    boredom_count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            boredom_count += 1\n    return boredom_count", "prompt_tokens": 419, "completion_tokens": 394, "duration": 6.246643543243408, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if all(isinstance(num, int) for num in [x, y, z]):\n        return x == y + z or y == x + z or z == x + y\n    return False", "prompt_tokens": 447, "completion_tokens": 469, "duration": 9.79531216621399, "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    result = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                result += chr((ord(char) + 2 - ord('a')) % 26 + ord('a')).upper()\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result", "prompt_tokens": 421, "completion_tokens": 480, "duration": 8.702326774597168, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "generated_code": "import math\n\ndef sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))\n\ndef largest_prime_sum(lst):\n    max_sum = 0\n    for num in lst:\n        if num <= 1:\n            continue\n        is_prime = True\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            digit_sum = sum_of_digits(num)\n            max_sum = max(max_sum, digit_sum)\n    return max_sum", "prompt_tokens": 598, "completion_tokens": 610, "duration": 9.538611888885498, "result": "failed: name 'skjkasdkd' is not defined", "passed": false}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    return all(key.islower() for key in dict.keys()) or all(key.isupper() for key in dict.keys())", "prompt_tokens": 481, "completion_tokens": 389, "duration": 6.3746960163116455, "result": "failed: 'int' object has no attribute 'islower'", "passed": false}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes", "prompt_tokens": 457, "completion_tokens": 556, "duration": 10.0995454788208, "result": "failed: name 'math' is not defined", "passed": false}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return abs(a) % 10 * abs(b) % 10", "prompt_tokens": 410, "completion_tokens": 328, "duration": 6.789542198181152, "result": "failed: First test error: 6", "passed": false}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    vowels = 'AEIOU'\n    count = 0\n    for i, char in enumerate(s):\n        if char in vowels and i % 2 == 0:\n            count += 1\n    return count", "prompt_tokens": 384, "completion_tokens": 539, "duration": 11.313945055007935, "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "generated_code": "import math\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    rounded_num = round(num)\n    if rounded_num == num:\n        return int(num)\n    elif rounded_num > num:\n        return math.floor(num)\n    else:\n        return math.ceil(num)", "prompt_tokens": 468, "completion_tokens": 495, "duration": 8.502604007720947, "result": "failed: Test 3", "passed": false}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    pile = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            n += 2\n        else:\n            n += 1\n        pile.append(n)\n    return pile", "prompt_tokens": 444, "completion_tokens": 434, "duration": 9.066752672195435, "result": "failed: Test 3", "passed": false}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return s.split(', ') if ', ' in s else s.split()", "prompt_tokens": 428, "completion_tokens": 361, "duration": 6.744070768356323, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    return -1", "prompt_tokens": 406, "completion_tokens": 471, "duration": 9.746213436126709, "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "prompt_tokens": 452, "completion_tokens": 467, "duration": 7.353971719741821, "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 414, "completion_tokens": 445, "duration": 8.131632328033447, "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    num_to_name = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    return [num_to_name[num] for num in reversed_arr]", "prompt_tokens": 588, "completion_tokens": 455, "duration": 9.582428216934204, "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_of_numbers(i))\n    return result", "prompt_tokens": 436, "completion_tokens": 488, "duration": 7.68576192855835, "result": "failed: name 'sum_of_numbers' is not defined", "passed": false}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    even_count = sum(1 for num in range(1, n+1) if is_palindrome(num) and num % 2 == 0)\n    odd_count = sum(1 for num in range(1, n+1) if is_palindrome(num) and num % 2 != 0)\n    return even_count, odd_count", "prompt_tokens": 523, "completion_tokens": 520, "duration": 10.892324686050415, "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    return len([num for num in arr if sum(int(digit) for digit in str(abs(num))) > 0])", "prompt_tokens": 690, "completion_tokens": 462, "duration": 10.293333053588867, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    min_val = min(arr)\n    min_idx = arr.index(min_val)\n    return min_idx == 0", "prompt_tokens": 611, "completion_tokens": 645, "duration": 9.621368646621704, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    return 'YES' if sum(x % 2 != 0 for x in lst1) >= sum(x % 2 != 0 for x in lst2) else 'NO'", "prompt_tokens": 509, "completion_tokens": 549, "duration": 11.48504090309143, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    counts = {}\n    for char in test.split():\n        counts[char] = counts.get(char, 0) + 1\n    max_count = max(counts.values()) if counts else 0\n    return {key: value for key, value in counts.items() if value == max_count}", "prompt_tokens": 463, "completion_tokens": 528, "duration": 14.08704948425293, "result": "passed", "passed": true}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    new_s = ''.join(ch for ch in s if ch not in c)\n    return new_s, new_s == new_s[::-1]", "prompt_tokens": 474, "completion_tokens": 931, "duration": 23.515791177749634, "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f'the number of odd elements {odd_count}n the str{s}ng {s} of the {s}nput.')\n    return result", "prompt_tokens": 485, "completion_tokens": 429, "duration": 10.122645378112793, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 400, "completion_tokens": 628, "duration": 13.33137845993042, "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    total_lowered = 0\n    for row in grid:\n        for well in row:\n            if well == 1:\n                total_lowered += math.ceil(well / capacity)\n    return total_lowered", "prompt_tokens": 635, "completion_tokens": 839, "duration": 14.640302181243896, "result": "failed: name 'math' is not defined", "passed": false}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr): \n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 482, "completion_tokens": 580, "duration": 13.491979360580444, "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = []\n    for word in s.split():\n        if sum(1 for char in word if char in consonants) == n:\n            result.append(word)\n    return result", "prompt_tokens": 493, "completion_tokens": 461, "duration": 11.602580785751343, "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word): \n    vowels = 'aeiouAEIOU' \n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ' \n    for i in range(len(word) - 2, 0, -1): \n        if word[i] in consonants and word[i+1] in vowels and word[i+2] in consonants: \n            return word[i+1] \n    return ''", "prompt_tokens": 461, "completion_tokens": 738, "duration": 16.284431219100952, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    stack = []\n    mapping = {')': '('}\n    for s in lst:\n        for char in s:\n            if char in mapping:\n                top_element = stack.pop() if stack else '#'\n                if mapping[char] != top_element:\n                    return 'No'\n            else:\n                stack.append(char)\n    return 'Yes' if not stack else 'No'", "prompt_tokens": 480, "completion_tokens": 748, "duration": 14.235838651657104, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 529, "completion_tokens": 364, "duration": 7.925699234008789, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst): \n    return sum(lst[i] for i in range(len(lst)) if lst[i] % 2 != 0 and i % 2 == 0)", "prompt_tokens": 409, "completion_tokens": 488, "duration": 9.913234949111938, "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 0 < num < 100)", "prompt_tokens": 440, "completion_tokens": 367, "duration": 7.593214988708496, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    odd_collatz = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_collatz.append(n)\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n    odd_collatz.append(1)\n    return sorted(odd_collatz)", "prompt_tokens": 543, "completion_tokens": 656, "duration": 11.603223085403442, "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if len(date) != 10:\n        return False\n    month, day, year = map(int, date.split('-'))\n    if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return 1 <= day <= 31\n    elif month in [4, 6, 9, 11]:\n        return 1 <= day <= 30\n    else:\n        if is_leap_year(year):\n            return 1 <= day <= 29\n        else:\n            return 1 <= day <= 28\n    return False", "prompt_tokens": 575, "completion_tokens": 547, "duration": 58.96183705329895, "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt: str):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "prompt_tokens": 452, "completion_tokens": 525, "duration": 7.975621938705444, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    duplicates = {}\n    for i in range(len(lst)-1):\n        if lst[i] >= lst[i+1]:\n            if lst[i] == lst[i+1]:\n                if lst[i] in duplicates:\n                    return False\n                else:\n                    duplicates[lst[i]] = 1\n            else:\n                return False\n    return True", "prompt_tokens": 561, "completion_tokens": 481, "duration": 7.552125692367554, "result": "passed", "passed": true}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    intersection_length = max(0, end - start + 1)\n    if intersection_length <= 1:\n        return 'NO'\n    for i in range(2, int(intersection_length**0.5) + 1):\n        if intersection_length % i == 0:\n            return 'NO'\n    return 'YES'", "prompt_tokens": 566, "completion_tokens": 609, "duration": 11.756118297576904, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product_sign = 1\n    sum_magnitudes = 0\n    for num in arr:\n        if num > 0:\n            product_sign *= 1\n        elif num < 0:\n            product_sign *= -1\n        sum_magnitudes += abs(num)\n    return product_sign * sum_magnitudes", "prompt_tokens": 434, "completion_tokens": 467, "duration": 9.103544235229492, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    \n    def dfs(cell, path):\n        \n        # DFS implementation\n        \n        return path\n    \n    return min([dfs((i, j), [grid[i][j]]) for i in range(len(grid)) for j in range(len(grid[0]))])", "prompt_tokens": 1262, "completion_tokens": 537, "duration": 11.456172227859497, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [3, 1]\n    else:\n        tribonacci = [0, 3, 1]\n        for i in range(3, n+1):\n            if i % 2 == 0:\n                tribonacci.append(tribonacci[i-1] + tribonacci[i-2])\n            else:\n                tribonacci.append(tribonacci[i-1] + tribonacci[i-2] + tribonacci[i-3])\n        return tribonacci", "prompt_tokens": 547, "completion_tokens": 555, "duration": 9.99974012374878, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    for d in str(n):\n        if int(d) % 2 != 0:\n            product *= int(d)\n    return product", "prompt_tokens": 383, "completion_tokens": 482, "duration": 9.650479078292847, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n    return bool(stack)", "prompt_tokens": 445, "completion_tokens": 605, "duration": 13.771127939224243, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(num)**2 for num in lst)", "prompt_tokens": 469, "completion_tokens": 424, "duration": 7.179658651351929, "result": "passed", "passed": true}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt and txt[-1].isalpha() and (len(txt) == 1 or not txt[-2].isalpha()):\n        return True\n    return False", "prompt_tokens": 449, "completion_tokens": 388, "duration": 6.0462422370910645, "result": "passed", "passed": true}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    result = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            result = i - 1\n    return result", "prompt_tokens": 415, "completion_tokens": 564, "duration": 14.294544219970703, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    max_neg = None\n    min_pos = None\n    for num in lst:\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n        elif num > 0 and (min_pos is None or num < min_pos):\n            min_pos = num\n    return (max_neg, min_pos)", "prompt_tokens": 450, "completion_tokens": 432, "duration": 9.896110534667969, "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) != type(b):\n        return None\n    return max(a, b) if a != b else None", "prompt_tokens": 453, "completion_tokens": 432, "duration": 6.698238372802734, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    for i in range(1, n):\n        for j in range(i, n):\n            for k in range(j, n):\n                for l in range(k, n):\n                    if 2*i + 2*j + 2*k + 2*l == n:\n                        return True\n    return False", "prompt_tokens": 389, "completion_tokens": 530, "duration": 10.435603141784668, "result": "passed", "passed": true}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        result *= factorial(i)\n    return result", "prompt_tokens": 407, "completion_tokens": 394, "duration": 8.8880934715271, "result": "failed: name 'factorial' is not defined", "passed": false}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    result = ''\n    consecutive_spaces = 0\n    for char in text:\n        if char == ' ':\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result = result[:-2] + '-'\n            else:\n                result += '_'\n        else:\n            result += char\n            consecutive_spaces = 0\n    return result", "prompt_tokens": 418, "completion_tokens": 437, "duration": 7.210024356842041, "result": "passed", "passed": true}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if len([c for c in file_name if c.isdigit()]) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 526, "completion_tokens": 447, "duration": 10.091293096542358, "result": "passed", "passed": true}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 and i % 3 != 0 else x for i, x in enumerate(lst))", "prompt_tokens": 482, "completion_tokens": 562, "duration": 16.831873655319214, "result": "passed", "passed": true}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 459, "completion_tokens": 501, "duration": 11.450167894363403, "result": "failed: name 'math' is not defined", "passed": false}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return (x_num * n_num) % (x_den * n_den) == 0", "prompt_tokens": 467, "completion_tokens": 508, "duration": 12.38444995880127, "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    def digit_sum(num):\n        return sum(int(digit) for digit in str(abs(num)))\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))", "prompt_tokens": 427, "completion_tokens": 458, "duration": 10.446422815322876, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count", "prompt_tokens": 431, "completion_tokens": 486, "duration": 10.544994831085205, "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n+1):\n        a_i = i*i - i + 1\n        for j in range(i+1, n+1):\n            a_j = j*j - j + 1\n            for k in range(j+1, n+1):\n                a_k = k*k - k + 1\n                if (a_i + a_j + a_k) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 477, "completion_tokens": 833, "duration": 18.167423963546753, "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    if start > end:\n        start, end = end, start\n    return tuple(planets[start+1:end])", "prompt_tokens": 523, "completion_tokens": 476, "duration": 11.792004108428955, "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "generated_code": "def list_sort(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "prompt_tokens": 499, "completion_tokens": 458, "duration": 7.833288192749023, "result": "failed: name 'sorted_list_sum' is not defined", "passed": false}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 398, "completion_tokens": 498, "duration": 10.08116102218628, "result": "failed: name 'is_prime' is not defined", "passed": false}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x > 0)", "prompt_tokens": 449, "completion_tokens": 418, "duration": 7.684234142303467, "result": "failed: This prints if this assert fails 3 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(score - g) if score != g else 0 for score, g in zip(game, guess)]", "prompt_tokens": 542, "completion_tokens": 434, "duration": 9.646924257278442, "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        cap_count = sum(1 for char in extension if char.isupper())\n        sm_count = sum(1 for char in extension if char.islower())\n        return cap_count - sm_count\n    strongest = max(extensions, key=lambda x: (strength(x), extensions.index(x)))\n    return f'{class_name}.{strongest}'", "prompt_tokens": 589, "completion_tokens": 641, "duration": 11.663581848144531, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    return b in (a + a)", "prompt_tokens": 441, "completion_tokens": 613, "duration": 12.199414014816284, "result": "failed: test #3", "passed": false}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num: int) -> tuple:\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 377, "completion_tokens": 599, "duration": 11.824551343917847, "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_map = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    result = ''\n    for value, numeral in roman_map.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result", "prompt_tokens": 413, "completion_tokens": 751, "duration": 16.37515163421631, "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2", "prompt_tokens": 420, "completion_tokens": 523, "duration": 12.111616373062134, "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n    max_word = ''\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word", "prompt_tokens": 432, "completion_tokens": 653, "duration": 10.141153573989868, "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + need\n    remaining_carrots = max(0, remaining - total_eaten)\n    return [total_eaten, remaining_carrots]", "prompt_tokens": 589, "completion_tokens": 480, "duration": 7.73217248916626, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '/':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result", "prompt_tokens": 519, "completion_tokens": 882, "duration": 16.873812913894653, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    if not any(char.isalpha() for char in s):\n        return result[::-1]\n    return result", "prompt_tokens": 419, "completion_tokens": 480, "duration": 7.623068809509277, "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    return md5_hash", "prompt_tokens": 388, "completion_tokens": 438, "duration": 7.016470670700073, "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [x for x in range(a, b+1) if x % 2 == 0]", "prompt_tokens": 416, "completion_tokens": 386, "duration": 6.9056925773620605, "result": "failed: Test 1", "passed": false}
