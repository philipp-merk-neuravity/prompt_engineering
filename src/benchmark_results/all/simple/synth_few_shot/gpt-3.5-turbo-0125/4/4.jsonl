{"task_id": "HumanEval/0", "generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False", "prompt_tokens": 432, "completion_tokens": 496, "duration": 11.832717657089233}
{"task_id": "HumanEval/1", "generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    current_group = ''\n    for char in paren_string:\n        if char == '(':  # Start of a new group\n            stack.append('(')\n        elif char == ')':  # End of a group\n            stack.pop()\n            current_group += char\n            if not stack:  # Group complete\n                result.append(current_group)\n                current_group = ''\n        else:  # Inside a group\n            current_group += char\n    return result", "prompt_tokens": 423, "completion_tokens": 777, "duration": 15.526459217071533}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 393, "completion_tokens": 342, "duration": 7.377720594406128}
{"task_id": "HumanEval/3", "generated_code": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 427, "completion_tokens": 610, "duration": 14.736283302307129}
{"task_id": "HumanEval/4", "generated_code": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 425, "completion_tokens": 539, "duration": 10.003937005996704}
{"task_id": "HumanEval/5", "generated_code": "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for num in numbers[:-1]:\n        result.extend([num, delimiter])\n    if numbers:\n        result.append(numbers[-1])\n    return result", "prompt_tokens": 400, "completion_tokens": 384, "duration": 9.36799955368042}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    max_depth = 0\n    current_depth = 0\n    for char in paren_string:\n        if char == '(': \n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n        elif char == ' ':\n            depths.append(max_depth)\n            max_depth = 0\n            current_depth = 0\n    depths.append(max_depth)\n    return depths", "prompt_tokens": 420, "completion_tokens": 746, "duration": 13.186959266662598}
{"task_id": "HumanEval/7", "generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 401, "completion_tokens": 463, "duration": 9.527920007705688}
{"task_id": "HumanEval/8", "generated_code": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    sum_val = 0\n    product_val = 1\n    for num in numbers:\n        sum_val += num\n        product_val *= num\n    return sum_val, product_val", "prompt_tokens": 418, "completion_tokens": 539, "duration": 13.950839757919312}
{"task_id": "HumanEval/9", "generated_code": "from collections import deque\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    deq = deque()\n    result = []\n    for i, num in enumerate(numbers):\n        while deq and numbers[deq[-1]] < num:\n            deq.pop()\n        deq.append(i)\n        if deq[0] == i - len(deq):\n            deq.popleft()\n        result.append(numbers[deq[0]])\n    return result", "prompt_tokens": 408, "completion_tokens": 803, "duration": 14.79541802406311}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string: str) -> str:\n    def is_palindrome(s):\n        return s == s[::-1]\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string", "prompt_tokens": 450, "completion_tokens": 750, "duration": 17.744911909103394}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = ''\n    for i in range(len(a)):\n        result += '1' if a[i] != b[i] else '0'\n    return result", "prompt_tokens": 384, "completion_tokens": 463, "duration": 11.627628564834595}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "prompt_tokens": 410, "completion_tokens": 530, "duration": 12.632826566696167}
{"task_id": "HumanEval/13", "generated_code": "import math\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    return math.gcd(a, b)", "prompt_tokens": 378, "completion_tokens": 430, "duration": 8.457544326782227}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 367, "completion_tokens": 412, "duration": 8.126186847686768}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1))", "prompt_tokens": 376, "completion_tokens": 365, "duration": 9.439097166061401}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 378, "completion_tokens": 382, "duration": 7.653738737106323}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    note_duration = {'o': 4, 'o|': 2, '.|': 1}\n    music_notes = music_string.split()\n    return [note_duration[note] for note in music_notes]", "prompt_tokens": 480, "completion_tokens": 507, "duration": 11.04603123664856}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 396, "completion_tokens": 460, "duration": 10.286510944366455}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    number_words = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    number_map = {word: i for i, word in enumerate(number_words)}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: number_map[x])\n    return ' '.join(sorted_numbers)", "prompt_tokens": 413, "completion_tokens": 417, "duration": 10.95838975906372}
{"task_id": "HumanEval/20", "generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = ()\n    for i in range(1, len(numbers)):\n        diff = abs(numbers[i] - numbers[i-1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i-1], numbers[i])\n    return result", "prompt_tokens": 474, "completion_tokens": 518, "duration": 11.52420711517334}
{"task_id": "HumanEval/21", "generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]", "prompt_tokens": 431, "completion_tokens": 439, "duration": 8.317014217376709}
{"task_id": "HumanEval/22", "generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [val for val in values if isinstance(val, int)]", "prompt_tokens": 399, "completion_tokens": 430, "duration": 11.078296184539795}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int: \n    return len(string)", "prompt_tokens": 351, "completion_tokens": 322, "duration": 8.260155439376831}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    largest = 1\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            largest = i\n    return largest", "prompt_tokens": 360, "completion_tokens": 483, "duration": 9.614708423614502}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\nimport math\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 434, "completion_tokens": 620, "duration": 14.713039875030518}
{"task_id": "HumanEval/26", "generated_code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result", "prompt_tokens": 392, "completion_tokens": 436, "duration": 9.68910837173462}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)", "prompt_tokens": 356, "completion_tokens": 428, "duration": 8.54753065109253}
{"task_id": "HumanEval/28", "generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 365, "completion_tokens": 417, "duration": 7.944891929626465}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 395, "completion_tokens": 421, "duration": 8.363933801651001}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 652, "completion_tokens": 402, "duration": 8.471938133239746}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 407, "completion_tokens": 603, "duration": 11.524052143096924}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    if len(xs) % 2 != 0:\n        raise ValueError('Number of coefficients should be even')\n    if xs[-2] == 0:\n        raise ValueError('Second largest coefficient should be non-zero')\n    return -xs[-1] / xs[-2]", "prompt_tokens": 567, "completion_tokens": 466, "duration": 9.165110349655151}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list) -> list:\n    sorted_indices = sorted([i for i in range(len(l)) if i % 3 == 0])\n    sorted_values = [l[i] for i in sorted_indices]\n    result = l.copy()\n    for i, v in zip(sorted_indices, sorted(sorted_values)):\n        result[i] = v\n    return result", "prompt_tokens": 458, "completion_tokens": 489, "duration": 11.911019086837769}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 381, "completion_tokens": 345, "duration": 8.809825420379639}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list) -> int:\n    return max(l)", "prompt_tokens": 390, "completion_tokens": 337, "duration": 7.033263921737671}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += str(i).count('7')\n    return count", "prompt_tokens": 387, "completion_tokens": 575, "duration": 10.462427139282227}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list) -> list:\n    even_indices = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    return [even_indices.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]", "prompt_tokens": 431, "completion_tokens": 523, "duration": 9.703475713729858}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "prompt_tokens": 466, "completion_tokens": 477, "duration": 8.844846487045288}
{"task_id": "HumanEval/39", "generated_code": "import math\n\ndef prime_fib(n: int):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    i = 0\n    while count < n:\n        i += 1\n        fib = fibonacci(i)\n        if is_prime(fib):\n            count += 1\n    return fib", "prompt_tokens": 405, "completion_tokens": 755, "duration": 14.268290042877197}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    n = len(l)\n    for i in range(n-2):\n        left, right = i+1, n-1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "prompt_tokens": 467, "completion_tokens": 914, "duration": 18.176804780960083}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int) -> int:\n    return n * (n - 1) // 2", "prompt_tokens": 459, "completion_tokens": 577, "duration": 10.477102041244507}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list) -> list:\n    return [x + 1 for x in l]", "prompt_tokens": 416, "completion_tokens": 321, "duration": 7.748050928115845}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 465, "completion_tokens": 633, "duration": 13.41977047920227}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    new_base = ''\n    while x > 0:\n        new_base = str(x % base) + new_base\n        x = x // base\n    return new_base", "prompt_tokens": 399, "completion_tokens": 566, "duration": 10.082989692687988}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 354, "completion_tokens": 364, "duration": 9.72012996673584}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    if n <= 1:\n        return 0\n    dp = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        dp[i % 4] = dp[(i - 1) % 4] + dp[(i - 2) % 4] + dp[(i - 3) % 4] + dp[(i - 4) % 4]\n    return dp[n % 4]", "prompt_tokens": 479, "completion_tokens": 632, "duration": 14.734287023544312}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 0:\n        return (sorted_list[n//2 - 1] + sorted_list[n//2]) / 2\n    else:\n        return sorted_list[n//2]", "prompt_tokens": 383, "completion_tokens": 400, "duration": 8.182841539382935}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "prompt_tokens": 379, "completion_tokens": 483, "duration": 9.746729373931885}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)", "prompt_tokens": 413, "completion_tokens": 535, "duration": 8.824591636657715}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return ''.join([chr(((ord(ch) + 5 - ord('a')) % 26) + ord('a')) for ch in s])", "prompt_tokens": 398, "completion_tokens": 474, "duration": 10.215287446975708}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result", "prompt_tokens": 430, "completion_tokens": 586, "duration": 10.113733530044556}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    return all(num < t for num in l)", "prompt_tokens": 588, "completion_tokens": 376, "duration": 7.414832353591919}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    return x + y", "prompt_tokens": 361, "completion_tokens": 294, "duration": 5.900458574295044}
{"task_id": "HumanEval/54", "generated_code": "import collections\n\ndef same_chars(s0: str, s1: str) -> bool:\n    return collections.Counter(s0) == collections.Counter(s1)", "prompt_tokens": 448, "completion_tokens": 394, "duration": 7.222748517990112}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n+1):\n        a, b = b, a + b\n    return b", "prompt_tokens": 360, "completion_tokens": 569, "duration": 9.744993448257446}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack or stack[-1] != '<':\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 400, "completion_tokens": 635, "duration": 13.344969272613525}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))", "prompt_tokens": 395, "completion_tokens": 458, "duration": 7.851860523223877}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 422, "completion_tokens": 378, "duration": 9.91674518585205}
{"task_id": "HumanEval/59", "generated_code": "import math\n\ndef largest_prime_factor(n: int) -> int:\n    def smallest_prime_factor(num):\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return i\n        return num\n    while True:\n        factor = smallest_prime_factor(n)\n        if factor < n:\n            n //= factor\n        else:\n            return n", "prompt_tokens": 371, "completion_tokens": 617, "duration": 14.64674687385559}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "prompt_tokens": 402, "completion_tokens": 481, "duration": 12.30714726448059}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(': stack.append(bracket)\n        elif bracket == ')':\n            if not stack: return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 397, "completion_tokens": 653, "duration": 13.798486471176147}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list) -> list:\n    return [xs[i] * i for i in range(1, len(xs))]", "prompt_tokens": 416, "completion_tokens": 419, "duration": 11.73822546005249}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    if n == 2:\n        return 1\n    dp = [0] * (n + 1)\n    dp[2] = 1\n    for i in range(3, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3]\n    return dp[n]", "prompt_tokens": 457, "completion_tokens": 648, "duration": 11.260652780532837}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    count = 0\n    for i, char in enumerate(s):\n        if char.lower() in vowels or (char.lower() == 'y' and i == len(s) - 1):\n            count += 1\n    return count", "prompt_tokens": 434, "completion_tokens": 497, "duration": 10.790664911270142}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 390, "completion_tokens": 479, "duration": 11.391719102859497}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 420, "completion_tokens": 416, "duration": 8.019627571105957}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "prompt_tokens": 518, "completion_tokens": 373, "duration": 8.937991380691528}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    even_nodes = [(node, idx) for idx, node in enumerate(arr) if node % 2 == 0]\n    if not even_nodes:\n        return []\n    even_nodes.sort(key=lambda x: (x[0], x[1]))\n    return [even_nodes[0][0], even_nodes[0][1]]", "prompt_tokens": 620, "completion_tokens": 562, "duration": 11.342120170593262}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n    result = -1\n    for num, frequency in freq.items():\n        if num > frequency and frequency > result:\n            result = frequency\n    return result if result != -1 else -1", "prompt_tokens": 473, "completion_tokens": 570, "duration": 12.106200695037842}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 432, "completion_tokens": 523, "duration": 11.39744520187378}
{"task_id": "HumanEval/71", "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 429, "completion_tokens": 510, "duration": 11.082479238510132}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 538, "completion_tokens": 385, "duration": 9.884855270385742}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    changes = 0\n    left, right = 0, len(arr) - 1\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "prompt_tokens": 465, "completion_tokens": 836, "duration": 15.333781003952026}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    sum1 = sum(len(s) for s in lst1)\n    sum2 = sum(len(s) for s in lst2)\n    return lst1 if sum1 < sum2 else lst2 if sum2 < sum1 else lst1", "prompt_tokens": 501, "completion_tokens": 496, "duration": 13.127434730529785}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    factors = prime_factors(a)\n    return len(factors) == 3", "prompt_tokens": 387, "completion_tokens": 517, "duration": 8.750258922576904}
{"task_id": "HumanEval/76", "generated_code": "import math\n\ndef is_simple_power(x, n):\n    return math.log(x, n).is_integer()", "prompt_tokens": 450, "completion_tokens": 413, "duration": 7.146666049957275}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return int(a**(1/3))**3 == a", "prompt_tokens": 418, "completion_tokens": 343, "duration": 10.64034128189087}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count", "prompt_tokens": 607, "completion_tokens": 484, "duration": 10.854695320129395}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n    return 'db' + binary + 'db'", "prompt_tokens": 447, "completion_tokens": 449, "duration": 9.086791276931763}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    return all(s[i] != s[i+1] and s[i] != s[i+2] and s[i+1] != s[i+2] for i in range(len(s)-2))", "prompt_tokens": 706, "completion_tokens": 706, "duration": 13.93883204460144}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 578, "completion_tokens": 718, "duration": 12.753095388412476}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return is_prime(len(string))", "prompt_tokens": 389, "completion_tokens": 613, "duration": 10.928066730499268}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n: int) -> int:\n    start_with_one = count_start_with_one(n)\n    end_with_one = count_end_with_one(n)\n    start_end_with_one = 1  # Only one number starts and ends with 1\n    return start_with_one + end_with_one - start_end_with_one", "prompt_tokens": 352, "completion_tokens": 604, "duration": 10.617527723312378}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(int(d) for d in str(N)))[2:]", "prompt_tokens": 441, "completion_tokens": 359, "duration": 8.206561803817749}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(x for i, x in enumerate(lst) if x % 2 == 0 and i % 2 != 0)", "prompt_tokens": 363, "completion_tokens": 405, "duration": 6.943897724151611}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(word)) for word in s.split()])", "prompt_tokens": 438, "completion_tokens": 381, "duration": 6.856643438339233}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    coordinates = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if x in lst[i]:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates", "prompt_tokens": 982, "completion_tokens": 596, "duration": 11.905587911605835}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    return sorted(array, reverse=sum(array[:2]) % 2 == 0)", "prompt_tokens": 511, "completion_tokens": 373, "duration": 9.060357332229614}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            shifted = ord(char) + 2*2\n            if char.islower():\n                if shifted > ord('z'):\n                    shifted -= 26\n            else:\n                if shifted > ord('Z'):\n                    shifted -= 26\n            encrypted += chr(shifted)\n        else:\n            encrypted += char\n    return encrypted", "prompt_tokens": 418, "completion_tokens": 642, "duration": 12.023002862930298}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "prompt_tokens": 432, "completion_tokens": 446, "duration": 8.778061389923096}
{"task_id": "HumanEval/91", "generated_code": "import re\n\ndef is_bored(S):\n    sentences = re.split('[.!?]', S)\n    return sum(1 for sentence in sentences if sentence.strip().startswith('I'))", "prompt_tokens": 415, "completion_tokens": 383, "duration": 7.752970218658447}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    return False", "prompt_tokens": 443, "completion_tokens": 536, "duration": 10.607105255126953}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    result = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                result += chr((ord(char) + 2 - ord('a')) % 26 + ord('a')).upper()\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result", "prompt_tokens": 417, "completion_tokens": 470, "duration": 11.518843412399292}
{"task_id": "HumanEval/94", "generated_code": "def largest_prime_sum(lst):\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n    return sum_digits(max_prime)", "prompt_tokens": 594, "completion_tokens": 472, "duration": 9.797203540802002}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    return all(key.islower() for key in dict.keys()) or all(key.isupper() for key in dict.keys())", "prompt_tokens": 477, "completion_tokens": 384, "duration": 11.220960855484009}
{"task_id": "HumanEval/96", "generated_code": "import math\n\ndef count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes", "prompt_tokens": 453, "completion_tokens": 584, "duration": 11.271688461303711}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 406, "completion_tokens": 378, "duration": 8.47187876701355}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    vowels = 'AEIOU'\n    count = 0\n    for i, char in enumerate(s):\n        if char.isupper() and char in vowels and i % 2 == 0:\n            count += 1\n    return count", "prompt_tokens": 380, "completion_tokens": 517, "duration": 10.667259693145752}
{"task_id": "HumanEval/99", "generated_code": "import math\n\ndef closest_integer(value):\n    num = float(value)\n    rounded_num = round(num)\n    if rounded_num > num:\n        return math.floor(num)\n    else:\n        return math.ceil(num)", "prompt_tokens": 464, "completion_tokens": 406, "duration": 10.027170419692993}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            stones.append(n + i)\n        else:\n            stones.append(n + i + 1)\n    return stones", "prompt_tokens": 440, "completion_tokens": 415, "duration": 10.229372024536133}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return s.split(', ') if ', ' in s else s.split()", "prompt_tokens": 424, "completion_tokens": 341, "duration": 7.994979381561279}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "prompt_tokens": 402, "completion_tokens": 484, "duration": 11.03884482383728}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "prompt_tokens": 723, "completion_tokens": 524, "duration": 14.297268390655518}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    result = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)", "prompt_tokens": 410, "completion_tokens": 463, "duration": 10.246522665023804}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    digit_names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    filtered_arr = [num for num in sorted(arr) if 1 <= num <= 9]\n    filtered_arr.reverse()\n    return [digit_names[num-1] for num in filtered_arr]", "prompt_tokens": 584, "completion_tokens": 419, "duration": 9.371933698654175}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_of_numbers(i))\n    return result", "prompt_tokens": 432, "completion_tokens": 460, "duration": 12.81102967262268}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 519, "completion_tokens": 539, "duration": 9.586529016494751}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    return len([num for num in arr if sum(int(digit) for digit in str(abs(num))) > 0])", "prompt_tokens": 432, "completion_tokens": 411, "duration": 8.323948621749878}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    min_idx = arr.index(min(arr))\n    return arr == sorted(arr[min_idx:] + arr[:min_idx])", "prompt_tokens": 607, "completion_tokens": 591, "duration": 11.540806770324707}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    sum1 = sum(x for x in lst1 if x % 2 != 0)\n    sum2 = sum(x for x in lst2 if x % 2 != 0)\n    return 'YES' if sum1 >= sum2 else 'NO'", "prompt_tokens": 505, "completion_tokens": 646, "duration": 15.240384817123413}
{"task_id": "HumanEval/111", "generated_code": "from collections import Counter\ndef histogram(test):\n    letters = test.split()\n    counts = Counter(letters)\n    max_count = max(counts.values()) if counts else 0\n    result = {letter: count for letter, count in counts.items() if count == max_count}\n    return result", "prompt_tokens": 459, "completion_tokens": 514, "duration": 13.984258651733398}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    filtered_str = ''.join([char for char in s if char not in c])\n    is_palindrome = filtered_str == filtered_str[::-1]\n    return (filtered_str, is_palindrome)", "prompt_tokens": 470, "completion_tokens": 866, "duration": 15.126100063323975}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for digit in s if int(digit) % 2 != 0)\n        result.append(f'the number of odd elements {odd_count}n the str{odd_count}ng {s} of the {s}nput.')\n    return result", "prompt_tokens": 481, "completion_tokens": 444, "duration": 9.167855739593506}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 396, "completion_tokens": 545, "duration": 10.779228448867798}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    total_lowering = 0\n    for row in grid:\n        well_water = sum(row)\n        total_lowering += math.ceil(well_water / capacity)\n    return total_lowering", "prompt_tokens": 631, "completion_tokens": 850, "duration": 16.46787405014038}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 478, "completion_tokens": 423, "duration": 8.142892837524414}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = []\n    for word in s.split():\n        if sum(1 for char in word if char.lower() in consonants) == n:\n            result.append(word)\n    return result", "prompt_tokens": 489, "completion_tokens": 461, "duration": 11.052310705184937}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word: str) -> str:\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    found_consonant = False\n    for char in word[::-1]:\n        if char in consonants:\n            found_consonant = True\n        if found_consonant and char in vowels:\n            return char\n    return ''", "prompt_tokens": 457, "completion_tokens": 605, "duration": 11.721812963485718}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(': stack.append(char)\n            else:\n                if stack and stack[-1] == '(': stack.pop()\n                else: return 'No'\n        if stack: return 'No'\n    return 'Yes'", "prompt_tokens": 476, "completion_tokens": 761, "duration": 17.064960479736328}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]", "prompt_tokens": 525, "completion_tokens": 385, "duration": 9.415848016738892}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if lst[i] % 2 != 0 and i % 2 == 0)", "prompt_tokens": 405, "completion_tokens": 526, "duration": 10.625904083251953}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if x < 100)", "prompt_tokens": 436, "completion_tokens": 380, "duration": 9.249239683151245}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    odd_collatz = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_collatz.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    odd_collatz.append(1)\n    return sorted(odd_collatz)", "prompt_tokens": 539, "completion_tokens": 474, "duration": 8.897472858428955}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            return 1 <= day <= 31\n        elif month in [4, 6, 9, 11]:\n            return 1 <= day <= 30\n        elif month == 2:\n            if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n                return 1 <= day <= 29\n            else:\n                return 1 <= day <= 28\n        else:\n            return False\n    except (ValueError, IndexError):\n        return False", "prompt_tokens": 571, "completion_tokens": 677, "duration": 14.503341913223267}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)", "prompt_tokens": 448, "completion_tokens": 412, "duration": 7.847701072692871}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    counts = {}\n    for num in lst:\n        if num in counts:\n            counts[num] += 1\n            if counts[num] > 1:\n                return False\n        else:\n            counts[num] = 1\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True", "prompt_tokens": 557, "completion_tokens": 570, "duration": 9.545993566513062}
{"task_id": "HumanEval/127", "generated_code": "def is_prime(n): \n    if n <= 1: \n        return False \n    for i in range(2, int(n**0.5) + 1): \n        if n % i == 0: \n            return False \n    return True \n\n\ndef intersection(interval1, interval2): \n    start = max(interval1[0], interval2[0]) \n    end = min(interval1[1], interval2[1]) \n    if start > end: \n        return 'NO' \n    length = end - start + 1 \n    if is_prime(length): \n        return 'YES' \n    else: \n        return 'NO'", "prompt_tokens": 562, "completion_tokens": 513, "duration": 12.14585256576538}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product_signs = 1\n    sum_magnitudes = 0\n    for num in arr:\n        product_signs *= 1 if num == 0 else num/abs(num)\n        sum_magnitudes += abs(num)\n    return product_signs * sum_magnitudes", "prompt_tokens": 430, "completion_tokens": 433, "duration": 8.04361867904663}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    def backtrack(path, visited):\n        if len(path) == k:\n            return path\n        for neighbor in get_neighbors(path[-1]):\n            if neighbor not in visited:\n                new_path = backtrack(path + [neighbor], visited | {neighbor})\n                if new_path:\n                    return new_path\n        return None\n    def get_neighbors(cell):\n        x, y = cell\n        neighbors = []\n        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]):\n                neighbors.append((nx, ny))\n        return neighbors\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            path = backtrack([(i, j)], {(i, j)})\n            if path:\n                return [grid[x][y] for x, y in path]", "prompt_tokens": 1409, "completion_tokens": 1385, "duration": 31.180665016174316}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 1]\n    tribonacci = [0, 1, 1]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3])\n    return tribonacci", "prompt_tokens": 543, "completion_tokens": 725, "duration": 18.794462203979492}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    for d in str(abs(n)):\n        if int(d) % 2 != 0:\n            product *= int(d)\n    return product if product != 1 else 0", "prompt_tokens": 379, "completion_tokens": 387, "duration": 10.121239423751831}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n    return bool(stack)", "prompt_tokens": 441, "completion_tokens": 662, "duration": 12.453602075576782}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)", "prompt_tokens": 465, "completion_tokens": 497, "duration": 9.236014127731323}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt and txt[-1].isalpha() and (len(txt) == 1 or not txt[-2].isalpha()):\n        return True\n    return False", "prompt_tokens": 445, "completion_tokens": 383, "duration": 6.448544263839722}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    result = -1\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            result = i - 1\n    return result", "prompt_tokens": 411, "completion_tokens": 506, "duration": 10.691582679748535}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst): \n    neg_int = None \n    pos_int = None \n    for num in lst: \n        if num < 0 and (neg_int is None or num > neg_int): \n            neg_int = num \n        elif num > 0 and (pos_int is None or num < pos_int): \n            pos_int = num \n    return (neg_int, pos_int)", "prompt_tokens": 446, "completion_tokens": 480, "duration": 13.011599063873291}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None", "prompt_tokens": 449, "completion_tokens": 570, "duration": 12.424917459487915}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    for i in range(1, n//2 + 1):\n        if i % 2 == 0 and (n - i) % 2 == 0:\n            return True\n    return False", "prompt_tokens": 385, "completion_tokens": 520, "duration": 10.913838624954224}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return factorial(n) * special_factorial(n-1)", "prompt_tokens": 403, "completion_tokens": 475, "duration": 13.181368112564087}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    result = []\n    consecutive_spaces = 0\n    for char in text:\n        if char == ' ':\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result.append('-')\n            elif consecutive_spaces == 2:\n                result.append('_')\n            else:\n                result.append(char)\n        else:\n            result.append(char)\n            consecutive_spaces = 0\n    return ''.join(result)", "prompt_tokens": 414, "completion_tokens": 450, "duration": 9.540046453475952}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not name or not name[0].isalpha() or len([c for c in name if c.isdigit()]) > 3 or ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 522, "completion_tokens": 429, "duration": 9.262502193450928}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            total += num ** 2\n        elif i % 4 == 0:\n            total += num ** 3\n    return total", "prompt_tokens": 478, "completion_tokens": 482, "duration": 8.033182144165039}
{"task_id": "HumanEval/143", "generated_code": "from math import sqrt\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 455, "completion_tokens": 489, "duration": 10.618398427963257}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    product_num = x_num * n_num\n    product_den = x_den * n_den\n    return product_num % product_den == 0", "prompt_tokens": 463, "completion_tokens": 570, "duration": 14.782151699066162}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    def digit_sum(num):\n        return sum(int(d) for d in str(abs(num)))\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))", "prompt_tokens": 423, "completion_tokens": 438, "duration": 11.549370765686035}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count", "prompt_tokens": 427, "completion_tokens": 538, "duration": 10.52646017074585}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 473, "completion_tokens": 730, "duration": 18.843594789505005}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = {\n        'Mercury': 1,\n        'Venus': 2,\n        'Earth': 3,\n        'Mars': 4,\n        'Jupiter': 5,\n        'Saturn': 6,\n        'Uranus': 7,\n        'Neptune': 8\n    }\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = min(planets[planet1], planets[planet2])\n    end = max(planets[planet1], planets[planet2])\n    result = [planet for planet, pos in planets.items() if start < pos < end]\n    return tuple(sorted(result, key=lambda x: planets[x]))", "prompt_tokens": 519, "completion_tokens": 538, "duration": 10.973587274551392}
{"task_id": "HumanEval/149", "generated_code": "def list_sort(lst): \n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "prompt_tokens": 495, "completion_tokens": 406, "duration": 9.77899718284607}
{"task_id": "HumanEval/150", "generated_code": "import math\n\ndef x_or_y(n, x, y):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 394, "completion_tokens": 556, "duration": 14.166435718536377}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int))", "prompt_tokens": 445, "completion_tokens": 405, "duration": 10.303069353103638}
{"task_id": "HumanEval/152", "generated_code": "def compare(scores, guesses):\n    return [abs(score - guess) if score != guess else 0 for score, guess in zip(scores, guesses)]", "prompt_tokens": 538, "completion_tokens": 410, "duration": 7.613377809524536}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    strengths = [(ext, sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())) for ext in extensions]\n    strengths.sort(key=lambda x: (x[1], extensions.index(x[0])))\n    return f'{class_name}.{strengths[0][0]}'", "prompt_tokens": 585, "completion_tokens": 518, "duration": 12.290249586105347}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    return b in a + a", "prompt_tokens": 437, "completion_tokens": 627, "duration": 14.541255474090576}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 373, "completion_tokens": 602, "duration": 15.214520454406738}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_map = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c',\n        90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n    result = ''\n    for value, numeral in roman_map.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result", "prompt_tokens": 409, "completion_tokens": 781, "duration": 16.878103256225586}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2", "prompt_tokens": 416, "completion_tokens": 618, "duration": 11.070695400238037}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n    max_word = ''\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word", "prompt_tokens": 428, "completion_tokens": 593, "duration": 11.910124063491821}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_carrots = number + need\n    remaining_carrots = max(0, remaining - need)\n    return [total_carrots, remaining_carrots]", "prompt_tokens": 585, "completion_tokens": 464, "duration": 8.45435905456543}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for i in range(1, len(operand)):\n        expression += operator[i-1] + str(operand[i])\n    return eval(expression)", "prompt_tokens": 515, "completion_tokens": 666, "duration": 12.826737403869629}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    return ''.join(c.upper() if c.islower() else c.lower() for c in s) if any(char.isalpha() for char in s) else s[::-1]", "prompt_tokens": 415, "completion_tokens": 412, "duration": 8.699865818023682}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    md5_hash = hashlib.md5()\n    md5_hash.update(text.encode())\n    return md5_hash.hexdigest()", "prompt_tokens": 384, "completion_tokens": 495, "duration": 8.976920127868652}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "prompt_tokens": 412, "completion_tokens": 397, "duration": 11.265390634536743}
