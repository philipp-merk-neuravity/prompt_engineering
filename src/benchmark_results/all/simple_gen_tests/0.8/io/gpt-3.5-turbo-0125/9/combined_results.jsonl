{"task_id": "HumanEval/0", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 174, "completion_tokens": 66, "duration": 2.6063008308410645}
{"task_id": "HumanEval/1", "is_solved": false, "solved_count": 3, "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    open_count = 0\n    start_index = 0\n    \n    for i, char in enumerate(paren_string):\n        if char == '(':\n            open_count += 1\n        elif char == ')':\n            open_count -= 1\n        \n        if open_count == 0:\n            result.append(paren_string[start_index:i+1].replace(\" \", \"\"))\n            start_index = i+1\n            \n    return result", "prompt_tokens": 165, "completion_tokens": 112, "duration": 4.405118703842163}
{"task_id": "HumanEval/2", "is_solved": false, "solved_count": 3, "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 135, "completion_tokens": 21, "duration": 3.479076385498047}
{"task_id": "HumanEval/3", "is_solved": true, "solved_count": 2, "generated_code": "def below_zero(operations):\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 37, "duration": 3.4491524696350098}
{"task_id": "HumanEval/4", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 167, "completion_tokens": 49, "duration": 3.9055840969085693}
{"task_id": "HumanEval/5", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for num in numbers:\n        result.extend([num, delimeter])\n    result.pop()  # remove the last delimeter\n    return result", "prompt_tokens": 142, "completion_tokens": 61, "duration": 4.030269145965576}
{"task_id": "HumanEval/6", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def find_max_nesting(paren_group):\n        max_nesting = 0\n        current_nesting = 0\n        for char in paren_group:\n            if char == '(':\n                current_nesting += 1\n                max_nesting = max(max_nesting, current_nesting)\n            elif char == ')':\n                current_nesting -= 1\n        return max_nesting\n\n    return [find_max_nesting(paren_group) for paren_group in paren_string.split()]\n\nparse_nested_parens('(()()) ((())) () ((())()())')", "prompt_tokens": 162, "completion_tokens": 138, "duration": 3.4247822761535645}
{"task_id": "HumanEval/7", "is_solved": false, "solved_count": 0, "generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 143, "completion_tokens": 35, "duration": 3.61719012260437}
{"task_id": "HumanEval/8", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        return sum(numbers), 1 if 0 in numbers else eval('*'.join(map(str, numbers)))\n\n# Test cases\nprint(sum_product([]))  # (0, 1)\nprint(sum_product([1, 2, 3, 4]))  # (10, 24)", "prompt_tokens": 160, "completion_tokens": 103, "duration": 4.0435051918029785}
{"task_id": "HumanEval/9", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    maximum = float('-inf')\n    for num in numbers:\n        maximum = max(maximum, num)\n        result.append(maximum)\n    return result", "prompt_tokens": 150, "completion_tokens": 54, "duration": 3.7376515865325928}
{"task_id": "HumanEval/10", "is_solved": true, "solved_count": 3, "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]", "prompt_tokens": 192, "completion_tokens": 73, "duration": 2.6933655738830566}
{"task_id": "HumanEval/11", "is_solved": true, "solved_count": 4, "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])", "prompt_tokens": 126, "completion_tokens": 41, "duration": 3.579258441925049}
{"task_id": "HumanEval/12", "is_solved": false, "solved_count": 0, "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), x))", "prompt_tokens": 152, "completion_tokens": 39, "duration": 3.525851011276245}
{"task_id": "HumanEval/13", "is_solved": true, "solved_count": 4, "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 42, "duration": 3.5393548011779785}
{"task_id": "HumanEval/14", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string)+1)]", "prompt_tokens": 109, "completion_tokens": 36, "duration": 2.2254698276519775}
{"task_id": "HumanEval/15", "is_solved": true, "solved_count": 2, "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 118, "completion_tokens": 27, "duration": 3.5287091732025146}
{"task_id": "HumanEval/16", "is_solved": true, "solved_count": 3, "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 3.326807737350464}
{"task_id": "HumanEval/17", "is_solved": false, "solved_count": 3, "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n\n    music_list = music_string.split()\n    return [notes[note] for note in music_list]\n\n# Test the function\nprint(parse_music('o o| .| o| o| .| .| .| .| o o'))  # Output: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]", "prompt_tokens": 222, "completion_tokens": 137, "duration": 3.0193028450012207}
{"task_id": "HumanEval/18", "is_solved": true, "solved_count": 3, "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "prompt_tokens": 138, "completion_tokens": 74, "duration": 3.952439308166504}
{"task_id": "HumanEval/19", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_map[x])\n    return ' '.join(sorted_numbers)", "prompt_tokens": 155, "completion_tokens": 103, "duration": 4.493385076522827}
{"task_id": "HumanEval/20", "is_solved": false, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    res = None\n    for i in range(1, len(numbers)):\n        diff = abs(numbers[i] - numbers[i-1])\n        if diff < min_diff:\n            min_diff = diff\n            res = (numbers[i-1], numbers[i])\n    return res\n\n# Test cases\nprint(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))  # (2.0, 2.2)\nprint(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))  # (2.0, 2.0)", "prompt_tokens": 216, "completion_tokens": 195, "duration": 5.214127063751221}
{"task_id": "HumanEval/21", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "prompt_tokens": 173, "completion_tokens": 58, "duration": 3.8288745880126953}
{"task_id": "HumanEval/22", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 141, "completion_tokens": 38, "duration": 2.064366579055786}
{"task_id": "HumanEval/23", "is_solved": true, "solved_count": 2, "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 18, "duration": 3.471254587173462}
{"task_id": "HumanEval/24", "is_solved": true, "solved_count": 4, "generated_code": "def largest_divisor(n: int) -> int:\n    return max([i for i in range(1, n) if n % i == 0])", "prompt_tokens": 102, "completion_tokens": 37, "duration": 3.5331480503082275}
{"task_id": "HumanEval/25", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 176, "completion_tokens": 70, "duration": 4.299970865249634}
{"task_id": "HumanEval/26", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "prompt_tokens": 134, "completion_tokens": 38, "duration": 3.51297664642334}
{"task_id": "HumanEval/27", "is_solved": true, "solved_count": 4, "generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "prompt_tokens": 98, "completion_tokens": 36, "duration": 3.3321757316589355}
{"task_id": "HumanEval/28", "is_solved": false, "solved_count": 0, "generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 20, "duration": 3.289001703262329}
{"task_id": "HumanEval/29", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 35, "duration": 2.0588040351867676}
{"task_id": "HumanEval/30", "is_solved": true, "solved_count": 1, "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 163, "completion_tokens": 25, "duration": 3.446502208709717}
{"task_id": "HumanEval/31", "is_solved": true, "solved_count": 4, "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 149, "completion_tokens": 57, "duration": 3.4670627117156982}
{"task_id": "HumanEval/32", "is_solved": true, "solved_count": 2, "generated_code": "def find_zero(xs: list):\n    if len(xs) % 2 != 0:\n        raise ValueError(\"The number of coefficients must be even.\")\n    \n    def poly(xs, x):\n        return sum([coeff * x**i for i, coeff in enumerate(xs)])\n    \n    def derivative(xs, x):\n        return sum([i * coeff * x**(i-1) for i, coeff in enumerate(xs) if i > 0])\n    \n    x = 1.0\n    tol = 1e-6\n    max_iter = 1000\n    iteration = 0\n    \n    while abs(poly(xs, x)) > tol and iteration < max_iter:\n        x = x - poly(xs, x) / derivative(xs, x)\n        iteration += 1\n    \n    return x", "prompt_tokens": 309, "completion_tokens": 170, "duration": 4.166413307189941}
{"task_id": "HumanEval/33", "is_solved": true, "solved_count": 1, "generated_code": "def sort_third(l: list):\n    sorted_indices = sorted([i for i in range(len(l)) if i % 3 == 0], key=lambda x: l[x])\n    sorted_values = [l[i] for i in sorted_indices]\n    result = l.copy()\n    for i, v in zip(sorted_indices, sorted_values):\n        result[i] = v\n    return result", "prompt_tokens": 200, "completion_tokens": 85, "duration": 4.414771556854248}
{"task_id": "HumanEval/34", "is_solved": true, "solved_count": 4, "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 123, "completion_tokens": 17, "duration": 3.2383384704589844}
{"task_id": "HumanEval/35", "is_solved": true, "solved_count": 4, "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 16, "duration": 3.126251459121704}
{"task_id": "HumanEval/36", "is_solved": true, "solved_count": 3, "generated_code": "def fizz_buzz(n: int):\n    return sum(str(i).count('7') for i in range(n) if i % 11 == 0 or i % 13 == 0)", "prompt_tokens": 129, "completion_tokens": 41, "duration": 3.4587745666503906}
{"task_id": "HumanEval/37", "is_solved": true, "solved_count": 2, "generated_code": "def sort_even(l: list):\n    return [sorted(l[::2])[i//2] if i % 2 == 0 else l[i] for i in range(len(l))]", "prompt_tokens": 173, "completion_tokens": 43, "duration": 3.5702669620513916}
{"task_id": "HumanEval/38", "is_solved": true, "solved_count": 3, "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 162, "duration": 4.739898920059204}
{"task_id": "HumanEval/39", "is_solved": true, "solved_count": 4, "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 1:\n            return n\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    i = 0\n    while count < n:\n        i += 1\n        num = fibonacci(i)\n        if is_prime(num):\n            count += 1\n    return num", "prompt_tokens": 147, "completion_tokens": 163, "duration": 4.843162536621094}
{"task_id": "HumanEval/40", "is_solved": true, "solved_count": 4, "generated_code": "def triples_sum_to_zero(l: list):\n    return any(sum((x, y, z)) == 0 for x in l for y in l for z in l if x != y != z)", "prompt_tokens": 209, "completion_tokens": 46, "duration": 5.7354347705841064}
{"task_id": "HumanEval/41", "is_solved": true, "solved_count": 4, "generated_code": "def car_race_collision(n: int):\n    return n", "prompt_tokens": 201, "completion_tokens": 16, "duration": 3.132497787475586}
{"task_id": "HumanEval/42", "is_solved": true, "solved_count": 2, "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 158, "completion_tokens": 23, "duration": 5.429662704467773}
{"task_id": "HumanEval/43", "is_solved": true, "solved_count": 4, "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 207, "completion_tokens": 42, "duration": 4.737221002578735}
{"task_id": "HumanEval/44", "is_solved": true, "solved_count": 3, "generated_code": "def change_base(x: int, base: int):\n    return '' if x == 0 else change_base(x // base, base) + str(x % base)", "prompt_tokens": 141, "completion_tokens": 38, "duration": 3.187685966491699}
{"task_id": "HumanEval/45", "is_solved": true, "solved_count": 4, "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 17, "duration": 6.2418904304504395}
{"task_id": "HumanEval/46", "is_solved": true, "solved_count": 4, "generated_code": "def fib4(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    fib_list = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib_list.append(fib_list[-1] + fib_list[-2] + fib_list[-3] + fib_list[-4])\n    \n    return fib_list[-1]", "prompt_tokens": 221, "completion_tokens": 116, "duration": 5.7989301681518555}
{"task_id": "HumanEval/47", "is_solved": false, "solved_count": 1, "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 125, "completion_tokens": 61, "duration": 1.5516915321350098}
{"task_id": "HumanEval/48", "is_solved": true, "solved_count": 4, "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 20, "duration": 4.236940145492554}
{"task_id": "HumanEval/49", "is_solved": true, "solved_count": 4, "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 155, "completion_tokens": 25, "duration": 5.464749574661255}
{"task_id": "HumanEval/50", "is_solved": false, "solved_count": 3, "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 82, "duration": 6.010514259338379}
{"task_id": "HumanEval/51", "is_solved": true, "solved_count": 4, "generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in ['a', 'e', 'i', 'o', 'u']])", "prompt_tokens": 172, "completion_tokens": 42, "duration": 5.764646291732788}
{"task_id": "HumanEval/52", "is_solved": true, "solved_count": 4, "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 129, "completion_tokens": 26, "duration": 4.350031137466431}
{"task_id": "HumanEval/53", "is_solved": true, "solved_count": 4, "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 103, "completion_tokens": 20, "duration": 5.648186683654785}
{"task_id": "HumanEval/54", "is_solved": false, "solved_count": 0, "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 190, "completion_tokens": 28, "duration": 5.186999797821045}
{"task_id": "HumanEval/55", "is_solved": true, "solved_count": 3, "generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "prompt_tokens": 102, "completion_tokens": 38, "duration": 6.5305821895599365}
{"task_id": "HumanEval/56", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 142, "completion_tokens": 64, "duration": 5.029238224029541}
{"task_id": "HumanEval/57", "is_solved": true, "solved_count": 3, "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 137, "completion_tokens": 54, "duration": 5.898924827575684}
{"task_id": "HumanEval/58", "is_solved": true, "solved_count": 4, "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 164, "completion_tokens": 29, "duration": 4.415369749069214}
{"task_id": "HumanEval/59", "is_solved": true, "solved_count": 2, "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 113, "completion_tokens": 50, "duration": 4.908264875411987}
{"task_id": "HumanEval/60", "is_solved": true, "solved_count": 4, "generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "prompt_tokens": 144, "completion_tokens": 22, "duration": 4.242558002471924}
{"task_id": "HumanEval/61", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str):\n    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0", "prompt_tokens": 139, "completion_tokens": 68, "duration": 6.116909980773926}
{"task_id": "HumanEval/62", "is_solved": true, "solved_count": 2, "generated_code": "def derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))]", "prompt_tokens": 158, "completion_tokens": 28, "duration": 3.1749978065490723}
{"task_id": "HumanEval/63", "is_solved": true, "solved_count": 4, "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 199, "completion_tokens": 72, "duration": 5.622449636459351}
{"task_id": "HumanEval/64", "is_solved": true, "solved_count": 2, "generated_code": "def vowels_count(s):\n    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i] in vowels or (s[i] == 'y' and i == len(s) - 1):\n            count += 1\n    return count\n\n# Additional test cases\nprint(vowels_count(\"abcde\"))  # 2\nprint(vowels_count(\"ACEDY\"))  # 3\nprint(vowels_count(\"Hello\"))  # 2\nprint(vowels_count(\"qwerty\")) # 1", "prompt_tokens": 176, "completion_tokens": 143, "duration": 4.069087743759155}
{"task_id": "HumanEval/65", "is_solved": false, "solved_count": 3, "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 132, "completion_tokens": 55, "duration": 6.772214412689209}
{"task_id": "HumanEval/66", "is_solved": true, "solved_count": 4, "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 5.672107219696045}
{"task_id": "HumanEval/67", "is_solved": true, "solved_count": 4, "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "prompt_tokens": 260, "completion_tokens": 37, "duration": 5.641664266586304}
{"task_id": "HumanEval/68", "is_solved": true, "solved_count": 4, "generated_code": "def pluck(arr):\n    evens = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens, key=lambda x: (x[0], x[1]))\n    return [min_even[0], min_even[1]]", "prompt_tokens": 362, "completion_tokens": 78, "duration": 5.097854852676392}
{"task_id": "HumanEval/69", "is_solved": true, "solved_count": 4, "generated_code": "def search(lst):\n    for num in sorted(set(lst), reverse=True):\n        if lst.count(num) >= num and num > 0:\n            return num\n    return -1", "prompt_tokens": 215, "completion_tokens": 42, "duration": 5.3645405769348145}
{"task_id": "HumanEval/70", "is_solved": true, "solved_count": 4, "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 174, "completion_tokens": 44, "duration": 5.86173415184021}
{"task_id": "HumanEval/71", "is_solved": true, "solved_count": 4, "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 171, "completion_tokens": 92, "duration": 6.1586079597473145}
{"task_id": "HumanEval/72", "is_solved": true, "solved_count": 4, "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 5.8480916023254395}
{"task_id": "HumanEval/73", "is_solved": true, "solved_count": 4, "generated_code": "def smallest_change(arr):\n    length = len(arr)\n    changes = 0\n    for i in range(length // 2):\n        if arr[i] != arr[length - i - 1]:\n            changes += 1\n    return changes", "prompt_tokens": 207, "completion_tokens": 55, "duration": 1.1043100357055664}
{"task_id": "HumanEval/74", "is_solved": true, "solved_count": 4, "generated_code": "def total_match(lst1, lst2):\n    sum1 = sum(len(x) for x in lst1)\n    sum2 = sum(len(x) for x in lst2)\n    \n    if sum1 < sum2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 243, "completion_tokens": 63, "duration": 6.388736724853516}
{"task_id": "HumanEval/75", "is_solved": true, "solved_count": 4, "generated_code": "def is_multiply_prime(a):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False", "prompt_tokens": 129, "completion_tokens": 124, "duration": 4.205528974533081}
{"task_id": "HumanEval/76", "is_solved": true, "solved_count": 4, "generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or (n != 1 and x % n == 0 and is_simple_power(x // n, n)))", "prompt_tokens": 192, "completion_tokens": 52, "duration": 4.641237735748291}
{"task_id": "HumanEval/77", "is_solved": true, "solved_count": 4, "generated_code": "def iscube(a):\n    return (a >= 0) and (round(a**(1/3))**3 == a)", "prompt_tokens": 160, "completion_tokens": 31, "duration": 5.541208982467651}
{"task_id": "HumanEval/78", "is_solved": true, "solved_count": 4, "generated_code": "def hex_key(num):\n    prime_digits = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count", "prompt_tokens": 349, "completion_tokens": 60, "duration": 3.5844950675964355}
{"task_id": "HumanEval/79", "is_solved": true, "solved_count": 4, "generated_code": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal)[2:] + 'db'", "prompt_tokens": 189, "completion_tokens": 25, "duration": 4.3092145919799805}
{"task_id": "HumanEval/80", "is_solved": true, "solved_count": 4, "generated_code": "def is_happy(s):\n    return all(s[i] != s[i+1] != s[i+2] for i in range(len(s)-2)) if len(s) >= 3 else False", "prompt_tokens": 171, "completion_tokens": 47, "duration": 1.0319738388061523}
{"task_id": "HumanEval/81", "is_solved": false, "solved_count": 1, "generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        if gpa > 3.7:\n            return 'A'\n        if gpa > 3.3:\n            return 'A-'\n        if gpa > 3.0:\n            return 'B+'\n        if gpa > 2.7:\n            return 'B'\n        if gpa > 2.3:\n            return 'B-'\n        if gpa > 2.0:\n            return 'C+'\n        if gpa > 1.7:\n            return 'C'\n        if gpa > 1.3:\n            return 'C-'\n        if gpa > 1.0:\n            return 'D+'\n        if gpa > 0.7:\n            return 'D'\n        if gpa >= 0.0:\n            return 'D-'\n        return 'E'\n\n    return [grade(g) for g in grades]", "prompt_tokens": 320, "completion_tokens": 221, "duration": 8.414106845855713}
{"task_id": "HumanEval/82", "is_solved": true, "solved_count": 4, "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "prompt_tokens": 131, "completion_tokens": 70, "duration": 3.4724762439727783}
{"task_id": "HumanEval/83", "is_solved": true, "solved_count": 0, "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "prompt_tokens": 94, "completion_tokens": 64, "duration": 1.0854251384735107}
{"task_id": "HumanEval/84", "is_solved": true, "solved_count": 3, "generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "prompt_tokens": 183, "completion_tokens": 21, "duration": 4.153321743011475}
{"task_id": "HumanEval/85", "is_solved": false, "solved_count": 2, "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 34, "duration": 2.8639819622039795}
{"task_id": "HumanEval/86", "is_solved": true, "solved_count": 2, "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    result = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        result.append(ordered_word)\n    return ' '.join(result)", "prompt_tokens": 180, "completion_tokens": 48, "duration": 4.981414556503296}
{"task_id": "HumanEval/87", "is_solved": true, "solved_count": 3, "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "prompt_tokens": 309, "completion_tokens": 68, "duration": 4.027481555938721}
{"task_id": "HumanEval/88", "is_solved": false, "solved_count": 3, "generated_code": "def sort_array(array):\n    sorted_array = sorted(array)\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array", "prompt_tokens": 253, "completion_tokens": 50, "duration": 3.571953773498535}
{"task_id": "HumanEval/89", "is_solved": true, "solved_count": 4, "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            base = ord('a') if char.islower() else ord('A')\n            result += chr((ord(char) - base + 2 * 2) % 26 + base)\n        else:\n            result += char\n    return result", "prompt_tokens": 160, "completion_tokens": 76, "duration": 3.5757226943969727}
{"task_id": "HumanEval/90", "is_solved": true, "solved_count": 4, "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "prompt_tokens": 174, "completion_tokens": 52, "duration": 4.791964769363403}
{"task_id": "HumanEval/91", "is_solved": true, "solved_count": 4, "generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences if sentence]\n    \n    count = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0] == \"I\":\n            count += 1\n    \n    return count", "prompt_tokens": 157, "completion_tokens": 71, "duration": 3.5930309295654297}
{"task_id": "HumanEval/92", "is_solved": true, "solved_count": 4, "generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "prompt_tokens": 185, "completion_tokens": 54, "duration": 4.871682405471802}
{"task_id": "HumanEval/93", "is_solved": true, "solved_count": 2, "generated_code": "def encode(message):\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                result += chr((ord(char)+2 - ord('a')) % 26 + ord('A'))\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result", "prompt_tokens": 159, "completion_tokens": 78, "duration": 3.3758485317230225}
{"task_id": "HumanEval/94", "is_solved": false, "solved_count": 0, "generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    prime_values = [num for num in lst if is_prime(num)]\n    largest_prime = max(prime_values)\n    \n    return sum_of_digits(largest_prime)", "prompt_tokens": 336, "completion_tokens": 120, "duration": 5.921804666519165}
{"task_id": "HumanEval/95", "is_solved": true, "solved_count": 4, "generated_code": "def check_dict_case(dictionary):\n    if not dictionary:\n        return False\n    upper_flag = False\n    lower_flag = False\n    for key in dictionary.keys():\n        if isinstance(key, str):\n            if key.islower():\n                lower_flag = True\n            elif key.isupper():\n                upper_flag = True\n            else:\n                return False\n        else:\n            return False\n    return upper_flag != lower_flag", "prompt_tokens": 219, "completion_tokens": 91, "duration": 2.8661487102508545}
{"task_id": "HumanEval/96", "is_solved": true, "solved_count": 4, "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "prompt_tokens": 195, "completion_tokens": 87, "duration": 3.5806374549865723}
{"task_id": "HumanEval/97", "is_solved": true, "solved_count": 4, "generated_code": "def multiply(a, b):\n    return int(str(abs(a) % 10)) * int(str(abs(b) % 10))", "prompt_tokens": 148, "completion_tokens": 27, "duration": 4.40070652961731}
{"task_id": "HumanEval/98", "is_solved": true, "solved_count": 3, "generated_code": "def count_upper(s):\n    return sum(1 for i in range(0, len(s), 2) if s[i] in 'AEIOU')", "prompt_tokens": 122, "completion_tokens": 37, "duration": 4.357618093490601}
{"task_id": "HumanEval/99", "is_solved": true, "solved_count": 4, "generated_code": "def closest_integer(value):\n    value = float(value)\n    return int(value + 0.5) if value > 0 else int(value - 0.5)", "prompt_tokens": 206, "completion_tokens": 39, "duration": 4.614492893218994}
{"task_id": "HumanEval/100", "is_solved": true, "solved_count": 4, "generated_code": "def make_a_pile(n):\n    stones = []\n    for i in range(n):\n        stones.append(n + 2*i)\n    return stones", "prompt_tokens": 182, "completion_tokens": 35, "duration": 1.8899078369140625}
{"task_id": "HumanEval/101", "is_solved": true, "solved_count": 1, "generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(',', ' ').split()]", "prompt_tokens": 166, "completion_tokens": 25, "duration": 2.786447525024414}
{"task_id": "HumanEval/102", "is_solved": true, "solved_count": 4, "generated_code": "def choose_num(x, y):\n    return max([i for i in range(x, y+1) if i % 2 == 0] + [-1])", "prompt_tokens": 144, "completion_tokens": 39, "duration": 2.6726202964782715}
{"task_id": "HumanEval/103", "is_solved": true, "solved_count": 3, "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m-n+1))\n    return bin(avg)", "prompt_tokens": 190, "completion_tokens": 46, "duration": 3.154949903488159}
{"task_id": "HumanEval/104", "is_solved": true, "solved_count": 2, "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 152, "completion_tokens": 33, "duration": 2.7222673892974854}
{"task_id": "HumanEval/105", "is_solved": true, "solved_count": 3, "generated_code": "def by_length(arr):\n    nums = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    arr = [x for x in arr if 1 <= x <= 9]\n    arr.sort()\n    arr.reverse()\n    return [nums[x-1] for x in arr]", "prompt_tokens": 326, "completion_tokens": 78, "duration": 3.382270097732544}
{"task_id": "HumanEval/106", "is_solved": true, "solved_count": 4, "generated_code": "def f(n):\n    def factorial(num):\n        if num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    \n    return result", "prompt_tokens": 174, "completion_tokens": 92, "duration": 1.7012665271759033}
{"task_id": "HumanEval/107", "is_solved": true, "solved_count": 2, "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count, odd_count = 0, 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "prompt_tokens": 261, "completion_tokens": 98, "duration": 3.75720477104187}
{"task_id": "HumanEval/108", "is_solved": false, "solved_count": 3, "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num < 0:\n            num = str(num)[1:]\n        if sum(int(digit) for digit in str(num)) > 0:\n            count += 1\n    return count", "prompt_tokens": 174, "completion_tokens": 63, "duration": 3.6947553157806396}
{"task_id": "HumanEval/109", "is_solved": true, "solved_count": 4, "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    sorted_arr = sorted(arr)\n    for _ in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n        \n    return False", "prompt_tokens": 349, "completion_tokens": 63, "duration": 3.3378124237060547}
{"task_id": "HumanEval/110", "is_solved": false, "solved_count": 2, "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(1 for num in lst1 if num % 2 != 0) <= len(lst2) else \"NO\"", "prompt_tokens": 247, "completion_tokens": 44, "duration": 3.410109043121338}
{"task_id": "HumanEval/111", "is_solved": true, "solved_count": 4, "generated_code": "def histogram(test):\n    letters = test.split()\n    letter_count = {}\n    max_count = 0\n\n    for letter in letters:\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n\n        max_count = max(max_count, letter_count[letter])\n\n    return {letter: count for letter, count in letter_count.items() if count == max_count}", "prompt_tokens": 201, "completion_tokens": 96, "duration": 3.688969135284424}
{"task_id": "HumanEval/112", "is_solved": true, "solved_count": 3, "generated_code": "def reverse_delete(s, c):\n    result = \"\".join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "prompt_tokens": 508, "completion_tokens": 78, "duration": 4.2718048095703125}
{"task_id": "HumanEval/113", "is_solved": false, "solved_count": 0, "generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)}n the str{i+1}ng {s} of the {i+1}nput.\" for i, s in enumerate(lst)]", "prompt_tokens": 223, "completion_tokens": 65, "duration": 3.23934006690979}
{"task_id": "HumanEval/114", "is_solved": true, "solved_count": 3, "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 60, "duration": 3.7184066772460938}
{"task_id": "HumanEval/115", "is_solved": true, "solved_count": 3, "generated_code": "def max_fill(grid, capacity):\n    total_water = sum(sum(row) for row in grid)\n    return (total_water + capacity - 1) // capacity", "prompt_tokens": 373, "completion_tokens": 38, "duration": 3.548647880554199}
{"task_id": "HumanEval/116", "is_solved": false, "solved_count": 0, "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 28, "duration": 3.368082284927368}
{"task_id": "HumanEval/117", "is_solved": true, "solved_count": 4, "generated_code": "def select_words(s, n):\n    if not s:\n        return []\n    words = s.split()\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = []\n    for word in words:\n        if len([c for c in word if c in consonants]) == n:\n            result.append(word)\n    return result", "prompt_tokens": 231, "completion_tokens": 86, "duration": 4.235817909240723}
{"task_id": "HumanEval/118", "is_solved": true, "solved_count": 4, "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "prompt_tokens": 199, "completion_tokens": 98, "duration": 3.4160122871398926}
{"task_id": "HumanEval/119", "is_solved": true, "solved_count": 2, "generated_code": "def match_parens(lst):\n    open_paren_count = lst[0].count('(') + lst[1].count('(')\n    close_paren_count = lst[0].count(')') + lst[1].count(')')\n    if open_paren_count == close_paren_count:\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 218, "completion_tokens": 79, "duration": 3.3578057289123535}
{"task_id": "HumanEval/120", "is_solved": true, "solved_count": 4, "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 267, "completion_tokens": 17, "duration": 3.4887919425964355}
{"task_id": "HumanEval/121", "is_solved": false, "solved_count": 3, "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 40, "duration": 5.620530843734741}
{"task_id": "HumanEval/122", "is_solved": false, "solved_count": 3, "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num < 100)", "prompt_tokens": 178, "completion_tokens": 31, "duration": 2.967463731765747}
{"task_id": "HumanEval/123", "is_solved": false, "solved_count": 1, "generated_code": "def get_odd_collatz(n):\n    collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    \n    return sorted(list(set([num for num in collatz if num % 2 != 0])))", "prompt_tokens": 281, "completion_tokens": 85, "duration": 3.982318878173828}
{"task_id": "HumanEval/124", "is_solved": true, "solved_count": 4, "generated_code": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n        return True\n    except:\n        return False", "prompt_tokens": 313, "completion_tokens": 149, "duration": 4.932066202163696}
{"task_id": "HumanEval/125", "is_solved": false, "solved_count": 2, "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "prompt_tokens": 190, "completion_tokens": 60, "duration": 3.0317656993865967}
{"task_id": "HumanEval/126", "is_solved": true, "solved_count": 4, "generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)) and all(lst.count(num) <= 1 for num in lst)", "prompt_tokens": 299, "completion_tokens": 47, "duration": 2.86419939994812}
{"task_id": "HumanEval/127", "is_solved": true, "solved_count": 4, "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if end < start:\n        return \"NO\"\n    \n    length = end - start\n    if length <= 1:\n        return \"NO\"\n    \n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "prompt_tokens": 304, "completion_tokens": 112, "duration": 4.212874889373779}
{"task_id": "HumanEval/128", "is_solved": true, "solved_count": 3, "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        product *= num // abs(num) if num != 0 else 0\n        sum_magnitudes += abs(num)\n    return product * sum_magnitudes", "prompt_tokens": 172, "completion_tokens": 75, "duration": 3.701418399810791}
{"task_id": "HumanEval/129", "is_solved": true, "solved_count": 2, "generated_code": "def minPath(grid, k):\n    N = len(grid)\n    start_value = min(min(row) for row in grid)\n    start_pos = [(i, j) for i in range(N) for j in range(N) if grid[i][j] == start_value][0]\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    def is_valid(i, j):\n        return 0 <= i < N and 0 <= j < N\n    \n    def dfs(i, j, path):\n        if len(path) == k:\n            return path\n        \n        min_path = None\n        for di, dj in directions:\n            ni, nj = i + di, j + dj\n            if is_valid(ni, nj):\n                new_path = dfs(ni, nj, path + [grid[ni][nj]])\n                if min_path is None or new_path < min_path:\n                    min_path = new_path\n        \n        return min_path\n    \n    return dfs(start_pos[0], start_pos[1], [start_value])", "prompt_tokens": 446, "completion_tokens": 233, "duration": 7.362312078475952}
{"task_id": "HumanEval/130", "is_solved": false, "solved_count": 0, "generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1]\n    else:\n        sequence = [0, 1, 1]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n        return sequence", "prompt_tokens": 285, "completion_tokens": 108, "duration": 6.019955396652222}
{"task_id": "HumanEval/131", "is_solved": true, "solved_count": 4, "generated_code": "def digits(n):\n    odd_digits = [int(d) for d in str(n) if int(d) % 2 != 0]\n    if not odd_digits:\n        return 0\n    else:\n        product = 1\n        for digit in odd_digits:\n            product *= digit\n        return product", "prompt_tokens": 121, "completion_tokens": 69, "duration": 3.8286852836608887}
{"task_id": "HumanEval/132", "is_solved": false, "solved_count": 3, "generated_code": "def is_nested(string):\n    stack = []\n    nested = False\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            if stack:\n                nested = True\n    \n    return nested\n\n# Test cases\nprint(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\nprint(is_nested('[[][]]'))\nprint(is_nested('[[]][['))", "prompt_tokens": 183, "completion_tokens": 111, "duration": 4.075947046279907}
{"task_id": "HumanEval/133", "is_solved": true, "solved_count": 3, "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(num) ** 2 for num in lst)", "prompt_tokens": 207, "completion_tokens": 28, "duration": 3.7298011779785156}
{"task_id": "HumanEval/134", "is_solved": true, "solved_count": 4, "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt == \"\":\n        return False\n    return txt[-1].isalpha() and txt[-2] == \" \"", "prompt_tokens": 187, "completion_tokens": 40, "duration": 3.4877853393554688}
{"task_id": "HumanEval/135", "is_solved": false, "solved_count": 1, "generated_code": "def can_arrange(arr):\n    index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            index = i-1\n            break\n    return index", "prompt_tokens": 153, "completion_tokens": 52, "duration": 5.050522565841675}
{"task_id": "HumanEval/136", "is_solved": true, "solved_count": 4, "generated_code": "def largest_smallest_integers(lst):\n    negative_integers = [num for num in lst if num < 0]\n    positive_integers = [num for num in lst if num > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)", "prompt_tokens": 188, "completion_tokens": 90, "duration": 4.1900529861450195}
{"task_id": "HumanEval/137", "is_solved": false, "solved_count": 3, "generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a == b:\n            return None\n        return a if a > b else b\n    return a if type(a) == float else b", "prompt_tokens": 191, "completion_tokens": 52, "duration": 3.0268993377685547}
{"task_id": "HumanEval/138", "is_solved": false, "solved_count": 3, "generated_code": "def is_equal_to_sum_even(n):\n    return n % 4 == 0 and n >= 8", "prompt_tokens": 127, "completion_tokens": 27, "duration": 3.015138626098633}
{"task_id": "HumanEval/139", "is_solved": true, "solved_count": 4, "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        fact = 1\n        for j in range(1, i+1):\n            fact *= j\n        result *= fact\n    return result", "prompt_tokens": 145, "completion_tokens": 60, "duration": 5.106764793395996}
{"task_id": "HumanEval/140", "is_solved": true, "solved_count": 3, "generated_code": "def fix_spaces(text):\n    import re\n    text = re.sub(r'\\s{3,}', '-', text)\n    text = text.replace(' ', '_')\n    return text", "prompt_tokens": 156, "completion_tokens": 36, "duration": 3.331773519515991}
{"task_id": "HumanEval/141", "is_solved": true, "solved_count": 4, "generated_code": "def file_name_check(file_name):\n    if file_name.count(\".\") != 1:\n        return 'No'\n    file_parts = file_name.split(\".\")\n    if len(file_parts) != 2:\n        return 'No'\n    if not file_parts[0] or not file_parts[0][0].isalpha():\n        return 'No'\n    if len([c for c in file_parts[0] if c.isdigit()]) > 3:\n        return 'No'\n    if file_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 264, "completion_tokens": 130, "duration": 2.550602436065674}
{"task_id": "HumanEval/142", "is_solved": true, "solved_count": 3, "generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "prompt_tokens": 219, "completion_tokens": 46, "duration": 5.423492908477783}
{"task_id": "HumanEval/143", "is_solved": false, "solved_count": 2, "generated_code": "def words_in_sentence(sentence):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 197, "completion_tokens": 94, "duration": 3.0800018310546875}
{"task_id": "HumanEval/144", "is_solved": true, "solved_count": 2, "generated_code": "from fractions import Fraction\n\ndef simplify(x, n):\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "prompt_tokens": 205, "completion_tokens": 34, "duration": 3.2925808429718018}
{"task_id": "HumanEval/145", "is_solved": false, "solved_count": 3, "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 31, "duration": 2.5527098178863525}
{"task_id": "HumanEval/146", "is_solved": true, "solved_count": 4, "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count", "prompt_tokens": 169, "completion_tokens": 81, "duration": 4.610205888748169}
{"task_id": "HumanEval/147", "is_solved": true, "solved_count": 1, "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n# Example\nn = 5\nprint(get_max_triples(n))", "prompt_tokens": 215, "completion_tokens": 119, "duration": 5.007686138153076}
{"task_id": "HumanEval/148", "is_solved": true, "solved_count": 4, "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    else:\n        return tuple(planets[end_idx+1:start_idx][::-1])", "prompt_tokens": 261, "completion_tokens": 126, "duration": 2.1185858249664307}
{"task_id": "HumanEval/149", "is_solved": false, "solved_count": 3, "generated_code": "def sorted_list_sum(lst):\n    return sorted(filter(lambda x: len(x) % 2 == 0, lst), key=lambda x: (len(x), x))", "prompt_tokens": 237, "completion_tokens": 39, "duration": 4.607685804367065}
{"task_id": "HumanEval/150", "is_solved": true, "solved_count": 4, "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "prompt_tokens": 136, "completion_tokens": 78, "duration": 4.968517303466797}
{"task_id": "HumanEval/151", "is_solved": true, "solved_count": 4, "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int))", "prompt_tokens": 187, "completion_tokens": 39, "duration": 0.860107421875}
{"task_id": "HumanEval/152", "is_solved": true, "solved_count": 2, "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.6411662101745605}
{"task_id": "HumanEval/153", "is_solved": true, "solved_count": 1, "generated_code": "def Strongest_Extension(class_name, extensions):\n    def calc_strength(ext):\n        return sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\n    \n    max_strength = float('-inf')\n    strongest_ext = \"\"\n    \n    for ext in extensions:\n        strength = calc_strength(ext)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_ext = ext\n    \n    return f\"{class_name}.{strongest_ext}\"", "prompt_tokens": 327, "completion_tokens": 105, "duration": 1.6746180057525635}
{"task_id": "HumanEval/154", "is_solved": true, "solved_count": 3, "generated_code": "def cycpattern_check(a, b):\n    return any(b in a[i:] + a[:i] for i in range(len(a)))\n\nprint(cycpattern_check(\"abcd\", \"abd\"))\nprint(cycpattern_check(\"hello\", \"ell\"))\nprint(cycpattern_check(\"whassup\", \"psus\"))\nprint(cycpattern_check(\"abab\", \"baa\"))\nprint(cycpattern_check(\"efef\", \"eeff\"))\nprint(cycpattern_check(\"himenss\", \"simen\"))", "prompt_tokens": 179, "completion_tokens": 108, "duration": 5.142988443374634}
{"task_id": "HumanEval/155", "is_solved": true, "solved_count": 4, "generated_code": "def even_odd_count(num):\n    even_count = len([i for i in str(abs(num)) if int(i) % 2 == 0])\n    odd_count = len([i for i in str(abs(num)) if int(i) % 2 != 0])\n    return (even_count, odd_count)", "prompt_tokens": 115, "completion_tokens": 65, "duration": 2.838606119155884}
{"task_id": "HumanEval/156", "is_solved": true, "solved_count": 4, "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    \n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    \n    return result.lower()", "prompt_tokens": 151, "completion_tokens": 143, "duration": 2.278186321258545}
{"task_id": "HumanEval/157", "is_solved": true, "solved_count": 4, "generated_code": "def right_angle_triangle(a, b, c):\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False", "prompt_tokens": 158, "completion_tokens": 63, "duration": 1.2231793403625488}
{"task_id": "HumanEval/158", "is_solved": true, "solved_count": 1, "generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n    \n    max_unique_chars = 0\n    max_word = \"\"\n    \n    for word in words:\n        curr_unique_chars = unique_chars(word)\n        if curr_unique_chars > max_unique_chars or (curr_unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = curr_unique_chars\n            max_word = word\n    \n    return max_word", "prompt_tokens": 170, "completion_tokens": 95, "duration": 5.631035089492798}
{"task_id": "HumanEval/159", "is_solved": true, "solved_count": 4, "generated_code": "def eat(number, need, remaining):\n    eaten = number + min(need, remaining)\n    left = max(remaining - need, 0)\n    return [eaten, left]", "prompt_tokens": 327, "completion_tokens": 43, "duration": 2.6561062335968018}
{"task_id": "HumanEval/160", "is_solved": false, "solved_count": 2, "generated_code": "def do_algebra(operators, operands):\n    expression = str(operands[0])\n    for i in range(len(operators)):\n        expression += operators[i] + str(operands[i + 1])\n    return eval(expression)", "prompt_tokens": 257, "completion_tokens": 51, "duration": 1.1593248844146729}
{"task_id": "HumanEval/161", "is_solved": false, "solved_count": 3, "generated_code": "def solve(s):\n    result = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not has_letter:\n        return s[::-1]\n    return result", "prompt_tokens": 157, "completion_tokens": 81, "duration": 3.5644960403442383}
{"task_id": "HumanEval/162", "is_solved": true, "solved_count": 2, "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 126, "completion_tokens": 36, "duration": 0.8799667358398438}
{"task_id": "HumanEval/163", "is_solved": false, "solved_count": 1, "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "prompt_tokens": 154, "completion_tokens": 35, "duration": 3.812481641769409}
