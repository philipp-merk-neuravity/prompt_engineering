{"task_id": "HumanEval/0", "is_solved": true, "solved_count": 4, "generated_code": "def has_close_elements(numbers, threshold):\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 991, "completion_tokens": 491, "duration": 8.780657052993774}
{"task_id": "HumanEval/1", "is_solved": false, "solved_count": 0, "generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    count = 0\n    current_group = ''\n    for char in paren_string:\n        if char == '(':\n            count += 1\n            current_group += char\n        elif char == ')':\n            count -= 1\n            current_group += char\n            if count == 0:\n                result.append(current_group)\n                current_group = ''\n    return result", "prompt_tokens": 962, "completion_tokens": 525, "duration": 9.342346429824829}
{"task_id": "HumanEval/2", "is_solved": false, "solved_count": 3, "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 741, "completion_tokens": 287, "duration": 6.096504211425781}
{"task_id": "HumanEval/3", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 935, "completion_tokens": 445, "duration": 8.734062194824219}
{"task_id": "HumanEval/4", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 983, "completion_tokens": 493, "duration": 12.33580470085144}
{"task_id": "HumanEval/5", "is_solved": true, "solved_count": 4, "generated_code": "def intersperse(numbers, delimiter):\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimiter)\n    return result", "prompt_tokens": 813, "completion_tokens": 374, "duration": 7.47666072845459}
{"task_id": "HumanEval/6", "is_solved": false, "solved_count": 0, "generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    current_depth = 0\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            depths.append(current_depth)\n        elif char == ')':\n            current_depth -= 1\n    return depths", "prompt_tokens": 965, "completion_tokens": 509, "duration": 11.847058773040771}
{"task_id": "HumanEval/7", "is_solved": false, "solved_count": 3, "generated_code": "def filter_by_substring(strings, substring):\n    return [s for s in strings if substring in s]", "prompt_tokens": 788, "completion_tokens": 323, "duration": 8.405114650726318}
{"task_id": "HumanEval/8", "is_solved": true, "solved_count": 2, "generated_code": "def sum_product(numbers):\n    if not numbers:\n        return 0, 1\n    sum_nums = 0\n    product_nums = 1\n    for num in numbers:\n        sum_nums += num\n        product_nums *= num\n    return sum_nums, product_nums", "prompt_tokens": 841, "completion_tokens": 378, "duration": 8.97976016998291}
{"task_id": "HumanEval/9", "is_solved": false, "solved_count": 0, "generated_code": "from typing import List\nfrom collections import deque\n\ndef max_sliding_window(nums: List[int], k: int) -> List[int]:\n    deq = deque()\n    result = []\n    for i in range(len(nums)):\n        while deq and deq[0] < i - k + 1:\n            deq.popleft()\n        while deq and nums[i] >= nums[deq[-1]]:\n            deq.pop()\n        deq.append(i)\n        if i >= k - 1:\n            result.append(nums[deq[0]])\n    return result", "prompt_tokens": 1103, "completion_tokens": 722, "duration": 14.077082872390747}
{"task_id": "HumanEval/10", "is_solved": false, "solved_count": 0, "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]", "prompt_tokens": 917, "completion_tokens": 351, "duration": 9.138561725616455}
{"task_id": "HumanEval/11", "is_solved": true, "solved_count": 4, "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "prompt_tokens": 785, "completion_tokens": 368, "duration": 9.649272918701172}
{"task_id": "HumanEval/12", "is_solved": true, "solved_count": 3, "generated_code": "def longest(strings):\n    if not strings:\n        return None\n    return max(strings, key=len)", "prompt_tokens": 807, "completion_tokens": 323, "duration": 5.500469923019409}
{"task_id": "HumanEval/13", "is_solved": true, "solved_count": 4, "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 799, "completion_tokens": 393, "duration": 9.681277751922607}
{"task_id": "HumanEval/14", "is_solved": false, "solved_count": 0, "generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 742, "completion_tokens": 351, "duration": 10.435744762420654}
{"task_id": "HumanEval/15", "is_solved": true, "solved_count": 2, "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1))", "prompt_tokens": 747, "completion_tokens": 336, "duration": 6.749985933303833}
{"task_id": "HumanEval/16", "is_solved": true, "solved_count": 3, "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 733, "completion_tokens": 311, "duration": 6.51432204246521}
{"task_id": "HumanEval/17", "is_solved": false, "solved_count": 0, "generated_code": "def parse_music(music_string: str) -> List[int]:\n    legend = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    return [legend[note] for note in notes]", "prompt_tokens": 986, "completion_tokens": 395, "duration": 11.505093574523926}
{"task_id": "HumanEval/18", "is_solved": true, "solved_count": 3, "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 871, "completion_tokens": 455, "duration": 11.135540962219238}
{"task_id": "HumanEval/19", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers_list = numbers.split()\n    sorted_numbers = sorted(numbers_list, key=lambda x: num_dict[x])\n    return ' '.join(sorted_numbers)", "prompt_tokens": 838, "completion_tokens": 437, "duration": 12.004734992980957}
{"task_id": "HumanEval/20", "is_solved": false, "solved_count": 2, "generated_code": "def find_closest_elements(numbers):\n    numbers.sort()\n    min_diff = float('inf')\n    result = ()\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result", "prompt_tokens": 911, "completion_tokens": 354, "duration": 8.190096378326416}
{"task_id": "HumanEval/21", "is_solved": true, "solved_count": 3, "generated_code": "def rescale_to_unit(numbers):\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]", "prompt_tokens": 962, "completion_tokens": 457, "duration": 8.96506142616272}
{"task_id": "HumanEval/22", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [val for val in values if isinstance(val, int)]", "prompt_tokens": 794, "completion_tokens": 345, "duration": 8.361717224121094}
{"task_id": "HumanEval/23", "is_solved": true, "solved_count": 2, "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 749, "completion_tokens": 376, "duration": 9.008074045181274}
{"task_id": "HumanEval/24", "is_solved": true, "solved_count": 4, "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 768, "completion_tokens": 402, "duration": 7.0691258907318115}
{"task_id": "HumanEval/25", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 932, "completion_tokens": 454, "duration": 8.977954864501953}
{"task_id": "HumanEval/26", "is_solved": false, "solved_count": 1, "generated_code": "def remove_duplicates(numbers):\n    return list(dict.fromkeys(numbers))", "prompt_tokens": 748, "completion_tokens": 292, "duration": 6.283574819564819}
{"task_id": "HumanEval/27", "is_solved": true, "solved_count": 4, "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)", "prompt_tokens": 728, "completion_tokens": 358, "duration": 7.456981182098389}
{"task_id": "HumanEval/28", "is_solved": true, "solved_count": 4, "generated_code": "def concatenate(strings):\n    return ''.join(strings)", "prompt_tokens": 740, "completion_tokens": 335, "duration": 6.674142360687256}
{"task_id": "HumanEval/29", "is_solved": true, "solved_count": 4, "generated_code": "def filter_by_prefix(strings, prefix):\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 780, "completion_tokens": 326, "duration": 6.716088056564331}
{"task_id": "HumanEval/30", "is_solved": true, "solved_count": 1, "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 819, "completion_tokens": 313, "duration": 7.148229360580444}
{"task_id": "HumanEval/31", "is_solved": true, "solved_count": 4, "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 943, "completion_tokens": 496, "duration": 9.057757139205933}
{"task_id": "HumanEval/32", "is_solved": false, "solved_count": 0, "generated_code": "def find_all_roots(xs):\n    roots = []\n    # Implement root-finding algorithm here\n    return roots", "prompt_tokens": 1209, "completion_tokens": 414, "duration": 8.210857391357422}
{"task_id": "HumanEval/33", "is_solved": true, "solved_count": 1, "generated_code": "def sort_third(l):\n    sorted_thirds = sorted([l[i] for i in range(len(l)) if i % 3 == 0])\n    result = [num if i % 3 != 0 else sorted_thirds.pop(0) for i, num in enumerate(l)]\n    return result", "prompt_tokens": 1075, "completion_tokens": 538, "duration": 10.656690835952759}
{"task_id": "HumanEval/34", "is_solved": true, "solved_count": 4, "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 717, "completion_tokens": 279, "duration": 5.836384296417236}
{"task_id": "HumanEval/35", "is_solved": true, "solved_count": 4, "generated_code": "def max_element(l):\n    return max(l)", "prompt_tokens": 717, "completion_tokens": 258, "duration": 7.690913677215576}
{"task_id": "HumanEval/36", "is_solved": true, "solved_count": 3, "generated_code": "def fizz_buzz(n: int):\n    return sum(str(num).count('7') for num in range(n) if num % 11 == 0 or num % 13 == 0)", "prompt_tokens": 808, "completion_tokens": 390, "duration": 9.785211563110352}
{"task_id": "HumanEval/37", "is_solved": true, "solved_count": 2, "generated_code": "def sort_even(l: list):\n    result = l.copy()\n    result[::2] = sorted(result[::2])\n    return result", "prompt_tokens": 988, "completion_tokens": 471, "duration": 11.508556365966797}
{"task_id": "HumanEval/38", "is_solved": true, "solved_count": 3, "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 912, "completion_tokens": 453, "duration": 10.077797412872314}
{"task_id": "HumanEval/39", "is_solved": false, "solved_count": 0, "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    num = 1\n    while count < n:\n        num = fibonacci(num)\n        if is_prime(num):\n            count += 1\n    return num", "prompt_tokens": 905, "completion_tokens": 549, "duration": 12.000827550888062}
{"task_id": "HumanEval/40", "is_solved": true, "solved_count": 4, "generated_code": "def triples_sum_to_zero(l):\n    l.sort()\n    for i in range(len(l) - 2):\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "prompt_tokens": 1180, "completion_tokens": 658, "duration": 12.263502597808838}
{"task_id": "HumanEval/41", "is_solved": false, "solved_count": 1, "generated_code": "def car_race_collision(n: int):\n    return n * (n - 1)", "prompt_tokens": 936, "completion_tokens": 351, "duration": 6.4703333377838135}
{"task_id": "HumanEval/42", "is_solved": true, "solved_count": 2, "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 774, "completion_tokens": 276, "duration": 6.039407968521118}
{"task_id": "HumanEval/43", "is_solved": true, "solved_count": 4, "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 1101, "completion_tokens": 524, "duration": 9.064322233200073}
{"task_id": "HumanEval/44", "is_solved": true, "solved_count": 3, "generated_code": "def change_base(x: int, base: int):\n    new_base = ''\n    while x > 0:\n        new_base = str(x % base) + new_base\n        x = x // base\n    return new_base", "prompt_tokens": 866, "completion_tokens": 431, "duration": 10.63360595703125}
{"task_id": "HumanEval/45", "is_solved": true, "solved_count": 4, "generated_code": "def triangle_area(base, height):\n    return 0.5 * base * height", "prompt_tokens": 765, "completion_tokens": 390, "duration": 10.330946207046509}
{"task_id": "HumanEval/46", "is_solved": true, "solved_count": 4, "generated_code": "def fib4(n: int):\n    fib = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib.append(fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4])\n    return fib[n]", "prompt_tokens": 1085, "completion_tokens": 508, "duration": 8.746524095535278}
{"task_id": "HumanEval/47", "is_solved": false, "solved_count": 1, "generated_code": "def median(l: list):\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 0:\n        return (sorted_list[n//2 - 1] + sorted_list[n//2]) / 2\n    else:\n        return sorted_list[n//2]", "prompt_tokens": 889, "completion_tokens": 502, "duration": 12.725431442260742}
{"task_id": "HumanEval/48", "is_solved": true, "solved_count": 4, "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 809, "completion_tokens": 382, "duration": 10.372664451599121}
{"task_id": "HumanEval/49", "is_solved": true, "solved_count": 4, "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 893, "completion_tokens": 403, "duration": 10.719236850738525}
{"task_id": "HumanEval/50", "is_solved": false, "solved_count": 3, "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 760, "completion_tokens": 357, "duration": 9.691749572753906}
{"task_id": "HumanEval/51", "is_solved": true, "solved_count": 4, "generated_code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not in vowels)", "prompt_tokens": 866, "completion_tokens": 353, "duration": 7.550929307937622}
{"task_id": "HumanEval/52", "is_solved": true, "solved_count": 4, "generated_code": "def below_threshold(l: list, t: int):\n    for num in l:\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 799, "completion_tokens": 371, "duration": 8.350791454315186}
{"task_id": "HumanEval/53", "is_solved": true, "solved_count": 4, "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 624, "completion_tokens": 233, "duration": 6.819382667541504}
{"task_id": "HumanEval/54", "is_solved": false, "solved_count": 0, "generated_code": "def same_chars(s0: str, s1: str):\n    return collections.Counter(s0) == collections.Counter(s1)", "prompt_tokens": 951, "completion_tokens": 392, "duration": 10.822490453720093}
{"task_id": "HumanEval/55", "is_solved": true, "solved_count": 3, "generated_code": "def fib(n):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 763, "completion_tokens": 389, "duration": 8.651530504226685}
{"task_id": "HumanEval/56", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>' and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0", "prompt_tokens": 844, "completion_tokens": 418, "duration": 9.976042985916138}
{"task_id": "HumanEval/57", "is_solved": true, "solved_count": 3, "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 802, "completion_tokens": 381, "duration": 7.714834690093994}
{"task_id": "HumanEval/58", "is_solved": true, "solved_count": 4, "generated_code": "def common(l1, l2):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 843, "completion_tokens": 335, "duration": 6.199976682662964}
{"task_id": "HumanEval/59", "is_solved": true, "solved_count": 2, "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 910, "completion_tokens": 529, "duration": 11.28786015510559}
{"task_id": "HumanEval/60", "is_solved": true, "solved_count": 4, "generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "prompt_tokens": 879, "completion_tokens": 408, "duration": 8.423563718795776}
{"task_id": "HumanEval/61", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')' and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0", "prompt_tokens": 947, "completion_tokens": 523, "duration": 9.580861806869507}
{"task_id": "HumanEval/62", "is_solved": true, "solved_count": 2, "generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]", "prompt_tokens": 918, "completion_tokens": 419, "duration": 11.027624607086182}
{"task_id": "HumanEval/63", "is_solved": true, "solved_count": 4, "generated_code": "def fibfib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 962, "completion_tokens": 429, "duration": 12.38674283027649}
{"task_id": "HumanEval/64", "is_solved": true, "solved_count": 2, "generated_code": "def vowels_count(s):\n    return sum(1 for char in s if char.lower() in 'aeiouy' or (char.lower() == 'y' and s.index(char) == len(s) - 1))", "prompt_tokens": 838, "completion_tokens": 331, "duration": 9.117200136184692}
{"task_id": "HumanEval/65", "is_solved": false, "solved_count": 3, "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift %= len(x_str)\n    return x_str[-shift:] + x_str[:-shift] if shift else x_str", "prompt_tokens": 793, "completion_tokens": 368, "duration": 7.136574983596802}
{"task_id": "HumanEval/66", "is_solved": true, "solved_count": 4, "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 812, "completion_tokens": 307, "duration": 7.2300028800964355}
{"task_id": "HumanEval/67", "is_solved": true, "solved_count": 4, "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "prompt_tokens": 1056, "completion_tokens": 368, "duration": 7.899172067642212}
{"task_id": "HumanEval/68", "is_solved": true, "solved_count": 4, "generated_code": "def pluck(arr):\n    even_values = [(num, idx) for idx, num in enumerate(arr) if num % 2 == 0]\n    if not even_values:\n        return []\n    min_even = min(even_values, key=lambda x: (x[0], x[1]))\n    return [min_even[0], min_even[1]]", "prompt_tokens": 1346, "completion_tokens": 496, "duration": 11.279111385345459}
{"task_id": "HumanEval/69", "is_solved": false, "solved_count": 3, "generated_code": "def search(lst):\n    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n    for key, value in freq.items():\n        if key > 0 and value >= key:\n            return key\n    return -1", "prompt_tokens": 975, "completion_tokens": 403, "duration": 9.638859987258911}
{"task_id": "HumanEval/70", "is_solved": true, "solved_count": 4, "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 863, "completion_tokens": 354, "duration": 8.508391618728638}
{"task_id": "HumanEval/71", "is_solved": true, "solved_count": 4, "generated_code": "def triangle_area(a, b, c):\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5 if a + b > c and a + c > b and b + c > a else -1\n    return round(area, 2)", "prompt_tokens": 898, "completion_tokens": 436, "duration": 8.566401958465576}
{"task_id": "HumanEval/72", "is_solved": true, "solved_count": 4, "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 1066, "completion_tokens": 329, "duration": 7.406261682510376}
{"task_id": "HumanEval/73", "is_solved": true, "solved_count": 4, "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n    return changes", "prompt_tokens": 1319, "completion_tokens": 755, "duration": 16.31527829170227}
{"task_id": "HumanEval/74", "is_solved": true, "solved_count": 4, "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst2 < total_chars_lst1:\n        return lst2\n    else:\n        return lst1", "prompt_tokens": 1008, "completion_tokens": 405, "duration": 8.06460952758789}
{"task_id": "HumanEval/75", "is_solved": true, "solved_count": 4, "generated_code": "import sympy\n\ndef is_multiply_prime(a):\n    primes = list(sympy.primerange(2, 100))\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            for k in range(j+1, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False", "prompt_tokens": 855, "completion_tokens": 482, "duration": 8.02404522895813}
{"task_id": "HumanEval/76", "is_solved": false, "solved_count": 0, "generated_code": "def is_simple_power(x, n):\n    return x == n ** int(round(math.log(x, n)))", "prompt_tokens": 920, "completion_tokens": 357, "duration": 7.963482856750488}
{"task_id": "HumanEval/77", "is_solved": false, "solved_count": 3, "generated_code": "def iscube(a):\n    cube_root = a ** (1/3)\n    return cube_root.is_integer()", "prompt_tokens": 803, "completion_tokens": 305, "duration": 5.3734400272369385}
{"task_id": "HumanEval/78", "is_solved": true, "solved_count": 4, "generated_code": "def hex_key(num):\n    prime_digits = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count", "prompt_tokens": 1406, "completion_tokens": 563, "duration": 9.343084335327148}
{"task_id": "HumanEval/79", "is_solved": true, "solved_count": 4, "generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'", "prompt_tokens": 902, "completion_tokens": 348, "duration": 7.8539276123046875}
{"task_id": "HumanEval/80", "is_solved": true, "solved_count": 4, "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 1102, "completion_tokens": 631, "duration": 13.315129518508911}
{"task_id": "HumanEval/81", "is_solved": false, "solved_count": 1, "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1193, "completion_tokens": 594, "duration": 14.196479082107544}
{"task_id": "HumanEval/82", "is_solved": true, "solved_count": 4, "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    return is_prime(len(string))", "prompt_tokens": 821, "completion_tokens": 423, "duration": 10.363203287124634}
{"task_id": "HumanEval/83", "is_solved": true, "solved_count": 0, "generated_code": "def starts_one_ends(n):\n    return 2 * 9 * 10**(n-1)", "prompt_tokens": 740, "completion_tokens": 372, "duration": 8.60168170928955}
{"task_id": "HumanEval/84", "is_solved": true, "solved_count": 3, "generated_code": "def solve(N):\n    total_sum = sum(int(digit) for digit in str(N))\n    return bin(total_sum)[2:]", "prompt_tokens": 1068, "completion_tokens": 528, "duration": 11.665091037750244}
{"task_id": "HumanEval/85", "is_solved": false, "solved_count": 2, "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 658, "completion_tokens": 281, "duration": 6.059655666351318}
{"task_id": "HumanEval/86", "is_solved": true, "solved_count": 2, "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)", "prompt_tokens": 985, "completion_tokens": 459, "duration": 10.573947191238403}
{"task_id": "HumanEval/87", "is_solved": true, "solved_count": 3, "generated_code": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates", "prompt_tokens": 1125, "completion_tokens": 370, "duration": 7.973229885101318}
{"task_id": "HumanEval/88", "is_solved": false, "solved_count": 3, "generated_code": "def sort_array(array):\n    sorted_array = array.copy()\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        sorted_array.sort(reverse=True)\n    else:\n        sorted_array.sort()\n    return sorted_array", "prompt_tokens": 1182, "completion_tokens": 523, "duration": 8.88573408126831}
{"task_id": "HumanEval/89", "is_solved": true, "solved_count": 4, "generated_code": "def encrypt(s):\n    return ''.join(chr((ord(char) - 97 + 2 * 2) % 26 + 97) for char in s)", "prompt_tokens": 840, "completion_tokens": 354, "duration": 9.993642568588257}
{"task_id": "HumanEval/90", "is_solved": true, "solved_count": 4, "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "prompt_tokens": 856, "completion_tokens": 355, "duration": 7.790817022323608}
{"task_id": "HumanEval/91", "is_solved": false, "solved_count": 1, "generated_code": "def is_bored(S):\n    return sum(1 for sentence in S.split('.') + S.split('?') + S.split('!') if sentence.strip().startswith('I'))\n\n# Test cases\nprint(is_bored(\"Hello world\"))  # 0\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))  # 1", "prompt_tokens": 794, "completion_tokens": 357, "duration": 8.135582685470581}
{"task_id": "HumanEval/92", "is_solved": true, "solved_count": 4, "generated_code": "def any_int(x, y, z):\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and (x == y + z or y == x + z or z == x + y)", "prompt_tokens": 905, "completion_tokens": 382, "duration": 8.347835063934326}
{"task_id": "HumanEval/93", "is_solved": true, "solved_count": 2, "generated_code": "def encode(message):\n    encoded_message = ''\n    vowels = 'aeiou'\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr((ord(char.lower()) + 2 - ord('a')) % 26 + ord('a')).upper()\n            else:\n                if char.isupper():\n                    encoded_message += char.lower()\n                else:\n                    encoded_message += char.upper()\n        else:\n            encoded_message += char\n    return encoded_message", "prompt_tokens": 941, "completion_tokens": 526, "duration": 9.589114427566528}
{"task_id": "HumanEval/94", "is_solved": false, "solved_count": 0, "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    largest_prime_sum = 0\n    for num in lst:\n        if is_prime(num):\n            digit_sum = sum_of_digits(num)\n            if digit_sum > largest_prime_sum:\n                largest_prime_sum = digit_sum\n\n    return largest_prime_sum", "prompt_tokens": 1300, "completion_tokens": 558, "duration": 9.324633836746216}
{"task_id": "HumanEval/95", "is_solved": false, "solved_count": 3, "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = dict.keys()\n    return all(k.islower() for k in keys) or all(k.isupper() for k in keys)", "prompt_tokens": 945, "completion_tokens": 350, "duration": 7.380705118179321}
{"task_id": "HumanEval/96", "is_solved": true, "solved_count": 4, "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes", "prompt_tokens": 1024, "completion_tokens": 521, "duration": 10.654978275299072}
{"task_id": "HumanEval/97", "is_solved": true, "solved_count": 4, "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 818, "completion_tokens": 346, "duration": 7.8421595096588135}
{"task_id": "HumanEval/98", "is_solved": true, "solved_count": 3, "generated_code": "def count_upper(s):\n    return sum(1 for i, char in enumerate(s) if i % 2 == 0 and char in 'AEIOU')", "prompt_tokens": 726, "completion_tokens": 315, "duration": 5.721299886703491}
{"task_id": "HumanEval/99", "is_solved": true, "solved_count": 4, "generated_code": "def closest_integer(value):\n    num = float(value)\n    return int(num + 0.5) if num > 0 else int(num - 0.5)", "prompt_tokens": 936, "completion_tokens": 358, "duration": 6.803545951843262}
{"task_id": "HumanEval/100", "is_solved": false, "solved_count": 3, "generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            stones.append(stones[-1] + 2)\n        else:\n            stones.append(stones[-1] + 1)\n    return stones", "prompt_tokens": 890, "completion_tokens": 389, "duration": 8.871028661727905}
{"task_id": "HumanEval/101", "is_solved": false, "solved_count": 0, "generated_code": "def words_string(s):\n    return re.split(r'[,\\s]+', s)", "prompt_tokens": 815, "completion_tokens": 299, "duration": 6.559561491012573}
{"task_id": "HumanEval/102", "is_solved": true, "solved_count": 4, "generated_code": "def choose_num(x, y):\n    largest_even = -1\n    for num in range(x, y+1):\n        if num % 2 == 0 and num > largest_even:\n            largest_even = num\n    return largest_even", "prompt_tokens": 886, "completion_tokens": 448, "duration": 9.306390762329102}
{"task_id": "HumanEval/103", "is_solved": true, "solved_count": 3, "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m - n + 1))\n    return bin(avg)", "prompt_tokens": 880, "completion_tokens": 343, "duration": 10.969927787780762}
{"task_id": "HumanEval/104", "is_solved": true, "solved_count": 2, "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 800, "completion_tokens": 328, "duration": 5.999035120010376}
{"task_id": "HumanEval/105", "is_solved": true, "solved_count": 3, "generated_code": "def by_length(arr):\n    digit_names = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    filtered_arr = [x for x in arr if 1 <= x <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    result = [digit_names[num] for num in reversed_arr]\n    return result", "prompt_tokens": 1153, "completion_tokens": 417, "duration": 10.177618026733398}
{"task_id": "HumanEval/106", "is_solved": true, "solved_count": 4, "generated_code": "def f(n):\n    def factorial(num):\n        if num == 0:\n            return 1\n        return num * factorial(num - 1)\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(i * (i + 1) // 2)\n    return result", "prompt_tokens": 878, "completion_tokens": 416, "duration": 9.483479022979736}
{"task_id": "HumanEval/107", "is_solved": true, "solved_count": 2, "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = sum(1 for num in range(1, n+1) if is_palindrome(num) and num % 2 == 0)\n    odd_count = sum(1 for num in range(1, n+1) if is_palindrome(num) and num % 2 != 0)\n\n    return (even_count, odd_count)", "prompt_tokens": 1091, "completion_tokens": 469, "duration": 8.736329555511475}
{"task_id": "HumanEval/108", "is_solved": false, "solved_count": 3, "generated_code": "def count_nums(arr):\n    def sum_of_digits(num):\n        return sum(int(d) for d in str(abs(num)))\n\n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "prompt_tokens": 905, "completion_tokens": 400, "duration": 6.968115329742432}
{"task_id": "HumanEval/109", "is_solved": true, "solved_count": 4, "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    n = len(arr)\n    for i in range(n):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "prompt_tokens": 1344, "completion_tokens": 508, "duration": 8.3565034866333}
{"task_id": "HumanEval/110", "is_solved": false, "solved_count": 2, "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(1 for num in lst1 if num % 2 != 0) <= len(lst2) else \"NO\"", "prompt_tokens": 975, "completion_tokens": 320, "duration": 5.9355385303497314}
{"task_id": "HumanEval/111", "is_solved": true, "solved_count": 4, "generated_code": "def histogram(test):\n    hist = {}\n    for char in test.split():\n        hist[char] = hist.get(char, 0) + 1\n    max_count = max(hist.values(), default=0)\n    return {char: count for char, count in hist.items() if count == max_count}", "prompt_tokens": 988, "completion_tokens": 448, "duration": 7.984330415725708}
{"task_id": "HumanEval/112", "is_solved": true, "solved_count": 3, "generated_code": "def reverse_delete(s, c):\n    result = ''.join(char for char in s if char not in c)\n    return result, result == result[::-1]", "prompt_tokens": 1397, "completion_tokens": 534, "duration": 9.253270864486694}
{"task_id": "HumanEval/113", "is_solved": false, "solved_count": 0, "generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(d) % 2 != 0 for d in s)}n the str{s}ng {s} of the {s}nput.\" for s in lst]", "prompt_tokens": 922, "completion_tokens": 328, "duration": 6.573719024658203}
{"task_id": "HumanEval/114", "is_solved": true, "solved_count": 3, "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 977, "completion_tokens": 556, "duration": 11.131899118423462}
{"task_id": "HumanEval/115", "is_solved": false, "solved_count": 2, "generated_code": "def max_fill(grid, capacity):\n    import math\n    total_times = 0\n    for row in grid:\n        for well in row:\n            total_times += math.ceil(well / capacity)\n    return total_times", "prompt_tokens": 1580, "completion_tokens": 679, "duration": 11.301971673965454}
{"task_id": "HumanEval/116", "is_solved": false, "solved_count": 0, "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 968, "completion_tokens": 351, "duration": 6.310322999954224}
{"task_id": "HumanEval/117", "is_solved": true, "solved_count": 4, "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n        return sum(1 for char in word if char in consonants)\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "prompt_tokens": 1000, "completion_tokens": 415, "duration": 8.084863662719727}
{"task_id": "HumanEval/118", "is_solved": true, "solved_count": 4, "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "prompt_tokens": 931, "completion_tokens": 426, "duration": 8.009916543960571}
{"task_id": "HumanEval/119", "is_solved": true, "solved_count": 2, "generated_code": "def match_parens(lst):\n    s = ''.join(lst)\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    for char in s:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if not stack or mapping[char] != stack.pop():\n                return 'No'\n    return 'Yes' if not stack else 'No'", "prompt_tokens": 1473, "completion_tokens": 924, "duration": 19.46824598312378}
{"task_id": "HumanEval/120", "is_solved": false, "solved_count": 1, "generated_code": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]", "prompt_tokens": 1062, "completion_tokens": 345, "duration": 6.175166606903076}
{"task_id": "HumanEval/121", "is_solved": false, "solved_count": 0, "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 1011, "completion_tokens": 546, "duration": 9.81793475151062}
{"task_id": "HumanEval/122", "is_solved": false, "solved_count": 3, "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= abs(num) < 100)", "prompt_tokens": 915, "completion_tokens": 387, "duration": 6.503239631652832}
{"task_id": "HumanEval/123", "is_solved": false, "solved_count": 1, "generated_code": "def get_odd_collatz(n):\n    odd_numbers = []\n    while n != 1:\n        if n % 2 == 1:\n            odd_numbers.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    odd_numbers.append(1)\n    return sorted(odd_numbers)", "prompt_tokens": 1241, "completion_tokens": 559, "duration": 11.570687294006348}
{"task_id": "HumanEval/124", "is_solved": true, "solved_count": 4, "generated_code": "def valid_date(date):\n    if not date:\n        return False\n    \n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    month, day, year = parts\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    \n    return True", "prompt_tokens": 1182, "completion_tokens": 553, "duration": 9.599982500076294}
{"task_id": "HumanEval/125", "is_solved": false, "solved_count": 2, "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "prompt_tokens": 930, "completion_tokens": 405, "duration": 10.319908857345581}
{"task_id": "HumanEval/126", "is_solved": false, "solved_count": 3, "generated_code": "def is_sorted(lst):\n    return all(lst[i] < lst[i+1] for i in range(len(lst)-1) if lst.count(lst[i]) <= 1)", "prompt_tokens": 1142, "completion_tokens": 379, "duration": 8.275623321533203}
{"task_id": "HumanEval/127", "is_solved": false, "solved_count": 2, "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        length = end - start + 1\n        if is_prime(length):\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n\nimport math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 1300, "completion_tokens": 623, "duration": 12.391801118850708}
{"task_id": "HumanEval/128", "is_solved": false, "solved_count": 1, "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product_sign = 1\n    sum_magnitudes = 0\n    for num in arr:\n        if num > 0:\n            sum_magnitudes += num\n        elif num < 0:\n            product_sign *= -1\n            sum_magnitudes += abs(num)\n    return product_sign * sum_magnitudes", "prompt_tokens": 1164, "completion_tokens": 704, "duration": 14.657573223114014}
{"task_id": "HumanEval/129", "is_solved": true, "solved_count": 2, "generated_code": "def minPath(grid, k):\n    n = len(grid)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\n    def dfs(x, y, path):\n        if len(path) == k:\n            return path\n        min_path = None\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n:\n                new_path = dfs(nx, ny, path + [grid[nx][ny]])\n                if new_path and (not min_path or new_path < min_path):\n                    min_path = new_path\n        return min_path\n\n    start_values = [(grid[i][j], i, j) for i in range(n) for j in range(n)]\n    start_values.sort()\n    for _, x, y in start_values:\n        path = dfs(x, y, [grid[x][y]])\n        if path:\n            return path", "prompt_tokens": 1993, "completion_tokens": 1113, "duration": 21.820592403411865}
{"task_id": "HumanEval/130", "is_solved": false, "solved_count": 0, "generated_code": "def tri(n):\n    tribonacci = [0, 1, 1]\n    for i in range(3, n+1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            tribonacci.append(tribonacci[i-1] + tribonacci[i-2] + tribonacci[i+1])\n    return tribonacci[:n+1]", "prompt_tokens": 1168, "completion_tokens": 485, "duration": 8.205457925796509}
{"task_id": "HumanEval/131", "is_solved": true, "solved_count": 4, "generated_code": "def digits(n):\n    product = 1\n    has_odd_digit = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd_digit = True\n        n //= 10\n    return product if has_odd_digit else 0", "prompt_tokens": 806, "completion_tokens": 434, "duration": 8.016993999481201}
{"task_id": "HumanEval/132", "is_solved": false, "solved_count": 1, "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack and stack[-1] == '[':\n            stack.pop()\n    return len(stack) < len(string) // 2", "prompt_tokens": 1093, "completion_tokens": 585, "duration": 12.699517011642456}
{"task_id": "HumanEval/133", "is_solved": true, "solved_count": 3, "generated_code": "def sum_squares(lst):\n    total = 0\n    for num in lst:\n        total += (int(num) + (num % 1 > 0)) ** 2\n    return total", "prompt_tokens": 1150, "completion_tokens": 573, "duration": 15.739877462387085}
{"task_id": "HumanEval/134", "is_solved": true, "solved_count": 4, "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt and txt[-1].isalpha() and (len(txt) == 1 or not txt[-2].isalpha()):\n        return True\n    return False", "prompt_tokens": 860, "completion_tokens": 331, "duration": 7.914090156555176}
{"task_id": "HumanEval/135", "is_solved": false, "solved_count": 1, "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i - 1\n    return largest_index", "prompt_tokens": 852, "completion_tokens": 394, "duration": 8.98167896270752}
{"task_id": "HumanEval/136", "is_solved": true, "solved_count": 4, "generated_code": "def largest_smallest_integers(lst):\n    neg_max = None\n    pos_min = None\n    for num in lst:\n        if num < 0 and (neg_max is None or num > neg_max):\n            neg_max = num\n        elif num > 0 and (pos_min is None or num < pos_min):\n            pos_min = num\n    return (neg_max, pos_min)", "prompt_tokens": 863, "completion_tokens": 369, "duration": 7.2320802211761475}
{"task_id": "HumanEval/137", "is_solved": false, "solved_count": 2, "generated_code": "def compare_one(a, b):\n    if a == b:\n        return None\n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        return max(a, b)\n    if isinstance(a, str) and isinstance(b, str):\n        a_float = float(a.replace(',', '.')) if ',' in a else float(a)\n        b_float = float(b.replace(',', '.')) if ',' in b else float(b)\n        return str(max(a_float, b_float))\n    return None", "prompt_tokens": 933, "completion_tokens": 456, "duration": 11.748527765274048}
{"task_id": "HumanEval/138", "is_solved": false, "solved_count": 3, "generated_code": "def is_equal_to_sum_even(n):\n    for i in range(1, n//2 + 1):\n        for j in range(i, n//2 + 1):\n            for k in range(j, n//2 + 1):\n                if 2*i + 2*j + 2*k == n:\n                    return True\n    return False", "prompt_tokens": 809, "completion_tokens": 429, "duration": 9.628288984298706}
{"task_id": "HumanEval/139", "is_solved": false, "solved_count": 1, "generated_code": "def special_factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return factorial(n) * special_factorial(n-1)", "prompt_tokens": 865, "completion_tokens": 408, "duration": 7.519988059997559}
{"task_id": "HumanEval/140", "is_solved": false, "solved_count": 2, "generated_code": "def fix_spaces(text):\n    result = ''\n    consecutive_spaces = 0\n    for char in text:\n        if char == ' ':\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result = result[:-2] + '-'\n        else:\n            if consecutive_spaces > 2:\n                result += '-'\n            elif consecutive_spaces > 0:\n                result += '_'\n            result += char\n            consecutive_spaces = 0\n    if consecutive_spaces > 2:\n        result = result[:-2] + '-'\n    elif consecutive_spaces > 0:\n        result += '_'\n    return result", "prompt_tokens": 828, "completion_tokens": 445, "duration": 11.662044763565063}
{"task_id": "HumanEval/141", "is_solved": true, "solved_count": 4, "generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not name or not name[0].isalpha() or len([c for c in name if c.isdigit()]) > 3:\n        return 'No'\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 1057, "completion_tokens": 418, "duration": 9.299625635147095}
{"task_id": "HumanEval/142", "is_solved": false, "solved_count": 2, "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n    return total", "prompt_tokens": 1105, "completion_tokens": 528, "duration": 9.367820262908936}
{"task_id": "HumanEval/143", "is_solved": false, "solved_count": 2, "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def get_primes_up_to(n):\n        primes = []\n        for i in range(2, n + 1):\n            if is_prime(i):\n                primes.append(i)\n        return primes\n\n    primes = get_primes_up_to(100)\n\n    result = []\n    for word in sentence.split():\n        if len(word) in primes:\n            result.append(word)\n\n    return ' '.join(result)", "prompt_tokens": 978, "completion_tokens": 526, "duration": 11.075408935546875}
{"task_id": "HumanEval/144", "is_solved": true, "solved_count": 2, "generated_code": "def simplify(x, n):\n    num1, denom1 = map(int, x.split('/'))\n    num2, denom2 = map(int, n.split('/'))\n    \n    result_num = num1 * num2\n    result_denom = denom1 * denom2\n    \n    return result_num % result_denom == 0", "prompt_tokens": 1051, "completion_tokens": 508, "duration": 10.455262660980225}
{"task_id": "HumanEval/145", "is_solved": false, "solved_count": 3, "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))", "prompt_tokens": 846, "completion_tokens": 342, "duration": 6.589550018310547}
{"task_id": "HumanEval/146", "is_solved": true, "solved_count": 4, "generated_code": "def specialFilter(nums):\n    return sum(1 for num in nums if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9'])", "prompt_tokens": 825, "completion_tokens": 349, "duration": 8.177612781524658}
{"task_id": "HumanEval/147", "is_solved": true, "solved_count": 1, "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 991, "completion_tokens": 455, "duration": 10.248192310333252}
{"task_id": "HumanEval/148", "is_solved": true, "solved_count": 4, "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = min(planets.index(planet1), planets.index(planet2))\n    end = max(planets.index(planet1), planets.index(planet2))\n    return tuple(sorted(planets[start+1:end], key=lambda x: planets.index(x)))\n\n# Test cases\nprint(bf(\"Jupiter\", \"Neptune\"))  # (\"Saturn\", \"Uranus\")\nprint(bf(\"Earth\", \"Mercury\"))  # (\"Venus\")\nprint(bf(\"Mercury\", \"Uranus\"))  # (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")", "prompt_tokens": 1045, "completion_tokens": 511, "duration": 11.029850482940674}
{"task_id": "HumanEval/149", "is_solved": false, "solved_count": 3, "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "prompt_tokens": 1161, "completion_tokens": 522, "duration": 11.579598903656006}
{"task_id": "HumanEval/150", "is_solved": true, "solved_count": 4, "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 893, "completion_tokens": 500, "duration": 10.051666498184204}
{"task_id": "HumanEval/151", "is_solved": true, "solved_count": 4, "generated_code": "def double_the_difference(lst):\n    return sum(num**2 for num in lst if num > 0 and num % 2 != 0)", "prompt_tokens": 874, "completion_tokens": 329, "duration": 8.64552903175354}
{"task_id": "HumanEval/152", "is_solved": true, "solved_count": 2, "generated_code": "def compare(game, guess):\n    return [abs(s - g) if s != g else 0 for s, g in zip(game, guess)]", "prompt_tokens": 1085, "completion_tokens": 355, "duration": 8.319815397262573}
{"task_id": "HumanEval/153", "is_solved": true, "solved_count": 1, "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        return CAP - SM\n\n    strongest = max(extensions, key=lambda x: (strength(x), extensions.index(x)))\n    return f\"{class_name}.{strongest}\"", "prompt_tokens": 1216, "completion_tokens": 441, "duration": 9.67342472076416}
{"task_id": "HumanEval/154", "is_solved": true, "solved_count": 3, "generated_code": "def cycpattern_check(a, b):\n    return b in (a + a)", "prompt_tokens": 885, "completion_tokens": 343, "duration": 6.290557384490967}
{"task_id": "HumanEval/155", "is_solved": false, "solved_count": 0, "generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    while num != 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return even_count, odd_count", "prompt_tokens": 777, "completion_tokens": 422, "duration": 10.069187641143799}
{"task_id": "HumanEval/156", "is_solved": true, "solved_count": 4, "generated_code": "def int_to_mini_roman(number):\n    roman_dict = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'}\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    result = ''\n    for val in values:\n        while number >= val:\n            result += roman_dict[val]\n            number -= val\n    return result", "prompt_tokens": 1011, "completion_tokens": 674, "duration": 15.284474849700928}
{"task_id": "HumanEval/157", "is_solved": true, "solved_count": 4, "generated_code": "def right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 896, "completion_tokens": 423, "duration": 8.948212623596191}
{"task_id": "HumanEval/158", "is_solved": true, "solved_count": 1, "generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n\n    max_unique_chars = 0\n    max_word = ''\n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = unique_chars\n            max_word = word\n\n    return max_word", "prompt_tokens": 975, "completion_tokens": 521, "duration": 10.87714433670044}
{"task_id": "HumanEval/159", "is_solved": false, "solved_count": 3, "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + need\n    remaining_carrots = max(0, remaining - need)\n    return [total_eaten, remaining_carrots]", "prompt_tokens": 1116, "completion_tokens": 302, "duration": 5.713716745376587}
{"task_id": "HumanEval/160", "is_solved": false, "solved_count": 0, "generated_code": "def do_algebra(operators, operands):\n    result = operands[0]\n    for i in range(1, len(operands)):\n        if operators[i-1] == '+':\n            result += operands[i]\n        elif operators[i-1] == '-':\n            result -= operands[i]\n        elif operators[i-1] == '*':\n            result *= operands[i]\n        elif operators[i-1] == '//':\n            result //= operands[i]\n        elif operators[i-1] == '**':\n            result **= operands[i]\n    return result", "prompt_tokens": 1089, "completion_tokens": 487, "duration": 10.10019326210022}
{"task_id": "HumanEval/161", "is_solved": false, "solved_count": 2, "generated_code": "def solve(s):\n    return ''.join(c.lower() if c.isupper() else c.upper() if c.islower() else c for c in s)[::-1] if any(char.isalpha() for char in s) else s[::-1]", "prompt_tokens": 823, "completion_tokens": 359, "duration": 8.24247121810913}
{"task_id": "HumanEval/162", "is_solved": true, "solved_count": 2, "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    md5_hash = hashlib.md5()\n    md5_hash.update(text.encode())\n    return md5_hash.hexdigest()", "prompt_tokens": 817, "completion_tokens": 408, "duration": 7.536708116531372}
{"task_id": "HumanEval/163", "is_solved": false, "solved_count": 1, "generated_code": "def generate_integers(a, b):\n    return [x for x in range(a, b+1) if x % 2 == 0]", "prompt_tokens": 859, "completion_tokens": 381, "duration": 8.660331726074219}
