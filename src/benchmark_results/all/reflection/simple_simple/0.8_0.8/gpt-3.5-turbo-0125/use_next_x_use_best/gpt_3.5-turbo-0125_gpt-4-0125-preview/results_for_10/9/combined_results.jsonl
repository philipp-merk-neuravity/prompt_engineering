{"generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 61, "duration": 3.7879819869995117, "task_id": "HumanEval/0"}
{"generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    temp = ''\n    for char in paren_string:\n        if char == '(':\n            stack.append('(')\n            temp += '('\n        elif char == ')':\n            stack.pop()\n            temp += ')'\n            if not stack:\n                result.append(temp)\n                temp = ''\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 165, "completion_tokens": 86, "duration": 4.6310436725616455, "task_id": "HumanEval/1"}
{"generated_code": "def below_zero(operations):\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 37, "duration": 3.4491524696350098, "task_id": "HumanEval/3"}
{"generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 49, "duration": 3.9055840969085693, "task_id": "HumanEval/4"}
{"generated_code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 56, "duration": 3.8390955924987793, "task_id": "HumanEval/5"}
{"generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                if depth > max_depth:\n                    max_depth = depth\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 97, "duration": 4.703549146652222, "task_id": "HumanEval/6"}
{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        return sum(numbers), 1 if 0 in numbers else eval('*'.join(map(str, numbers)))\n\n# Test cases\nprint(sum_product([]))  # (0, 1)\nprint(sum_product([1, 2, 3, 4]))  # (10, 24)", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 103, "duration": 4.0435051918029785, "task_id": "HumanEval/8"}
{"generated_code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    maximum = float('-inf')\n    for num in numbers:\n        maximum = max(maximum, num)\n        result.append(maximum)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 150, "completion_tokens": 54, "duration": 3.7376515865325928, "task_id": "HumanEval/9"}
{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 41, "duration": 3.579258441925049, "task_id": "HumanEval/11"}
{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 42, "duration": 3.5393548011779785, "task_id": "HumanEval/13"}
{"generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 32, "duration": 3.6700150966644287, "task_id": "HumanEval/14"}
{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 27, "duration": 3.5287091732025146, "task_id": "HumanEval/15"}
{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 3.326807737350464, "task_id": "HumanEval/16"}
{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 74, "duration": 3.952439308166504, "task_id": "HumanEval/18"}
{"generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_map[x])\n    return ' '.join(sorted_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 103, "duration": 4.493385076522827, "task_id": "HumanEval/19"}
{"generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 53, "duration": 3.686016082763672, "task_id": "HumanEval/21"}
{"generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 31, "duration": 3.3969316482543945, "task_id": "HumanEval/22"}
{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 3.471254587173462, "task_id": "HumanEval/23"}
{"generated_code": "def largest_divisor(n: int) -> int:\n    return max([i for i in range(1, n) if n % i == 0])", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 37, "duration": 3.5331480503082275, "task_id": "HumanEval/24"}
{"generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 70, "duration": 4.299970865249634, "task_id": "HumanEval/25"}
{"generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 38, "duration": 3.51297664642334, "task_id": "HumanEval/26"}
{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 36, "duration": 3.3321757316589355, "task_id": "HumanEval/27"}
{"generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 20, "duration": 3.289001703262329, "task_id": "HumanEval/28"}
{"generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 34, "duration": 3.4382829666137695, "task_id": "HumanEval/29"}
{"generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 25, "duration": 3.446502208709717, "task_id": "HumanEval/30"}
{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 57, "duration": 3.4670627117156982, "task_id": "HumanEval/31"}
{"generated_code": "def sort_third(l: list):\n    sorted_indices = sorted([i for i in range(len(l)) if i % 3 == 0], key=lambda x: l[x])\n    sorted_values = [l[i] for i in sorted_indices]\n    result = l.copy()\n    for i, v in zip(sorted_indices, sorted_values):\n        result[i] = v\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 200, "completion_tokens": 85, "duration": 4.414771556854248, "task_id": "HumanEval/33"}
{"generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 17, "duration": 3.2383384704589844, "task_id": "HumanEval/34"}
{"generated_code": "def max_element(l: list):\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 16, "duration": 3.126251459121704, "task_id": "HumanEval/35"}
{"generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iteration": 0, "prompt_tokens": 208, "completion_tokens": 162, "duration": 4.739898920059204, "task_id": "HumanEval/38"}
{"generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 1:\n            return n\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    i = 0\n    while count < n:\n        i += 1\n        num = fibonacci(i)\n        if is_prime(num):\n            count += 1\n    return num", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 163, "duration": 4.843162536621094, "task_id": "HumanEval/39"}
{"generated_code": "def triples_sum_to_zero(l: list):\n    return any(sum((x, y, z)) == 0 for x in l for y in l for z in l if x != y != z)", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 46, "duration": 5.7354347705841064, "task_id": "HumanEval/40"}
{"generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 23, "duration": 5.429662704467773, "task_id": "HumanEval/42"}
{"generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 42, "duration": 4.737221002578735, "task_id": "HumanEval/43"}
{"generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 17, "duration": 6.2418904304504395, "task_id": "HumanEval/45"}
{"generated_code": "def fib4(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    fib_list = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib_list.append(fib_list[-1] + fib_list[-2] + fib_list[-3] + fib_list[-4])\n    \n    return fib_list[-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 116, "duration": 5.7989301681518555, "task_id": "HumanEval/46"}
{"generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 20, "duration": 4.236940145492554, "task_id": "HumanEval/48"}
{"generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 25, "duration": 5.464749574661255, "task_id": "HumanEval/49"}
{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in ['a', 'e', 'i', 'o', 'u']])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 42, "duration": 5.764646291732788, "task_id": "HumanEval/51"}
{"generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 26, "duration": 4.350031137466431, "task_id": "HumanEval/52"}
{"generated_code": "def add(x: int, y: int):\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 20, "duration": 5.648186683654785, "task_id": "HumanEval/53"}
{"generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 38, "duration": 6.5305821895599365, "task_id": "HumanEval/55"}
{"generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 64, "duration": 5.029238224029541, "task_id": "HumanEval/56"}
{"generated_code": "def change_base(x: int, base: int):\n    return str(base_convert(x, base))\n\ndef base_convert(number, base):\n    if number < base:\n        return str(number)\n    else:\n        return base_convert(number // base, base) + str(number % base)", "is_solved": true, "iteration": 2, "prompt_tokens": 1512, "completion_tokens": 237, "duration": 8.851001739501953, "task_id": "HumanEval/44"}
{"generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_len = max(len(s) for s in strings)\n    return next(s for s in strings if len(s) == max_len)", "is_solved": true, "iteration": 3, "prompt_tokens": 2047, "completion_tokens": 346, "duration": 10.697453498840332, "task_id": "HumanEval/12"}
{"generated_code": "def sort_even(l: list):\n    even_values = sorted([x for x in l[::2]])\n    result = [val if idx % 2 != 0 else even_values.pop(0) for idx, val in enumerate(l)]\n    return result", "is_solved": true, "iteration": 5, "prompt_tokens": 3868, "completion_tokens": 662, "duration": 15.443662405014038, "task_id": "HumanEval/37"}
{"generated_code": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)", "is_solved": true, "iteration": 6, "prompt_tokens": 4541, "completion_tokens": 680, "duration": 19.48698139190674, "task_id": "HumanEval/54"}
{"generated_code": "def car_race_collision(n: int):\n    return n", "is_solved": true, "iteration": 8, "prompt_tokens": 5640, "completion_tokens": 605, "duration": 19.434858798980713, "task_id": "HumanEval/41"}
{"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": false, "iteration": 8, "prompt_tokens": 5002, "completion_tokens": 569, "duration": 16.77274203300476, "task_id": "HumanEval/2"}
{"generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "is_solved": false, "iteration": 8, "prompt_tokens": 6018, "completion_tokens": 794, "duration": 21.715964794158936, "task_id": "HumanEval/7"}
{"generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "is_solved": false, "iteration": 8, "prompt_tokens": 5561, "completion_tokens": 1091, "duration": 22.22776961326599, "task_id": "HumanEval/47"}
{"generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": false, "iteration": 8, "prompt_tokens": 5911, "completion_tokens": 968, "duration": 26.205339431762695, "task_id": "HumanEval/50"}
{"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "is_solved": false, "iteration": 8, "prompt_tokens": 5477, "completion_tokens": 1140, "duration": 25.10192608833313, "task_id": "HumanEval/36"}
{"generated_code": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    return [durations[note] for note in notes]", "is_solved": false, "iteration": 8, "prompt_tokens": 9653, "completion_tokens": 1217, "duration": 28.252462148666382, "task_id": "HumanEval/17"}
{"generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    \n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    \n    return closest_pair", "is_solved": false, "iteration": 8, "prompt_tokens": 9574, "completion_tokens": 1506, "duration": 33.370965242385864, "task_id": "HumanEval/20"}
{"generated_code": "def make_palindrome(string: str) -> str:\n    def is_palindrome(s):\n        return s == s[::-1]\n    \n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    \n    return string + string[:-1][::-1]", "is_solved": true, "iteration": 8, "prompt_tokens": 6225, "completion_tokens": 1187, "duration": 71.54438257217407, "task_id": "HumanEval/10"}
{"generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 94, "completion_tokens": 64, "duration": 1.0854251384735107, "task_id": "HumanEval/83"}
{"generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 54, "duration": 5.898924827575684, "task_id": "HumanEval/57"}
{"generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 29, "duration": 4.415369749069214, "task_id": "HumanEval/58"}
{"generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 50, "duration": 4.908264875411987, "task_id": "HumanEval/59"}
{"generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 22, "duration": 4.242558002471924, "task_id": "HumanEval/60"}
{"generated_code": "def correct_bracketing(brackets: str):\n    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 68, "duration": 6.116909980773926, "task_id": "HumanEval/61"}
{"generated_code": "def derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 28, "duration": 3.1749978065490723, "task_id": "HumanEval/62"}
{"generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 72, "duration": 5.622449636459351, "task_id": "HumanEval/63"}
{"generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 5.672107219696045, "task_id": "HumanEval/66"}
{"generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 37, "duration": 5.641664266586304, "task_id": "HumanEval/67"}
{"generated_code": "def pluck(arr):\n    evens = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens, key=lambda x: (x[0], x[1]))\n    return [min_even[0], min_even[1]]", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 78, "duration": 5.097854852676392, "task_id": "HumanEval/68"}
{"generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 44, "duration": 5.86173415184021, "task_id": "HumanEval/70"}
{"generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 92, "duration": 6.1586079597473145, "task_id": "HumanEval/71"}
{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 5.8480916023254395, "task_id": "HumanEval/72"}
{"generated_code": "def smallest_change(arr):\n    length = len(arr)\n    changes = 0\n    for i in range(length // 2):\n        if arr[i] != arr[length - i - 1]:\n            changes += 1\n    return changes", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 55, "duration": 1.1043100357055664, "task_id": "HumanEval/73"}
{"generated_code": "def total_match(lst1, lst2):\n    sum1 = sum(len(x) for x in lst1)\n    sum2 = sum(len(x) for x in lst2)\n    \n    if sum1 < sum2:\n        return lst1\n    else:\n        return lst2", "is_solved": true, "iteration": 0, "prompt_tokens": 243, "completion_tokens": 63, "duration": 6.388736724853516, "task_id": "HumanEval/74"}
{"generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or (n != 1 and x % n == 0 and is_simple_power(x // n, n)))", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 52, "duration": 4.641237735748291, "task_id": "HumanEval/76"}
{"generated_code": "def hex_key(num):\n    prime_digits = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 60, "duration": 3.5844950675964355, "task_id": "HumanEval/78"}
{"generated_code": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal)[2:] + 'db'", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 25, "duration": 4.3092145919799805, "task_id": "HumanEval/79"}
{"generated_code": "def is_happy(s):\n    return all(s[i] != s[i+1] != s[i+2] for i in range(len(s)-2)) if len(s) >= 3 else False", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 47, "duration": 1.0319738388061523, "task_id": "HumanEval/80"}
{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 70, "duration": 3.4724762439727783, "task_id": "HumanEval/82"}
{"generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 21, "duration": 4.153321743011475, "task_id": "HumanEval/84"}
{"generated_code": "def anti_shuffle(s):\n    words = s.split()\n    result = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        result.append(ordered_word)\n    return ' '.join(result)", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 48, "duration": 4.981414556503296, "task_id": "HumanEval/86"}
{"generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 68, "duration": 4.027481555938721, "task_id": "HumanEval/87"}
{"generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            base = ord('a') if char.islower() else ord('A')\n            result += chr((ord(char) - base + 2 * 2) % 26 + base)\n        else:\n            result += char\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 76, "duration": 3.5757226943969727, "task_id": "HumanEval/89"}
{"generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 52, "duration": 4.791964769363403, "task_id": "HumanEval/90"}
{"generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences if sentence]\n    \n    count = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0] == \"I\":\n            count += 1\n    \n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 71, "duration": 3.5930309295654297, "task_id": "HumanEval/91"}
{"generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 54, "duration": 4.871682405471802, "task_id": "HumanEval/92"}
{"generated_code": "def encode(message):\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                result += chr((ord(char)+2 - ord('a')) % 26 + ord('A'))\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 159, "completion_tokens": 78, "duration": 3.3758485317230225, "task_id": "HumanEval/93"}
{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 87, "duration": 3.5806374549865723, "task_id": "HumanEval/96"}
{"generated_code": "def multiply(a, b):\n    return int(str(abs(a) % 10)) * int(str(abs(b) % 10))", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 27, "duration": 4.40070652961731, "task_id": "HumanEval/97"}
{"generated_code": "def count_upper(s):\n    return sum(1 for i in range(0, len(s), 2) if s[i] in 'AEIOU')", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 37, "duration": 4.357618093490601, "task_id": "HumanEval/98"}
{"generated_code": "def closest_integer(value):\n    value = float(value)\n    return int(value + 0.5) if value > 0 else int(value - 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 39, "duration": 4.614492893218994, "task_id": "HumanEval/99"}
{"generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(',', ' ').split()]", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 25, "duration": 2.786447525024414, "task_id": "HumanEval/101"}
{"generated_code": "def choose_num(x, y):\n    return max([i for i in range(x, y+1) if i % 2 == 0] + [-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 39, "duration": 2.6726202964782715, "task_id": "HumanEval/102"}
{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m-n+1))\n    return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 46, "duration": 3.154949903488159, "task_id": "HumanEval/103"}
{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 33, "duration": 2.7222673892974854, "task_id": "HumanEval/104"}
{"generated_code": "def by_length(arr):\n    nums = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    arr = [x for x in arr if 1 <= x <= 9]\n    arr.sort()\n    arr.reverse()\n    return [nums[x-1] for x in arr]", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 78, "duration": 3.382270097732544, "task_id": "HumanEval/105"}
{"generated_code": "def f(n):\n    def factorial(num):\n        if num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    \n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 92, "duration": 1.7012665271759033, "task_id": "HumanEval/106"}
{"generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count, odd_count = 0, 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 98, "duration": 3.75720477104187, "task_id": "HumanEval/107"}
{"generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    sorted_arr = sorted(arr)\n    for _ in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n        \n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 63, "duration": 3.3378124237060547, "task_id": "HumanEval/109"}
{"generated_code": "def reverse_delete(s, c):\n    result = \"\".join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 508, "completion_tokens": 78, "duration": 4.2718048095703125, "task_id": "HumanEval/112"}
{"generated_code": "def iscube(a):\n    return int(round(a**(1/3)))**3 == a", "is_solved": true, "iteration": 1, "prompt_tokens": 760, "completion_tokens": 102, "duration": 6.460424423217773, "task_id": "HumanEval/77"}
{"generated_code": "def sort_array(array):\n    if not array:\n        return []\n    \n    sorted_array = sorted(array)\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array", "is_solved": true, "iteration": 1, "prompt_tokens": 1146, "completion_tokens": 162, "duration": 5.973702907562256, "task_id": "HumanEval/88"}
{"generated_code": "def vowels_count(s):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'y'])\n    count = 0\n    \n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    \n    return count", "is_solved": true, "iteration": 1, "prompt_tokens": 866, "completion_tokens": 190, "duration": 7.838594436645508, "task_id": "HumanEval/64"}
{"generated_code": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    \n    lowercase_keys = all(isinstance(key, str) and key.islower() for key in dict.keys())\n    uppercase_keys = all(isinstance(key, str) and key.isupper() for key in dict.keys())\n    \n    return lowercase_keys or uppercase_keys", "is_solved": true, "iteration": 1, "prompt_tokens": 1061, "completion_tokens": 186, "duration": 8.556389331817627, "task_id": "HumanEval/95"}
{"generated_code": "def histogram(test):\n    lst = test.split()\n    hist = {}\n    for letter in lst:\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    if not hist:\n        return {}\n    max_count = max(hist.values())\n    return {k: v for k, v in hist.items() if v == max_count}", "is_solved": true, "iteration": 1, "prompt_tokens": 1036, "completion_tokens": 219, "duration": 7.0696446895599365, "task_id": "HumanEval/111"}
{"generated_code": "def search(lst):\n    from collections import Counter\n    counts = Counter(lst)\n    max_num = -1\n    for num, freq in counts.items():\n        if num > 0 and freq >= num:\n            max_num = max(max_num, num)\n    return max_num", "is_solved": true, "iteration": 1, "prompt_tokens": 1061, "completion_tokens": 185, "duration": 6.987791538238525, "task_id": "HumanEval/69"}
{"generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if stones[i-1] % 2 == 0:\n            stones.append(stones[i-1] + 2)\n        else:\n            stones.append(stones[i-1] + 2)\n    return stones", "is_solved": true, "iteration": 3, "prompt_tokens": 2552, "completion_tokens": 468, "duration": 14.050609588623047, "task_id": "HumanEval/100"}
{"generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        sum_digits = sum(int(digit) for digit in str(abs(num)))\n        if sum_digits > 0 and not str(num).startswith('-'):\n            count += 1\n    return count", "is_solved": true, "iteration": 4, "prompt_tokens": 3202, "completion_tokens": 608, "duration": 14.195574283599854, "task_id": "HumanEval/108"}
{"generated_code": "import itertools\n\ndef is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    primes = [i for i in range(2, a) if is_prime(i)]\n    \n    for comb in itertools.combinations(primes, 3):\n        if comb[0] * comb[1] * comb[2] == a:\n            return True\n    \n    return False", "is_solved": true, "iteration": 3, "prompt_tokens": 2474, "completion_tokens": 682, "duration": 18.491057872772217, "task_id": "HumanEval/75"}
{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "is_solved": false, "iteration": 8, "prompt_tokens": 5394, "completion_tokens": 928, "duration": 22.141664266586304, "task_id": "HumanEval/85"}
{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "is_solved": false, "iteration": 8, "prompt_tokens": 5893, "completion_tokens": 1111, "duration": 27.332929849624634, "task_id": "HumanEval/65"}
{"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(1 for num in lst1 if num % 2 != 0) <= len(lst2) else \"NO\"", "is_solved": false, "iteration": 8, "prompt_tokens": 7542, "completion_tokens": 1188, "duration": 26.016511917114258, "task_id": "HumanEval/110"}
{"generated_code": "def find_zero(xs: list):\n    return -xs[0] / xs[1]", "is_solved": false, "iteration": 8, "prompt_tokens": 8085, "completion_tokens": 1412, "duration": 29.5815749168396, "task_id": "HumanEval/32"}
{"generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    prime_values = [num for num in lst if is_prime(num)]\n    largest_prime = max(prime_values)\n    \n    return sum_of_digits(largest_prime)", "is_solved": false, "iteration": 8, "prompt_tokens": 11388, "completion_tokens": 1675, "duration": 33.314146757125854, "task_id": "HumanEval/94"}
{"generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        if gpa > 3.7:\n            return 'A'\n        if gpa > 3.3:\n            return 'A-'\n        if gpa > 3.0:\n            return 'B+'\n        if gpa > 2.7:\n            return 'B'\n        if gpa > 2.3:\n            return 'B-'\n        if gpa > 2.0:\n            return 'C+'\n        if gpa > 1.7:\n            return 'C'\n        if gpa > 1.3:\n            return 'C-'\n        if gpa > 1.0:\n            return 'D+'\n        if gpa > 0.7:\n            return 'D'\n        if gpa >= 0.0:\n            return 'D-'\n        return 'E'\n\n    return [grade(g) for g in grades]", "is_solved": false, "iteration": 8, "prompt_tokens": 11604, "completion_tokens": 2548, "duration": 47.476213216781616, "task_id": "HumanEval/81"}
{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 60, "duration": 3.7184066772460938, "task_id": "HumanEval/114"}
{"generated_code": "def select_words(s, n):\n    if not s:\n        return []\n    words = s.split()\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = []\n    for word in words:\n        if len([c for c in word if c in consonants]) == n:\n            result.append(word)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 86, "duration": 4.235817909240723, "task_id": "HumanEval/117"}
{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 98, "duration": 3.4160122871398926, "task_id": "HumanEval/118"}
{"generated_code": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n        return True\n    except:\n        return False", "is_solved": true, "iteration": 0, "prompt_tokens": 313, "completion_tokens": 149, "duration": 4.932066202163696, "task_id": "HumanEval/124"}
{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        product *= num // abs(num) if num != 0 else 0\n        sum_magnitudes += abs(num)\n    return product * sum_magnitudes", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 75, "duration": 3.701418399810791, "task_id": "HumanEval/128"}
{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(num) ** 2 for num in lst)", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 28, "duration": 3.7298011779785156, "task_id": "HumanEval/133"}
{"generated_code": "def largest_smallest_integers(lst):\n    negative_integers = [num for num in lst if num < 0]\n    positive_integers = [num for num in lst if num > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)", "is_solved": true, "iteration": 0, "prompt_tokens": 188, "completion_tokens": 90, "duration": 4.1900529861450195, "task_id": "HumanEval/136"}
{"generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        fact = 1\n        for j in range(1, i+1):\n            fact *= j\n        result *= fact\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 60, "duration": 5.106764793395996, "task_id": "HumanEval/139"}
{"generated_code": "def file_name_check(file_name):\n    if file_name.count(\".\") != 1:\n        return 'No'\n    file_parts = file_name.split(\".\")\n    if len(file_parts) != 2:\n        return 'No'\n    if not file_parts[0] or not file_parts[0][0].isalpha():\n        return 'No'\n    if len([c for c in file_parts[0] if c.isdigit()]) > 3:\n        return 'No'\n    if file_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 130, "duration": 2.550602436065674, "task_id": "HumanEval/141"}
{"generated_code": "from fractions import Fraction\n\ndef simplify(x, n):\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 34, "duration": 3.2925808429718018, "task_id": "HumanEval/144"}
{"generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 81, "duration": 4.610205888748169, "task_id": "HumanEval/146"}
{"generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n# Example\nn = 5\nprint(get_max_triples(n))", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 119, "duration": 5.007686138153076, "task_id": "HumanEval/147"}
{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    else:\n        return tuple(planets[end_idx+1:start_idx][::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 126, "duration": 2.1185858249664307, "task_id": "HumanEval/148"}
{"generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 78, "duration": 4.968517303466797, "task_id": "HumanEval/150"}
{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int))", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 39, "duration": 0.860107421875, "task_id": "HumanEval/151"}
{"generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.6411662101745605, "task_id": "HumanEval/152"}
{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def calc_strength(ext):\n        return sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\n    \n    max_strength = float('-inf')\n    strongest_ext = \"\"\n    \n    for ext in extensions:\n        strength = calc_strength(ext)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_ext = ext\n    \n    return f\"{class_name}.{strongest_ext}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 105, "duration": 1.6746180057525635, "task_id": "HumanEval/153"}
{"generated_code": "def even_odd_count(num):\n    even_count = len([i for i in str(abs(num)) if int(i) % 2 == 0])\n    odd_count = len([i for i in str(abs(num)) if int(i) % 2 != 0])\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 115, "completion_tokens": 65, "duration": 2.838606119155884, "task_id": "HumanEval/155"}
{"generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    \n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    \n    return result.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 143, "duration": 2.278186321258545, "task_id": "HumanEval/156"}
{"generated_code": "def right_angle_triangle(a, b, c):\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 63, "duration": 1.2231793403625488, "task_id": "HumanEval/157"}
{"generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n    \n    max_unique_chars = 0\n    max_word = \"\"\n    \n    for word in words:\n        curr_unique_chars = unique_chars(word)\n        if curr_unique_chars > max_unique_chars or (curr_unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = curr_unique_chars\n            max_word = word\n    \n    return max_word", "is_solved": true, "iteration": 0, "prompt_tokens": 170, "completion_tokens": 95, "duration": 5.631035089492798, "task_id": "HumanEval/158"}
{"generated_code": "def eat(number, need, remaining):\n    eaten = number + min(need, remaining)\n    left = max(remaining - need, 0)\n    return [eaten, left]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 43, "duration": 2.6561062335968018, "task_id": "HumanEval/159"}
{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 36, "duration": 0.8799667358398438, "task_id": "HumanEval/162"}
{"generated_code": "def match_parens(lst):\n    open_count = 0\n    for s in lst:\n        for char in s:\n            if char == '(':\n                open_count += 1\n            else:\n                if open_count == 0:\n                    return 'No'\n                open_count -= 1\n    return 'Yes'", "is_solved": true, "iteration": 1, "prompt_tokens": 926, "completion_tokens": 178, "duration": 6.482267141342163, "task_id": "HumanEval/119"}
{"generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "is_solved": true, "iteration": 1, "prompt_tokens": 1156, "completion_tokens": 84, "duration": 5.445753335952759, "task_id": "HumanEval/120"}
{"generated_code": "import math\n\ndef max_fill(grid, capacity):\n    total_water = sum(sum(row) for row in grid)\n    buckets_needed = math.ceil(total_water / capacity)\n    return buckets_needed", "is_solved": true, "iteration": 1, "prompt_tokens": 1422, "completion_tokens": 133, "duration": 6.778013706207275, "task_id": "HumanEval/115"}
{"generated_code": "def generate_integers(a, b):\n    start, end = min(a, b), max(a, b)\n    return [i for i in range(start, end+1) if i % 2 == 0]", "is_solved": true, "iteration": 1, "prompt_tokens": 804, "completion_tokens": 152, "duration": 6.875330209732056, "task_id": "HumanEval/163"}
{"generated_code": "def is_equal_to_sum_even(n):\n    count = 0\n    for i in range(2, n//2 + 1, 2):\n        if n - i in range(2, n, 2):\n            count += 1\n    return count >= 2  # Changed this line to check for at least 2 pairs instead of 4", "is_solved": true, "iteration": 2, "prompt_tokens": 1523, "completion_tokens": 349, "duration": 12.213238000869751, "task_id": "HumanEval/138"}
{"generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if num > 0 and num < 100)", "is_solved": true, "iteration": 3, "prompt_tokens": 2604, "completion_tokens": 341, "duration": 10.632744312286377, "task_id": "HumanEval/122"}
{"generated_code": "def digits(n):\n    return 0 if all(int(digit) % 2 == 0 for digit in str(n)) else \\\n           eval('*'.join(str(int(digit)) for digit in str(n) if int(digit) % 2 != 0))", "is_solved": true, "iteration": 3, "prompt_tokens": 2042, "completion_tokens": 400, "duration": 9.10088562965393, "task_id": "HumanEval/131"}
{"generated_code": "def can_arrange(arr):\n    index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return i\n    return index", "is_solved": true, "iteration": 3, "prompt_tokens": 2222, "completion_tokens": 430, "duration": 13.926167488098145, "task_id": "HumanEval/135"}
{"generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)) and len(set(lst)) == len(lst)", "is_solved": true, "iteration": 4, "prompt_tokens": 3805, "completion_tokens": 420, "duration": 14.202374935150146, "task_id": "HumanEval/126"}
{"generated_code": "def compare_one(a, b):\n    def convert_to_float(value):\n        if isinstance(value, (int, float)):\n            return float(value)\n        elif isinstance(value, str):\n            return float(value.replace(',', '.'))\n    \n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n    \n    if a_float is None or b_float is None:\n        return None\n    elif a_float == b_float:\n        return None\n    else:\n        return a if a_float > b_float else b", "is_solved": true, "iteration": 3, "prompt_tokens": 2680, "completion_tokens": 546, "duration": 13.161740779876709, "task_id": "HumanEval/137"}
{"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a + a) or len(a) == len(b) and b[::-1] in (a + a) or any(b in (a[i:] + a[:i]) or b[::-1] in (a[i:] + a[:i]) for i in range(len(a)))", "is_solved": true, "iteration": 5, "prompt_tokens": 3489, "completion_tokens": 557, "duration": 16.936029195785522, "task_id": "HumanEval/154"}
{"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    elif txt.islower():\n        return sum(1 for char in txt if ord(char) % 2 == 1)\n    else:\n        return [txt]", "is_solved": true, "iteration": 6, "prompt_tokens": 4418, "completion_tokens": 745, "duration": 19.279333114624023, "task_id": "HumanEval/125"}
{"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))", "is_solved": false, "iteration": 8, "prompt_tokens": 6209, "completion_tokens": 726, "duration": 19.459718704223633, "task_id": "HumanEval/145"}
{"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if lst[i] % 2 != 0 and i % 2 == 0)", "is_solved": false, "iteration": 8, "prompt_tokens": 5899, "completion_tokens": 802, "duration": 19.47931408882141, "task_id": "HumanEval/121"}
{"generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "is_solved": false, "iteration": 8, "prompt_tokens": 6812, "completion_tokens": 715, "duration": 20.967979907989502, "task_id": "HumanEval/149"}
{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 8, "prompt_tokens": 6393, "completion_tokens": 917, "duration": 19.285426139831543, "task_id": "HumanEval/142"}
{"generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": false, "iteration": 8, "prompt_tokens": 6243, "completion_tokens": 735, "duration": 21.603071451187134, "task_id": "HumanEval/116"}
{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    last_char = txt.strip()[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt.split()[-1]) == 1:\n        return True\n    return False", "is_solved": false, "iteration": 8, "prompt_tokens": 6269, "completion_tokens": 1045, "duration": 28.045767068862915, "task_id": "HumanEval/134"}
{"generated_code": "def solve(s):\n    result = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not has_letter:\n        return s[::-1]\n    return result", "is_solved": false, "iteration": 8, "prompt_tokens": 6045, "completion_tokens": 1164, "duration": 26.132025957107544, "task_id": "HumanEval/161"}
{"generated_code": "def get_odd_collatz(n):\n    collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    \n    return sorted(list(set([num for num in collatz if num % 2 != 0])))", "is_solved": false, "iteration": 8, "prompt_tokens": 8174, "completion_tokens": 1198, "duration": 27.110964059829712, "task_id": "HumanEval/123"}
{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "is_solved": false, "iteration": 8, "prompt_tokens": 6410, "completion_tokens": 1239, "duration": 26.659648180007935, "task_id": "HumanEval/143"}
{"generated_code": "def fix_spaces(text):\n    return ''.join(['_' if c == ' ' else '-' if c == ' ' * 2 else c for c in text])\n\n# Test cases\nprint(fix_spaces(\"Example\"))  # \"Example\"\nprint(fix_spaces(\"Example 1\"))  # \"Example_1\"\nprint(fix_spaces(\" Example 2\"))  # \"_Example_2\"\nprint(fix_spaces(\" Example   3\"))  # \"_Example-3\"", "is_solved": false, "iteration": 8, "prompt_tokens": 6114, "completion_tokens": 1298, "duration": 31.038052082061768, "task_id": "HumanEval/140"}
{"generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [3, 1]\n    else:\n        sequence = [3, 1, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n        return sequence", "is_solved": false, "iteration": 8, "prompt_tokens": 7633, "completion_tokens": 1400, "duration": 31.585397243499756, "task_id": "HumanEval/130"}
{"generated_code": "def is_nested(string):\n    opening_brackets = 0\n    nested_found = False\n    \n    for char in string:\n        if char == '[':\n            opening_brackets += 1\n        elif char == ']' and opening_brackets > 0:\n            opening_brackets -= 1\n            nested_found = True\n    \n    return nested_found and opening_brackets < 0\n\n# Test cases\nprint(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\nprint(is_nested('[[][]]'))\nprint(is_nested('[[]][['))", "is_solved": false, "iteration": 8, "prompt_tokens": 6906, "completion_tokens": 1443, "duration": 33.49148368835449, "task_id": "HumanEval/132"}
{"generated_code": "import math\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    length = intersection_end - intersection_start + 1\n    \n    if length <= 1:\n        return \"NO\"\n    \n    if length == 2:\n        return \"YES\"\n    \n    if length == 4:\n        return \"YES\"\n    \n    for i in range(2, int(math.sqrt(length)) + 1):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "is_solved": false, "iteration": 8, "prompt_tokens": 9255, "completion_tokens": 1965, "duration": 38.93098187446594, "task_id": "HumanEval/127"}
{"generated_code": "def minPath(grid, k):\n    def dfs(x, y, path_len, path):\n        if path_len == k:\n            return path\n\n        min_path = []\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and not visited[nx][ny]:\n                visited[nx][ny] = True\n                new_path = dfs(nx, ny, path_len + 1, path + [grid[nx][ny]])\n                if not min_path or new_path < min_path:\n                    min_path = new_path\n                visited[nx][ny] = False\n\n        return min_path\n\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    result = []\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            visited[i][j] = True\n            result = dfs(i, j, 1, [grid[i][j]])\n            visited[i][j] = False\n\n    return result", "is_solved": false, "iteration": 8, "prompt_tokens": 11585, "completion_tokens": 2593, "duration": 44.23607802391052, "task_id": "HumanEval/129"}
{"generated_code": "def do_algebra(operators, operands):\n    expression = str(operands[0])\n    for i in range(len(operators)):\n        expression += operators[i] + str(operands[i + 1])\n    return eval(expression)", "is_solved": false, "iteration": 8, "prompt_tokens": 10044, "completion_tokens": 2553, "duration": 44.06414246559143, "task_id": "HumanEval/160"}
{"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)}n the str{i+1}ng {s} of the {i+1}nput.\" for i, s in enumerate(lst)]", "is_solved": false, "iteration": 8, "prompt_tokens": 7126, "completion_tokens": 980, "duration": 68.96931171417236, "task_id": "HumanEval/113"}
{"generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 61, "duration": 3.7879819869995117, "task_id": "HumanEval/0"}
{"generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    temp = ''\n    for char in paren_string:\n        if char == '(':\n            stack.append('(')\n            temp += '('\n        elif char == ')':\n            stack.pop()\n            temp += ')'\n            if not stack:\n                result.append(temp)\n                temp = ''\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 165, "completion_tokens": 86, "duration": 4.6310436725616455, "task_id": "HumanEval/1"}
{"generated_code": "def below_zero(operations):\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 37, "duration": 3.4491524696350098, "task_id": "HumanEval/3"}
{"generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 49, "duration": 3.9055840969085693, "task_id": "HumanEval/4"}
{"generated_code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 56, "duration": 3.8390955924987793, "task_id": "HumanEval/5"}
{"generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                if depth > max_depth:\n                    max_depth = depth\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 97, "duration": 4.703549146652222, "task_id": "HumanEval/6"}
{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        return sum(numbers), 1 if 0 in numbers else eval('*'.join(map(str, numbers)))\n\n# Test cases\nprint(sum_product([]))  # (0, 1)\nprint(sum_product([1, 2, 3, 4]))  # (10, 24)", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 103, "duration": 4.0435051918029785, "task_id": "HumanEval/8"}
{"generated_code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    maximum = float('-inf')\n    for num in numbers:\n        maximum = max(maximum, num)\n        result.append(maximum)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 150, "completion_tokens": 54, "duration": 3.7376515865325928, "task_id": "HumanEval/9"}
{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 41, "duration": 3.579258441925049, "task_id": "HumanEval/11"}
{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 42, "duration": 3.5393548011779785, "task_id": "HumanEval/13"}
{"generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 32, "duration": 3.6700150966644287, "task_id": "HumanEval/14"}
{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 27, "duration": 3.5287091732025146, "task_id": "HumanEval/15"}
{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 3.326807737350464, "task_id": "HumanEval/16"}
{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 74, "duration": 3.952439308166504, "task_id": "HumanEval/18"}
{"generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_map[x])\n    return ' '.join(sorted_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 103, "duration": 4.493385076522827, "task_id": "HumanEval/19"}
{"generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 53, "duration": 3.686016082763672, "task_id": "HumanEval/21"}
{"generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 31, "duration": 3.3969316482543945, "task_id": "HumanEval/22"}
{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 3.471254587173462, "task_id": "HumanEval/23"}
{"generated_code": "def largest_divisor(n: int) -> int:\n    return max([i for i in range(1, n) if n % i == 0])", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 37, "duration": 3.5331480503082275, "task_id": "HumanEval/24"}
{"generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 70, "duration": 4.299970865249634, "task_id": "HumanEval/25"}
{"generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 38, "duration": 3.51297664642334, "task_id": "HumanEval/26"}
{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 36, "duration": 3.3321757316589355, "task_id": "HumanEval/27"}
{"generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 20, "duration": 3.289001703262329, "task_id": "HumanEval/28"}
{"generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 34, "duration": 3.4382829666137695, "task_id": "HumanEval/29"}
{"generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 25, "duration": 3.446502208709717, "task_id": "HumanEval/30"}
{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 57, "duration": 3.4670627117156982, "task_id": "HumanEval/31"}
{"generated_code": "def sort_third(l: list):\n    sorted_indices = sorted([i for i in range(len(l)) if i % 3 == 0], key=lambda x: l[x])\n    sorted_values = [l[i] for i in sorted_indices]\n    result = l.copy()\n    for i, v in zip(sorted_indices, sorted_values):\n        result[i] = v\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 200, "completion_tokens": 85, "duration": 4.414771556854248, "task_id": "HumanEval/33"}
{"generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 17, "duration": 3.2383384704589844, "task_id": "HumanEval/34"}
{"generated_code": "def max_element(l: list):\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 16, "duration": 3.126251459121704, "task_id": "HumanEval/35"}
{"generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iteration": 0, "prompt_tokens": 208, "completion_tokens": 162, "duration": 4.739898920059204, "task_id": "HumanEval/38"}
{"generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 1:\n            return n\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    i = 0\n    while count < n:\n        i += 1\n        num = fibonacci(i)\n        if is_prime(num):\n            count += 1\n    return num", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 163, "duration": 4.843162536621094, "task_id": "HumanEval/39"}
{"generated_code": "def triples_sum_to_zero(l: list):\n    return any(sum((x, y, z)) == 0 for x in l for y in l for z in l if x != y != z)", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 46, "duration": 5.7354347705841064, "task_id": "HumanEval/40"}
{"generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 23, "duration": 5.429662704467773, "task_id": "HumanEval/42"}
{"generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 42, "duration": 4.737221002578735, "task_id": "HumanEval/43"}
{"generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 17, "duration": 6.2418904304504395, "task_id": "HumanEval/45"}
{"generated_code": "def fib4(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    fib_list = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib_list.append(fib_list[-1] + fib_list[-2] + fib_list[-3] + fib_list[-4])\n    \n    return fib_list[-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 116, "duration": 5.7989301681518555, "task_id": "HumanEval/46"}
{"generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 20, "duration": 4.236940145492554, "task_id": "HumanEval/48"}
{"generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 25, "duration": 5.464749574661255, "task_id": "HumanEval/49"}
{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in ['a', 'e', 'i', 'o', 'u']])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 42, "duration": 5.764646291732788, "task_id": "HumanEval/51"}
{"generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 26, "duration": 4.350031137466431, "task_id": "HumanEval/52"}
{"generated_code": "def add(x: int, y: int):\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 20, "duration": 5.648186683654785, "task_id": "HumanEval/53"}
{"generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 38, "duration": 6.5305821895599365, "task_id": "HumanEval/55"}
{"generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 64, "duration": 5.029238224029541, "task_id": "HumanEval/56"}
{"generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "is_solved": true, "iteration": 1, "prompt_tokens": 795, "completion_tokens": 141, "duration": 5.763249635696411, "task_id": "HumanEval/12"}
{"generated_code": "def sort_even(l: list):\n    even_values = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    result = [val if idx % 2 != 0 else even_values.pop(0) for idx, val in enumerate(l)]\n    return result", "is_solved": true, "iteration": 1, "prompt_tokens": 900, "completion_tokens": 185, "duration": 6.0225608348846436, "task_id": "HumanEval/37"}
{"generated_code": "def car_race_collision(n: int):\n    return n", "is_solved": true, "iteration": 3, "prompt_tokens": 2284, "completion_tokens": 291, "duration": 10.806063652038574, "task_id": "HumanEval/41"}
{"generated_code": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)", "is_solved": true, "iteration": 4, "prompt_tokens": 2992, "completion_tokens": 395, "duration": 13.767316102981567, "task_id": "HumanEval/54"}
{"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0):\n            count += str(i).count('7')\n    return count", "is_solved": true, "iteration": 4, "prompt_tokens": 2799, "completion_tokens": 595, "duration": 15.030288219451904, "task_id": "HumanEval/36"}
{"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": false, "iteration": 8, "prompt_tokens": 5060, "completion_tokens": 617, "duration": 18.030284643173218, "task_id": "HumanEval/2"}
{"generated_code": "def change_base(x: int, base: int):\n    return \"{0:b}\".format(x) if base == 2 else \"{0:o}\".format(x) if base == 8 else \"{0}\".format(x)", "is_solved": false, "iteration": 8, "prompt_tokens": 5704, "completion_tokens": 768, "duration": 21.11544108390808, "task_id": "HumanEval/44"}
{"generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "is_solved": false, "iteration": 8, "prompt_tokens": 6029, "completion_tokens": 815, "duration": 21.46444821357727, "task_id": "HumanEval/7"}
{"generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "is_solved": false, "iteration": 8, "prompt_tokens": 5434, "completion_tokens": 983, "duration": 21.4316668510437, "task_id": "HumanEval/47"}
{"generated_code": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    return [durations[note] for note in notes]", "is_solved": false, "iteration": 8, "prompt_tokens": 9285, "completion_tokens": 1038, "duration": 25.01763606071472, "task_id": "HumanEval/17"}
{"generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": false, "iteration": 8, "prompt_tokens": 5915, "completion_tokens": 1177, "duration": 27.9013454914093, "task_id": "HumanEval/50"}
{"generated_code": "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    for i in range(len(string), 0, -1):\n        if string[:i] == string[:i][::-1]:\n            return string + string[:i-1][::-1]", "is_solved": false, "iteration": 8, "prompt_tokens": 6272, "completion_tokens": 1217, "duration": 27.213249683380127, "task_id": "HumanEval/10"}
{"generated_code": "def find_zero(xs: list):\n    return -xs[0] / xs[1]", "is_solved": false, "iteration": 8, "prompt_tokens": 7283, "completion_tokens": 1148, "duration": 27.447097063064575, "task_id": "HumanEval/32"}
{"generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    \n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    \n    return closest_pair", "is_solved": false, "iteration": 8, "prompt_tokens": 11180, "completion_tokens": 1905, "duration": 38.57226610183716, "task_id": "HumanEval/20"}
{"generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 94, "completion_tokens": 64, "duration": 1.0854251384735107, "task_id": "HumanEval/83"}
{"generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 54, "duration": 5.898924827575684, "task_id": "HumanEval/57"}
{"generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 29, "duration": 4.415369749069214, "task_id": "HumanEval/58"}
{"generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 50, "duration": 4.908264875411987, "task_id": "HumanEval/59"}
{"generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 22, "duration": 4.242558002471924, "task_id": "HumanEval/60"}
{"generated_code": "def correct_bracketing(brackets: str):\n    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 68, "duration": 6.116909980773926, "task_id": "HumanEval/61"}
{"generated_code": "def derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 28, "duration": 3.1749978065490723, "task_id": "HumanEval/62"}
{"generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 72, "duration": 5.622449636459351, "task_id": "HumanEval/63"}
{"generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 5.672107219696045, "task_id": "HumanEval/66"}
{"generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 37, "duration": 5.641664266586304, "task_id": "HumanEval/67"}
{"generated_code": "def pluck(arr):\n    evens = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens, key=lambda x: (x[0], x[1]))\n    return [min_even[0], min_even[1]]", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 78, "duration": 5.097854852676392, "task_id": "HumanEval/68"}
{"generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 44, "duration": 5.86173415184021, "task_id": "HumanEval/70"}
{"generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 92, "duration": 6.1586079597473145, "task_id": "HumanEval/71"}
{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 5.8480916023254395, "task_id": "HumanEval/72"}
{"generated_code": "def smallest_change(arr):\n    length = len(arr)\n    changes = 0\n    for i in range(length // 2):\n        if arr[i] != arr[length - i - 1]:\n            changes += 1\n    return changes", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 55, "duration": 1.1043100357055664, "task_id": "HumanEval/73"}
{"generated_code": "def total_match(lst1, lst2):\n    sum1 = sum(len(x) for x in lst1)\n    sum2 = sum(len(x) for x in lst2)\n    \n    if sum1 < sum2:\n        return lst1\n    else:\n        return lst2", "is_solved": true, "iteration": 0, "prompt_tokens": 243, "completion_tokens": 63, "duration": 6.388736724853516, "task_id": "HumanEval/74"}
{"generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or (n != 1 and x % n == 0 and is_simple_power(x // n, n)))", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 52, "duration": 4.641237735748291, "task_id": "HumanEval/76"}
{"generated_code": "def hex_key(num):\n    prime_digits = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 60, "duration": 3.5844950675964355, "task_id": "HumanEval/78"}
{"generated_code": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal)[2:] + 'db'", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 25, "duration": 4.3092145919799805, "task_id": "HumanEval/79"}
{"generated_code": "def is_happy(s):\n    return all(s[i] != s[i+1] != s[i+2] for i in range(len(s)-2)) if len(s) >= 3 else False", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 47, "duration": 1.0319738388061523, "task_id": "HumanEval/80"}
{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 70, "duration": 3.4724762439727783, "task_id": "HumanEval/82"}
{"generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 21, "duration": 4.153321743011475, "task_id": "HumanEval/84"}
{"generated_code": "def anti_shuffle(s):\n    words = s.split()\n    result = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        result.append(ordered_word)\n    return ' '.join(result)", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 48, "duration": 4.981414556503296, "task_id": "HumanEval/86"}
{"generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 68, "duration": 4.027481555938721, "task_id": "HumanEval/87"}
{"generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            base = ord('a') if char.islower() else ord('A')\n            result += chr((ord(char) - base + 2 * 2) % 26 + base)\n        else:\n            result += char\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 76, "duration": 3.5757226943969727, "task_id": "HumanEval/89"}
{"generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 52, "duration": 4.791964769363403, "task_id": "HumanEval/90"}
{"generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences if sentence]\n    \n    count = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0] == \"I\":\n            count += 1\n    \n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 71, "duration": 3.5930309295654297, "task_id": "HumanEval/91"}
{"generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 54, "duration": 4.871682405471802, "task_id": "HumanEval/92"}
{"generated_code": "def encode(message):\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                result += chr((ord(char)+2 - ord('a')) % 26 + ord('A'))\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 159, "completion_tokens": 78, "duration": 3.3758485317230225, "task_id": "HumanEval/93"}
{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 87, "duration": 3.5806374549865723, "task_id": "HumanEval/96"}
{"generated_code": "def multiply(a, b):\n    return int(str(abs(a) % 10)) * int(str(abs(b) % 10))", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 27, "duration": 4.40070652961731, "task_id": "HumanEval/97"}
{"generated_code": "def count_upper(s):\n    return sum(1 for i in range(0, len(s), 2) if s[i] in 'AEIOU')", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 37, "duration": 4.357618093490601, "task_id": "HumanEval/98"}
{"generated_code": "def closest_integer(value):\n    value = float(value)\n    return int(value + 0.5) if value > 0 else int(value - 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 39, "duration": 4.614492893218994, "task_id": "HumanEval/99"}
{"generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(',', ' ').split()]", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 25, "duration": 2.786447525024414, "task_id": "HumanEval/101"}
{"generated_code": "def choose_num(x, y):\n    return max([i for i in range(x, y+1) if i % 2 == 0] + [-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 39, "duration": 2.6726202964782715, "task_id": "HumanEval/102"}
{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m-n+1))\n    return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 46, "duration": 3.154949903488159, "task_id": "HumanEval/103"}
{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 33, "duration": 2.7222673892974854, "task_id": "HumanEval/104"}
{"generated_code": "def by_length(arr):\n    nums = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    arr = [x for x in arr if 1 <= x <= 9]\n    arr.sort()\n    arr.reverse()\n    return [nums[x-1] for x in arr]", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 78, "duration": 3.382270097732544, "task_id": "HumanEval/105"}
{"generated_code": "def f(n):\n    def factorial(num):\n        if num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    \n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 92, "duration": 1.7012665271759033, "task_id": "HumanEval/106"}
{"generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count, odd_count = 0, 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 98, "duration": 3.75720477104187, "task_id": "HumanEval/107"}
{"generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    sorted_arr = sorted(arr)\n    for _ in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n        \n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 63, "duration": 3.3378124237060547, "task_id": "HumanEval/109"}
{"generated_code": "def reverse_delete(s, c):\n    result = \"\".join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 508, "completion_tokens": 78, "duration": 4.2718048095703125, "task_id": "HumanEval/112"}
{"generated_code": "def iscube(a):\n    return round(a**(1/3))**3 == a", "is_solved": true, "iteration": 1, "prompt_tokens": 757, "completion_tokens": 98, "duration": 6.222066879272461, "task_id": "HumanEval/77"}
{"generated_code": "def search(lst):\n    from collections import Counter\n    counts = Counter(lst)\n    result = -1\n    for num, freq in counts.items():\n        if num > 0 and freq >= num:\n            result = max(result, num)\n    return result", "is_solved": true, "iteration": 1, "prompt_tokens": 1037, "completion_tokens": 157, "duration": 6.053894519805908, "task_id": "HumanEval/69"}
{"generated_code": "def sort_array(array):\n    if not array:\n        return array\n    \n    sorted_array = sorted(array)\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array", "is_solved": true, "iteration": 1, "prompt_tokens": 1142, "completion_tokens": 158, "duration": 6.045417785644531, "task_id": "HumanEval/88"}
{"generated_code": "def vowels_count(s):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'y'])\n    count = 0\n\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n\n    return count", "is_solved": true, "iteration": 1, "prompt_tokens": 876, "completion_tokens": 200, "duration": 7.697779893875122, "task_id": "HumanEval/64"}
{"generated_code": "def histogram(test):\n    lst = test.split()\n    hist = {}\n    for letter in lst:\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    if not hist:\n        return {}\n    max_count = max(hist.values())\n    return {k: v for k, v in hist.items() if v == max_count}", "is_solved": true, "iteration": 1, "prompt_tokens": 1038, "completion_tokens": 221, "duration": 7.0786051750183105, "task_id": "HumanEval/111"}
{"generated_code": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    \n    lowercase_keys = all(isinstance(key, str) and key.islower() for key in dict.keys())\n    uppercase_keys = all(isinstance(key, str) and key.isupper() for key in dict.keys())\n    \n    return lowercase_keys or uppercase_keys", "is_solved": true, "iteration": 1, "prompt_tokens": 1058, "completion_tokens": 183, "duration": 8.923337459564209, "task_id": "HumanEval/95"}
{"generated_code": "def count_nums(arr):\n    def digit_sum(num):\n        num_str = str(abs(num))\n        return sum(int(digit) for digit in num_str)\n\n    return sum(1 for num in arr if num >= 0 and digit_sum(num) > 0)", "is_solved": true, "iteration": 3, "prompt_tokens": 2339, "completion_tokens": 383, "duration": 10.630425214767456, "task_id": "HumanEval/108"}
{"generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if stones[i - 1] % 2 == 0:\n            stones.append(stones[i - 1] + 2)\n        else:\n            stones.append(stones[i - 1] + 2)\n    return stones", "is_solved": true, "iteration": 5, "prompt_tokens": 4202, "completion_tokens": 773, "duration": 19.363223791122437, "task_id": "HumanEval/100"}
{"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)}n the str{i+1}ng {s} of the {i+1}nput.\" for i, s in enumerate(lst)]", "is_solved": false, "iteration": 8, "prompt_tokens": 7201, "completion_tokens": 1043, "duration": 22.32447600364685, "task_id": "HumanEval/113"}
{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "is_solved": false, "iteration": 8, "prompt_tokens": 5445, "completion_tokens": 951, "duration": 22.39668345451355, "task_id": "HumanEval/85"}
{"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(1 for num in lst1 if num % 2 != 0) <= len(lst2) else \"NO\"", "is_solved": false, "iteration": 8, "prompt_tokens": 7210, "completion_tokens": 973, "duration": 23.17235255241394, "task_id": "HumanEval/110"}
{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "is_solved": false, "iteration": 8, "prompt_tokens": 5812, "completion_tokens": 1052, "duration": 28.510932445526123, "task_id": "HumanEval/65"}
{"generated_code": "import itertools\n\ndef is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, 100) if is_prime(i)]\n\n    prime_combinations = itertools.combinations(primes, 3)\n    for combination in prime_combinations:\n        if a == combination[0] * combination[1] * combination[2]:\n            return True\n    return False", "is_solved": true, "iteration": 8, "prompt_tokens": 6436, "completion_tokens": 1668, "duration": 33.97838282585144, "task_id": "HumanEval/75"}
{"generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    prime_values = [num for num in lst if is_prime(num)]\n    largest_prime = max(prime_values)\n    \n    return sum_of_digits(largest_prime)", "is_solved": false, "iteration": 8, "prompt_tokens": 11376, "completion_tokens": 1649, "duration": 34.54652285575867, "task_id": "HumanEval/94"}
{"generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        if gpa > 3.7:\n            return 'A'\n        if gpa > 3.3:\n            return 'A-'\n        if gpa > 3.0:\n            return 'B+'\n        if gpa > 2.7:\n            return 'B'\n        if gpa > 2.3:\n            return 'B-'\n        if gpa > 2.0:\n            return 'C+'\n        if gpa > 1.7:\n            return 'C'\n        if gpa > 1.3:\n            return 'C-'\n        if gpa > 1.0:\n            return 'D+'\n        if gpa > 0.7:\n            return 'D'\n        if gpa >= 0.0:\n            return 'D-'\n        return 'E'\n\n    return [grade(g) for g in grades]", "is_solved": false, "iteration": 8, "prompt_tokens": 11207, "completion_tokens": 2353, "duration": 44.91158604621887, "task_id": "HumanEval/81"}
{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 60, "duration": 3.7184066772460938, "task_id": "HumanEval/114"}
{"generated_code": "def select_words(s, n):\n    if not s:\n        return []\n    words = s.split()\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = []\n    for word in words:\n        if len([c for c in word if c in consonants]) == n:\n            result.append(word)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 86, "duration": 4.235817909240723, "task_id": "HumanEval/117"}
{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 98, "duration": 3.4160122871398926, "task_id": "HumanEval/118"}
{"generated_code": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n        return True\n    except:\n        return False", "is_solved": true, "iteration": 0, "prompt_tokens": 313, "completion_tokens": 149, "duration": 4.932066202163696, "task_id": "HumanEval/124"}
{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        product *= num // abs(num) if num != 0 else 0\n        sum_magnitudes += abs(num)\n    return product * sum_magnitudes", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 75, "duration": 3.701418399810791, "task_id": "HumanEval/128"}
{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(num) ** 2 for num in lst)", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 28, "duration": 3.7298011779785156, "task_id": "HumanEval/133"}
{"generated_code": "def largest_smallest_integers(lst):\n    negative_integers = [num for num in lst if num < 0]\n    positive_integers = [num for num in lst if num > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)", "is_solved": true, "iteration": 0, "prompt_tokens": 188, "completion_tokens": 90, "duration": 4.1900529861450195, "task_id": "HumanEval/136"}
{"generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        fact = 1\n        for j in range(1, i+1):\n            fact *= j\n        result *= fact\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 60, "duration": 5.106764793395996, "task_id": "HumanEval/139"}
{"generated_code": "def file_name_check(file_name):\n    if file_name.count(\".\") != 1:\n        return 'No'\n    file_parts = file_name.split(\".\")\n    if len(file_parts) != 2:\n        return 'No'\n    if not file_parts[0] or not file_parts[0][0].isalpha():\n        return 'No'\n    if len([c for c in file_parts[0] if c.isdigit()]) > 3:\n        return 'No'\n    if file_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 130, "duration": 2.550602436065674, "task_id": "HumanEval/141"}
{"generated_code": "from fractions import Fraction\n\ndef simplify(x, n):\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 34, "duration": 3.2925808429718018, "task_id": "HumanEval/144"}
{"generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 81, "duration": 4.610205888748169, "task_id": "HumanEval/146"}
{"generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n# Example\nn = 5\nprint(get_max_triples(n))", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 119, "duration": 5.007686138153076, "task_id": "HumanEval/147"}
{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    else:\n        return tuple(planets[end_idx+1:start_idx][::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 126, "duration": 2.1185858249664307, "task_id": "HumanEval/148"}
{"generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 78, "duration": 4.968517303466797, "task_id": "HumanEval/150"}
{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int))", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 39, "duration": 0.860107421875, "task_id": "HumanEval/151"}
{"generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.6411662101745605, "task_id": "HumanEval/152"}
{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def calc_strength(ext):\n        return sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\n    \n    max_strength = float('-inf')\n    strongest_ext = \"\"\n    \n    for ext in extensions:\n        strength = calc_strength(ext)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_ext = ext\n    \n    return f\"{class_name}.{strongest_ext}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 105, "duration": 1.6746180057525635, "task_id": "HumanEval/153"}
{"generated_code": "def even_odd_count(num):\n    even_count = len([i for i in str(abs(num)) if int(i) % 2 == 0])\n    odd_count = len([i for i in str(abs(num)) if int(i) % 2 != 0])\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 115, "completion_tokens": 65, "duration": 2.838606119155884, "task_id": "HumanEval/155"}
{"generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    \n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    \n    return result.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 143, "duration": 2.278186321258545, "task_id": "HumanEval/156"}
{"generated_code": "def right_angle_triangle(a, b, c):\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 63, "duration": 1.2231793403625488, "task_id": "HumanEval/157"}
{"generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n    \n    max_unique_chars = 0\n    max_word = \"\"\n    \n    for word in words:\n        curr_unique_chars = unique_chars(word)\n        if curr_unique_chars > max_unique_chars or (curr_unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = curr_unique_chars\n            max_word = word\n    \n    return max_word", "is_solved": true, "iteration": 0, "prompt_tokens": 170, "completion_tokens": 95, "duration": 5.631035089492798, "task_id": "HumanEval/158"}
{"generated_code": "def eat(number, need, remaining):\n    eaten = number + min(need, remaining)\n    left = max(remaining - need, 0)\n    return [eaten, left]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 43, "duration": 2.6561062335968018, "task_id": "HumanEval/159"}
{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 36, "duration": 0.8799667358398438, "task_id": "HumanEval/162"}
{"generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "is_solved": true, "iteration": 1, "prompt_tokens": 1155, "completion_tokens": 83, "duration": 4.260030269622803, "task_id": "HumanEval/120"}
{"generated_code": "def generate_integers(a, b):\n    start, end = min(a, b), max(a, b)\n    return [i for i in range(start, end+1) if i % 2 == 0]", "is_solved": true, "iteration": 1, "prompt_tokens": 781, "completion_tokens": 129, "duration": 6.0069804191589355, "task_id": "HumanEval/163"}
{"generated_code": "def max_fill(grid, capacity):\n    import math\n    wells = [sum(row) for row in grid]\n    total_water = sum(wells)\n    buckets_needed = math.ceil(total_water / capacity)\n    return buckets_needed", "is_solved": true, "iteration": 1, "prompt_tokens": 1446, "completion_tokens": 165, "duration": 6.1102588176727295, "task_id": "HumanEval/115"}
{"generated_code": "def match_parens(lst):\n    total_open = lst[0].count('(') + lst[1].count('(')\n    total_close = lst[0].count(')') + lst[1].count(')')\n    return 'Yes' if total_open == total_close else 'No'", "is_solved": true, "iteration": 1, "prompt_tokens": 932, "completion_tokens": 178, "duration": 6.4917685985565186, "task_id": "HumanEval/119"}
{"generated_code": "def digits(n):\n    prod = 1\n    has_odd_digit = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            prod *= int(digit)\n            has_odd_digit = True\n    return prod if has_odd_digit else 0", "is_solved": true, "iteration": 1, "prompt_tokens": 763, "completion_tokens": 193, "duration": 4.13231635093689, "task_id": "HumanEval/131"}
{"generated_code": "def is_equal_to_sum_even(n):\n    count = 0\n    for i in range(2, n//2 + 1, 2):\n        for j in range(2, n//2 + 1, 2):\n            for k in range(2, n//2 + 1, 2):\n                for l in range(2, n//2 + 1, 2):\n                    if i + j + k + l == n:\n                        count += 1\n    return count >= 1", "is_solved": true, "iteration": 1, "prompt_tokens": 814, "completion_tokens": 238, "duration": 8.776043176651001, "task_id": "HumanEval/138"}
{"generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)) and all(lst.count(num) <= 1 for num in lst)", "is_solved": true, "iteration": 2, "prompt_tokens": 2078, "completion_tokens": 272, "duration": 9.000377416610718, "task_id": "HumanEval/126"}
{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": true, "iteration": 4, "prompt_tokens": 3291, "completion_tokens": 466, "duration": 11.929403305053711, "task_id": "HumanEval/142"}
{"generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if x < 100)", "is_solved": true, "iteration": 5, "prompt_tokens": 4135, "completion_tokens": 481, "duration": 14.607101440429688, "task_id": "HumanEval/122"}
{"generated_code": "def can_arrange(arr):\n    index = -1\n    max_val = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < max_val:\n            index = i\n            break\n        else:\n            max_val = arr[i]\n    return index", "is_solved": true, "iteration": 4, "prompt_tokens": 2992, "completion_tokens": 635, "duration": 17.413288831710815, "task_id": "HumanEval/135"}
{"generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": false, "iteration": 8, "prompt_tokens": 6220, "completion_tokens": 714, "duration": 19.231836080551147, "task_id": "HumanEval/116"}
{"generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "is_solved": false, "iteration": 8, "prompt_tokens": 6753, "completion_tokens": 668, "duration": 18.338810205459595, "task_id": "HumanEval/149"}
{"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)", "is_solved": false, "iteration": 8, "prompt_tokens": 6179, "completion_tokens": 787, "duration": 19.25382161140442, "task_id": "HumanEval/121"}
{"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))", "is_solved": false, "iteration": 8, "prompt_tokens": 6280, "completion_tokens": 791, "duration": 20.5369930267334, "task_id": "HumanEval/145"}
{"generated_code": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    if intersection_start <= intersection_end:\n        return \"YES\" if is_prime(intersection_end - intersection_start) else \"NO\"\n    else:\n        return \"NO\"", "is_solved": true, "iteration": 5, "prompt_tokens": 5948, "completion_tokens": 1313, "duration": 25.44760799407959, "task_id": "HumanEval/127"}
{"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "is_solved": false, "iteration": 8, "prompt_tokens": 5847, "completion_tokens": 955, "duration": 22.421674728393555, "task_id": "HumanEval/125"}
{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    last_char = txt.strip()[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt.split()[-1]) == 1:\n        return True\n    return False", "is_solved": false, "iteration": 8, "prompt_tokens": 6184, "completion_tokens": 1005, "duration": 25.879361629486084, "task_id": "HumanEval/134"}
{"generated_code": "def solve(s):\n    result = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not has_letter:\n        return s[::-1]\n    return result", "is_solved": false, "iteration": 8, "prompt_tokens": 5900, "completion_tokens": 1045, "duration": 24.450746536254883, "task_id": "HumanEval/161"}
{"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a*2)", "is_solved": false, "iteration": 8, "prompt_tokens": 5647, "completion_tokens": 919, "duration": 25.216870307922363, "task_id": "HumanEval/154"}
{"generated_code": "def get_odd_collatz(n):\n    collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    \n    return sorted(list(set([num for num in collatz if num % 2 != 0])))", "is_solved": false, "iteration": 8, "prompt_tokens": 8151, "completion_tokens": 1166, "duration": 25.954028367996216, "task_id": "HumanEval/123"}
{"generated_code": "def is_nested(string):\n    opened = 0\n    \n    for char in string:\n        if char == '[':\n            opened += 1\n        elif char == ']':\n            if opened > 0:\n                opened -= 1\n    \n    return opened < 0\n\n# Test cases\nprint(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\nprint(is_nested('[[][]]'))\nprint(is_nested('[[]][['))", "is_solved": false, "iteration": 8, "prompt_tokens": 6982, "completion_tokens": 1544, "duration": 33.075279712677, "task_id": "HumanEval/132"}
{"generated_code": "def fix_spaces(text):\n    return ''.join(['_' if c == ' ' else '-' if c == ' ' * 2 else c for c in text])\n\n# Test cases\nprint(fix_spaces(\"Example\"))  # \"Example\"\nprint(fix_spaces(\"Example 1\"))  # \"Example_1\"\nprint(fix_spaces(\" Example 2\"))  # \"_Example_2\"\nprint(fix_spaces(\" Example   3\"))  # \"_Example-3\"", "is_solved": false, "iteration": 8, "prompt_tokens": 6482, "completion_tokens": 1472, "duration": 32.54213070869446, "task_id": "HumanEval/140"}
{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "is_solved": false, "iteration": 8, "prompt_tokens": 7042, "completion_tokens": 1484, "duration": 30.578022956848145, "task_id": "HumanEval/143"}
{"generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1]\n    else:\n        sequence = [0, 1, 1]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n        return sequence", "is_solved": false, "iteration": 8, "prompt_tokens": 8022, "completion_tokens": 1521, "duration": 36.027533769607544, "task_id": "HumanEval/130"}
{"generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a == b:\n            return None\n        return a if a > b else b\n    return a if type(a) == float else b", "is_solved": false, "iteration": 8, "prompt_tokens": 7740, "completion_tokens": 1866, "duration": 35.23724007606506, "task_id": "HumanEval/137"}
{"generated_code": "def minPath(grid, k):\n    def dfs(x, y, path_len, path):\n        if path_len == k:\n            return path\n\n        min_path = []\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and not visited[nx][ny]:\n                visited[nx][ny] = True\n                new_path = dfs(nx, ny, path_len + 1, path + [grid[nx][ny]])\n                if not min_path or new_path < min_path:\n                    min_path = new_path\n                visited[nx][ny] = False\n\n        return min_path\n\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    result = []\n    min_path = None\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            visited[i][j] = True\n            new_path = dfs(i, j, 1, [grid[i][j]])\n            if min_path is None or new_path < min_path:\n                min_path = new_path\n            visited[i][j] = False\n\n    return min_path", "is_solved": false, "iteration": 8, "prompt_tokens": 12873, "completion_tokens": 3184, "duration": 54.001261472702026, "task_id": "HumanEval/129"}
{"generated_code": "def do_algebra(operators, operands):\n    expression = str(operands[0])\n    for i in range(len(operators)):\n        expression += operators[i] + str(operands[i + 1])\n    return eval(expression)", "is_solved": false, "iteration": 8, "prompt_tokens": 11310, "completion_tokens": 3227, "duration": 54.12195873260498, "task_id": "HumanEval/160"}
{"generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 61, "duration": 3.7879819869995117, "task_id": "HumanEval/0"}
{"generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    temp = ''\n    for char in paren_string:\n        if char == '(':\n            stack.append('(')\n            temp += '('\n        elif char == ')':\n            stack.pop()\n            temp += ')'\n            if not stack:\n                result.append(temp)\n                temp = ''\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 165, "completion_tokens": 86, "duration": 4.6310436725616455, "task_id": "HumanEval/1"}
{"generated_code": "def below_zero(operations):\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 37, "duration": 3.4491524696350098, "task_id": "HumanEval/3"}
{"generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 49, "duration": 3.9055840969085693, "task_id": "HumanEval/4"}
{"generated_code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 56, "duration": 3.8390955924987793, "task_id": "HumanEval/5"}
{"generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                if depth > max_depth:\n                    max_depth = depth\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 97, "duration": 4.703549146652222, "task_id": "HumanEval/6"}
{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        return sum(numbers), 1 if 0 in numbers else eval('*'.join(map(str, numbers)))\n\n# Test cases\nprint(sum_product([]))  # (0, 1)\nprint(sum_product([1, 2, 3, 4]))  # (10, 24)", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 103, "duration": 4.0435051918029785, "task_id": "HumanEval/8"}
{"generated_code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    maximum = float('-inf')\n    for num in numbers:\n        maximum = max(maximum, num)\n        result.append(maximum)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 150, "completion_tokens": 54, "duration": 3.7376515865325928, "task_id": "HumanEval/9"}
{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 41, "duration": 3.579258441925049, "task_id": "HumanEval/11"}
{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 42, "duration": 3.5393548011779785, "task_id": "HumanEval/13"}
{"generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 32, "duration": 3.6700150966644287, "task_id": "HumanEval/14"}
{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 27, "duration": 3.5287091732025146, "task_id": "HumanEval/15"}
{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 3.326807737350464, "task_id": "HumanEval/16"}
{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 74, "duration": 3.952439308166504, "task_id": "HumanEval/18"}
{"generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_map[x])\n    return ' '.join(sorted_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 103, "duration": 4.493385076522827, "task_id": "HumanEval/19"}
{"generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 53, "duration": 3.686016082763672, "task_id": "HumanEval/21"}
{"generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 31, "duration": 3.3969316482543945, "task_id": "HumanEval/22"}
{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 3.471254587173462, "task_id": "HumanEval/23"}
{"generated_code": "def largest_divisor(n: int) -> int:\n    return max([i for i in range(1, n) if n % i == 0])", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 37, "duration": 3.5331480503082275, "task_id": "HumanEval/24"}
{"generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 70, "duration": 4.299970865249634, "task_id": "HumanEval/25"}
{"generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 38, "duration": 3.51297664642334, "task_id": "HumanEval/26"}
{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 36, "duration": 3.3321757316589355, "task_id": "HumanEval/27"}
{"generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 20, "duration": 3.289001703262329, "task_id": "HumanEval/28"}
{"generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 34, "duration": 3.4382829666137695, "task_id": "HumanEval/29"}
{"generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 25, "duration": 3.446502208709717, "task_id": "HumanEval/30"}
{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 57, "duration": 3.4670627117156982, "task_id": "HumanEval/31"}
{"generated_code": "def sort_third(l: list):\n    sorted_indices = sorted([i for i in range(len(l)) if i % 3 == 0], key=lambda x: l[x])\n    sorted_values = [l[i] for i in sorted_indices]\n    result = l.copy()\n    for i, v in zip(sorted_indices, sorted_values):\n        result[i] = v\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 200, "completion_tokens": 85, "duration": 4.414771556854248, "task_id": "HumanEval/33"}
{"generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 17, "duration": 3.2383384704589844, "task_id": "HumanEval/34"}
{"generated_code": "def max_element(l: list):\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 16, "duration": 3.126251459121704, "task_id": "HumanEval/35"}
{"generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iteration": 0, "prompt_tokens": 208, "completion_tokens": 162, "duration": 4.739898920059204, "task_id": "HumanEval/38"}
{"generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 1:\n            return n\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    i = 0\n    while count < n:\n        i += 1\n        num = fibonacci(i)\n        if is_prime(num):\n            count += 1\n    return num", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 163, "duration": 4.843162536621094, "task_id": "HumanEval/39"}
{"generated_code": "def triples_sum_to_zero(l: list):\n    return any(sum((x, y, z)) == 0 for x in l for y in l for z in l if x != y != z)", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 46, "duration": 5.7354347705841064, "task_id": "HumanEval/40"}
{"generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 23, "duration": 5.429662704467773, "task_id": "HumanEval/42"}
{"generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 42, "duration": 4.737221002578735, "task_id": "HumanEval/43"}
{"generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 17, "duration": 6.2418904304504395, "task_id": "HumanEval/45"}
{"generated_code": "def fib4(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    fib_list = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib_list.append(fib_list[-1] + fib_list[-2] + fib_list[-3] + fib_list[-4])\n    \n    return fib_list[-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 116, "duration": 5.7989301681518555, "task_id": "HumanEval/46"}
{"generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 20, "duration": 4.236940145492554, "task_id": "HumanEval/48"}
{"generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 25, "duration": 5.464749574661255, "task_id": "HumanEval/49"}
{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in ['a', 'e', 'i', 'o', 'u']])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 42, "duration": 5.764646291732788, "task_id": "HumanEval/51"}
{"generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 26, "duration": 4.350031137466431, "task_id": "HumanEval/52"}
{"generated_code": "def add(x: int, y: int):\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 20, "duration": 5.648186683654785, "task_id": "HumanEval/53"}
{"generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 38, "duration": 6.5305821895599365, "task_id": "HumanEval/55"}
{"generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 64, "duration": 5.029238224029541, "task_id": "HumanEval/56"}
{"generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_len = max(len(s) for s in strings)\n    return next(s for s in strings if len(s) == max_len)", "is_solved": true, "iteration": 1, "prompt_tokens": 764, "completion_tokens": 131, "duration": 5.642437219619751, "task_id": "HumanEval/12"}
{"generated_code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    \n    result = ''\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x //= base\n    \n    return result", "is_solved": true, "iteration": 1, "prompt_tokens": 867, "completion_tokens": 173, "duration": 6.91588282585144, "task_id": "HumanEval/44"}
{"generated_code": "def sort_even(l: list):\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    even_values_sorted = sorted([l[i] for i in even_indices])\n    result = [val if idx % 2 != 0 else even_values_sorted.pop(0) for idx, val in enumerate(l)]\n    return result", "is_solved": true, "iteration": 1, "prompt_tokens": 898, "completion_tokens": 197, "duration": 8.902214288711548, "task_id": "HumanEval/37"}
{"generated_code": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)", "is_solved": true, "iteration": 2, "prompt_tokens": 1562, "completion_tokens": 185, "duration": 10.535351037979126, "task_id": "HumanEval/54"}
{"generated_code": "def car_race_collision(n: int):\n    return n", "is_solved": true, "iteration": 5, "prompt_tokens": 3635, "completion_tokens": 434, "duration": 13.820743083953857, "task_id": "HumanEval/41"}
{"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": false, "iteration": 8, "prompt_tokens": 5009, "completion_tokens": 583, "duration": 16.836599588394165, "task_id": "HumanEval/2"}
{"generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "is_solved": false, "iteration": 8, "prompt_tokens": 6054, "completion_tokens": 835, "duration": 20.040482759475708, "task_id": "HumanEval/7"}
{"generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "is_solved": false, "iteration": 8, "prompt_tokens": 5485, "completion_tokens": 1027, "duration": 20.759944200515747, "task_id": "HumanEval/47"}
{"generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": false, "iteration": 8, "prompt_tokens": 5902, "completion_tokens": 1043, "duration": 25.218635320663452, "task_id": "HumanEval/50"}
{"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "is_solved": false, "iteration": 8, "prompt_tokens": 5409, "completion_tokens": 1081, "duration": 23.696821689605713, "task_id": "HumanEval/36"}
{"generated_code": "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n\n    for i in range(len(string), 0, -1):\n        if string[:i] == string[:i][::-1]:\n            if i == len(string):\n                return string\n            return string + string[i-1::-1]\n\n    return string + string[:-1][::-1]", "is_solved": false, "iteration": 8, "prompt_tokens": 6147, "completion_tokens": 1110, "duration": 24.766430616378784, "task_id": "HumanEval/10"}
{"generated_code": "def find_zero(xs: list):\n    return -xs[0] / xs[1]", "is_solved": false, "iteration": 8, "prompt_tokens": 7051, "completion_tokens": 1001, "duration": 25.251752138137817, "task_id": "HumanEval/32"}
{"generated_code": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    return [durations[note] for note in notes]", "is_solved": false, "iteration": 8, "prompt_tokens": 9967, "completion_tokens": 1283, "duration": 27.358866691589355, "task_id": "HumanEval/17"}
{"generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    \n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    \n    return closest_pair", "is_solved": false, "iteration": 8, "prompt_tokens": 9831, "completion_tokens": 1587, "duration": 31.9879469871521, "task_id": "HumanEval/20"}
{"generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 94, "completion_tokens": 64, "duration": 1.0854251384735107, "task_id": "HumanEval/83"}
{"generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 54, "duration": 5.898924827575684, "task_id": "HumanEval/57"}
{"generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 29, "duration": 4.415369749069214, "task_id": "HumanEval/58"}
{"generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 50, "duration": 4.908264875411987, "task_id": "HumanEval/59"}
{"generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 22, "duration": 4.242558002471924, "task_id": "HumanEval/60"}
{"generated_code": "def correct_bracketing(brackets: str):\n    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 68, "duration": 6.116909980773926, "task_id": "HumanEval/61"}
{"generated_code": "def derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 28, "duration": 3.1749978065490723, "task_id": "HumanEval/62"}
{"generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 72, "duration": 5.622449636459351, "task_id": "HumanEval/63"}
{"generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 5.672107219696045, "task_id": "HumanEval/66"}
{"generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 37, "duration": 5.641664266586304, "task_id": "HumanEval/67"}
{"generated_code": "def pluck(arr):\n    evens = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens, key=lambda x: (x[0], x[1]))\n    return [min_even[0], min_even[1]]", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 78, "duration": 5.097854852676392, "task_id": "HumanEval/68"}
{"generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 44, "duration": 5.86173415184021, "task_id": "HumanEval/70"}
{"generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 92, "duration": 6.1586079597473145, "task_id": "HumanEval/71"}
{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 5.8480916023254395, "task_id": "HumanEval/72"}
{"generated_code": "def smallest_change(arr):\n    length = len(arr)\n    changes = 0\n    for i in range(length // 2):\n        if arr[i] != arr[length - i - 1]:\n            changes += 1\n    return changes", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 55, "duration": 1.1043100357055664, "task_id": "HumanEval/73"}
{"generated_code": "def total_match(lst1, lst2):\n    sum1 = sum(len(x) for x in lst1)\n    sum2 = sum(len(x) for x in lst2)\n    \n    if sum1 < sum2:\n        return lst1\n    else:\n        return lst2", "is_solved": true, "iteration": 0, "prompt_tokens": 243, "completion_tokens": 63, "duration": 6.388736724853516, "task_id": "HumanEval/74"}
{"generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or (n != 1 and x % n == 0 and is_simple_power(x // n, n)))", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 52, "duration": 4.641237735748291, "task_id": "HumanEval/76"}
{"generated_code": "def hex_key(num):\n    prime_digits = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 60, "duration": 3.5844950675964355, "task_id": "HumanEval/78"}
{"generated_code": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal)[2:] + 'db'", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 25, "duration": 4.3092145919799805, "task_id": "HumanEval/79"}
{"generated_code": "def is_happy(s):\n    return all(s[i] != s[i+1] != s[i+2] for i in range(len(s)-2)) if len(s) >= 3 else False", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 47, "duration": 1.0319738388061523, "task_id": "HumanEval/80"}
{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 70, "duration": 3.4724762439727783, "task_id": "HumanEval/82"}
{"generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 21, "duration": 4.153321743011475, "task_id": "HumanEval/84"}
{"generated_code": "def anti_shuffle(s):\n    words = s.split()\n    result = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        result.append(ordered_word)\n    return ' '.join(result)", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 48, "duration": 4.981414556503296, "task_id": "HumanEval/86"}
{"generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 68, "duration": 4.027481555938721, "task_id": "HumanEval/87"}
{"generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            base = ord('a') if char.islower() else ord('A')\n            result += chr((ord(char) - base + 2 * 2) % 26 + base)\n        else:\n            result += char\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 76, "duration": 3.5757226943969727, "task_id": "HumanEval/89"}
{"generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 52, "duration": 4.791964769363403, "task_id": "HumanEval/90"}
{"generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences if sentence]\n    \n    count = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0] == \"I\":\n            count += 1\n    \n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 71, "duration": 3.5930309295654297, "task_id": "HumanEval/91"}
{"generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 54, "duration": 4.871682405471802, "task_id": "HumanEval/92"}
{"generated_code": "def encode(message):\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                result += chr((ord(char)+2 - ord('a')) % 26 + ord('A'))\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 159, "completion_tokens": 78, "duration": 3.3758485317230225, "task_id": "HumanEval/93"}
{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 87, "duration": 3.5806374549865723, "task_id": "HumanEval/96"}
{"generated_code": "def multiply(a, b):\n    return int(str(abs(a) % 10)) * int(str(abs(b) % 10))", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 27, "duration": 4.40070652961731, "task_id": "HumanEval/97"}
{"generated_code": "def count_upper(s):\n    return sum(1 for i in range(0, len(s), 2) if s[i] in 'AEIOU')", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 37, "duration": 4.357618093490601, "task_id": "HumanEval/98"}
{"generated_code": "def closest_integer(value):\n    value = float(value)\n    return int(value + 0.5) if value > 0 else int(value - 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 39, "duration": 4.614492893218994, "task_id": "HumanEval/99"}
{"generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(',', ' ').split()]", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 25, "duration": 2.786447525024414, "task_id": "HumanEval/101"}
{"generated_code": "def choose_num(x, y):\n    return max([i for i in range(x, y+1) if i % 2 == 0] + [-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 39, "duration": 2.6726202964782715, "task_id": "HumanEval/102"}
{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m-n+1))\n    return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 46, "duration": 3.154949903488159, "task_id": "HumanEval/103"}
{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 33, "duration": 2.7222673892974854, "task_id": "HumanEval/104"}
{"generated_code": "def by_length(arr):\n    nums = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    arr = [x for x in arr if 1 <= x <= 9]\n    arr.sort()\n    arr.reverse()\n    return [nums[x-1] for x in arr]", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 78, "duration": 3.382270097732544, "task_id": "HumanEval/105"}
{"generated_code": "def f(n):\n    def factorial(num):\n        if num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    \n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 92, "duration": 1.7012665271759033, "task_id": "HumanEval/106"}
{"generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count, odd_count = 0, 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 98, "duration": 3.75720477104187, "task_id": "HumanEval/107"}
{"generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    sorted_arr = sorted(arr)\n    for _ in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n        \n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 63, "duration": 3.3378124237060547, "task_id": "HumanEval/109"}
{"generated_code": "def reverse_delete(s, c):\n    result = \"\".join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 508, "completion_tokens": 78, "duration": 4.2718048095703125, "task_id": "HumanEval/112"}
{"generated_code": "def sort_array(array):\n    if not array:\n        return []\n    \n    sorted_array = sorted(array)\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array", "is_solved": true, "iteration": 1, "prompt_tokens": 1120, "completion_tokens": 136, "duration": 5.752131938934326, "task_id": "HumanEval/88"}
{"generated_code": "def vowels_count(s):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    \n    for char in s:\n        if char.lower() in vowels or (char.lower() == 'y' and char == s[-1]):\n            count += 1\n    \n    return count", "is_solved": true, "iteration": 1, "prompt_tokens": 888, "completion_tokens": 224, "duration": 7.951470375061035, "task_id": "HumanEval/64"}
{"generated_code": "def search(lst):\n    from collections import Counter\n    counts = Counter(lst)\n    result = -1\n    for num, freq in counts.items():\n        if num > 0 and freq >= num:\n            result = max(result, num)\n    return result", "is_solved": true, "iteration": 1, "prompt_tokens": 1070, "completion_tokens": 190, "duration": 6.562193155288696, "task_id": "HumanEval/69"}
{"generated_code": "import itertools\n\ndef is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    prime_factors = [i for i in range(2, a) if a % i == 0 and is_prime(i)]\n    \n    for combo in itertools.combinations(prime_factors, 3):\n        if a == combo[0] * combo[1] * combo[2]:\n            return True\n    return False", "is_solved": true, "iteration": 1, "prompt_tokens": 865, "completion_tokens": 289, "duration": 10.095495462417603, "task_id": "HumanEval/75"}
{"generated_code": "def iscube(a):\n    return (a >= 0) and (round(a**(1/3))**3 == a)", "is_solved": true, "iteration": 2, "prompt_tokens": 1364, "completion_tokens": 191, "duration": 8.22314715385437, "task_id": "HumanEval/77"}
{"generated_code": "def histogram(test):\n    lst = test.split()\n    hist = {}\n    for letter in lst:\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    if not hist:  # Check if hist is empty\n        return {}\n    \n    max_count = max(hist.values())\n    return {k: v for k, v in hist.items() if v == max_count}", "is_solved": true, "iteration": 1, "prompt_tokens": 1025, "completion_tokens": 217, "duration": 9.302051067352295, "task_id": "HumanEval/111"}
{"generated_code": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    \n    lowercase_keys = all(str(key).islower() for key in dict.keys() if isinstance(key, str))\n    uppercase_keys = all(str(key).isupper() for key in dict.keys() if isinstance(key, str))\n    \n    return (lowercase_keys or uppercase_keys) and all(isinstance(key, str) for key in dict.keys())", "is_solved": true, "iteration": 2, "prompt_tokens": 1916, "completion_tokens": 336, "duration": 11.332115650177002, "task_id": "HumanEval/95"}
{"generated_code": "def count_nums(arr):\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n))) if n != 0 else 0\n\n    def get_signed_digits(n):\n        digits = [int(digit) for digit in str(abs(n))]\n        if n < 0:\n            digits[0] *= -1\n        return digits\n\n    return sum(1 for num in arr if sum(get_signed_digits(num)) > 0)", "is_solved": true, "iteration": 4, "prompt_tokens": 3107, "completion_tokens": 563, "duration": 13.483537197113037, "task_id": "HumanEval/108"}
{"generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 2)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones", "is_solved": true, "iteration": 5, "prompt_tokens": 4081, "completion_tokens": 698, "duration": 17.860578298568726, "task_id": "HumanEval/100"}
{"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(1 for x, y in zip(lst1, lst2) if x % 2 != 0 and y % 2 == 0) >= sum(1 for num in lst1 if num % 2 != 0) else \"NO\"", "is_solved": true, "iteration": 6, "prompt_tokens": 5379, "completion_tokens": 726, "duration": 16.95400905609131, "task_id": "HumanEval/110"}
{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "is_solved": false, "iteration": 8, "prompt_tokens": 5310, "completion_tokens": 840, "duration": 21.005818128585815, "task_id": "HumanEval/85"}
{"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)}n the str{i+1}ng {s} of the {i+1}nput.\" for i, s in enumerate(lst)]", "is_solved": false, "iteration": 8, "prompt_tokens": 7129, "completion_tokens": 993, "duration": 22.255476474761963, "task_id": "HumanEval/113"}
{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "is_solved": false, "iteration": 8, "prompt_tokens": 5756, "completion_tokens": 973, "duration": 25.890629529953003, "task_id": "HumanEval/65"}
{"generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    prime_values = [num for num in lst if is_prime(num)]\n    largest_prime = max(prime_values)\n    \n    return sum_of_digits(largest_prime)", "is_solved": false, "iteration": 8, "prompt_tokens": 11485, "completion_tokens": 1701, "duration": 34.07614612579346, "task_id": "HumanEval/94"}
{"generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        if gpa > 3.7:\n            return 'A'\n        if gpa > 3.3:\n            return 'A-'\n        if gpa > 3.0:\n            return 'B+'\n        if gpa > 2.7:\n            return 'B'\n        if gpa > 2.3:\n            return 'B-'\n        if gpa > 2.0:\n            return 'C+'\n        if gpa > 1.7:\n            return 'C'\n        if gpa > 1.3:\n            return 'C-'\n        if gpa > 1.0:\n            return 'D+'\n        if gpa > 0.7:\n            return 'D'\n        if gpa >= 0.0:\n            return 'D-'\n        return 'E'\n\n    return [grade(g) for g in grades]", "is_solved": false, "iteration": 8, "prompt_tokens": 11312, "completion_tokens": 2450, "duration": 92.99605941772461, "task_id": "HumanEval/81"}
{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 60, "duration": 3.7184066772460938, "task_id": "HumanEval/114"}
{"generated_code": "def select_words(s, n):\n    if not s:\n        return []\n    words = s.split()\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = []\n    for word in words:\n        if len([c for c in word if c in consonants]) == n:\n            result.append(word)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 86, "duration": 4.235817909240723, "task_id": "HumanEval/117"}
{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 98, "duration": 3.4160122871398926, "task_id": "HumanEval/118"}
{"generated_code": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n        return True\n    except:\n        return False", "is_solved": true, "iteration": 0, "prompt_tokens": 313, "completion_tokens": 149, "duration": 4.932066202163696, "task_id": "HumanEval/124"}
{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        product *= num // abs(num) if num != 0 else 0\n        sum_magnitudes += abs(num)\n    return product * sum_magnitudes", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 75, "duration": 3.701418399810791, "task_id": "HumanEval/128"}
{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(num) ** 2 for num in lst)", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 28, "duration": 3.7298011779785156, "task_id": "HumanEval/133"}
{"generated_code": "def largest_smallest_integers(lst):\n    negative_integers = [num for num in lst if num < 0]\n    positive_integers = [num for num in lst if num > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)", "is_solved": true, "iteration": 0, "prompt_tokens": 188, "completion_tokens": 90, "duration": 4.1900529861450195, "task_id": "HumanEval/136"}
{"generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        fact = 1\n        for j in range(1, i+1):\n            fact *= j\n        result *= fact\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 60, "duration": 5.106764793395996, "task_id": "HumanEval/139"}
{"generated_code": "def file_name_check(file_name):\n    if file_name.count(\".\") != 1:\n        return 'No'\n    file_parts = file_name.split(\".\")\n    if len(file_parts) != 2:\n        return 'No'\n    if not file_parts[0] or not file_parts[0][0].isalpha():\n        return 'No'\n    if len([c for c in file_parts[0] if c.isdigit()]) > 3:\n        return 'No'\n    if file_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 130, "duration": 2.550602436065674, "task_id": "HumanEval/141"}
{"generated_code": "from fractions import Fraction\n\ndef simplify(x, n):\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 34, "duration": 3.2925808429718018, "task_id": "HumanEval/144"}
{"generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 81, "duration": 4.610205888748169, "task_id": "HumanEval/146"}
{"generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n# Example\nn = 5\nprint(get_max_triples(n))", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 119, "duration": 5.007686138153076, "task_id": "HumanEval/147"}
{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    else:\n        return tuple(planets[end_idx+1:start_idx][::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 126, "duration": 2.1185858249664307, "task_id": "HumanEval/148"}
{"generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 78, "duration": 4.968517303466797, "task_id": "HumanEval/150"}
{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int))", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 39, "duration": 0.860107421875, "task_id": "HumanEval/151"}
{"generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.6411662101745605, "task_id": "HumanEval/152"}
{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def calc_strength(ext):\n        return sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\n    \n    max_strength = float('-inf')\n    strongest_ext = \"\"\n    \n    for ext in extensions:\n        strength = calc_strength(ext)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_ext = ext\n    \n    return f\"{class_name}.{strongest_ext}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 105, "duration": 1.6746180057525635, "task_id": "HumanEval/153"}
{"generated_code": "def even_odd_count(num):\n    even_count = len([i for i in str(abs(num)) if int(i) % 2 == 0])\n    odd_count = len([i for i in str(abs(num)) if int(i) % 2 != 0])\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 115, "completion_tokens": 65, "duration": 2.838606119155884, "task_id": "HumanEval/155"}
{"generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    \n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    \n    return result.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 143, "duration": 2.278186321258545, "task_id": "HumanEval/156"}
{"generated_code": "def right_angle_triangle(a, b, c):\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 63, "duration": 1.2231793403625488, "task_id": "HumanEval/157"}
{"generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n    \n    max_unique_chars = 0\n    max_word = \"\"\n    \n    for word in words:\n        curr_unique_chars = unique_chars(word)\n        if curr_unique_chars > max_unique_chars or (curr_unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = curr_unique_chars\n            max_word = word\n    \n    return max_word", "is_solved": true, "iteration": 0, "prompt_tokens": 170, "completion_tokens": 95, "duration": 5.631035089492798, "task_id": "HumanEval/158"}
{"generated_code": "def eat(number, need, remaining):\n    eaten = number + min(need, remaining)\n    left = max(remaining - need, 0)\n    return [eaten, left]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 43, "duration": 2.6561062335968018, "task_id": "HumanEval/159"}
{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 36, "duration": 0.8799667358398438, "task_id": "HumanEval/162"}
{"generated_code": "import math\n\ndef max_fill(grid, capacity):\n    wells = [sum(row) for row in grid]\n    total_water = sum(wells)\n    buckets_needed = math.ceil(total_water / capacity)\n    return buckets_needed", "is_solved": true, "iteration": 1, "prompt_tokens": 1416, "completion_tokens": 134, "duration": 5.6856091022491455, "task_id": "HumanEval/115"}
{"generated_code": "def digits(n):\n    prod = 1\n    all_even = True\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            all_even = False\n            prod *= int(digit)\n    return prod if not all_even else 0", "is_solved": true, "iteration": 1, "prompt_tokens": 732, "completion_tokens": 160, "duration": 3.3148694038391113, "task_id": "HumanEval/131"}
{"generated_code": "def generate_integers(a, b):\n    start, end = min(a, b), max(a, b)\n    return [i for i in range(start, end+1) if i % 2 == 0]", "is_solved": true, "iteration": 1, "prompt_tokens": 802, "completion_tokens": 150, "duration": 6.03239893913269, "task_id": "HumanEval/163"}
{"generated_code": "def match_parens(lst):\n    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(':\n                stack.append('(')\n            elif char == ')' and stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return 'No'\n    return 'Yes' if not stack else 'No'", "is_solved": true, "iteration": 1, "prompt_tokens": 919, "completion_tokens": 177, "duration": 6.368838787078857, "task_id": "HumanEval/119"}
{"generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if num < 100)", "is_solved": true, "iteration": 1, "prompt_tokens": 1015, "completion_tokens": 163, "duration": 5.92401123046875, "task_id": "HumanEval/122"}
{"generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "is_solved": true, "iteration": 2, "prompt_tokens": 2065, "completion_tokens": 171, "duration": 6.166127920150757, "task_id": "HumanEval/120"}
{"generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)) and len(set(lst)) == len(lst)", "is_solved": true, "iteration": 2, "prompt_tokens": 2078, "completion_tokens": 267, "duration": 9.003068685531616, "task_id": "HumanEval/126"}
{"generated_code": "def is_equal_to_sum_even(n):\n    count = 0\n    for i in range(2, n // 2 + 1, 2):\n        if n - i in range(2, n, 2) and n - i != i:\n            count += 1\n    return count >= 2", "is_solved": true, "iteration": 3, "prompt_tokens": 2170, "completion_tokens": 422, "duration": 12.801978588104248, "task_id": "HumanEval/138"}
{"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a + a) or len(a) == len(b) and b in (a[::-1] + a[::-1]) or b in (a[1:] + a[:1]) or b in (a[-1:] + a[:-1])", "is_solved": true, "iteration": 3, "prompt_tokens": 2190, "completion_tokens": 395, "duration": 12.20271372795105, "task_id": "HumanEval/154"}
{"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))", "is_solved": false, "iteration": 8, "prompt_tokens": 6194, "completion_tokens": 724, "duration": 18.111923456192017, "task_id": "HumanEval/145"}
{"generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "is_solved": false, "iteration": 8, "prompt_tokens": 6934, "completion_tokens": 778, "duration": 19.741817712783813, "task_id": "HumanEval/149"}
{"generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": false, "iteration": 8, "prompt_tokens": 6314, "completion_tokens": 810, "duration": 20.242000102996826, "task_id": "HumanEval/116"}
{"generated_code": "def can_arrange(arr):\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return i + 1\n    return -1", "is_solved": true, "iteration": 6, "prompt_tokens": 4764, "completion_tokens": 1063, "duration": 23.925065517425537, "task_id": "HumanEval/135"}
{"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if i % 2 == 0 and lst[i] % 2 != 0)", "is_solved": false, "iteration": 8, "prompt_tokens": 6192, "completion_tokens": 939, "duration": 20.043227434158325, "task_id": "HumanEval/121"}
{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    last_char = txt.strip()[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt.split()[-1]) == 1:\n        return True\n    return False", "is_solved": false, "iteration": 8, "prompt_tokens": 6259, "completion_tokens": 1010, "duration": 25.0665340423584, "task_id": "HumanEval/134"}
{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 8, "prompt_tokens": 6538, "completion_tokens": 1021, "duration": 21.33963394165039, "task_id": "HumanEval/142"}
{"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "is_solved": false, "iteration": 8, "prompt_tokens": 6033, "completion_tokens": 1069, "duration": 23.50607180595398, "task_id": "HumanEval/125"}
{"generated_code": "def solve(s):\n    result = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not has_letter:\n        return s[::-1]\n    return result", "is_solved": false, "iteration": 8, "prompt_tokens": 6050, "completion_tokens": 1153, "duration": 23.944557189941406, "task_id": "HumanEval/161"}
{"generated_code": "def fix_spaces(text):\n    return ''.join(['_' if c == ' ' else '-' if c == ' ' * 2 else c for c in text])\n\n# Test cases\nprint(fix_spaces(\"Example\"))  # \"Example\"\nprint(fix_spaces(\"Example 1\"))  # \"Example_1\"\nprint(fix_spaces(\" Example 2\"))  # \"_Example_2\"\nprint(fix_spaces(\" Example   3\"))  # \"_Example-3\"", "is_solved": false, "iteration": 8, "prompt_tokens": 5941, "completion_tokens": 1175, "duration": 27.05942964553833, "task_id": "HumanEval/140"}
{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "is_solved": false, "iteration": 8, "prompt_tokens": 6309, "completion_tokens": 1174, "duration": 26.601407766342163, "task_id": "HumanEval/143"}
{"generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a == b:\n            return None\n        return a if a > b else b\n    return a if type(a) == float else b", "is_solved": false, "iteration": 8, "prompt_tokens": 6655, "completion_tokens": 1161, "duration": 26.756325721740723, "task_id": "HumanEval/137"}
{"generated_code": "def is_nested(string):\n    stack = []\n    nested_found = False\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack and stack[-1] == '[':\n            stack.pop()\n            if len(stack) > 0:\n                nested_found = True\n    \n    return nested_found", "is_solved": false, "iteration": 8, "prompt_tokens": 7286, "completion_tokens": 1583, "duration": 33.94490051269531, "task_id": "HumanEval/132"}
{"generated_code": "def get_odd_collatz(n):\n    collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    \n    return sorted(list(set([num for num in collatz if num % 2 != 0])))", "is_solved": false, "iteration": 8, "prompt_tokens": 9457, "completion_tokens": 1492, "duration": 31.656819105148315, "task_id": "HumanEval/123"}
{"generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1]\n    else:\n        sequence = [0, 1, 1]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n        return sequence", "is_solved": false, "iteration": 8, "prompt_tokens": 8163, "completion_tokens": 1609, "duration": 34.20827293395996, "task_id": "HumanEval/130"}
{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    length = intersection_end - intersection_start + 1\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 8, "prompt_tokens": 9553, "completion_tokens": 2175, "duration": 39.594335317611694, "task_id": "HumanEval/127"}
{"generated_code": "def do_algebra(operators, operands):\n    expression = str(operands[0])\n    for i in range(len(operators)):\n        expression += operators[i] + str(operands[i + 1])\n    return eval(expression)", "is_solved": false, "iteration": 8, "prompt_tokens": 9334, "completion_tokens": 2180, "duration": 35.74738907814026, "task_id": "HumanEval/160"}
{"generated_code": "def minPath(grid, k):\n    def dfs(x, y, path_len, path):\n        if path_len == k:\n            return path[:]\n\n        min_path = None\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and not visited[nx][ny]:\n                visited[nx][ny] = True\n                new_path = dfs(nx, ny, path_len + 1, path + [grid[nx][ny]])\n                if new_path:\n                    if min_path is None or new_path < min_path:\n                        min_path = new_path\n                visited[nx][ny] = False\n\n        return min_path\n\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    result = None\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            visited[i][j] = True\n            new_path = dfs(i, j, 1, [grid[i][j]])\n            if new_path:\n                if result is None or new_path < result:\n                    result = new_path\n            visited[i][j] = False\n\n    return result", "is_solved": false, "iteration": 8, "prompt_tokens": 12186, "completion_tokens": 2976, "duration": 47.751160621643066, "task_id": "HumanEval/129"}
{"generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 61, "duration": 3.7879819869995117, "task_id": "HumanEval/0"}
{"generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    temp = ''\n    for char in paren_string:\n        if char == '(':\n            stack.append('(')\n            temp += '('\n        elif char == ')':\n            stack.pop()\n            temp += ')'\n            if not stack:\n                result.append(temp)\n                temp = ''\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 165, "completion_tokens": 86, "duration": 4.6310436725616455, "task_id": "HumanEval/1"}
{"generated_code": "def below_zero(operations):\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 37, "duration": 3.4491524696350098, "task_id": "HumanEval/3"}
{"generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 49, "duration": 3.9055840969085693, "task_id": "HumanEval/4"}
{"generated_code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 56, "duration": 3.8390955924987793, "task_id": "HumanEval/5"}
{"generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                if depth > max_depth:\n                    max_depth = depth\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 97, "duration": 4.703549146652222, "task_id": "HumanEval/6"}
{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        return sum(numbers), 1 if 0 in numbers else eval('*'.join(map(str, numbers)))\n\n# Test cases\nprint(sum_product([]))  # (0, 1)\nprint(sum_product([1, 2, 3, 4]))  # (10, 24)", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 103, "duration": 4.0435051918029785, "task_id": "HumanEval/8"}
{"generated_code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    maximum = float('-inf')\n    for num in numbers:\n        maximum = max(maximum, num)\n        result.append(maximum)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 150, "completion_tokens": 54, "duration": 3.7376515865325928, "task_id": "HumanEval/9"}
{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 41, "duration": 3.579258441925049, "task_id": "HumanEval/11"}
{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 42, "duration": 3.5393548011779785, "task_id": "HumanEval/13"}
{"generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 32, "duration": 3.6700150966644287, "task_id": "HumanEval/14"}
{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 27, "duration": 3.5287091732025146, "task_id": "HumanEval/15"}
{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 3.326807737350464, "task_id": "HumanEval/16"}
{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 74, "duration": 3.952439308166504, "task_id": "HumanEval/18"}
{"generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_map[x])\n    return ' '.join(sorted_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 103, "duration": 4.493385076522827, "task_id": "HumanEval/19"}
{"generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 53, "duration": 3.686016082763672, "task_id": "HumanEval/21"}
{"generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 31, "duration": 3.3969316482543945, "task_id": "HumanEval/22"}
{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 3.471254587173462, "task_id": "HumanEval/23"}
{"generated_code": "def largest_divisor(n: int) -> int:\n    return max([i for i in range(1, n) if n % i == 0])", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 37, "duration": 3.5331480503082275, "task_id": "HumanEval/24"}
{"generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 70, "duration": 4.299970865249634, "task_id": "HumanEval/25"}
{"generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 38, "duration": 3.51297664642334, "task_id": "HumanEval/26"}
{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 36, "duration": 3.3321757316589355, "task_id": "HumanEval/27"}
{"generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 20, "duration": 3.289001703262329, "task_id": "HumanEval/28"}
{"generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 34, "duration": 3.4382829666137695, "task_id": "HumanEval/29"}
{"generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 25, "duration": 3.446502208709717, "task_id": "HumanEval/30"}
{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 57, "duration": 3.4670627117156982, "task_id": "HumanEval/31"}
{"generated_code": "def sort_third(l: list):\n    sorted_indices = sorted([i for i in range(len(l)) if i % 3 == 0], key=lambda x: l[x])\n    sorted_values = [l[i] for i in sorted_indices]\n    result = l.copy()\n    for i, v in zip(sorted_indices, sorted_values):\n        result[i] = v\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 200, "completion_tokens": 85, "duration": 4.414771556854248, "task_id": "HumanEval/33"}
{"generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 17, "duration": 3.2383384704589844, "task_id": "HumanEval/34"}
{"generated_code": "def max_element(l: list):\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 16, "duration": 3.126251459121704, "task_id": "HumanEval/35"}
{"generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iteration": 0, "prompt_tokens": 208, "completion_tokens": 162, "duration": 4.739898920059204, "task_id": "HumanEval/38"}
{"generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 1:\n            return n\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    i = 0\n    while count < n:\n        i += 1\n        num = fibonacci(i)\n        if is_prime(num):\n            count += 1\n    return num", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 163, "duration": 4.843162536621094, "task_id": "HumanEval/39"}
{"generated_code": "def triples_sum_to_zero(l: list):\n    return any(sum((x, y, z)) == 0 for x in l for y in l for z in l if x != y != z)", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 46, "duration": 5.7354347705841064, "task_id": "HumanEval/40"}
{"generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 23, "duration": 5.429662704467773, "task_id": "HumanEval/42"}
{"generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 42, "duration": 4.737221002578735, "task_id": "HumanEval/43"}
{"generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 17, "duration": 6.2418904304504395, "task_id": "HumanEval/45"}
{"generated_code": "def fib4(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    fib_list = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib_list.append(fib_list[-1] + fib_list[-2] + fib_list[-3] + fib_list[-4])\n    \n    return fib_list[-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 116, "duration": 5.7989301681518555, "task_id": "HumanEval/46"}
{"generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 20, "duration": 4.236940145492554, "task_id": "HumanEval/48"}
{"generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 25, "duration": 5.464749574661255, "task_id": "HumanEval/49"}
{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in ['a', 'e', 'i', 'o', 'u']])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 42, "duration": 5.764646291732788, "task_id": "HumanEval/51"}
{"generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 26, "duration": 4.350031137466431, "task_id": "HumanEval/52"}
{"generated_code": "def add(x: int, y: int):\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 20, "duration": 5.648186683654785, "task_id": "HumanEval/53"}
{"generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 38, "duration": 6.5305821895599365, "task_id": "HumanEval/55"}
{"generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 64, "duration": 5.029238224029541, "task_id": "HumanEval/56"}
{"generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_length = max(len(s) for s in strings)\n    return min(s for s in strings if len(s) == max_length)", "is_solved": true, "iteration": 1, "prompt_tokens": 787, "completion_tokens": 154, "duration": 5.906060218811035, "task_id": "HumanEval/12"}
{"generated_code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    \n    result = ''\n    while x:\n        result = str(x % base) + result\n        x //= base\n        \n    return result", "is_solved": true, "iteration": 1, "prompt_tokens": 865, "completion_tokens": 162, "duration": 7.079901456832886, "task_id": "HumanEval/44"}
{"generated_code": "def sort_even(l: list):\n    even_values = sorted([val for idx, val in enumerate(l) if idx % 2 == 0])\n    result = [val if idx % 2 != 0 else even_values.pop(0) for idx, val in enumerate(l)]\n    return result", "is_solved": true, "iteration": 1, "prompt_tokens": 910, "completion_tokens": 194, "duration": 6.662741422653198, "task_id": "HumanEval/37"}
{"generated_code": "from scipy.optimize import fsolve\n\ndef find_zero(xs: list):\n    if len(xs) % 2 != 0:\n        raise ValueError(\"List must contain an even number of coefficients.\")\n\n    def poly_equation(x):\n        return sum([coeff * x ** i for i, coeff in enumerate(xs)])\n\n    zero = fsolve(poly_equation, 0)[0]\n    return zero", "is_solved": true, "iteration": 2, "prompt_tokens": 1918, "completion_tokens": 279, "duration": 8.79546594619751, "task_id": "HumanEval/32"}
{"generated_code": "def car_race_collision(n: int):\n    return n", "is_solved": true, "iteration": 3, "prompt_tokens": 2269, "completion_tokens": 267, "duration": 11.025530576705933, "task_id": "HumanEval/41"}
{"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": false, "iteration": 8, "prompt_tokens": 5021, "completion_tokens": 588, "duration": 18.060489177703857, "task_id": "HumanEval/2"}
{"generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "is_solved": false, "iteration": 8, "prompt_tokens": 5749, "completion_tokens": 725, "duration": 21.324050426483154, "task_id": "HumanEval/54"}
{"generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "is_solved": false, "iteration": 8, "prompt_tokens": 5995, "completion_tokens": 806, "duration": 23.693272352218628, "task_id": "HumanEval/7"}
{"generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": false, "iteration": 8, "prompt_tokens": 5946, "completion_tokens": 1087, "duration": 26.444097757339478, "task_id": "HumanEval/50"}
{"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "is_solved": false, "iteration": 8, "prompt_tokens": 5380, "completion_tokens": 1024, "duration": 23.82317566871643, "task_id": "HumanEval/36"}
{"generated_code": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    return [durations[note] for note in notes]", "is_solved": false, "iteration": 8, "prompt_tokens": 9256, "completion_tokens": 1051, "duration": 23.550111532211304, "task_id": "HumanEval/17"}
{"generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "is_solved": false, "iteration": 8, "prompt_tokens": 5512, "completion_tokens": 1036, "duration": 23.315857648849487, "task_id": "HumanEval/47"}
{"generated_code": "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n\n    for i in range(len(string), 0, -1):\n        if string[:i] == string[:i][::-1]:\n            return string + string[i-1::-1]\n\n    return string + string[:-1][::-1]", "is_solved": false, "iteration": 8, "prompt_tokens": 6229, "completion_tokens": 1196, "duration": 27.64208698272705, "task_id": "HumanEval/10"}
{"generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    \n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    \n    return closest_pair", "is_solved": false, "iteration": 8, "prompt_tokens": 9483, "completion_tokens": 1543, "duration": 31.585248470306396, "task_id": "HumanEval/20"}
{"generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 94, "completion_tokens": 64, "duration": 1.0854251384735107, "task_id": "HumanEval/83"}
{"generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 54, "duration": 5.898924827575684, "task_id": "HumanEval/57"}
{"generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 29, "duration": 4.415369749069214, "task_id": "HumanEval/58"}
{"generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 50, "duration": 4.908264875411987, "task_id": "HumanEval/59"}
{"generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 22, "duration": 4.242558002471924, "task_id": "HumanEval/60"}
{"generated_code": "def correct_bracketing(brackets: str):\n    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 68, "duration": 6.116909980773926, "task_id": "HumanEval/61"}
{"generated_code": "def derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 28, "duration": 3.1749978065490723, "task_id": "HumanEval/62"}
{"generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 72, "duration": 5.622449636459351, "task_id": "HumanEval/63"}
{"generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 5.672107219696045, "task_id": "HumanEval/66"}
{"generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 37, "duration": 5.641664266586304, "task_id": "HumanEval/67"}
{"generated_code": "def pluck(arr):\n    evens = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens, key=lambda x: (x[0], x[1]))\n    return [min_even[0], min_even[1]]", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 78, "duration": 5.097854852676392, "task_id": "HumanEval/68"}
{"generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 44, "duration": 5.86173415184021, "task_id": "HumanEval/70"}
{"generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 92, "duration": 6.1586079597473145, "task_id": "HumanEval/71"}
{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 5.8480916023254395, "task_id": "HumanEval/72"}
{"generated_code": "def smallest_change(arr):\n    length = len(arr)\n    changes = 0\n    for i in range(length // 2):\n        if arr[i] != arr[length - i - 1]:\n            changes += 1\n    return changes", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 55, "duration": 1.1043100357055664, "task_id": "HumanEval/73"}
{"generated_code": "def total_match(lst1, lst2):\n    sum1 = sum(len(x) for x in lst1)\n    sum2 = sum(len(x) for x in lst2)\n    \n    if sum1 < sum2:\n        return lst1\n    else:\n        return lst2", "is_solved": true, "iteration": 0, "prompt_tokens": 243, "completion_tokens": 63, "duration": 6.388736724853516, "task_id": "HumanEval/74"}
{"generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or (n != 1 and x % n == 0 and is_simple_power(x // n, n)))", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 52, "duration": 4.641237735748291, "task_id": "HumanEval/76"}
{"generated_code": "def hex_key(num):\n    prime_digits = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 60, "duration": 3.5844950675964355, "task_id": "HumanEval/78"}
{"generated_code": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal)[2:] + 'db'", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 25, "duration": 4.3092145919799805, "task_id": "HumanEval/79"}
{"generated_code": "def is_happy(s):\n    return all(s[i] != s[i+1] != s[i+2] for i in range(len(s)-2)) if len(s) >= 3 else False", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 47, "duration": 1.0319738388061523, "task_id": "HumanEval/80"}
{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 70, "duration": 3.4724762439727783, "task_id": "HumanEval/82"}
{"generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 21, "duration": 4.153321743011475, "task_id": "HumanEval/84"}
{"generated_code": "def anti_shuffle(s):\n    words = s.split()\n    result = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        result.append(ordered_word)\n    return ' '.join(result)", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 48, "duration": 4.981414556503296, "task_id": "HumanEval/86"}
{"generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 68, "duration": 4.027481555938721, "task_id": "HumanEval/87"}
{"generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            base = ord('a') if char.islower() else ord('A')\n            result += chr((ord(char) - base + 2 * 2) % 26 + base)\n        else:\n            result += char\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 76, "duration": 3.5757226943969727, "task_id": "HumanEval/89"}
{"generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 52, "duration": 4.791964769363403, "task_id": "HumanEval/90"}
{"generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences if sentence]\n    \n    count = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0] == \"I\":\n            count += 1\n    \n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 71, "duration": 3.5930309295654297, "task_id": "HumanEval/91"}
{"generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 54, "duration": 4.871682405471802, "task_id": "HumanEval/92"}
{"generated_code": "def encode(message):\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                result += chr((ord(char)+2 - ord('a')) % 26 + ord('A'))\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 159, "completion_tokens": 78, "duration": 3.3758485317230225, "task_id": "HumanEval/93"}
{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 87, "duration": 3.5806374549865723, "task_id": "HumanEval/96"}
{"generated_code": "def multiply(a, b):\n    return int(str(abs(a) % 10)) * int(str(abs(b) % 10))", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 27, "duration": 4.40070652961731, "task_id": "HumanEval/97"}
{"generated_code": "def count_upper(s):\n    return sum(1 for i in range(0, len(s), 2) if s[i] in 'AEIOU')", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 37, "duration": 4.357618093490601, "task_id": "HumanEval/98"}
{"generated_code": "def closest_integer(value):\n    value = float(value)\n    return int(value + 0.5) if value > 0 else int(value - 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 39, "duration": 4.614492893218994, "task_id": "HumanEval/99"}
{"generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(',', ' ').split()]", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 25, "duration": 2.786447525024414, "task_id": "HumanEval/101"}
{"generated_code": "def choose_num(x, y):\n    return max([i for i in range(x, y+1) if i % 2 == 0] + [-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 39, "duration": 2.6726202964782715, "task_id": "HumanEval/102"}
{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m-n+1))\n    return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 46, "duration": 3.154949903488159, "task_id": "HumanEval/103"}
{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 33, "duration": 2.7222673892974854, "task_id": "HumanEval/104"}
{"generated_code": "def by_length(arr):\n    nums = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    arr = [x for x in arr if 1 <= x <= 9]\n    arr.sort()\n    arr.reverse()\n    return [nums[x-1] for x in arr]", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 78, "duration": 3.382270097732544, "task_id": "HumanEval/105"}
{"generated_code": "def f(n):\n    def factorial(num):\n        if num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    \n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 92, "duration": 1.7012665271759033, "task_id": "HumanEval/106"}
{"generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count, odd_count = 0, 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 98, "duration": 3.75720477104187, "task_id": "HumanEval/107"}
{"generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    sorted_arr = sorted(arr)\n    for _ in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n        \n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 63, "duration": 3.3378124237060547, "task_id": "HumanEval/109"}
{"generated_code": "def reverse_delete(s, c):\n    result = \"\".join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 508, "completion_tokens": 78, "duration": 4.2718048095703125, "task_id": "HumanEval/112"}
{"generated_code": "def iscube(a):\n    return round(a**(1/3))**3 == a", "is_solved": true, "iteration": 1, "prompt_tokens": 775, "completion_tokens": 116, "duration": 6.249382495880127, "task_id": "HumanEval/77"}
{"generated_code": "def sort_array(array):\n    if not array:\n        return []\n    \n    sorted_array = sorted(array)\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array", "is_solved": true, "iteration": 1, "prompt_tokens": 1138, "completion_tokens": 154, "duration": 5.8989577293396, "task_id": "HumanEval/88"}
{"generated_code": "def search(lst):\n    from collections import Counter\n    counts = Counter(lst)\n    max_num = -1\n    for num, freq in counts.items():\n        if num > 0 and freq >= num:\n            max_num = max(max_num, num)\n    return max_num", "is_solved": true, "iteration": 1, "prompt_tokens": 1047, "completion_tokens": 171, "duration": 6.165938138961792, "task_id": "HumanEval/69"}
{"generated_code": "def histogram(test):\n    lst = test.split()\n    hist = {}\n    for letter in lst:\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    if not hist:\n        return {}\n    max_count = max(hist.values())\n    return {k: v for k, v in hist.items() if v == max_count}", "is_solved": true, "iteration": 1, "prompt_tokens": 1029, "completion_tokens": 212, "duration": 7.109571933746338, "task_id": "HumanEval/111"}
{"generated_code": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    \n    lowercase_keys = all(isinstance(key, str) and key.islower() for key in dict.keys())\n    uppercase_keys = all(isinstance(key, str) and key.isupper() for key in dict.keys())\n    \n    return lowercase_keys or uppercase_keys", "is_solved": true, "iteration": 1, "prompt_tokens": 1098, "completion_tokens": 223, "duration": 8.889286994934082, "task_id": "HumanEval/95"}
{"generated_code": "def vowels_count(s):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    \n    for char in s[:-1]:\n        if char.lower() in vowels:\n            count += 1\n    \n    if s[-1].lower() in vowels or (s[-1].lower() == 'y' and len(s) > 1 and s[-2].lower() not in vowels):\n        count += 1\n    \n    return count", "is_solved": true, "iteration": 1, "prompt_tokens": 861, "completion_tokens": 230, "duration": 8.132137298583984, "task_id": "HumanEval/64"}
{"generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 2)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones", "is_solved": true, "iteration": 3, "prompt_tokens": 2500, "completion_tokens": 419, "duration": 12.919414758682251, "task_id": "HumanEval/100"}
{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "is_solved": false, "iteration": 8, "prompt_tokens": 5244, "completion_tokens": 789, "duration": 19.385174036026, "task_id": "HumanEval/85"}
{"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(1 for num in lst1 if num % 2 != 0) <= len(lst2) else \"NO\"", "is_solved": false, "iteration": 8, "prompt_tokens": 7254, "completion_tokens": 1005, "duration": 22.60305380821228, "task_id": "HumanEval/110"}
{"generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num < 0:\n            num = str(num)[1:]\n        if sum(int(digit) for digit in str(num)) > 0:\n            count += 1\n    return count", "is_solved": false, "iteration": 8, "prompt_tokens": 6011, "completion_tokens": 949, "duration": 22.65377378463745, "task_id": "HumanEval/108"}
{"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)}n the str{i+1}ng {s} of the {i+1}nput.\" for i, s in enumerate(lst)]", "is_solved": false, "iteration": 8, "prompt_tokens": 7093, "completion_tokens": 968, "duration": 22.705677032470703, "task_id": "HumanEval/113"}
{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "is_solved": false, "iteration": 8, "prompt_tokens": 5840, "completion_tokens": 1060, "duration": 26.834014415740967, "task_id": "HumanEval/65"}
{"generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    prime_values = [num for num in lst if is_prime(num)]\n    largest_prime = max(prime_values)\n    \n    return sum_of_digits(largest_prime)", "is_solved": false, "iteration": 8, "prompt_tokens": 11313, "completion_tokens": 1583, "duration": 33.47152495384216, "task_id": "HumanEval/94"}
{"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    count = 0\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            count += 1\n    return count == 3", "is_solved": false, "iteration": 8, "prompt_tokens": 6648, "completion_tokens": 1804, "duration": 36.25831985473633, "task_id": "HumanEval/75"}
{"generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        if gpa > 3.7:\n            return 'A'\n        if gpa > 3.3:\n            return 'A-'\n        if gpa > 3.0:\n            return 'B+'\n        if gpa > 2.7:\n            return 'B'\n        if gpa > 2.3:\n            return 'B-'\n        if gpa > 2.0:\n            return 'C+'\n        if gpa > 1.7:\n            return 'C'\n        if gpa > 1.3:\n            return 'C-'\n        if gpa > 1.0:\n            return 'D+'\n        if gpa > 0.7:\n            return 'D'\n        if gpa >= 0.0:\n            return 'D-'\n        return 'E'\n\n    return [grade(g) for g in grades]", "is_solved": false, "iteration": 8, "prompt_tokens": 11249, "completion_tokens": 2536, "duration": 49.745965242385864, "task_id": "HumanEval/81"}
{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 60, "duration": 3.7184066772460938, "task_id": "HumanEval/114"}
{"generated_code": "def select_words(s, n):\n    if not s:\n        return []\n    words = s.split()\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = []\n    for word in words:\n        if len([c for c in word if c in consonants]) == n:\n            result.append(word)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 86, "duration": 4.235817909240723, "task_id": "HumanEval/117"}
{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 98, "duration": 3.4160122871398926, "task_id": "HumanEval/118"}
{"generated_code": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n        return True\n    except:\n        return False", "is_solved": true, "iteration": 0, "prompt_tokens": 313, "completion_tokens": 149, "duration": 4.932066202163696, "task_id": "HumanEval/124"}
{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        product *= num // abs(num) if num != 0 else 0\n        sum_magnitudes += abs(num)\n    return product * sum_magnitudes", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 75, "duration": 3.701418399810791, "task_id": "HumanEval/128"}
{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(num) ** 2 for num in lst)", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 28, "duration": 3.7298011779785156, "task_id": "HumanEval/133"}
{"generated_code": "def largest_smallest_integers(lst):\n    negative_integers = [num for num in lst if num < 0]\n    positive_integers = [num for num in lst if num > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)", "is_solved": true, "iteration": 0, "prompt_tokens": 188, "completion_tokens": 90, "duration": 4.1900529861450195, "task_id": "HumanEval/136"}
{"generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        fact = 1\n        for j in range(1, i+1):\n            fact *= j\n        result *= fact\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 60, "duration": 5.106764793395996, "task_id": "HumanEval/139"}
{"generated_code": "def file_name_check(file_name):\n    if file_name.count(\".\") != 1:\n        return 'No'\n    file_parts = file_name.split(\".\")\n    if len(file_parts) != 2:\n        return 'No'\n    if not file_parts[0] or not file_parts[0][0].isalpha():\n        return 'No'\n    if len([c for c in file_parts[0] if c.isdigit()]) > 3:\n        return 'No'\n    if file_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 130, "duration": 2.550602436065674, "task_id": "HumanEval/141"}
{"generated_code": "from fractions import Fraction\n\ndef simplify(x, n):\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 34, "duration": 3.2925808429718018, "task_id": "HumanEval/144"}
{"generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 81, "duration": 4.610205888748169, "task_id": "HumanEval/146"}
{"generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n# Example\nn = 5\nprint(get_max_triples(n))", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 119, "duration": 5.007686138153076, "task_id": "HumanEval/147"}
{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    else:\n        return tuple(planets[end_idx+1:start_idx][::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 126, "duration": 2.1185858249664307, "task_id": "HumanEval/148"}
{"generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 78, "duration": 4.968517303466797, "task_id": "HumanEval/150"}
{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int))", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 39, "duration": 0.860107421875, "task_id": "HumanEval/151"}
{"generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.6411662101745605, "task_id": "HumanEval/152"}
{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def calc_strength(ext):\n        return sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\n    \n    max_strength = float('-inf')\n    strongest_ext = \"\"\n    \n    for ext in extensions:\n        strength = calc_strength(ext)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_ext = ext\n    \n    return f\"{class_name}.{strongest_ext}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 105, "duration": 1.6746180057525635, "task_id": "HumanEval/153"}
{"generated_code": "def even_odd_count(num):\n    even_count = len([i for i in str(abs(num)) if int(i) % 2 == 0])\n    odd_count = len([i for i in str(abs(num)) if int(i) % 2 != 0])\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 115, "completion_tokens": 65, "duration": 2.838606119155884, "task_id": "HumanEval/155"}
{"generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    \n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    \n    return result.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 143, "duration": 2.278186321258545, "task_id": "HumanEval/156"}
{"generated_code": "def right_angle_triangle(a, b, c):\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 63, "duration": 1.2231793403625488, "task_id": "HumanEval/157"}
{"generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n    \n    max_unique_chars = 0\n    max_word = \"\"\n    \n    for word in words:\n        curr_unique_chars = unique_chars(word)\n        if curr_unique_chars > max_unique_chars or (curr_unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = curr_unique_chars\n            max_word = word\n    \n    return max_word", "is_solved": true, "iteration": 0, "prompt_tokens": 170, "completion_tokens": 95, "duration": 5.631035089492798, "task_id": "HumanEval/158"}
{"generated_code": "def eat(number, need, remaining):\n    eaten = number + min(need, remaining)\n    left = max(remaining - need, 0)\n    return [eaten, left]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 43, "duration": 2.6561062335968018, "task_id": "HumanEval/159"}
{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 36, "duration": 0.8799667358398438, "task_id": "HumanEval/162"}
{"generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "is_solved": true, "iteration": 1, "prompt_tokens": 1168, "completion_tokens": 96, "duration": 4.2674078941345215, "task_id": "HumanEval/120"}
{"generated_code": "import math\n\ndef max_fill(grid, capacity):\n    wells = [sum(row) for row in grid]\n    total_water = sum(wells)\n    buckets_needed = math.ceil(total_water / capacity)\n    return buckets_needed", "is_solved": true, "iteration": 1, "prompt_tokens": 1426, "completion_tokens": 144, "duration": 5.837020397186279, "task_id": "HumanEval/115"}
{"generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if num < 100)", "is_solved": true, "iteration": 1, "prompt_tokens": 982, "completion_tokens": 130, "duration": 5.3176515102386475, "task_id": "HumanEval/122"}
{"generated_code": "def generate_integers(a, b):\n    start, end = min(a, b), max(a, b)\n    return [i for i in range(start, end+1) if i % 2 == 0]", "is_solved": true, "iteration": 1, "prompt_tokens": 776, "completion_tokens": 124, "duration": 6.109264373779297, "task_id": "HumanEval/163"}
{"generated_code": "def match_parens(lst):\n    def is_balanced(s):\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append('(')\n            elif char == ')' and stack:\n                stack.pop()\n            else:\n                return False\n        return not stack\n\n    return 'Yes' if is_balanced(lst[0] + lst[1]) else 'No'", "is_solved": true, "iteration": 1, "prompt_tokens": 938, "completion_tokens": 204, "duration": 6.2782275676727295, "task_id": "HumanEval/119"}
{"generated_code": "def digits(n):\n    prod = 1\n    all_even = True\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            prod *= int(digit)\n            all_even = False\n    return prod if not all_even else 0", "is_solved": true, "iteration": 1, "prompt_tokens": 756, "completion_tokens": 184, "duration": 4.022902011871338, "task_id": "HumanEval/131"}
{"generated_code": "def is_nested(string):\n    nested = False\n    opening_brackets = 0\n    \n    for char in string:\n        if char == '[':\n            opening_brackets += 1\n        elif char == ']':\n            opening_brackets -= 1\n            if opening_brackets > 0:\n                nested = True\n    \n    return nested", "is_solved": true, "iteration": 2, "prompt_tokens": 1863, "completion_tokens": 433, "duration": 12.68208646774292, "task_id": "HumanEval/132"}
{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    if intersection_start > intersection_end:\n        return \"NO\"\n    \n    intersection_length = intersection_end - intersection_start\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": true, "iteration": 4, "prompt_tokens": 4812, "completion_tokens": 1091, "duration": 22.0734806060791, "task_id": "HumanEval/127"}
{"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)", "is_solved": false, "iteration": 8, "prompt_tokens": 5937, "completion_tokens": 732, "duration": 17.50193428993225, "task_id": "HumanEval/121"}
{"generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": false, "iteration": 8, "prompt_tokens": 6282, "completion_tokens": 787, "duration": 20.572352409362793, "task_id": "HumanEval/116"}
{"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))", "is_solved": false, "iteration": 8, "prompt_tokens": 6175, "completion_tokens": 704, "duration": 19.234987258911133, "task_id": "HumanEval/145"}
{"generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "is_solved": false, "iteration": 8, "prompt_tokens": 6922, "completion_tokens": 748, "duration": 22.185890436172485, "task_id": "HumanEval/149"}
{"generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1) if lst.count(lst[i]) == 1)", "is_solved": false, "iteration": 8, "prompt_tokens": 7353, "completion_tokens": 819, "duration": 21.89892816543579, "task_id": "HumanEval/126"}
{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 8, "prompt_tokens": 6493, "completion_tokens": 976, "duration": 21.34851622581482, "task_id": "HumanEval/142"}
{"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a*2)", "is_solved": false, "iteration": 8, "prompt_tokens": 5677, "completion_tokens": 902, "duration": 22.308433294296265, "task_id": "HumanEval/154"}
{"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "is_solved": false, "iteration": 8, "prompt_tokens": 6068, "completion_tokens": 1095, "duration": 24.82129168510437, "task_id": "HumanEval/125"}
{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "is_solved": false, "iteration": 8, "prompt_tokens": 6094, "completion_tokens": 1086, "duration": 24.209270000457764, "task_id": "HumanEval/143"}
{"generated_code": "def solve(s):\n    result = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not has_letter:\n        return s[::-1]\n    return result", "is_solved": false, "iteration": 8, "prompt_tokens": 6097, "completion_tokens": 1127, "duration": 26.57041835784912, "task_id": "HumanEval/161"}
{"generated_code": "def is_equal_to_sum_even(n):\n    return n % 4 == 0 or n > 8", "is_solved": false, "iteration": 8, "prompt_tokens": 5634, "completion_tokens": 1059, "duration": 28.836225032806396, "task_id": "HumanEval/138"}
{"generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a == b:\n            return None\n        return a if a > b else b\n    return a if type(a) == float else b", "is_solved": false, "iteration": 8, "prompt_tokens": 6682, "completion_tokens": 1142, "duration": 25.201526165008545, "task_id": "HumanEval/137"}
{"generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1]\n    else:\n        sequence = [0, 1, 1]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n        return sequence", "is_solved": false, "iteration": 8, "prompt_tokens": 7763, "completion_tokens": 1362, "duration": 29.540401697158813, "task_id": "HumanEval/130"}
{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    last_char = txt.strip()[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt.split()[-1]) == 1:\n        return True\n    return False", "is_solved": false, "iteration": 8, "prompt_tokens": 6367, "completion_tokens": 1099, "duration": 28.74705410003662, "task_id": "HumanEval/134"}
{"generated_code": "def get_odd_collatz(n):\n    collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    \n    return sorted(list(set([num for num in collatz if num % 2 != 0])))", "is_solved": false, "iteration": 8, "prompt_tokens": 8512, "completion_tokens": 1258, "duration": 27.99172282218933, "task_id": "HumanEval/123"}
{"generated_code": "def fix_spaces(text):\n    return ''.join(['_' if c == ' ' else '-' if c == ' ' * 2 else c for c in text])\n\n# Test cases\nprint(fix_spaces(\"Example\"))  # \"Example\"\nprint(fix_spaces(\"Example 1\"))  # \"Example_1\"\nprint(fix_spaces(\" Example 2\"))  # \"_Example_2\"\nprint(fix_spaces(\" Example   3\"))  # \"_Example-3\"", "is_solved": false, "iteration": 8, "prompt_tokens": 7176, "completion_tokens": 1805, "duration": 36.695340156555176, "task_id": "HumanEval/140"}
{"generated_code": "def do_algebra(operators, operands):\n    expression = str(operands[0])\n    for i in range(len(operators)):\n        expression += operators[i] + str(operands[i + 1])\n    return eval(expression)", "is_solved": false, "iteration": 8, "prompt_tokens": 10425, "completion_tokens": 2724, "duration": 46.12507367134094, "task_id": "HumanEval/160"}
{"generated_code": "def minPath(grid, k):\n    def dfs(x, y, path_len, path):\n        if path_len == k:\n            return path\n\n        paths = []\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and not visited[nx][ny]:\n                visited[nx][ny] = True\n                new_path = dfs(nx, ny, path_len + 1, path + [grid[nx][ny]])\n                if new_path:\n                    paths.append(new_path)\n                visited[nx][ny] = False\n\n        if paths:\n            return min(paths)\n\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    min_path = []\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            visited[i][j] = True\n            result = dfs(i, j, 1, [grid[i][j]])\n            visited[i][j] = False\n            if result:\n                if not min_path or result < min_path:\n                    min_path = result\n\n    return min_path", "is_solved": false, "iteration": 8, "prompt_tokens": 12240, "completion_tokens": 2983, "duration": 52.208271741867065, "task_id": "HumanEval/129"}
{"generated_code": "def can_arrange(arr):\n    index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            index = i-1\n            break\n    return index", "is_solved": false, "iteration": 8, "prompt_tokens": 5625, "completion_tokens": 1024, "duration": 72.96737098693848, "task_id": "HumanEval/135"}
{"generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 61, "duration": 3.7879819869995117, "task_id": "HumanEval/0"}
{"generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    temp = ''\n    for char in paren_string:\n        if char == '(':\n            stack.append('(')\n            temp += '('\n        elif char == ')':\n            stack.pop()\n            temp += ')'\n            if not stack:\n                result.append(temp)\n                temp = ''\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 165, "completion_tokens": 86, "duration": 4.6310436725616455, "task_id": "HumanEval/1"}
{"generated_code": "def below_zero(operations):\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 37, "duration": 3.4491524696350098, "task_id": "HumanEval/3"}
{"generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 49, "duration": 3.9055840969085693, "task_id": "HumanEval/4"}
{"generated_code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 56, "duration": 3.8390955924987793, "task_id": "HumanEval/5"}
{"generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                if depth > max_depth:\n                    max_depth = depth\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 97, "duration": 4.703549146652222, "task_id": "HumanEval/6"}
{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        return sum(numbers), 1 if 0 in numbers else eval('*'.join(map(str, numbers)))\n\n# Test cases\nprint(sum_product([]))  # (0, 1)\nprint(sum_product([1, 2, 3, 4]))  # (10, 24)", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 103, "duration": 4.0435051918029785, "task_id": "HumanEval/8"}
{"generated_code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    maximum = float('-inf')\n    for num in numbers:\n        maximum = max(maximum, num)\n        result.append(maximum)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 150, "completion_tokens": 54, "duration": 3.7376515865325928, "task_id": "HumanEval/9"}
{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 41, "duration": 3.579258441925049, "task_id": "HumanEval/11"}
{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 42, "duration": 3.5393548011779785, "task_id": "HumanEval/13"}
{"generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 32, "duration": 3.6700150966644287, "task_id": "HumanEval/14"}
{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 27, "duration": 3.5287091732025146, "task_id": "HumanEval/15"}
{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 3.326807737350464, "task_id": "HumanEval/16"}
{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 74, "duration": 3.952439308166504, "task_id": "HumanEval/18"}
{"generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_map[x])\n    return ' '.join(sorted_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 103, "duration": 4.493385076522827, "task_id": "HumanEval/19"}
{"generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 53, "duration": 3.686016082763672, "task_id": "HumanEval/21"}
{"generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 31, "duration": 3.3969316482543945, "task_id": "HumanEval/22"}
{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 3.471254587173462, "task_id": "HumanEval/23"}
{"generated_code": "def largest_divisor(n: int) -> int:\n    return max([i for i in range(1, n) if n % i == 0])", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 37, "duration": 3.5331480503082275, "task_id": "HumanEval/24"}
{"generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 70, "duration": 4.299970865249634, "task_id": "HumanEval/25"}
{"generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 38, "duration": 3.51297664642334, "task_id": "HumanEval/26"}
{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 36, "duration": 3.3321757316589355, "task_id": "HumanEval/27"}
{"generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 20, "duration": 3.289001703262329, "task_id": "HumanEval/28"}
{"generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 34, "duration": 3.4382829666137695, "task_id": "HumanEval/29"}
{"generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 25, "duration": 3.446502208709717, "task_id": "HumanEval/30"}
{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 57, "duration": 3.4670627117156982, "task_id": "HumanEval/31"}
{"generated_code": "def sort_third(l: list):\n    sorted_indices = sorted([i for i in range(len(l)) if i % 3 == 0], key=lambda x: l[x])\n    sorted_values = [l[i] for i in sorted_indices]\n    result = l.copy()\n    for i, v in zip(sorted_indices, sorted_values):\n        result[i] = v\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 200, "completion_tokens": 85, "duration": 4.414771556854248, "task_id": "HumanEval/33"}
{"generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 17, "duration": 3.2383384704589844, "task_id": "HumanEval/34"}
{"generated_code": "def max_element(l: list):\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 16, "duration": 3.126251459121704, "task_id": "HumanEval/35"}
{"generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iteration": 0, "prompt_tokens": 208, "completion_tokens": 162, "duration": 4.739898920059204, "task_id": "HumanEval/38"}
{"generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 1:\n            return n\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    i = 0\n    while count < n:\n        i += 1\n        num = fibonacci(i)\n        if is_prime(num):\n            count += 1\n    return num", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 163, "duration": 4.843162536621094, "task_id": "HumanEval/39"}
{"generated_code": "def triples_sum_to_zero(l: list):\n    return any(sum((x, y, z)) == 0 for x in l for y in l for z in l if x != y != z)", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 46, "duration": 5.7354347705841064, "task_id": "HumanEval/40"}
{"generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 23, "duration": 5.429662704467773, "task_id": "HumanEval/42"}
{"generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 42, "duration": 4.737221002578735, "task_id": "HumanEval/43"}
{"generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 17, "duration": 6.2418904304504395, "task_id": "HumanEval/45"}
{"generated_code": "def fib4(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    fib_list = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib_list.append(fib_list[-1] + fib_list[-2] + fib_list[-3] + fib_list[-4])\n    \n    return fib_list[-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 116, "duration": 5.7989301681518555, "task_id": "HumanEval/46"}
{"generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 20, "duration": 4.236940145492554, "task_id": "HumanEval/48"}
{"generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 25, "duration": 5.464749574661255, "task_id": "HumanEval/49"}
{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in ['a', 'e', 'i', 'o', 'u']])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 42, "duration": 5.764646291732788, "task_id": "HumanEval/51"}
{"generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 26, "duration": 4.350031137466431, "task_id": "HumanEval/52"}
{"generated_code": "def add(x: int, y: int):\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 20, "duration": 5.648186683654785, "task_id": "HumanEval/53"}
{"generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 38, "duration": 6.5305821895599365, "task_id": "HumanEval/55"}
{"generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 64, "duration": 5.029238224029541, "task_id": "HumanEval/56"}
{"generated_code": "def sort_even(l: list):\n    even_values = sorted([x for x in l[::2]])\n    result = [even_values.pop(0) if idx % 2 == 0 else val for idx, val in enumerate(l)]\n    return result", "is_solved": true, "iteration": 1, "prompt_tokens": 873, "completion_tokens": 148, "duration": 6.079292058944702, "task_id": "HumanEval/37"}
{"generated_code": "def find_zero(xs: list):\n    def poly(x):\n        return sum([coeff * x ** i for i, coeff in enumerate(xs)])\n    \n    # Initial guess for the root\n    x0 = 0.0\n    \n    # Use Newton's method to find the root\n    while True:\n        slope = (poly(x0 + 0.0001) - poly(x0)) / 0.0001\n        x1 = x0 - poly(x0) / slope\n        if abs(x1 - x0) < 0.0001:\n            return x1\n        x0 = x1", "is_solved": true, "iteration": 1, "prompt_tokens": 1080, "completion_tokens": 222, "duration": 6.7970781326293945, "task_id": "HumanEval/32"}
{"generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return min(strings, key=lambda x: (-len(x), x))", "is_solved": true, "iteration": 3, "prompt_tokens": 1990, "completion_tokens": 275, "duration": 9.205454349517822, "task_id": "HumanEval/12"}
{"generated_code": "def change_base(x: int, base: int):\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)", "is_solved": true, "iteration": 3, "prompt_tokens": 2177, "completion_tokens": 333, "duration": 11.072743892669678, "task_id": "HumanEval/44"}
{"generated_code": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)", "is_solved": true, "iteration": 4, "prompt_tokens": 3212, "completion_tokens": 372, "duration": 13.160043716430664, "task_id": "HumanEval/54"}
{"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": false, "iteration": 8, "prompt_tokens": 5063, "completion_tokens": 644, "duration": 18.469053506851196, "task_id": "HumanEval/2"}
{"generated_code": "def car_race_collision(n: int):\n    return n if n > 1 else 0", "is_solved": false, "iteration": 8, "prompt_tokens": 5675, "completion_tokens": 686, "duration": 20.691604614257812, "task_id": "HumanEval/41"}
{"generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "is_solved": false, "iteration": 8, "prompt_tokens": 6029, "completion_tokens": 807, "duration": 20.679731845855713, "task_id": "HumanEval/7"}
{"generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": false, "iteration": 8, "prompt_tokens": 6208, "completion_tokens": 1083, "duration": 25.98009419441223, "task_id": "HumanEval/50"}
{"generated_code": "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    \n    for i in range(len(string), 0, -1):\n        if string[:i] == string[:i][::-1]:\n            return string + string[i-1::-1]", "is_solved": false, "iteration": 8, "prompt_tokens": 6119, "completion_tokens": 1131, "duration": 24.47459840774536, "task_id": "HumanEval/10"}
{"generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "is_solved": false, "iteration": 8, "prompt_tokens": 5625, "completion_tokens": 1142, "duration": 23.27336812019348, "task_id": "HumanEval/47"}
{"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "is_solved": false, "iteration": 8, "prompt_tokens": 5601, "completion_tokens": 1118, "duration": 25.981904983520508, "task_id": "HumanEval/36"}
{"generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    \n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    \n    return closest_pair", "is_solved": false, "iteration": 8, "prompt_tokens": 9457, "completion_tokens": 1480, "duration": 29.85641074180603, "task_id": "HumanEval/20"}
{"generated_code": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    return [durations[note] for note in notes]", "is_solved": false, "iteration": 8, "prompt_tokens": 10056, "completion_tokens": 1445, "duration": 31.50822877883911, "task_id": "HumanEval/17"}
{"generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 94, "completion_tokens": 64, "duration": 1.0854251384735107, "task_id": "HumanEval/83"}
{"generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 54, "duration": 5.898924827575684, "task_id": "HumanEval/57"}
{"generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 29, "duration": 4.415369749069214, "task_id": "HumanEval/58"}
{"generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 50, "duration": 4.908264875411987, "task_id": "HumanEval/59"}
{"generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 22, "duration": 4.242558002471924, "task_id": "HumanEval/60"}
{"generated_code": "def correct_bracketing(brackets: str):\n    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 68, "duration": 6.116909980773926, "task_id": "HumanEval/61"}
{"generated_code": "def derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 28, "duration": 3.1749978065490723, "task_id": "HumanEval/62"}
{"generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 72, "duration": 5.622449636459351, "task_id": "HumanEval/63"}
{"generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 5.672107219696045, "task_id": "HumanEval/66"}
{"generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 37, "duration": 5.641664266586304, "task_id": "HumanEval/67"}
{"generated_code": "def pluck(arr):\n    evens = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens, key=lambda x: (x[0], x[1]))\n    return [min_even[0], min_even[1]]", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 78, "duration": 5.097854852676392, "task_id": "HumanEval/68"}
{"generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 44, "duration": 5.86173415184021, "task_id": "HumanEval/70"}
{"generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 92, "duration": 6.1586079597473145, "task_id": "HumanEval/71"}
{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 5.8480916023254395, "task_id": "HumanEval/72"}
{"generated_code": "def smallest_change(arr):\n    length = len(arr)\n    changes = 0\n    for i in range(length // 2):\n        if arr[i] != arr[length - i - 1]:\n            changes += 1\n    return changes", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 55, "duration": 1.1043100357055664, "task_id": "HumanEval/73"}
{"generated_code": "def total_match(lst1, lst2):\n    sum1 = sum(len(x) for x in lst1)\n    sum2 = sum(len(x) for x in lst2)\n    \n    if sum1 < sum2:\n        return lst1\n    else:\n        return lst2", "is_solved": true, "iteration": 0, "prompt_tokens": 243, "completion_tokens": 63, "duration": 6.388736724853516, "task_id": "HumanEval/74"}
{"generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or (n != 1 and x % n == 0 and is_simple_power(x // n, n)))", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 52, "duration": 4.641237735748291, "task_id": "HumanEval/76"}
{"generated_code": "def hex_key(num):\n    prime_digits = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 60, "duration": 3.5844950675964355, "task_id": "HumanEval/78"}
{"generated_code": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal)[2:] + 'db'", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 25, "duration": 4.3092145919799805, "task_id": "HumanEval/79"}
{"generated_code": "def is_happy(s):\n    return all(s[i] != s[i+1] != s[i+2] for i in range(len(s)-2)) if len(s) >= 3 else False", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 47, "duration": 1.0319738388061523, "task_id": "HumanEval/80"}
{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 70, "duration": 3.4724762439727783, "task_id": "HumanEval/82"}
{"generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 21, "duration": 4.153321743011475, "task_id": "HumanEval/84"}
{"generated_code": "def anti_shuffle(s):\n    words = s.split()\n    result = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        result.append(ordered_word)\n    return ' '.join(result)", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 48, "duration": 4.981414556503296, "task_id": "HumanEval/86"}
{"generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 68, "duration": 4.027481555938721, "task_id": "HumanEval/87"}
{"generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            base = ord('a') if char.islower() else ord('A')\n            result += chr((ord(char) - base + 2 * 2) % 26 + base)\n        else:\n            result += char\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 76, "duration": 3.5757226943969727, "task_id": "HumanEval/89"}
{"generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 52, "duration": 4.791964769363403, "task_id": "HumanEval/90"}
{"generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences if sentence]\n    \n    count = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0] == \"I\":\n            count += 1\n    \n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 71, "duration": 3.5930309295654297, "task_id": "HumanEval/91"}
{"generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 54, "duration": 4.871682405471802, "task_id": "HumanEval/92"}
{"generated_code": "def encode(message):\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                result += chr((ord(char)+2 - ord('a')) % 26 + ord('A'))\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 159, "completion_tokens": 78, "duration": 3.3758485317230225, "task_id": "HumanEval/93"}
{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 87, "duration": 3.5806374549865723, "task_id": "HumanEval/96"}
{"generated_code": "def multiply(a, b):\n    return int(str(abs(a) % 10)) * int(str(abs(b) % 10))", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 27, "duration": 4.40070652961731, "task_id": "HumanEval/97"}
{"generated_code": "def count_upper(s):\n    return sum(1 for i in range(0, len(s), 2) if s[i] in 'AEIOU')", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 37, "duration": 4.357618093490601, "task_id": "HumanEval/98"}
{"generated_code": "def closest_integer(value):\n    value = float(value)\n    return int(value + 0.5) if value > 0 else int(value - 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 39, "duration": 4.614492893218994, "task_id": "HumanEval/99"}
{"generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(',', ' ').split()]", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 25, "duration": 2.786447525024414, "task_id": "HumanEval/101"}
{"generated_code": "def choose_num(x, y):\n    return max([i for i in range(x, y+1) if i % 2 == 0] + [-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 39, "duration": 2.6726202964782715, "task_id": "HumanEval/102"}
{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m-n+1))\n    return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 46, "duration": 3.154949903488159, "task_id": "HumanEval/103"}
{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 33, "duration": 2.7222673892974854, "task_id": "HumanEval/104"}
{"generated_code": "def by_length(arr):\n    nums = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    arr = [x for x in arr if 1 <= x <= 9]\n    arr.sort()\n    arr.reverse()\n    return [nums[x-1] for x in arr]", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 78, "duration": 3.382270097732544, "task_id": "HumanEval/105"}
{"generated_code": "def f(n):\n    def factorial(num):\n        if num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    \n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 92, "duration": 1.7012665271759033, "task_id": "HumanEval/106"}
{"generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count, odd_count = 0, 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 98, "duration": 3.75720477104187, "task_id": "HumanEval/107"}
{"generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    sorted_arr = sorted(arr)\n    for _ in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n        \n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 63, "duration": 3.3378124237060547, "task_id": "HumanEval/109"}
{"generated_code": "def reverse_delete(s, c):\n    result = \"\".join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 508, "completion_tokens": 78, "duration": 4.2718048095703125, "task_id": "HumanEval/112"}
{"generated_code": "def sort_array(array):\n    if not array:\n        return []\n    \n    sorted_array = sorted(array)\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array", "is_solved": true, "iteration": 1, "prompt_tokens": 1148, "completion_tokens": 164, "duration": 6.17078161239624, "task_id": "HumanEval/88"}
{"generated_code": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    \n    keys = dict.keys()\n    if all(isinstance(key, str) for key in keys):\n        lowercase_keys = all(key.islower() for key in keys)\n        uppercase_keys = all(key.isupper() for key in keys)\n        return lowercase_keys or uppercase_keys\n    else:\n        return False", "is_solved": true, "iteration": 1, "prompt_tokens": 1046, "completion_tokens": 182, "duration": 8.671141386032104, "task_id": "HumanEval/95"}
{"generated_code": "def search(lst):\n    from collections import Counter\n    counts = Counter(lst)\n    result = -1\n    for num, freq in counts.items():\n        if num > 0 and freq >= num:\n            result = max(result, num)\n    return result", "is_solved": true, "iteration": 1, "prompt_tokens": 1054, "completion_tokens": 174, "duration": 6.476558446884155, "task_id": "HumanEval/69"}
{"generated_code": "def histogram(test):\n    lst = test.split()\n    hist = {}\n    for letter in lst:\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    if not hist:\n        return {}\n    max_count = max(hist.values())\n    return {k: v for k, v in hist.items() if v == max_count}", "is_solved": true, "iteration": 1, "prompt_tokens": 1054, "completion_tokens": 237, "duration": 7.63893723487854, "task_id": "HumanEval/111"}
{"generated_code": "import math\n\ndef iscube(a):\n    return round(a ** (1/3)) ** 3 == a", "is_solved": true, "iteration": 2, "prompt_tokens": 1360, "completion_tokens": 182, "duration": 7.938718318939209, "task_id": "HumanEval/77"}
{"generated_code": "def vowels_count(s):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    \n    for char in s[:-1]:\n        if char.lower() in vowels:\n            count += 1\n    \n    last_char = s[-1].lower()\n    if (last_char == 'y' and len(s) > 1) or last_char in vowels:\n        count += 1\n    \n    return count", "is_solved": true, "iteration": 2, "prompt_tokens": 1599, "completion_tokens": 394, "duration": 11.500600814819336, "task_id": "HumanEval/64"}
{"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(num % 2 != 0 for num in lst1) <= len([num for num in lst2 if num % 2 == 0]) else \"NO\"", "is_solved": true, "iteration": 3, "prompt_tokens": 2847, "completion_tokens": 420, "duration": 10.530551195144653, "task_id": "HumanEval/110"}
{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "is_solved": false, "iteration": 8, "prompt_tokens": 5256, "completion_tokens": 812, "duration": 20.060673475265503, "task_id": "HumanEval/85"}
{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "is_solved": false, "iteration": 8, "prompt_tokens": 5855, "completion_tokens": 1039, "duration": 25.520861625671387, "task_id": "HumanEval/65"}
{"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)}n the str{i+1}ng {s} of the {i+1}nput.\" for i, s in enumerate(lst)]", "is_solved": false, "iteration": 8, "prompt_tokens": 7110, "completion_tokens": 967, "duration": 21.647689819335938, "task_id": "HumanEval/113"}
{"generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num < 0:\n            num = str(num)[1:]\n        if sum(int(digit) for digit in str(num)) > 0:\n            count += 1\n    return count", "is_solved": false, "iteration": 8, "prompt_tokens": 6006, "completion_tokens": 945, "duration": 22.30662965774536, "task_id": "HumanEval/108"}
{"generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            n += 2\n        else:\n            n += 1\n        stones.append(n)\n    return stones", "is_solved": false, "iteration": 8, "prompt_tokens": 6471, "completion_tokens": 1047, "duration": 25.51604986190796, "task_id": "HumanEval/100"}
{"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_factors = []\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            prime_factors.append(i)\n            if len(prime_factors) > 3:\n                return False\n    \n    return len(prime_factors) == 3 and a == prime_factors[0] * prime_factors[1] * prime_factors[2]", "is_solved": true, "iteration": 6, "prompt_tokens": 4782, "completion_tokens": 1215, "duration": 28.876721382141113, "task_id": "HumanEval/75"}
{"generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    prime_values = [num for num in lst if is_prime(num)]\n    largest_prime = max(prime_values)\n    \n    return sum_of_digits(largest_prime)", "is_solved": false, "iteration": 8, "prompt_tokens": 11459, "completion_tokens": 1724, "duration": 34.93184447288513, "task_id": "HumanEval/94"}
{"generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        if gpa > 3.7:\n            return 'A'\n        if gpa > 3.3:\n            return 'A-'\n        if gpa > 3.0:\n            return 'B+'\n        if gpa > 2.7:\n            return 'B'\n        if gpa > 2.3:\n            return 'B-'\n        if gpa > 2.0:\n            return 'C+'\n        if gpa > 1.7:\n            return 'C'\n        if gpa > 1.3:\n            return 'C-'\n        if gpa > 1.0:\n            return 'D+'\n        if gpa > 0.7:\n            return 'D'\n        if gpa >= 0.0:\n            return 'D-'\n        return 'E'\n\n    return [grade(g) for g in grades]", "is_solved": false, "iteration": 8, "prompt_tokens": 11258, "completion_tokens": 2411, "duration": 50.27770805358887, "task_id": "HumanEval/81"}
{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 60, "duration": 3.7184066772460938, "task_id": "HumanEval/114"}
{"generated_code": "def select_words(s, n):\n    if not s:\n        return []\n    words = s.split()\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = []\n    for word in words:\n        if len([c for c in word if c in consonants]) == n:\n            result.append(word)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 86, "duration": 4.235817909240723, "task_id": "HumanEval/117"}
{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 98, "duration": 3.4160122871398926, "task_id": "HumanEval/118"}
{"generated_code": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n        return True\n    except:\n        return False", "is_solved": true, "iteration": 0, "prompt_tokens": 313, "completion_tokens": 149, "duration": 4.932066202163696, "task_id": "HumanEval/124"}
{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        product *= num // abs(num) if num != 0 else 0\n        sum_magnitudes += abs(num)\n    return product * sum_magnitudes", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 75, "duration": 3.701418399810791, "task_id": "HumanEval/128"}
{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(num) ** 2 for num in lst)", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 28, "duration": 3.7298011779785156, "task_id": "HumanEval/133"}
{"generated_code": "def largest_smallest_integers(lst):\n    negative_integers = [num for num in lst if num < 0]\n    positive_integers = [num for num in lst if num > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)", "is_solved": true, "iteration": 0, "prompt_tokens": 188, "completion_tokens": 90, "duration": 4.1900529861450195, "task_id": "HumanEval/136"}
{"generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        fact = 1\n        for j in range(1, i+1):\n            fact *= j\n        result *= fact\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 60, "duration": 5.106764793395996, "task_id": "HumanEval/139"}
{"generated_code": "def file_name_check(file_name):\n    if file_name.count(\".\") != 1:\n        return 'No'\n    file_parts = file_name.split(\".\")\n    if len(file_parts) != 2:\n        return 'No'\n    if not file_parts[0] or not file_parts[0][0].isalpha():\n        return 'No'\n    if len([c for c in file_parts[0] if c.isdigit()]) > 3:\n        return 'No'\n    if file_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 130, "duration": 2.550602436065674, "task_id": "HumanEval/141"}
{"generated_code": "from fractions import Fraction\n\ndef simplify(x, n):\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 34, "duration": 3.2925808429718018, "task_id": "HumanEval/144"}
{"generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 81, "duration": 4.610205888748169, "task_id": "HumanEval/146"}
{"generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n# Example\nn = 5\nprint(get_max_triples(n))", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 119, "duration": 5.007686138153076, "task_id": "HumanEval/147"}
{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    else:\n        return tuple(planets[end_idx+1:start_idx][::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 126, "duration": 2.1185858249664307, "task_id": "HumanEval/148"}
{"generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 78, "duration": 4.968517303466797, "task_id": "HumanEval/150"}
{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int))", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 39, "duration": 0.860107421875, "task_id": "HumanEval/151"}
{"generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.6411662101745605, "task_id": "HumanEval/152"}
{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def calc_strength(ext):\n        return sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\n    \n    max_strength = float('-inf')\n    strongest_ext = \"\"\n    \n    for ext in extensions:\n        strength = calc_strength(ext)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_ext = ext\n    \n    return f\"{class_name}.{strongest_ext}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 105, "duration": 1.6746180057525635, "task_id": "HumanEval/153"}
{"generated_code": "def even_odd_count(num):\n    even_count = len([i for i in str(abs(num)) if int(i) % 2 == 0])\n    odd_count = len([i for i in str(abs(num)) if int(i) % 2 != 0])\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 115, "completion_tokens": 65, "duration": 2.838606119155884, "task_id": "HumanEval/155"}
{"generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    \n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    \n    return result.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 143, "duration": 2.278186321258545, "task_id": "HumanEval/156"}
{"generated_code": "def right_angle_triangle(a, b, c):\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 63, "duration": 1.2231793403625488, "task_id": "HumanEval/157"}
{"generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n    \n    max_unique_chars = 0\n    max_word = \"\"\n    \n    for word in words:\n        curr_unique_chars = unique_chars(word)\n        if curr_unique_chars > max_unique_chars or (curr_unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = curr_unique_chars\n            max_word = word\n    \n    return max_word", "is_solved": true, "iteration": 0, "prompt_tokens": 170, "completion_tokens": 95, "duration": 5.631035089492798, "task_id": "HumanEval/158"}
{"generated_code": "def eat(number, need, remaining):\n    eaten = number + min(need, remaining)\n    left = max(remaining - need, 0)\n    return [eaten, left]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 43, "duration": 2.6561062335968018, "task_id": "HumanEval/159"}
{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 36, "duration": 0.8799667358398438, "task_id": "HumanEval/162"}
{"generated_code": "import math\n\ndef max_fill(grid, capacity):\n    wells = [sum(row) for row in grid]\n    total_water = sum(wells)\n    buckets_needed = math.ceil(total_water / capacity)\n    return buckets_needed", "is_solved": true, "iteration": 1, "prompt_tokens": 1415, "completion_tokens": 133, "duration": 5.651314735412598, "task_id": "HumanEval/115"}
{"generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "is_solved": true, "iteration": 1, "prompt_tokens": 1169, "completion_tokens": 97, "duration": 4.550155401229858, "task_id": "HumanEval/120"}
{"generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num < 100 or num < 10)", "is_solved": true, "iteration": 1, "prompt_tokens": 966, "completion_tokens": 122, "duration": 5.2753071784973145, "task_id": "HumanEval/122"}
{"generated_code": "def digits(n):\n    prod = 1\n    all_even = True\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            prod *= int(digit)\n            all_even = False\n    return prod if not all_even else 0", "is_solved": true, "iteration": 1, "prompt_tokens": 737, "completion_tokens": 165, "duration": 3.8360068798065186, "task_id": "HumanEval/131"}
{"generated_code": "def generate_integers(a, b):\n    if a > b:\n        a, b = b, a\n    return [i for i in range(a, b+1) if i % 2 == 0]", "is_solved": true, "iteration": 1, "prompt_tokens": 791, "completion_tokens": 139, "duration": 6.475301742553711, "task_id": "HumanEval/163"}
{"generated_code": "def match_parens(lst):\n    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            else:\n                if stack and stack[-1] == '(':\n                    stack.pop()\n                else:\n                    return 'No'\n    return 'Yes' if not stack else 'No'", "is_solved": true, "iteration": 1, "prompt_tokens": 944, "completion_tokens": 201, "duration": 6.611934661865234, "task_id": "HumanEval/119"}
{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    last_char = txt.strip()[-1]\n    if not last_char.isalpha():\n        return False\n    if txt[-2] == ' ':\n        return True\n    return False", "is_solved": true, "iteration": 2, "prompt_tokens": 1729, "completion_tokens": 329, "duration": 10.850691318511963, "task_id": "HumanEval/134"}
{"generated_code": "def fix_spaces(text):\n    result = ''\n    consecutive_spaces = 0\n    \n    for c in text:\n        if c == ' ':\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result = result[:-2] + '-'  # replace last two characters with '-'\n            else:\n                result += '_'\n        else:\n            result += c\n            consecutive_spaces = 0\n    \n    return result", "is_solved": true, "iteration": 4, "prompt_tokens": 3244, "completion_tokens": 755, "duration": 17.557244539260864, "task_id": "HumanEval/140"}
{"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in a+a or len(a) > len(b) and b in a*2", "is_solved": true, "iteration": 8, "prompt_tokens": 5388, "completion_tokens": 777, "duration": 20.593782901763916, "task_id": "HumanEval/154"}
{"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))", "is_solved": false, "iteration": 8, "prompt_tokens": 6099, "completion_tokens": 630, "duration": 17.655683994293213, "task_id": "HumanEval/145"}
{"generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "is_solved": false, "iteration": 8, "prompt_tokens": 6832, "completion_tokens": 705, "duration": 19.248085498809814, "task_id": "HumanEval/149"}
{"generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": false, "iteration": 8, "prompt_tokens": 6267, "completion_tokens": 769, "duration": 21.163551330566406, "task_id": "HumanEval/116"}
{"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if i % 2 == 0)", "is_solved": false, "iteration": 8, "prompt_tokens": 6414, "completion_tokens": 782, "duration": 20.950125694274902, "task_id": "HumanEval/121"}
{"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "is_solved": false, "iteration": 8, "prompt_tokens": 5875, "completion_tokens": 1003, "duration": 22.213683605194092, "task_id": "HumanEval/125"}
{"generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1) if lst.count(lst[i]) == 1)", "is_solved": false, "iteration": 8, "prompt_tokens": 7806, "completion_tokens": 975, "duration": 24.431178331375122, "task_id": "HumanEval/126"}
{"generated_code": "def solve(s):\n    result = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not has_letter:\n        return s[::-1]\n    return result", "is_solved": false, "iteration": 8, "prompt_tokens": 5901, "completion_tokens": 1082, "duration": 24.191834926605225, "task_id": "HumanEval/161"}
{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 8, "prompt_tokens": 6549, "completion_tokens": 1020, "duration": 22.2115318775177, "task_id": "HumanEval/142"}
{"generated_code": "def is_equal_to_sum_even(n):\n    return sum(i for i in range(2, n // 2 + 1, 2) if n % i == 0) == n", "is_solved": false, "iteration": 8, "prompt_tokens": 5841, "completion_tokens": 1168, "duration": 27.80019187927246, "task_id": "HumanEval/138"}
{"generated_code": "def can_arrange(arr):\n    index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            index = i-1\n            break\n    return index", "is_solved": false, "iteration": 8, "prompt_tokens": 5912, "completion_tokens": 1178, "duration": 28.375500202178955, "task_id": "HumanEval/135"}
{"generated_code": "def get_odd_collatz(n):\n    collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    \n    return sorted(list(set([num for num in collatz if num % 2 != 0])))", "is_solved": false, "iteration": 8, "prompt_tokens": 8226, "completion_tokens": 1233, "duration": 27.88568639755249, "task_id": "HumanEval/123"}
{"generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1]\n    else:\n        sequence = [0, 1, 1]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n        return sequence", "is_solved": false, "iteration": 8, "prompt_tokens": 7794, "completion_tokens": 1395, "duration": 30.688080549240112, "task_id": "HumanEval/130"}
{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "is_solved": false, "iteration": 8, "prompt_tokens": 6623, "completion_tokens": 1383, "duration": 27.835044860839844, "task_id": "HumanEval/143"}
{"generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a == b:\n            return None\n        return a if a > b else b\n    return a if type(a) == float else b", "is_solved": false, "iteration": 8, "prompt_tokens": 6985, "completion_tokens": 1352, "duration": 28.252654552459717, "task_id": "HumanEval/137"}
{"generated_code": "def is_nested(string):\n    opening_brackets = []\n    \n    for char in string:\n        if char == '[':\n            opening_brackets.append(char)\n        elif char == ']':\n            if opening_brackets:\n                opening_brackets.pop()\n    \n    return len(opening_brackets) != 0\n\n# Test cases\nprint(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\nprint(is_nested('[[][]]'))\nprint(is_nested('[[]][['))", "is_solved": false, "iteration": 8, "prompt_tokens": 6995, "completion_tokens": 1502, "duration": 32.628657817840576, "task_id": "HumanEval/132"}
{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    length = intersection_end - intersection_start + 1\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 8, "prompt_tokens": 8742, "completion_tokens": 1653, "duration": 33.81202435493469, "task_id": "HumanEval/127"}
{"generated_code": "from itertools import permutations\n\ndef minPath(grid, k):\n    \n    def get_path_value(path, grid):\n        return [grid[i][j] for i, j in path]\n    \n    N = len(grid)\n    \n    possible_paths = permutations([(i, j) for i in range(N) for j in range(N)], k)\n    \n    min_path = None\n    \n    for path in possible_paths:\n        path_value = get_path_value(path, grid)\n        if min_path is None or path_value < min_path:\n            min_path = path_value\n    \n    return min_path", "is_solved": false, "iteration": 8, "prompt_tokens": 10988, "completion_tokens": 2347, "duration": 40.6112596988678, "task_id": "HumanEval/129"}
{"generated_code": "def do_algebra(operators, operands):\n    expression = str(operands[0])\n    for i in range(len(operators)):\n        expression += operators[i] + str(operands[i + 1])\n    return eval(expression)", "is_solved": false, "iteration": 8, "prompt_tokens": 10775, "completion_tokens": 3139, "duration": 51.91666078567505, "task_id": "HumanEval/160"}
