{"task_id": "HumanEval/0", "generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": true, "iterations": 0, "prompt_tokens": 174, "completion_tokens": 61, "duration": 3.7879819869995117, "iteration_states": [{"generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 61, "duration": 3.7879819869995117}]}
{"task_id": "HumanEval/1", "generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    temp = ''\n    for char in paren_string:\n        if char == '(':\n            stack.append('(')\n            temp += '('\n        elif char == ')':\n            stack.pop()\n            temp += ')'\n            if not stack:\n                result.append(temp)\n                temp = ''\n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 165, "completion_tokens": 86, "duration": 4.6310436725616455, "iteration_states": [{"generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    temp = ''\n    for char in paren_string:\n        if char == '(':\n            stack.append('(')\n            temp += '('\n        elif char == ')':\n            stack.pop()\n            temp += ')'\n            if not stack:\n                result.append(temp)\n                temp = ''\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 165, "completion_tokens": 86, "duration": 4.6310436725616455}]}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": true, "iterations": 0, "prompt_tokens": 135, "completion_tokens": 21, "duration": 3.479076385498047, "iteration_states": [{"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": true, "iteration": 0, "prompt_tokens": 135, "completion_tokens": 21, "duration": 3.479076385498047}]}
{"task_id": "HumanEval/3", "generated_code": "def below_zero(operations):\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "is_solved": true, "iterations": 0, "prompt_tokens": 169, "completion_tokens": 37, "duration": 3.4491524696350098, "iteration_states": [{"generated_code": "def below_zero(operations):\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 37, "duration": 3.4491524696350098}]}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iterations": 0, "prompt_tokens": 167, "completion_tokens": 49, "duration": 3.9055840969085693, "iteration_states": [{"generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 49, "duration": 3.9055840969085693}]}
{"task_id": "HumanEval/5", "generated_code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 142, "completion_tokens": 56, "duration": 3.8390955924987793, "iteration_states": [{"generated_code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 56, "duration": 3.8390955924987793}]}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                if depth > max_depth:\n                    max_depth = depth\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 162, "completion_tokens": 97, "duration": 4.703549146652222, "iteration_states": [{"generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                if depth > max_depth:\n                    max_depth = depth\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 97, "duration": 4.703549146652222}]}
{"task_id": "HumanEval/7", "generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "is_solved": true, "iterations": 0, "prompt_tokens": 143, "completion_tokens": 35, "duration": 3.61719012260437, "iteration_states": [{"generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "is_solved": true, "iteration": 0, "prompt_tokens": 143, "completion_tokens": 35, "duration": 3.61719012260437}]}
{"task_id": "HumanEval/9", "generated_code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    maximum = float('-inf')\n    for num in numbers:\n        maximum = max(maximum, num)\n        result.append(maximum)\n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 150, "completion_tokens": 54, "duration": 3.7376515865325928, "iteration_states": [{"generated_code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    maximum = float('-inf')\n    for num in numbers:\n        maximum = max(maximum, num)\n        result.append(maximum)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 150, "completion_tokens": 54, "duration": 3.7376515865325928}]}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])", "is_solved": true, "iterations": 0, "prompt_tokens": 126, "completion_tokens": 41, "duration": 3.579258441925049, "iteration_states": [{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 41, "duration": 3.579258441925049}]}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a", "is_solved": true, "iterations": 0, "prompt_tokens": 120, "completion_tokens": 42, "duration": 3.5393548011779785, "iteration_states": [{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 42, "duration": 3.5393548011779785}]}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iterations": 0, "prompt_tokens": 109, "completion_tokens": 32, "duration": 3.6700150966644287, "iteration_states": [{"generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 32, "duration": 3.6700150966644287}]}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "is_solved": true, "iterations": 0, "prompt_tokens": 118, "completion_tokens": 27, "duration": 3.5287091732025146, "iteration_states": [{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 27, "duration": 3.5287091732025146}]}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iterations": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 3.326807737350464, "iteration_states": [{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 3.326807737350464}]}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    return [durations[note] for note in notes]", "is_solved": true, "iterations": 0, "prompt_tokens": 222, "completion_tokens": 59, "duration": 3.708634614944458, "iteration_states": [{"generated_code": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    return [durations[note] for note in notes]", "is_solved": true, "iteration": 0, "prompt_tokens": 222, "completion_tokens": 59, "duration": 3.708634614944458}]}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "is_solved": true, "iterations": 0, "prompt_tokens": 138, "completion_tokens": 74, "duration": 3.952439308166504, "iteration_states": [{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 74, "duration": 3.952439308166504}]}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_map[x])\n    return ' '.join(sorted_numbers)", "is_solved": true, "iterations": 0, "prompt_tokens": 155, "completion_tokens": 103, "duration": 4.493385076522827, "iteration_states": [{"generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_map[x])\n    return ' '.join(sorted_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 103, "duration": 4.493385076522827}]}
{"task_id": "HumanEval/20", "generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    \n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    \n    return closest_pair", "is_solved": true, "iterations": 0, "prompt_tokens": 216, "completion_tokens": 99, "duration": 4.436337947845459, "iteration_states": [{"generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    \n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    \n    return closest_pair", "is_solved": true, "iteration": 0, "prompt_tokens": 216, "completion_tokens": 99, "duration": 4.436337947845459}]}
{"task_id": "HumanEval/21", "generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "is_solved": true, "iterations": 0, "prompt_tokens": 173, "completion_tokens": 53, "duration": 3.686016082763672, "iteration_states": [{"generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 53, "duration": 3.686016082763672}]}
{"task_id": "HumanEval/22", "generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]", "is_solved": true, "iterations": 0, "prompt_tokens": 141, "completion_tokens": 31, "duration": 3.3969316482543945, "iteration_states": [{"generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 31, "duration": 3.3969316482543945}]}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iterations": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 3.471254587173462, "iteration_states": [{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 3.471254587173462}]}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    return max([i for i in range(1, n) if n % i == 0])", "is_solved": true, "iterations": 0, "prompt_tokens": 102, "completion_tokens": 37, "duration": 3.5331480503082275, "iteration_states": [{"generated_code": "def largest_divisor(n: int) -> int:\n    return max([i for i in range(1, n) if n % i == 0])", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 37, "duration": 3.5331480503082275}]}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "is_solved": true, "iterations": 0, "prompt_tokens": 176, "completion_tokens": 70, "duration": 4.299970865249634, "iteration_states": [{"generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 70, "duration": 4.299970865249634}]}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "is_solved": true, "iterations": 0, "prompt_tokens": 134, "completion_tokens": 38, "duration": 3.51297664642334, "iteration_states": [{"generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 38, "duration": 3.51297664642334}]}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "is_solved": true, "iterations": 0, "prompt_tokens": 98, "completion_tokens": 36, "duration": 3.3321757316589355, "iteration_states": [{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 36, "duration": 3.3321757316589355}]}
{"task_id": "HumanEval/28", "generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "is_solved": true, "iterations": 0, "prompt_tokens": 107, "completion_tokens": 20, "duration": 3.289001703262329, "iteration_states": [{"generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 20, "duration": 3.289001703262329}]}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iterations": 0, "prompt_tokens": 137, "completion_tokens": 34, "duration": 3.4382829666137695, "iteration_states": [{"generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 34, "duration": 3.4382829666137695}]}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "is_solved": true, "iterations": 0, "prompt_tokens": 163, "completion_tokens": 25, "duration": 3.446502208709717, "iteration_states": [{"generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 25, "duration": 3.446502208709717}]}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "is_solved": true, "iterations": 0, "prompt_tokens": 149, "completion_tokens": 57, "duration": 3.4670627117156982, "iteration_states": [{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 57, "duration": 3.4670627117156982}]}
{"task_id": "HumanEval/32", "generated_code": "def find_zero(xs: list):\n    return -xs[0] / xs[1]", "is_solved": true, "iterations": 0, "prompt_tokens": 309, "completion_tokens": 23, "duration": 3.333569288253784, "iteration_states": [{"generated_code": "def find_zero(xs: list):\n    return -xs[0] / xs[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 23, "duration": 3.333569288253784}]}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "is_solved": true, "iterations": 0, "prompt_tokens": 123, "completion_tokens": 17, "duration": 3.2383384704589844, "iteration_states": [{"generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 17, "duration": 3.2383384704589844}]}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "is_solved": true, "iterations": 0, "prompt_tokens": 132, "completion_tokens": 16, "duration": 3.126251459121704, "iteration_states": [{"generated_code": "def max_element(l: list):\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 16, "duration": 3.126251459121704}]}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iterations": 0, "prompt_tokens": 208, "completion_tokens": 162, "duration": 4.739898920059204, "iteration_states": [{"generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iteration": 0, "prompt_tokens": 208, "completion_tokens": 162, "duration": 4.739898920059204}]}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 1:\n            return n\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    i = 0\n    while count < n:\n        i += 1\n        num = fibonacci(i)\n        if is_prime(num):\n            count += 1\n    return num", "is_solved": true, "iterations": 0, "prompt_tokens": 147, "completion_tokens": 163, "duration": 4.843162536621094, "iteration_states": [{"generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 1:\n            return n\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    i = 0\n    while count < n:\n        i += 1\n        num = fibonacci(i)\n        if is_prime(num):\n            count += 1\n    return num", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 163, "duration": 4.843162536621094}]}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    return any(sum((x, y, z)) == 0 for x in l for y in l for z in l if x != y != z)", "is_solved": true, "iterations": 0, "prompt_tokens": 209, "completion_tokens": 46, "duration": 5.7354347705841064, "iteration_states": [{"generated_code": "def triples_sum_to_zero(l: list):\n    return any(sum((x, y, z)) == 0 for x in l for y in l for z in l if x != y != z)", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 46, "duration": 5.7354347705841064}]}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "is_solved": true, "iterations": 0, "prompt_tokens": 158, "completion_tokens": 23, "duration": 5.429662704467773, "iteration_states": [{"generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 23, "duration": 5.429662704467773}]}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "is_solved": true, "iterations": 0, "prompt_tokens": 207, "completion_tokens": 42, "duration": 4.737221002578735, "iteration_states": [{"generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 42, "duration": 4.737221002578735}]}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "is_solved": true, "iterations": 0, "prompt_tokens": 96, "completion_tokens": 17, "duration": 6.2418904304504395, "iteration_states": [{"generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 17, "duration": 6.2418904304504395}]}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    fib_list = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib_list.append(fib_list[-1] + fib_list[-2] + fib_list[-3] + fib_list[-4])\n    \n    return fib_list[-1]", "is_solved": true, "iterations": 0, "prompt_tokens": 221, "completion_tokens": 116, "duration": 5.7989301681518555, "iteration_states": [{"generated_code": "def fib4(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    fib_list = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib_list.append(fib_list[-1] + fib_list[-2] + fib_list[-3] + fib_list[-4])\n    \n    return fib_list[-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 116, "duration": 5.7989301681518555}]}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "is_solved": true, "iterations": 0, "prompt_tokens": 125, "completion_tokens": 61, "duration": 1.5516915321350098, "iteration_states": [{"generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "is_solved": true, "iteration": 0, "prompt_tokens": 125, "completion_tokens": 61, "duration": 1.5516915321350098}]}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "is_solved": true, "iterations": 0, "prompt_tokens": 121, "completion_tokens": 20, "duration": 4.236940145492554, "iteration_states": [{"generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 20, "duration": 4.236940145492554}]}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "is_solved": true, "iterations": 0, "prompt_tokens": 155, "completion_tokens": 25, "duration": 5.464749574661255, "iteration_states": [{"generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 25, "duration": 5.464749574661255}]}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": true, "iterations": 0, "prompt_tokens": 140, "completion_tokens": 82, "duration": 6.010514259338379, "iteration_states": [{"generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": true, "iteration": 0, "prompt_tokens": 140, "completion_tokens": 82, "duration": 6.010514259338379}]}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in ['a', 'e', 'i', 'o', 'u']])", "is_solved": true, "iterations": 0, "prompt_tokens": 172, "completion_tokens": 42, "duration": 5.764646291732788, "iteration_states": [{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in ['a', 'e', 'i', 'o', 'u']])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 42, "duration": 5.764646291732788}]}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "is_solved": true, "iterations": 0, "prompt_tokens": 129, "completion_tokens": 26, "duration": 4.350031137466431, "iteration_states": [{"generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 26, "duration": 4.350031137466431}]}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "is_solved": true, "iterations": 0, "prompt_tokens": 103, "completion_tokens": 20, "duration": 5.648186683654785, "iteration_states": [{"generated_code": "def add(x: int, y: int):\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 20, "duration": 5.648186683654785}]}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "is_solved": true, "iterations": 0, "prompt_tokens": 102, "completion_tokens": 38, "duration": 6.5305821895599365, "iteration_states": [{"generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 38, "duration": 6.5305821895599365}]}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iterations": 0, "prompt_tokens": 142, "completion_tokens": 64, "duration": 5.029238224029541, "iteration_states": [{"generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 64, "duration": 5.029238224029541}]}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n*n", "is_solved": true, "iterations": 1, "prompt_tokens": 1039, "completion_tokens": 83, "duration": 7.69149923324585, "iteration_states": [{"generated_code": "def car_race_collision(n: int):\n    return n*(n-1)", "is_solved": false, "iteration": 0, "prompt_tokens": 201, "completion_tokens": 20, "duration": 4.578029155731201}, {"generated_code": "def car_race_collision(n: int):\n    return n*n", "is_solved": true, "iteration": 1, "prompt_tokens": 1039, "completion_tokens": 83, "duration": 7.69149923324585}]}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_length = max(len(s) for s in strings)\n    return next(s for s in strings if len(s) == max_length)", "is_solved": true, "iterations": 1, "prompt_tokens": 933, "completion_tokens": 146, "duration": 7.232295513153076, "iteration_states": [{"generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), x))", "is_solved": false, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 39, "duration": 3.525851011276245}, {"generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_length = max(len(s) for s in strings)\n    return next(s for s in strings if len(s) == max_length)", "is_solved": true, "iteration": 1, "prompt_tokens": 933, "completion_tokens": 146, "duration": 7.232295513153076}]}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    even_values = sorted([x for x in l[::2]])\n    result = [val if idx % 2 != 0 else even_values.pop(0) for idx, val in enumerate(l)]\n    return result", "is_solved": true, "iterations": 1, "prompt_tokens": 1271, "completion_tokens": 178, "duration": 7.668962717056274, "iteration_states": [{"generated_code": "def sort_even(l: list):\n    even_values = sorted([x for x in l[::2]])\n    result = [val if idx % 2 == 0 else even_values.pop(0) for idx, val in enumerate(l)]\n    return result", "is_solved": false, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 58, "duration": 3.5508744716644287}, {"generated_code": "def sort_even(l: list):\n    even_values = sorted([x for x in l[::2]])\n    result = [val if idx % 2 != 0 else even_values.pop(0) for idx, val in enumerate(l)]\n    return result", "is_solved": true, "iteration": 1, "prompt_tokens": 1271, "completion_tokens": 178, "duration": 7.668962717056274}]}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    if base < 2 or base > 10:\n        return \"Invalid base. Base should be between 2 and 10.\"\n\n    result = \"\"\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n    return result", "is_solved": true, "iterations": 1, "prompt_tokens": 1142, "completion_tokens": 191, "duration": 9.407506227493286, "iteration_states": [{"generated_code": "def change_base(x: int, base: int):\n    return str(int(str(x), 10 if base == 10 else base))", "is_solved": false, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 32, "duration": 4.395244598388672}, {"generated_code": "def change_base(x: int, base: int):\n    if base < 2 or base > 10:\n        return \"Invalid base. Base should be between 2 and 10.\"\n\n    result = \"\"\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n    return result", "is_solved": true, "iteration": 1, "prompt_tokens": 1142, "completion_tokens": 191, "duration": 9.407506227493286}]}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    \n    total_sum = sum(numbers)\n    total_product = 1\n    zero_present = False\n    \n    for num in numbers:\n        total_product *= num\n        if num == 0:\n            zero_present = True\n    \n    if zero_present:\n        total_product = 0\n    \n    return total_sum, total_product", "is_solved": true, "iterations": 2, "prompt_tokens": 2144, "completion_tokens": 412, "duration": 12.63240909576416, "iteration_states": [{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        return sum(numbers), 1 if 0 in numbers else eval('*'.join(map(str, numbers)))\n\n# Test cases\nprint(sum_product([]))  # (0, 1)\nprint(sum_product([1, 2, 3, 4]))  # (10, 24)", "is_solved": false, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 103, "duration": 4.0435051918029785}, {"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        total_sum = sum(numbers)\n        total_product = 1\n        for num in numbers:\n            if num != 0:\n                total_product *= num\n        return total_sum, total_product", "is_solved": false, "iteration": 1, "prompt_tokens": 1165, "completion_tokens": 239, "duration": 7.926807403564453}, {"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    \n    total_sum = sum(numbers)\n    total_product = 1\n    zero_present = False\n    \n    for num in numbers:\n        total_product *= num\n        if num == 0:\n            zero_present = True\n    \n    if zero_present:\n        total_product = 0\n    \n    return total_sum, total_product", "is_solved": true, "iteration": 2, "prompt_tokens": 2144, "completion_tokens": 412, "duration": 12.63240909576416}]}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return all(s0.count(char) == s1.count(char) for char in set(s0))", "is_solved": false, "iterations": 9, "prompt_tokens": 7925, "completion_tokens": 687, "duration": 35.11510920524597, "iteration_states": [{"generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "is_solved": false, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 28, "duration": 5.186999797821045}, {"generated_code": "def same_chars(s0: str, s1: str):\n    return all(s0.count(char) == s1.count(char) for char in set(s0))", "is_solved": false, "iteration": 1, "prompt_tokens": 1135, "completion_tokens": 112, "duration": 8.744951963424683}, {"generated_code": "def same_chars(s0: str, s1: str):\n    return all(s0.count(char) == s1.count(char) for char in set(s0))", "is_solved": false, "iteration": 2, "prompt_tokens": 2115, "completion_tokens": 201, "duration": 12.334403038024902}, {"generated_code": "def same_chars(s0: str, s1: str):\n    return all(s0.count(char) == s1.count(char) for char in set(s0))", "is_solved": false, "iteration": 3, "prompt_tokens": 2819, "completion_tokens": 229, "duration": 14.527960777282715}, {"generated_code": "def same_chars(s0: str, s1: str):\n    return all(s0.count(char) == s1.count(char) for char in set(s0))", "is_solved": false, "iteration": 4, "prompt_tokens": 3792, "completion_tokens": 311, "duration": 18.254544496536255}, {"generated_code": "def same_chars(s0: str, s1: str):\n    return all(s0.count(char) == s1.count(char) for char in set(s0))", "is_solved": false, "iteration": 5, "prompt_tokens": 4489, "completion_tokens": 339, "duration": 20.60403037071228}, {"generated_code": "def same_chars(s0: str, s1: str):\n    return all(s0.count(char) == s1.count(char) for char in set(s0))", "is_solved": false, "iteration": 6, "prompt_tokens": 5482, "completion_tokens": 461, "duration": 25.11385202407837}, {"generated_code": "def same_chars(s0: str, s1: str):\n    return all(s0.count(char) == s1.count(char) for char in set(s0))", "is_solved": false, "iteration": 7, "prompt_tokens": 6199, "completion_tokens": 509, "duration": 28.25168800354004}, {"generated_code": "def same_chars(s0: str, s1: str):\n    return all(s0.count(char) == s1.count(char) for char in set(s0))", "is_solved": false, "iteration": 8, "prompt_tokens": 7200, "completion_tokens": 639, "duration": 32.534175634384155}, {"generated_code": "def same_chars(s0: str, s1: str):\n    return all(s0.count(char) == s1.count(char) for char in set(s0))", "is_solved": false, "iteration": 9, "prompt_tokens": 7925, "completion_tokens": 687, "duration": 35.11510920524597}]}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string: str) -> str:\n    if string == '' or string == string[::-1]:\n        return string\n\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]", "is_solved": true, "iterations": 7, "prompt_tokens": 6172, "completion_tokens": 892, "duration": 30.432559490203857, "iteration_states": [{"generated_code": "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    for i in range(len(string), 0, -1):\n        if string[:i] == string[:i][::-1]:\n            return string + string[:i-1][::-1]", "is_solved": false, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 64, "duration": 3.7330939769744873}, {"generated_code": "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    \n    for i in range(len(string), 0, -1):\n        if string[:i] == string[:i][::-1]:\n            if i == len(string):  # Check if the whole string is a palindrome\n                return string\n            return string + string[:i-1][::-1]", "is_solved": false, "iteration": 1, "prompt_tokens": 1110, "completion_tokens": 198, "duration": 7.766945123672485}, {"generated_code": "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    \n    for i in range(len(string), 0, -1):\n        if string[:i] == string[:i][::-1]:\n            if i == len(string):  # Check if the whole string is a palindrome\n                return string\n            return string + string[:i-1][::-1]", "is_solved": false, "iteration": 2, "prompt_tokens": 2072, "completion_tokens": 318, "duration": 11.662938356399536}, {"generated_code": "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    \n    for i in range(len(string), 0, -1):\n        if string[:i] == string[:i][::-1]:\n            if i == len(string):  # Check if the whole string is a palindrome\n                return string\n            return string + string[:i-1][::-1]", "is_solved": false, "iteration": 3, "prompt_tokens": 2766, "completion_tokens": 439, "duration": 15.37772822380066}, {"generated_code": "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    \n    for i in range(len(string), 0, -1):\n        if string[:i] == string[:i][::-1]:\n            if i == len(string):  # Check if the whole string is a palindrome\n                return string\n            return string + string[:i-1][::-1]", "is_solved": false, "iteration": 4, "prompt_tokens": 3750, "completion_tokens": 595, "duration": 19.73693823814392}, {"generated_code": "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    \n    for i in range(len(string), 0, -1):\n        if string[:i] == string[:i][::-1]:\n            if i == len(string):  # Check if the whole string is a palindrome\n                return string\n            return string + string[:i-1][::-1]", "is_solved": false, "iteration": 5, "prompt_tokens": 4466, "completion_tokens": 671, "duration": 23.0654296875}, {"generated_code": "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    \n    for i in range(len(string), 0, -1):\n        if string[:i] == string[:i][::-1]:\n            if i == len(string):  # Check if the whole string is a palindrome\n                return string\n            return string + string[:i-1][::-1]", "is_solved": false, "iteration": 6, "prompt_tokens": 5453, "completion_tokens": 829, "duration": 27.659407377243042}, {"generated_code": "def make_palindrome(string: str) -> str:\n    if string == '' or string == string[::-1]:\n        return string\n\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]", "is_solved": true, "iteration": 7, "prompt_tokens": 6172, "completion_tokens": 892, "duration": 30.432559490203857}]}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    return [v for i, v in sorted(enumerate(l), key=lambda x: (x[0] // 3, x[1]))]", "is_solved": false, "iterations": 9, "prompt_tokens": 11767, "completion_tokens": 832, "duration": 33.0592577457428, "iteration_states": [{"generated_code": "def sort_third(l: list):\n    sorted_indices = sorted([i for i in range(len(l)) if i % 3 == 0], key=lambda x: l[x])\n    sorted_values = [l[i] for i in sorted_indices]\n    result = l.copy()\n    for i, v in zip(sorted_indices, sorted_values):\n        result[i] = v\n    return result", "is_solved": false, "iteration": 0, "prompt_tokens": 200, "completion_tokens": 85, "duration": 4.414771556854248}, {"generated_code": "def sort_third(l: list):\n    return [v for i, v in sorted(enumerate(l), key=lambda x: (x[0] // 3, x[1]))]", "is_solved": false, "iteration": 1, "prompt_tokens": 1819, "completion_tokens": 198, "duration": 9.023256063461304}, {"generated_code": "def sort_third(l: list):\n    return [v for i, v in sorted(enumerate(l), key=lambda x: (x[0] // 3, x[1]))]", "is_solved": false, "iteration": 2, "prompt_tokens": 3334, "completion_tokens": 291, "duration": 12.495146989822388}, {"generated_code": "def sort_third(l: list):\n    return [v for i, v in sorted(enumerate(l), key=lambda x: (x[0] // 3, x[1]))]", "is_solved": false, "iteration": 3, "prompt_tokens": 4305, "completion_tokens": 339, "duration": 14.759921550750732}, {"generated_code": "def sort_third(l: list):\n    return [v for i, v in sorted(enumerate(l), key=lambda x: (x[0] // 3, x[1]))]", "is_solved": false, "iteration": 4, "prompt_tokens": 5821, "completion_tokens": 452, "duration": 18.575584411621094}, {"generated_code": "def sort_third(l: list):\n    return [v for i, v in sorted(enumerate(l), key=lambda x: (x[0] // 3, x[1]))]", "is_solved": false, "iteration": 5, "prompt_tokens": 6793, "completion_tokens": 510, "duration": 21.181884050369263}, {"generated_code": "def sort_third(l: list):\n    return [v for i, v in sorted(enumerate(l), key=lambda x: (x[0] // 3, x[1]))]", "is_solved": false, "iteration": 6, "prompt_tokens": 8306, "completion_tokens": 611, "duration": 24.545251607894897}, {"generated_code": "def sort_third(l: list):\n    return [v for i, v in sorted(enumerate(l), key=lambda x: (x[0] // 3, x[1]))]", "is_solved": false, "iteration": 7, "prompt_tokens": 9275, "completion_tokens": 654, "duration": 26.808969974517822}, {"generated_code": "def sort_third(l: list):\n    return [v for i, v in sorted(enumerate(l), key=lambda x: (x[0] // 3, x[1]))]", "is_solved": false, "iteration": 8, "prompt_tokens": 10793, "completion_tokens": 775, "duration": 30.593955993652344}, {"generated_code": "def sort_third(l: list):\n    return [v for i, v in sorted(enumerate(l), key=lambda x: (x[0] // 3, x[1]))]", "is_solved": false, "iteration": 9, "prompt_tokens": 11767, "completion_tokens": 832, "duration": 33.0592577457428}]}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    return sum(1 for i in range(n) if ((i % 11 == 0 or i % 13 == 0) and '7' in str(i)))", "is_solved": false, "iterations": 9, "prompt_tokens": 7656, "completion_tokens": 811, "duration": 35.77671718597412, "iteration_states": [{"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "is_solved": false, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 57, "duration": 4.1797919273376465}, {"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "is_solved": false, "iteration": 1, "prompt_tokens": 1086, "completion_tokens": 151, "duration": 8.030723333358765}, {"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "is_solved": false, "iteration": 2, "prompt_tokens": 1745, "completion_tokens": 190, "duration": 10.337479829788208}, {"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "is_solved": false, "iteration": 3, "prompt_tokens": 2709, "completion_tokens": 299, "duration": 14.070859909057617}, {"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "is_solved": false, "iteration": 4, "prompt_tokens": 3375, "completion_tokens": 346, "duration": 16.43559718132019}, {"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "is_solved": false, "iteration": 5, "prompt_tokens": 4343, "completion_tokens": 460, "duration": 21.05121636390686}, {"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "is_solved": false, "iteration": 6, "prompt_tokens": 5013, "completion_tokens": 504, "duration": 23.89283013343811}, {"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "is_solved": false, "iteration": 7, "prompt_tokens": 6000, "completion_tokens": 637, "duration": 28.735864877700806}, {"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "is_solved": false, "iteration": 8, "prompt_tokens": 6689, "completion_tokens": 697, "duration": 31.811972856521606}, {"generated_code": "def fizz_buzz(n: int):\n    return sum(1 for i in range(n) if ((i % 11 == 0 or i % 13 == 0) and '7' in str(i)))", "is_solved": false, "iteration": 9, "prompt_tokens": 7656, "completion_tokens": 811, "duration": 35.77671718597412}]}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iterations": 0, "prompt_tokens": 137, "completion_tokens": 54, "duration": 5.898924827575684, "iteration_states": [{"generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 54, "duration": 5.898924827575684}]}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "is_solved": true, "iterations": 0, "prompt_tokens": 164, "completion_tokens": 29, "duration": 4.415369749069214, "iteration_states": [{"generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 29, "duration": 4.415369749069214}]}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "is_solved": true, "iterations": 0, "prompt_tokens": 113, "completion_tokens": 50, "duration": 4.908264875411987, "iteration_states": [{"generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 50, "duration": 4.908264875411987}]}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "is_solved": true, "iterations": 0, "prompt_tokens": 144, "completion_tokens": 22, "duration": 4.242558002471924, "iteration_states": [{"generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 22, "duration": 4.242558002471924}]}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0", "is_solved": true, "iterations": 0, "prompt_tokens": 139, "completion_tokens": 68, "duration": 6.116909980773926, "iteration_states": [{"generated_code": "def correct_bracketing(brackets: str):\n    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 68, "duration": 6.116909980773926}]}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))]", "is_solved": true, "iterations": 0, "prompt_tokens": 158, "completion_tokens": 28, "duration": 3.1749978065490723, "iteration_states": [{"generated_code": "def derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 28, "duration": 3.1749978065490723}]}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "is_solved": true, "iterations": 0, "prompt_tokens": 199, "completion_tokens": 72, "duration": 5.622449636459351, "iteration_states": [{"generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 72, "duration": 5.622449636459351}]}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "is_solved": true, "iterations": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 5.672107219696045, "iteration_states": [{"generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 5.672107219696045}]}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "is_solved": true, "iterations": 0, "prompt_tokens": 260, "completion_tokens": 37, "duration": 5.641664266586304, "iteration_states": [{"generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 37, "duration": 5.641664266586304}]}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    evens = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens, key=lambda x: (x[0], x[1]))\n    return [min_even[0], min_even[1]]", "is_solved": true, "iterations": 0, "prompt_tokens": 362, "completion_tokens": 78, "duration": 5.097854852676392, "iteration_states": [{"generated_code": "def pluck(arr):\n    evens = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens, key=lambda x: (x[0], x[1]))\n    return [min_even[0], min_even[1]]", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 78, "duration": 5.097854852676392}]}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 174, "completion_tokens": 44, "duration": 5.86173415184021, "iteration_states": [{"generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 44, "duration": 5.86173415184021}]}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "is_solved": true, "iterations": 0, "prompt_tokens": 171, "completion_tokens": 92, "duration": 6.1586079597473145, "iteration_states": [{"generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 92, "duration": 6.1586079597473145}]}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iterations": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 5.8480916023254395, "iteration_states": [{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 5.8480916023254395}]}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    length = len(arr)\n    changes = 0\n    for i in range(length // 2):\n        if arr[i] != arr[length - i - 1]:\n            changes += 1\n    return changes", "is_solved": true, "iterations": 0, "prompt_tokens": 207, "completion_tokens": 55, "duration": 1.1043100357055664, "iteration_states": [{"generated_code": "def smallest_change(arr):\n    length = len(arr)\n    changes = 0\n    for i in range(length // 2):\n        if arr[i] != arr[length - i - 1]:\n            changes += 1\n    return changes", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 55, "duration": 1.1043100357055664}]}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or (n != 1 and x % n == 0 and is_simple_power(x // n, n)))", "is_solved": true, "iterations": 0, "prompt_tokens": 192, "completion_tokens": 52, "duration": 4.641237735748291, "iteration_states": [{"generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or (n != 1 and x % n == 0 and is_simple_power(x // n, n)))", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 52, "duration": 4.641237735748291}]}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_digits = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count", "is_solved": true, "iterations": 0, "prompt_tokens": 349, "completion_tokens": 60, "duration": 3.5844950675964355, "iteration_states": [{"generated_code": "def hex_key(num):\n    prime_digits = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 60, "duration": 3.5844950675964355}]}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal)[2:] + 'db'", "is_solved": true, "iterations": 0, "prompt_tokens": 189, "completion_tokens": 25, "duration": 4.3092145919799805, "iteration_states": [{"generated_code": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal)[2:] + 'db'", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 25, "duration": 4.3092145919799805}]}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iterations": 0, "prompt_tokens": 131, "completion_tokens": 70, "duration": 3.4724762439727783, "iteration_states": [{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 70, "duration": 3.4724762439727783}]}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "is_solved": true, "iterations": 0, "prompt_tokens": 94, "completion_tokens": 64, "duration": 1.0854251384735107, "iteration_states": [{"generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 94, "completion_tokens": 64, "duration": 1.0854251384735107}]}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "is_solved": true, "iterations": 0, "prompt_tokens": 183, "completion_tokens": 21, "duration": 4.153321743011475, "iteration_states": [{"generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 21, "duration": 4.153321743011475}]}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "is_solved": true, "iterations": 0, "prompt_tokens": 105, "completion_tokens": 34, "duration": 2.8639819622039795, "iteration_states": [{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 105, "completion_tokens": 34, "duration": 2.8639819622039795}]}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    result = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        result.append(ordered_word)\n    return ' '.join(result)", "is_solved": true, "iterations": 0, "prompt_tokens": 180, "completion_tokens": 48, "duration": 4.981414556503296, "iteration_states": [{"generated_code": "def anti_shuffle(s):\n    words = s.split()\n    result = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        result.append(ordered_word)\n    return ' '.join(result)", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 48, "duration": 4.981414556503296}]}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 309, "completion_tokens": 68, "duration": 4.027481555938721, "iteration_states": [{"generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 68, "duration": 4.027481555938721}]}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            base = ord('a') if char.islower() else ord('A')\n            result += chr((ord(char) - base + 2 * 2) % 26 + base)\n        else:\n            result += char\n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 160, "completion_tokens": 76, "duration": 3.5757226943969727, "iteration_states": [{"generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            base = ord('a') if char.islower() else ord('A')\n            result += chr((ord(char) - base + 2 * 2) % 26 + base)\n        else:\n            result += char\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 76, "duration": 3.5757226943969727}]}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "is_solved": true, "iterations": 0, "prompt_tokens": 174, "completion_tokens": 52, "duration": 4.791964769363403, "iteration_states": [{"generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 52, "duration": 4.791964769363403}]}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences if sentence]\n    \n    count = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0] == \"I\":\n            count += 1\n    \n    return count", "is_solved": true, "iterations": 0, "prompt_tokens": 157, "completion_tokens": 71, "duration": 3.5930309295654297, "iteration_states": [{"generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences if sentence]\n    \n    count = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0] == \"I\":\n            count += 1\n    \n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 71, "duration": 3.5930309295654297}]}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "is_solved": true, "iterations": 0, "prompt_tokens": 185, "completion_tokens": 54, "duration": 4.871682405471802, "iteration_states": [{"generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 54, "duration": 4.871682405471802}]}
{"task_id": "HumanEval/94", "generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    prime_values = [num for num in lst if is_prime(num)]\n    largest_prime = max(prime_values)\n    \n    return sum_of_digits(largest_prime)", "is_solved": true, "iterations": 0, "prompt_tokens": 336, "completion_tokens": 120, "duration": 5.921804666519165, "iteration_states": [{"generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    prime_values = [num for num in lst if is_prime(num)]\n    largest_prime = max(prime_values)\n    \n    return sum_of_digits(largest_prime)", "is_solved": true, "iteration": 0, "prompt_tokens": 336, "completion_tokens": 120, "duration": 5.921804666519165}]}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "is_solved": true, "iterations": 0, "prompt_tokens": 195, "completion_tokens": 87, "duration": 3.5806374549865723, "iteration_states": [{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 87, "duration": 3.5806374549865723}]}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return int(str(abs(a) % 10)) * int(str(abs(b) % 10))", "is_solved": true, "iterations": 0, "prompt_tokens": 148, "completion_tokens": 27, "duration": 4.40070652961731, "iteration_states": [{"generated_code": "def multiply(a, b):\n    return int(str(abs(a) % 10)) * int(str(abs(b) % 10))", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 27, "duration": 4.40070652961731}]}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    return sum(1 for i in range(0, len(s), 2) if s[i] in 'AEIOU')", "is_solved": true, "iterations": 0, "prompt_tokens": 122, "completion_tokens": 37, "duration": 4.357618093490601, "iteration_states": [{"generated_code": "def count_upper(s):\n    return sum(1 for i in range(0, len(s), 2) if s[i] in 'AEIOU')", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 37, "duration": 4.357618093490601}]}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    value = float(value)\n    return int(value + 0.5) if value > 0 else int(value - 0.5)", "is_solved": true, "iterations": 0, "prompt_tokens": 206, "completion_tokens": 39, "duration": 4.614492893218994, "iteration_states": [{"generated_code": "def closest_integer(value):\n    value = float(value)\n    return int(value + 0.5) if value > 0 else int(value - 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 39, "duration": 4.614492893218994}]}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(',', ' ').split()]", "is_solved": true, "iterations": 0, "prompt_tokens": 166, "completion_tokens": 25, "duration": 2.786447525024414, "iteration_states": [{"generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(',', ' ').split()]", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 25, "duration": 2.786447525024414}]}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    return max([i for i in range(x, y+1) if i % 2 == 0] + [-1])", "is_solved": true, "iterations": 0, "prompt_tokens": 144, "completion_tokens": 39, "duration": 2.6726202964782715, "iteration_states": [{"generated_code": "def choose_num(x, y):\n    return max([i for i in range(x, y+1) if i % 2 == 0] + [-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 39, "duration": 2.6726202964782715}]}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m-n+1))\n    return bin(avg)", "is_solved": true, "iterations": 0, "prompt_tokens": 190, "completion_tokens": 46, "duration": 3.154949903488159, "iteration_states": [{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m-n+1))\n    return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 46, "duration": 3.154949903488159}]}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iterations": 0, "prompt_tokens": 152, "completion_tokens": 33, "duration": 2.7222673892974854, "iteration_states": [{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 33, "duration": 2.7222673892974854}]}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    nums = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    arr = [x for x in arr if 1 <= x <= 9]\n    arr.sort()\n    arr.reverse()\n    return [nums[x-1] for x in arr]", "is_solved": true, "iterations": 0, "prompt_tokens": 326, "completion_tokens": 78, "duration": 3.382270097732544, "iteration_states": [{"generated_code": "def by_length(arr):\n    nums = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    arr = [x for x in arr if 1 <= x <= 9]\n    arr.sort()\n    arr.reverse()\n    return [nums[x-1] for x in arr]", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 78, "duration": 3.382270097732544}]}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    def factorial(num):\n        if num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    \n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 174, "completion_tokens": 92, "duration": 1.7012665271759033, "iteration_states": [{"generated_code": "def f(n):\n    def factorial(num):\n        if num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    \n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 92, "duration": 1.7012665271759033}]}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count, odd_count = 0, 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "is_solved": true, "iterations": 0, "prompt_tokens": 261, "completion_tokens": 98, "duration": 3.75720477104187, "iteration_states": [{"generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count, odd_count = 0, 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 98, "duration": 3.75720477104187}]}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    sorted_arr = sorted(arr)\n    for _ in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n        \n    return False", "is_solved": true, "iterations": 0, "prompt_tokens": 349, "completion_tokens": 63, "duration": 3.3378124237060547, "iteration_states": [{"generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    sorted_arr = sorted(arr)\n    for _ in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n        \n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 63, "duration": 3.3378124237060547}]}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = \"\".join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iterations": 0, "prompt_tokens": 508, "completion_tokens": 78, "duration": 4.2718048095703125, "iteration_states": [{"generated_code": "def reverse_delete(s, c):\n    result = \"\".join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 508, "completion_tokens": 78, "duration": 4.2718048095703125}]}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    lst = test.split()\n    hist = {}\n    for letter in lst:\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    if not hist:\n        return {}\n    max_count = max(hist.values())\n    return {k: v for k, v in hist.items() if v == max_count}", "is_solved": true, "iterations": 1, "prompt_tokens": 1368, "completion_tokens": 225, "duration": 8.335660457611084, "iteration_states": [{"generated_code": "def histogram(test):\n    lst = test.split()\n    hist = {}\n    for letter in lst:\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n    return {k: v for k, v in hist.items() if v == max_count}", "is_solved": false, "iteration": 0, "prompt_tokens": 201, "completion_tokens": 79, "duration": 4.324152231216431}, {"generated_code": "def histogram(test):\n    lst = test.split()\n    hist = {}\n    for letter in lst:\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    if not hist:\n        return {}\n    max_count = max(hist.values())\n    return {k: v for k, v in hist.items() if v == max_count}", "is_solved": true, "iteration": 1, "prompt_tokens": 1368, "completion_tokens": 225, "duration": 8.335660457611084}]}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    if not array:\n        return []\n    \n    sorted_array = sorted(array)\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array", "is_solved": true, "iterations": 1, "prompt_tokens": 1464, "completion_tokens": 178, "duration": 7.906725645065308, "iteration_states": [{"generated_code": "def sort_array(array):\n    sorted_array = sorted(array)\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array", "is_solved": false, "iteration": 0, "prompt_tokens": 253, "completion_tokens": 50, "duration": 3.571953773498535}, {"generated_code": "def sort_array(array):\n    if not array:\n        return []\n    \n    sorted_array = sorted(array)\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array", "is_solved": true, "iteration": 1, "prompt_tokens": 1464, "completion_tokens": 178, "duration": 7.906725645065308}]}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    \n    lowercase_keys = all(isinstance(key, str) and key.islower() for key in dict.keys())\n    uppercase_keys = all(isinstance(key, str) and key.isupper() for key in dict.keys())\n    \n    return lowercase_keys or uppercase_keys", "is_solved": true, "iterations": 1, "prompt_tokens": 1305, "completion_tokens": 188, "duration": 10.718848943710327, "iteration_states": [{"generated_code": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    \n    lowercase_keys = all(key.islower() for key in dict.keys())\n    uppercase_keys = all(key.isupper() for key in dict.keys())\n    \n    return lowercase_keys or uppercase_keys", "is_solved": false, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 62, "duration": 6.021496057510376}, {"generated_code": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    \n    lowercase_keys = all(isinstance(key, str) and key.islower() for key in dict.keys())\n    uppercase_keys = all(isinstance(key, str) and key.isupper() for key in dict.keys())\n    \n    return lowercase_keys or uppercase_keys", "is_solved": true, "iteration": 1, "prompt_tokens": 1305, "completion_tokens": 188, "duration": 10.718848943710327}]}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    sum1 = sum(len(x) for x in lst1)\n    sum2 = sum(len(x) for x in lst2)\n    \n    if sum1 <= sum2:\n        return lst1\n    else:\n        return lst2", "is_solved": true, "iterations": 1, "prompt_tokens": 1459, "completion_tokens": 196, "duration": 11.444936275482178, "iteration_states": [{"generated_code": "def total_match(lst1, lst2):\n    sum1 = sum(len(x) for x in lst1)\n    sum2 = sum(len(x) for x in lst2)\n    \n    if sum1 < sum2:\n        return lst1\n    else:\n        return lst2", "is_solved": false, "iteration": 0, "prompt_tokens": 243, "completion_tokens": 63, "duration": 6.388736724853516}, {"generated_code": "def total_match(lst1, lst2):\n    sum1 = sum(len(x) for x in lst1)\n    sum2 = sum(len(x) for x in lst2)\n    \n    if sum1 <= sum2:\n        return lst1\n    else:\n        return lst2", "is_solved": true, "iteration": 1, "prompt_tokens": 1459, "completion_tokens": 196, "duration": 11.444936275482178}]}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    return all(s[i] != s[i+1] and s[i] != s[i+2] and s[i+1] != s[i+2] for i in range(len(s)-2)) if len(s) >= 3 else False", "is_solved": true, "iterations": 1, "prompt_tokens": 1103, "completion_tokens": 194, "duration": 6.360474348068237, "iteration_states": [{"generated_code": "def is_happy(s):\n    return all(s[i] != s[i+1] != s[i+2] for i in range(len(s)-2)) if len(s) >= 3 else False", "is_solved": false, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 47, "duration": 1.0319738388061523}, {"generated_code": "def is_happy(s):\n    return all(s[i] != s[i+1] and s[i] != s[i+2] and s[i+1] != s[i+2] for i in range(len(s)-2)) if len(s) >= 3 else False", "is_solved": true, "iteration": 1, "prompt_tokens": 1103, "completion_tokens": 194, "duration": 6.360474348068237}]}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        if gpa > 3.7:\n            return 'A'\n        if gpa > 3.3:\n            return 'A-'\n        if gpa > 3.0:\n            return 'B+'\n        if gpa > 2.7:\n            return 'B'\n        if gpa > 2.3:\n            return 'B-'\n        if gpa > 2.0:\n            return 'C+'\n        if gpa > 1.7:\n            return 'C'\n        if gpa > 1.3:\n            return 'C-'\n        if gpa > 1.0:\n            return 'D+'\n        if gpa > 0.7:\n            return 'D'\n        if gpa >= 0.0:\n            return 'D-'\n        return 'E'\n\n    return [grade(g) if g > 0.0 else 'E' for g in grades]", "is_solved": true, "iterations": 1, "prompt_tokens": 1866, "completion_tokens": 526, "duration": 15.628357648849487, "iteration_states": [{"generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        if gpa > 3.7:\n            return 'A'\n        if gpa > 3.3:\n            return 'A-'\n        if gpa > 3.0:\n            return 'B+'\n        if gpa > 2.7:\n            return 'B'\n        if gpa > 2.3:\n            return 'B-'\n        if gpa > 2.0:\n            return 'C+'\n        if gpa > 1.7:\n            return 'C'\n        if gpa > 1.3:\n            return 'C-'\n        if gpa > 1.0:\n            return 'D+'\n        if gpa > 0.7:\n            return 'D'\n        if gpa >= 0.0:\n            return 'D-'\n        return 'E'\n\n    return [grade(g) for g in grades]", "is_solved": false, "iteration": 0, "prompt_tokens": 320, "completion_tokens": 221, "duration": 8.414106845855713}, {"generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        if gpa > 3.7:\n            return 'A'\n        if gpa > 3.3:\n            return 'A-'\n        if gpa > 3.0:\n            return 'B+'\n        if gpa > 2.7:\n            return 'B'\n        if gpa > 2.3:\n            return 'B-'\n        if gpa > 2.0:\n            return 'C+'\n        if gpa > 1.7:\n            return 'C'\n        if gpa > 1.3:\n            return 'C-'\n        if gpa > 1.0:\n            return 'D+'\n        if gpa > 0.7:\n            return 'D'\n        if gpa >= 0.0:\n            return 'D-'\n        return 'E'\n\n    return [grade(g) if g > 0.0 else 'E' for g in grades]", "is_solved": true, "iteration": 1, "prompt_tokens": 1866, "completion_tokens": 526, "duration": 15.628357648849487}]}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    from collections import Counter\n    counts = Counter(lst)\n    max_num = -1\n    for num, freq in counts.items():\n        if num > 0 and freq >= num:\n            max_num = max(max_num, num)\n    return max_num", "is_solved": true, "iterations": 2, "prompt_tokens": 6397, "completion_tokens": 274, "duration": 12.7689368724823, "iteration_states": [{"generated_code": "def search(lst):\n    from collections import Counter\n    counts = Counter(lst)\n    for num, freq in counts.items():\n        if num > 0 and freq >= num:\n            return num\n    return -1", "is_solved": false, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 49, "duration": 3.606308937072754}, {"generated_code": "def search(lst):\n    from collections import Counter\n    counts = Counter(lst)\n    for num, freq in counts.items():\n        if num > 0 and freq == num:\n            return num\n    return -1", "is_solved": false, "iteration": 1, "prompt_tokens": 3274, "completion_tokens": 163, "duration": 8.598374843597412}, {"generated_code": "def search(lst):\n    from collections import Counter\n    counts = Counter(lst)\n    max_num = -1\n    for num, freq in counts.items():\n        if num > 0 and freq >= num:\n            max_num = max(max_num, num)\n    return max_num", "is_solved": true, "iteration": 2, "prompt_tokens": 6397, "completion_tokens": 274, "duration": 12.7689368724823}]}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 2)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones", "is_solved": true, "iterations": 2, "prompt_tokens": 2235, "completion_tokens": 318, "duration": 15.140498638153076, "iteration_states": [{"generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            n += 2\n        else:\n            n += 1\n        stones.append(n)\n    return stones", "is_solved": false, "iteration": 0, "prompt_tokens": 182, "completion_tokens": 61, "duration": 5.982418060302734}, {"generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 2)\n        else:\n            stones.append(stones[-1] + 1)\n    return stones", "is_solved": false, "iteration": 1, "prompt_tokens": 1218, "completion_tokens": 209, "duration": 11.309022665023804}, {"generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 2)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones", "is_solved": true, "iteration": 2, "prompt_tokens": 2235, "completion_tokens": 318, "duration": 15.140498638153076}]}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    \n    for i, char in enumerate(s):\n        if char.lower() in vowels or (char.lower() == 'y' and i == len(s)-1):\n            count += 1\n    \n    return count", "is_solved": true, "iterations": 4, "prompt_tokens": 3620, "completion_tokens": 483, "duration": 19.66728949546814, "iteration_states": [{"generated_code": "def vowels_count(s):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    \n    if s[-1].lower() == 'y':\n        count += 1\n    \n    for char in s[:-1]:\n        if char.lower() in vowels:\n            count += 1\n    \n    return count", "is_solved": false, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 78, "duration": 5.1695027351379395}, {"generated_code": "def vowels_count(s):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'y'])\n    count = 0\n    \n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    \n    return count", "is_solved": false, "iteration": 1, "prompt_tokens": 1134, "completion_tokens": 180, "duration": 8.747672319412231}, {"generated_code": "def vowels_count(s):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'y'])\n    count = 0\n    \n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    \n    return count", "is_solved": false, "iteration": 2, "prompt_tokens": 2045, "completion_tokens": 289, "duration": 12.603706359863281}, {"generated_code": "def vowels_count(s):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'y'])\n    count = 0\n    \n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    \n    return count", "is_solved": false, "iteration": 3, "prompt_tokens": 2701, "completion_tokens": 350, "duration": 15.089618444442749}, {"generated_code": "def vowels_count(s):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    \n    for i, char in enumerate(s):\n        if char.lower() in vowels or (char.lower() == 'y' and i == len(s)-1):\n            count += 1\n    \n    return count", "is_solved": true, "iteration": 4, "prompt_tokens": 3620, "completion_tokens": 483, "duration": 19.66728949546814}]}
{"task_id": "HumanEval/77", "generated_code": "import math\n\ndef iscube(a):\n    return a >= 0 and round(a**(1/3))**3 == a", "is_solved": false, "iterations": 9, "prompt_tokens": 6995, "completion_tokens": 593, "duration": 30.57355570793152, "iteration_states": [{"generated_code": "def iscube(a):\n    return int(a**(1/3))**3 == a", "is_solved": false, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 23, "duration": 4.322655439376831}, {"generated_code": "def iscube(a):\n    return (a > 0) and (int(a**(1/3))**3 == a)", "is_solved": false, "iteration": 1, "prompt_tokens": 1003, "completion_tokens": 110, "duration": 8.968432664871216}, {"generated_code": "def iscube(a):\n    return a >= 0 and int(a**(1/3))**3 == a", "is_solved": false, "iteration": 2, "prompt_tokens": 1863, "completion_tokens": 193, "duration": 12.292845010757446}, {"generated_code": "def iscube(a):\n    return a >= 0 and int(a**(1/3))**3 == a", "is_solved": false, "iteration": 3, "prompt_tokens": 2694, "completion_tokens": 263, "duration": 14.787965774536133}, {"generated_code": "def iscube(a):\n    return a >= 0 and int(a**(1/3))**3 == a", "is_solved": false, "iteration": 4, "prompt_tokens": 3299, "completion_tokens": 291, "duration": 16.49484157562256}, {"generated_code": "import math\n\ndef iscube(a):\n    return a >= 0 and round(a**(1/3))**3 == a", "is_solved": false, "iteration": 5, "prompt_tokens": 4137, "completion_tokens": 371, "duration": 19.559767484664917}, {"generated_code": "import math\n\ndef iscube(a):\n    return a >= 0 and round(a**(1/3))**3 == a", "is_solved": false, "iteration": 6, "prompt_tokens": 4958, "completion_tokens": 443, "duration": 22.293763637542725}, {"generated_code": "import math\n\ndef iscube(a):\n    return a >= 0 and round(a**(1/3))**3 == a", "is_solved": false, "iteration": 7, "prompt_tokens": 5560, "completion_tokens": 480, "duration": 24.227280139923096}, {"generated_code": "import math\n\ndef iscube(a):\n    return a >= 0 and round(a**(1/3))**3 == a", "is_solved": false, "iteration": 8, "prompt_tokens": 6387, "completion_tokens": 559, "duration": 28.046850442886353}, {"generated_code": "import math\n\ndef iscube(a):\n    return a >= 0 and round(a**(1/3))**3 == a", "is_solved": false, "iteration": 9, "prompt_tokens": 6995, "completion_tokens": 593, "duration": 30.57355570793152}]}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)}n the str{i+1}ng {s} of the {i+1}nput.\" for i, s in enumerate(lst)]", "is_solved": false, "iterations": 9, "prompt_tokens": 9509, "completion_tokens": 914, "duration": 34.053221464157104, "iteration_states": [{"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)}n the str{i+1}ng {s} of the {i+1}nput.\" for i, s in enumerate(lst)]", "is_solved": false, "iteration": 0, "prompt_tokens": 223, "completion_tokens": 65, "duration": 3.23934006690979}, {"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)}n the str{i+1}ng {s} of the {i+1}nput.\" for i, s in enumerate(lst)]", "is_solved": false, "iteration": 1, "prompt_tokens": 1427, "completion_tokens": 194, "duration": 7.504588842391968}, {"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)}n the str{i+1}ng {s} of the {i+1}nput.\" for i, s in enumerate(lst)]", "is_solved": false, "iteration": 2, "prompt_tokens": 2261, "completion_tokens": 259, "duration": 10.35532832145691}, {"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)}n the str{i+1}ng {s} of the {i+1}nput.\" for i, s in enumerate(lst)]", "is_solved": false, "iteration": 3, "prompt_tokens": 3454, "completion_tokens": 377, "duration": 14.213924884796143}, {"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)}n the str{i+1}ng {s} of the {i+1}nput.\" for i, s in enumerate(lst)]", "is_solved": false, "iteration": 4, "prompt_tokens": 4277, "completion_tokens": 442, "duration": 16.854432344436646}, {"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)}n the str{i+1}ng {s} of the {i+1}nput.\" for i, s in enumerate(lst)]", "is_solved": false, "iteration": 5, "prompt_tokens": 5458, "completion_tokens": 550, "duration": 20.149121284484863}, {"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)}n the str{i+1}ng {s} of the {i+1}nput.\" for i, s in enumerate(lst)]", "is_solved": false, "iteration": 6, "prompt_tokens": 6269, "completion_tokens": 601, "duration": 22.320061206817627}, {"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)}n the str{i+1}ng {s} of the {i+1}nput.\" for i, s in enumerate(lst)]", "is_solved": false, "iteration": 7, "prompt_tokens": 7472, "completion_tokens": 729, "duration": 26.849789142608643}, {"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)}n the str{i+1}ng {s} of the {i+1}nput.\" for i, s in enumerate(lst)]", "is_solved": false, "iteration": 8, "prompt_tokens": 8305, "completion_tokens": 794, "duration": 29.86682939529419}, {"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)}n the str{i+1}ng {s} of the {i+1}nput.\" for i, s in enumerate(lst)]", "is_solved": false, "iteration": 9, "prompt_tokens": 9509, "completion_tokens": 914, "duration": 34.053221464157104}]}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        digits = [int(digit) for digit in str(abs(num))]\n        if sum(digits) > 0:\n            count += 1\n    return count", "is_solved": false, "iterations": 9, "prompt_tokens": 8786, "completion_tokens": 774, "duration": 34.009631633758545, "iteration_states": [{"generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num < 0:\n            num = str(num)[1:]\n        if sum(int(digit) for digit in str(num)) > 0:\n            count += 1\n    return count", "is_solved": false, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 63, "duration": 3.6947553157806396}, {"generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num < 0:\n            digits = [int(digit) for digit in str(num)][1:]\n        else:\n            digits = [int(digit) for digit in str(num)]\n        \n        if sum(digits) > 0:\n            count += 1\n    return count", "is_solved": false, "iteration": 1, "prompt_tokens": 1281, "completion_tokens": 204, "duration": 8.437792778015137}, {"generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num < 0:\n            digits = [int(digit) for digit in str(num)][1:]\n        else:\n            digits = [int(digit) for digit in str(num)]\n        \n        if sum(digits) > 0:\n            count += 1\n    return count", "is_solved": false, "iteration": 2, "prompt_tokens": 2525, "completion_tokens": 337, "duration": 12.870058059692383}, {"generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        digits = [int(digit) for digit in str(abs(num))]\n        if sum(digits) > 0:\n            count += 1\n    return count", "is_solved": false, "iteration": 3, "prompt_tokens": 3348, "completion_tokens": 392, "duration": 15.35420823097229}, {"generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        digits = [int(digit) for digit in str(abs(num))]\n        if sum(digits) > 0:\n            count += 1\n    return count", "is_solved": false, "iteration": 4, "prompt_tokens": 4418, "completion_tokens": 502, "duration": 19.07105302810669}, {"generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        digits = [int(digit) for digit in str(abs(num))]\n        if sum(digits) > 0:\n            count += 1\n    return count", "is_solved": false, "iteration": 5, "prompt_tokens": 5148, "completion_tokens": 536, "duration": 22.76945662498474}, {"generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        digits = [int(digit) for digit in str(abs(num))]\n        if sum(digits) > 0:\n            count += 1\n    return count", "is_solved": false, "iteration": 6, "prompt_tokens": 6218, "completion_tokens": 611, "duration": 26.029014825820923}, {"generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        digits = [int(digit) for digit in str(abs(num))]\n        if sum(digits) > 0:\n            count += 1\n    return count", "is_solved": false, "iteration": 7, "prompt_tokens": 6948, "completion_tokens": 646, "duration": 27.934819221496582}, {"generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        digits = [int(digit) for digit in str(abs(num))]\n        if sum(digits) > 0:\n            count += 1\n    return count", "is_solved": false, "iteration": 8, "prompt_tokens": 8037, "completion_tokens": 739, "duration": 31.66785717010498}, {"generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        digits = [int(digit) for digit in str(abs(num))]\n        if sum(digits) > 0:\n            count += 1\n    return count", "is_solved": false, "iteration": 9, "prompt_tokens": 8786, "completion_tokens": 774, "duration": 34.009631633758545}]}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(1 for num in lst1 if num % 2 != 0) <= sum(1 for num in lst2 if num % 2 != 0) else \"NO\"", "is_solved": false, "iterations": 9, "prompt_tokens": 9958, "completion_tokens": 969, "duration": 36.569612979888916, "iteration_states": [{"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(1 for num in lst1 if num % 2 != 0) <= len(lst2) else \"NO\"", "is_solved": false, "iteration": 0, "prompt_tokens": 247, "completion_tokens": 44, "duration": 3.410109043121338}, {"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(1 for num in lst1 if num % 2 != 0) <= sum(1 for num in lst2 if num % 2 != 0) else \"NO\"", "is_solved": false, "iteration": 1, "prompt_tokens": 1470, "completion_tokens": 162, "duration": 7.713985919952393}, {"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(1 for num in lst1 if num % 2 != 0) <= sum(1 for num in lst2 if num % 2 != 0) else \"NO\"", "is_solved": false, "iteration": 2, "prompt_tokens": 2736, "completion_tokens": 312, "duration": 12.5592782497406}, {"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(1 for num in lst1 if num % 2 != 0) <= sum(1 for num in lst2 if num % 2 != 0) else \"NO\"", "is_solved": false, "iteration": 3, "prompt_tokens": 3620, "completion_tokens": 379, "duration": 15.61925721168518}, {"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(1 for num in lst1 if num % 2 != 0) <= sum(1 for num in lst2 if num % 2 != 0) else \"NO\"", "is_solved": false, "iteration": 4, "prompt_tokens": 4869, "completion_tokens": 505, "duration": 20.090052843093872}, {"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(1 for num in lst1 if num % 2 != 0) <= sum(1 for num in lst2 if num % 2 != 0) else \"NO\"", "is_solved": false, "iteration": 5, "prompt_tokens": 5736, "completion_tokens": 562, "duration": 22.887681484222412}, {"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(1 for num in lst1 if num % 2 != 0) <= sum(1 for num in lst2 if num % 2 != 0) else \"NO\"", "is_solved": false, "iteration": 6, "prompt_tokens": 6987, "completion_tokens": 680, "duration": 26.94610571861267}, {"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(1 for num in lst1 if num % 2 != 0) <= sum(1 for num in lst2 if num % 2 != 0) else \"NO\"", "is_solved": false, "iteration": 7, "prompt_tokens": 7856, "completion_tokens": 735, "duration": 29.649904251098633}, {"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(1 for num in lst1 if num % 2 != 0) <= sum(1 for num in lst2 if num % 2 != 0) else \"NO\"", "is_solved": false, "iteration": 8, "prompt_tokens": 9098, "completion_tokens": 876, "duration": 33.63905167579651}, {"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(1 for num in lst1 if num % 2 != 0) <= sum(1 for num in lst2 if num % 2 != 0) else \"NO\"", "is_solved": false, "iteration": 9, "prompt_tokens": 9958, "completion_tokens": 969, "duration": 36.569612979888916}]}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                result += chr((ord(char)+2 - ord('a')) % 26 + ord('A'))\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result", "is_solved": false, "iterations": 9, "prompt_tokens": 7869, "completion_tokens": 1079, "duration": 36.5768928527832, "iteration_states": [{"generated_code": "def encode(message):\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                result += chr((ord(char)+2 - ord('a')) % 26 + ord('A'))\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result", "is_solved": false, "iteration": 0, "prompt_tokens": 159, "completion_tokens": 78, "duration": 3.3758485317230225}, {"generated_code": "def encode(message):\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                result += chr((ord(char)+2 - ord('a')) % 26 + ord('A'))\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result", "is_solved": false, "iteration": 1, "prompt_tokens": 1223, "completion_tokens": 286, "duration": 10.63152003288269}, {"generated_code": "def encode(message):\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                result += chr((ord(char)+2 - ord('a')) % 26 + ord('A'))\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result", "is_solved": false, "iteration": 2, "prompt_tokens": 2205, "completion_tokens": 412, "duration": 14.83634328842163}, {"generated_code": "def encode(message):\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                result += chr((ord(char)+2 - ord('a')) % 26 + ord('A'))\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result", "is_solved": false, "iteration": 3, "prompt_tokens": 2888, "completion_tokens": 490, "duration": 17.458762407302856}, {"generated_code": "def encode(message):\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                result += chr((ord(char)+2 - ord('a')) % 26 + ord('A'))\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result", "is_solved": false, "iteration": 4, "prompt_tokens": 3871, "completion_tokens": 617, "duration": 21.61178994178772}, {"generated_code": "def encode(message):\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                result += chr((ord(char)+2 - ord('a')) % 26 + ord('A'))\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result", "is_solved": false, "iteration": 5, "prompt_tokens": 4555, "completion_tokens": 695, "duration": 24.403039932250977}, {"generated_code": "def encode(message):\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                result += chr((ord(char)+2 - ord('a')) % 26 + ord('A'))\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result", "is_solved": false, "iteration": 6, "prompt_tokens": 5532, "completion_tokens": 799, "duration": 27.560245037078857}, {"generated_code": "def encode(message):\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                result += chr((ord(char)+2 - ord('a')) % 26 + ord('A'))\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result", "is_solved": false, "iteration": 7, "prompt_tokens": 6210, "completion_tokens": 859, "duration": 29.95025944709778}, {"generated_code": "def encode(message):\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                result += chr((ord(char)+2 - ord('a')) % 26 + ord('A'))\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result", "is_solved": false, "iteration": 8, "prompt_tokens": 7189, "completion_tokens": 989, "duration": 33.55070638656616}, {"generated_code": "def encode(message):\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                result += chr((ord(char)+2 - ord('a')) % 26 + ord('A'))\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result", "is_solved": false, "iteration": 9, "prompt_tokens": 7869, "completion_tokens": 1079, "duration": 36.5768928527832}]}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        if shift > len(x_str) // 2:\n            shift = len(x_str) - shift\n            return x_str[shift:] + x_str[:shift]\n        else:\n            return x_str[-shift:] + x_str[:-shift]", "is_solved": false, "iterations": 9, "prompt_tokens": 7156, "completion_tokens": 949, "duration": 43.48915696144104, "iteration_states": [{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "is_solved": false, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 55, "duration": 6.772214412689209}, {"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        if shift > len(x_str) // 2:\n            shift = len(x_str) - shift\n            return x_str[shift:] + x_str[:shift]\n        else:\n            return x_str[-shift:] + x_str[:-shift]", "is_solved": false, "iteration": 1, "prompt_tokens": 968, "completion_tokens": 209, "duration": 11.671031713485718}, {"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        if shift > len(x_str) // 2:\n            shift = len(x_str) - shift\n            return x_str[shift:] + x_str[:shift]\n        else:\n            return x_str[-shift:] + x_str[:-shift]", "is_solved": false, "iteration": 2, "prompt_tokens": 1897, "completion_tokens": 343, "duration": 17.965938806533813}, {"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        if shift > len(x_str) // 2:\n            shift = len(x_str) - shift\n            return x_str[shift:] + x_str[:shift]\n        else:\n            return x_str[-shift:] + x_str[:-shift]", "is_solved": false, "iteration": 3, "prompt_tokens": 2555, "completion_tokens": 398, "duration": 21.6817946434021}, {"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        if shift > len(x_str) // 2:\n            shift = len(x_str) - shift\n            return x_str[shift:] + x_str[:shift]\n        else:\n            return x_str[-shift:] + x_str[:-shift]", "is_solved": false, "iteration": 4, "prompt_tokens": 3445, "completion_tokens": 492, "duration": 27.597763538360596}, {"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        if shift > len(x_str) // 2:\n            shift = len(x_str) - shift\n            return x_str[shift:] + x_str[:shift]\n        else:\n            return x_str[-shift:] + x_str[:-shift]", "is_solved": false, "iteration": 5, "prompt_tokens": 4064, "completion_tokens": 568, "duration": 30.09975028038025}, {"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        if shift > len(x_str) // 2:\n            shift = len(x_str) - shift\n            return x_str[shift:] + x_str[:shift]\n        else:\n            return x_str[-shift:] + x_str[:-shift]", "is_solved": false, "iteration": 6, "prompt_tokens": 4985, "completion_tokens": 731, "duration": 35.27214026451111}, {"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        if shift > len(x_str) // 2:\n            shift = len(x_str) - shift\n            return x_str[shift:] + x_str[:shift]\n        else:\n            return x_str[-shift:] + x_str[:-shift]", "is_solved": false, "iteration": 7, "prompt_tokens": 5635, "completion_tokens": 786, "duration": 38.051125288009644}, {"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        if shift > len(x_str) // 2:\n            shift = len(x_str) - shift\n            return x_str[shift:] + x_str[:shift]\n        else:\n            return x_str[-shift:] + x_str[:-shift]", "is_solved": false, "iteration": 8, "prompt_tokens": 6531, "completion_tokens": 894, "duration": 41.291332721710205}, {"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        if shift > len(x_str) // 2:\n            shift = len(x_str) - shift\n            return x_str[shift:] + x_str[:shift]\n        else:\n            return x_str[-shift:] + x_str[:-shift]", "is_solved": false, "iteration": 9, "prompt_tokens": 7156, "completion_tokens": 949, "duration": 43.48915696144104}]}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    count = 0\n    distinct_primes = set()\n    \n    for i in range(2, a):\n        if a % i == 0 and is_prime(i) and i not in distinct_primes:\n            count += 1\n            distinct_primes.add(i)\n    \n    return count == 3", "is_solved": false, "iterations": 9, "prompt_tokens": 8942, "completion_tokens": 1560, "duration": 50.87091898918152, "iteration_states": [{"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    count = 0\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            count += 1\n    return count == 3", "is_solved": false, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 106, "duration": 6.856443166732788}, {"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    count = 0\n    distinct_primes = set()\n    \n    for i in range(2, a):\n        if a % i == 0 and is_prime(i) and i not in distinct_primes:\n            count += 1\n            distinct_primes.add(i)\n    \n    return count == 3", "is_solved": false, "iteration": 1, "prompt_tokens": 1258, "completion_tokens": 335, "duration": 14.238309621810913}, {"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    count = 0\n    distinct_primes = set()\n    \n    for i in range(2, a):\n        if a % i == 0 and is_prime(i) and i not in distinct_primes:\n            count += 1\n            distinct_primes.add(i)\n    \n    return count == 3", "is_solved": false, "iteration": 2, "prompt_tokens": 2411, "completion_tokens": 516, "duration": 19.7000150680542}, {"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    count = 0\n    distinct_primes = set()\n    \n    for i in range(2, a):\n        if a % i == 0 and is_prime(i) and i not in distinct_primes:\n            count += 1\n            distinct_primes.add(i)\n    \n    return count == 3", "is_solved": false, "iteration": 3, "prompt_tokens": 3178, "completion_tokens": 622, "duration": 23.238789319992065}, {"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    count = 0\n    distinct_primes = set()\n    \n    for i in range(2, a):\n        if a % i == 0 and is_prime(i) and i not in distinct_primes:\n            count += 1\n            distinct_primes.add(i)\n    \n    return count == 3", "is_solved": false, "iteration": 4, "prompt_tokens": 4322, "completion_tokens": 794, "duration": 27.99544072151184}, {"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    count = 0\n    distinct_primes = set()\n    \n    for i in range(2, a):\n        if a % i == 0 and is_prime(i) and i not in distinct_primes:\n            count += 1\n            distinct_primes.add(i)\n    \n    return count == 3", "is_solved": false, "iteration": 5, "prompt_tokens": 5080, "completion_tokens": 936, "duration": 32.54032063484192}, {"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    count = 0\n    distinct_primes = set()\n    \n    for i in range(2, a):\n        if a % i == 0 and is_prime(i) and i not in distinct_primes:\n            count += 1\n            distinct_primes.add(i)\n    \n    return count == 3", "is_solved": false, "iteration": 6, "prompt_tokens": 6246, "completion_tokens": 1130, "duration": 37.67876982688904}, {"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    count = 0\n    distinct_primes = set()\n    \n    for i in range(2, a):\n        if a % i == 0 and is_prime(i) and i not in distinct_primes:\n            count += 1\n            distinct_primes.add(i)\n    \n    return count == 3", "is_solved": false, "iteration": 7, "prompt_tokens": 7026, "completion_tokens": 1239, "duration": 41.54927659034729}, {"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    count = 0\n    distinct_primes = set()\n    \n    for i in range(2, a):\n        if a % i == 0 and is_prime(i) and i not in distinct_primes:\n            count += 1\n            distinct_primes.add(i)\n    \n    return count == 3", "is_solved": false, "iteration": 8, "prompt_tokens": 8177, "completion_tokens": 1454, "duration": 47.15958547592163}, {"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    count = 0\n    distinct_primes = set()\n    \n    for i in range(2, a):\n        if a % i == 0 and is_prime(i) and i not in distinct_primes:\n            count += 1\n            distinct_primes.add(i)\n    \n    return count == 3", "is_solved": false, "iteration": 9, "prompt_tokens": 8942, "completion_tokens": 1560, "duration": 50.87091898918152}]}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": true, "iterations": 0, "prompt_tokens": 138, "completion_tokens": 60, "duration": 3.7184066772460938, "iteration_states": [{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 60, "duration": 3.7184066772460938}]}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": true, "iterations": 0, "prompt_tokens": 220, "completion_tokens": 28, "duration": 3.368082284927368, "iteration_states": [{"generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 220, "completion_tokens": 28, "duration": 3.368082284927368}]}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    if not s:\n        return []\n    words = s.split()\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = []\n    for word in words:\n        if len([c for c in word if c in consonants]) == n:\n            result.append(word)\n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 231, "completion_tokens": 86, "duration": 4.235817909240723, "iteration_states": [{"generated_code": "def select_words(s, n):\n    if not s:\n        return []\n    words = s.split()\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = []\n    for word in words:\n        if len([c for c in word if c in consonants]) == n:\n            result.append(word)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 86, "duration": 4.235817909240723}]}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "is_solved": true, "iterations": 0, "prompt_tokens": 199, "completion_tokens": 98, "duration": 3.4160122871398926, "iteration_states": [{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 98, "duration": 3.4160122871398926}]}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    \n    return sorted(list(set([num for num in collatz if num % 2 != 0])))", "is_solved": true, "iterations": 0, "prompt_tokens": 281, "completion_tokens": 85, "duration": 3.982318878173828, "iteration_states": [{"generated_code": "def get_odd_collatz(n):\n    collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    \n    return sorted(list(set([num for num in collatz if num % 2 != 0])))", "is_solved": true, "iteration": 0, "prompt_tokens": 281, "completion_tokens": 85, "duration": 3.982318878173828}]}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n        return True\n    except:\n        return False", "is_solved": true, "iterations": 0, "prompt_tokens": 313, "completion_tokens": 149, "duration": 4.932066202163696, "iteration_states": [{"generated_code": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n        return True\n    except:\n        return False", "is_solved": true, "iteration": 0, "prompt_tokens": 313, "completion_tokens": 149, "duration": 4.932066202163696}]}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        product *= num // abs(num) if num != 0 else 0\n        sum_magnitudes += abs(num)\n    return product * sum_magnitudes", "is_solved": true, "iterations": 0, "prompt_tokens": 172, "completion_tokens": 75, "duration": 3.701418399810791, "iteration_states": [{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        product *= num // abs(num) if num != 0 else 0\n        sum_magnitudes += abs(num)\n    return product * sum_magnitudes", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 75, "duration": 3.701418399810791}]}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(num) ** 2 for num in lst)", "is_solved": true, "iterations": 0, "prompt_tokens": 207, "completion_tokens": 28, "duration": 3.7298011779785156, "iteration_states": [{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(num) ** 2 for num in lst)", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 28, "duration": 3.7298011779785156}]}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    negative_integers = [num for num in lst if num < 0]\n    positive_integers = [num for num in lst if num > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)", "is_solved": true, "iterations": 0, "prompt_tokens": 188, "completion_tokens": 90, "duration": 4.1900529861450195, "iteration_states": [{"generated_code": "def largest_smallest_integers(lst):\n    negative_integers = [num for num in lst if num < 0]\n    positive_integers = [num for num in lst if num > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)", "is_solved": true, "iteration": 0, "prompt_tokens": 188, "completion_tokens": 90, "duration": 4.1900529861450195}]}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        fact = 1\n        for j in range(1, i+1):\n            fact *= j\n        result *= fact\n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 145, "completion_tokens": 60, "duration": 5.106764793395996, "iteration_states": [{"generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        fact = 1\n        for j in range(1, i+1):\n            fact *= j\n        result *= fact\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 60, "duration": 5.106764793395996}]}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if file_name.count(\".\") != 1:\n        return 'No'\n    file_parts = file_name.split(\".\")\n    if len(file_parts) != 2:\n        return 'No'\n    if not file_parts[0] or not file_parts[0][0].isalpha():\n        return 'No'\n    if len([c for c in file_parts[0] if c.isdigit()]) > 3:\n        return 'No'\n    if file_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "is_solved": true, "iterations": 0, "prompt_tokens": 264, "completion_tokens": 130, "duration": 2.550602436065674, "iteration_states": [{"generated_code": "def file_name_check(file_name):\n    if file_name.count(\".\") != 1:\n        return 'No'\n    file_parts = file_name.split(\".\")\n    if len(file_parts) != 2:\n        return 'No'\n    if not file_parts[0] or not file_parts[0][0].isalpha():\n        return 'No'\n    if len([c for c in file_parts[0] if c.isdigit()]) > 3:\n        return 'No'\n    if file_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 130, "duration": 2.550602436065674}]}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "is_solved": true, "iterations": 0, "prompt_tokens": 197, "completion_tokens": 94, "duration": 3.0800018310546875, "iteration_states": [{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "is_solved": true, "iteration": 0, "prompt_tokens": 197, "completion_tokens": 94, "duration": 3.0800018310546875}]}
{"task_id": "HumanEval/144", "generated_code": "from fractions import Fraction\n\ndef simplify(x, n):\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "is_solved": true, "iterations": 0, "prompt_tokens": 205, "completion_tokens": 34, "duration": 3.2925808429718018, "iteration_states": [{"generated_code": "from fractions import Fraction\n\ndef simplify(x, n):\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 34, "duration": 3.2925808429718018}]}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count", "is_solved": true, "iterations": 0, "prompt_tokens": 169, "completion_tokens": 81, "duration": 4.610205888748169, "iteration_states": [{"generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 81, "duration": 4.610205888748169}]}
{"task_id": "HumanEval/149", "generated_code": "def list_sort(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "is_solved": true, "iterations": 0, "prompt_tokens": 237, "completion_tokens": 39, "duration": 2.81819486618042, "iteration_states": [{"generated_code": "def list_sort(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 237, "completion_tokens": 39, "duration": 2.81819486618042}]}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "is_solved": true, "iterations": 0, "prompt_tokens": 136, "completion_tokens": 78, "duration": 4.968517303466797, "iteration_states": [{"generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 78, "duration": 4.968517303466797}]}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int))", "is_solved": true, "iterations": 0, "prompt_tokens": 187, "completion_tokens": 39, "duration": 0.860107421875, "iteration_states": [{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int))", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 39, "duration": 0.860107421875}]}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "is_solved": true, "iterations": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.6411662101745605, "iteration_states": [{"generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.6411662101745605}]}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def calc_strength(ext):\n        return sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\n    \n    max_strength = float('-inf')\n    strongest_ext = \"\"\n    \n    for ext in extensions:\n        strength = calc_strength(ext)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_ext = ext\n    \n    return f\"{class_name}.{strongest_ext}\"", "is_solved": true, "iterations": 0, "prompt_tokens": 327, "completion_tokens": 105, "duration": 1.6746180057525635, "iteration_states": [{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def calc_strength(ext):\n        return sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\n    \n    max_strength = float('-inf')\n    strongest_ext = \"\"\n    \n    for ext in extensions:\n        strength = calc_strength(ext)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_ext = ext\n    \n    return f\"{class_name}.{strongest_ext}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 105, "duration": 1.6746180057525635}]}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = len([i for i in str(abs(num)) if int(i) % 2 == 0])\n    odd_count = len([i for i in str(abs(num)) if int(i) % 2 != 0])\n    return (even_count, odd_count)", "is_solved": true, "iterations": 0, "prompt_tokens": 115, "completion_tokens": 65, "duration": 2.838606119155884, "iteration_states": [{"generated_code": "def even_odd_count(num):\n    even_count = len([i for i in str(abs(num)) if int(i) % 2 == 0])\n    odd_count = len([i for i in str(abs(num)) if int(i) % 2 != 0])\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 115, "completion_tokens": 65, "duration": 2.838606119155884}]}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    \n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    \n    return result.lower()", "is_solved": true, "iterations": 0, "prompt_tokens": 151, "completion_tokens": 143, "duration": 2.278186321258545, "iteration_states": [{"generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    \n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    \n    return result.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 143, "duration": 2.278186321258545}]}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False", "is_solved": true, "iterations": 0, "prompt_tokens": 158, "completion_tokens": 63, "duration": 1.2231793403625488, "iteration_states": [{"generated_code": "def right_angle_triangle(a, b, c):\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 63, "duration": 1.2231793403625488}]}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n    \n    max_unique_chars = 0\n    max_word = \"\"\n    \n    for word in words:\n        curr_unique_chars = unique_chars(word)\n        if curr_unique_chars > max_unique_chars or (curr_unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = curr_unique_chars\n            max_word = word\n    \n    return max_word", "is_solved": true, "iterations": 0, "prompt_tokens": 170, "completion_tokens": 95, "duration": 5.631035089492798, "iteration_states": [{"generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n    \n    max_unique_chars = 0\n    max_word = \"\"\n    \n    for word in words:\n        curr_unique_chars = unique_chars(word)\n        if curr_unique_chars > max_unique_chars or (curr_unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = curr_unique_chars\n            max_word = word\n    \n    return max_word", "is_solved": true, "iteration": 0, "prompt_tokens": 170, "completion_tokens": 95, "duration": 5.631035089492798}]}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    eaten = number + min(need, remaining)\n    left = max(remaining - need, 0)\n    return [eaten, left]", "is_solved": true, "iterations": 0, "prompt_tokens": 327, "completion_tokens": 43, "duration": 2.6561062335968018, "iteration_states": [{"generated_code": "def eat(number, need, remaining):\n    eaten = number + min(need, remaining)\n    left = max(remaining - need, 0)\n    return [eaten, left]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 43, "duration": 2.6561062335968018}]}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operators, operands):\n    expression = str(operands[0])\n    for i in range(len(operators)):\n        expression += operators[i] + str(operands[i + 1])\n    return eval(expression)", "is_solved": true, "iterations": 0, "prompt_tokens": 257, "completion_tokens": 51, "duration": 1.1593248844146729, "iteration_states": [{"generated_code": "def do_algebra(operators, operands):\n    expression = str(operands[0])\n    for i in range(len(operators)):\n        expression += operators[i] + str(operands[i + 1])\n    return eval(expression)", "is_solved": true, "iteration": 0, "prompt_tokens": 257, "completion_tokens": 51, "duration": 1.1593248844146729}]}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not has_letter:\n        return s[::-1]\n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 157, "completion_tokens": 81, "duration": 3.5644960403442383, "iteration_states": [{"generated_code": "def solve(s):\n    result = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not has_letter:\n        return s[::-1]\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 81, "duration": 3.5644960403442383}]}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iterations": 0, "prompt_tokens": 126, "completion_tokens": 36, "duration": 0.8799667358398438, "iteration_states": [{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 36, "duration": 0.8799667358398438}]}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n# Example\nn = 5\nprint(get_max_triples(n))", "is_solved": true, "iterations": 0, "prompt_tokens": 215, "completion_tokens": 119, "duration": 5.007686138153076, "iteration_states": [{"generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n# Example\nn = 5\nprint(get_max_triples(n))", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 119, "duration": 5.007686138153076}]}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    return 0 if all(int(digit) % 2 == 0 for digit in str(n)) else eval('*'.join(digit for digit in str(n) if int(digit) % 2 != 0))", "is_solved": true, "iterations": 1, "prompt_tokens": 925, "completion_tokens": 146, "duration": 4.307226896286011, "iteration_states": [{"generated_code": "def digits(n):\n    prod = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            prod *= int(digit)\n    return prod if prod != 1 else 0", "is_solved": false, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 53, "duration": 1.1113629341125488}, {"generated_code": "def digits(n):\n    return 0 if all(int(digit) % 2 == 0 for digit in str(n)) else eval('*'.join(digit for digit in str(n) if int(digit) % 2 != 0))", "is_solved": true, "iteration": 1, "prompt_tokens": 925, "completion_tokens": 146, "duration": 4.307226896286011}]}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    result = []\n    consecutive_spaces = 0\n    for c in text:\n        if c == ' ':\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result.append('-')\n        else:\n            if consecutive_spaces > 2:\n                result[-1] = '-'\n            else:\n                result.extend(['_' if s == ' ' else s for s in ' ' * consecutive_spaces])\n            consecutive_spaces = 0\n            result.append(c)\n    if consecutive_spaces > 2:\n        result[-1] = '-'\n    else:\n        result.extend(['_' if s == ' ' else s for s in ' ' * consecutive_spaces])\n    return ''.join(result)", "is_solved": true, "iterations": 1, "prompt_tokens": 1187, "completion_tokens": 316, "duration": 10.671008348464966, "iteration_states": [{"generated_code": "def fix_spaces(text):\n    return ''.join(['_' if c == ' ' else '-' if c == ' ' * 2 else c for c in text])\n\n# Test cases\nprint(fix_spaces(\"Example\"))  # \"Example\"\nprint(fix_spaces(\"Example 1\"))  # \"Example_1\"\nprint(fix_spaces(\" Example 2\"))  # \"_Example_2\"\nprint(fix_spaces(\" Example   3\"))  # \"_Example-3\"", "is_solved": false, "iteration": 0, "prompt_tokens": 156, "completion_tokens": 102, "duration": 5.568545341491699}, {"generated_code": "def fix_spaces(text):\n    result = []\n    consecutive_spaces = 0\n    for c in text:\n        if c == ' ':\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result.append('-')\n        else:\n            if consecutive_spaces > 2:\n                result[-1] = '-'\n            else:\n                result.extend(['_' if s == ' ' else s for s in ' ' * consecutive_spaces])\n            consecutive_spaces = 0\n            result.append(c)\n    if consecutive_spaces > 2:\n        result[-1] = '-'\n    else:\n        result.extend(['_' if s == ' ' else s for s in ' ' * consecutive_spaces])\n    return ''.join(result)", "is_solved": true, "iteration": 1, "prompt_tokens": 1187, "completion_tokens": 316, "duration": 10.671008348464966}]}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    if k == 0:\n        return []\n    return sorted(arr)[-k:]", "is_solved": true, "iterations": 2, "prompt_tokens": 3113, "completion_tokens": 160, "duration": 8.927397727966309, "iteration_states": [{"generated_code": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]", "is_solved": false, "iteration": 0, "prompt_tokens": 267, "completion_tokens": 20, "duration": 2.360170602798462}, {"generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "is_solved": false, "iteration": 1, "prompt_tokens": 1736, "completion_tokens": 92, "duration": 6.324979543685913}, {"generated_code": "def maximum(arr, k):\n    if k == 0:\n        return []\n    return sorted(arr)[-k:]", "is_solved": true, "iteration": 2, "prompt_tokens": 3113, "completion_tokens": 160, "duration": 8.927397727966309}]}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(num for i, num in enumerate(lst) if i % 2 == 0 and num % 2 != 0)", "is_solved": true, "iterations": 4, "prompt_tokens": 4151, "completion_tokens": 354, "duration": 14.357294082641602, "iteration_states": [{"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "is_solved": false, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 38, "duration": 1.2757461071014404}, {"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "is_solved": false, "iteration": 1, "prompt_tokens": 1345, "completion_tokens": 143, "duration": 5.105425119400024}, {"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "is_solved": false, "iteration": 2, "prompt_tokens": 2246, "completion_tokens": 197, "duration": 7.8311450481414795}, {"generated_code": "def solution(lst):\n    return sum(num for num in lst if num % 2 != 0)", "is_solved": false, "iteration": 3, "prompt_tokens": 3219, "completion_tokens": 277, "duration": 10.780534029006958}, {"generated_code": "def solution(lst):\n    return sum(num for i, num in enumerate(lst) if i % 2 == 0 and num % 2 != 0)", "is_solved": true, "iteration": 4, "prompt_tokens": 4151, "completion_tokens": 354, "duration": 14.357294082641602}]}
{"task_id": "HumanEval/115", "generated_code": "import math\n\ndef max_fill(grid, capacity):\n    wells = [sum(row) for row in grid]\n    total_water = sum(wells)\n    buckets_needed = 0\n    for well in wells:\n        buckets_needed += math.ceil(well / capacity)\n    return buckets_needed", "is_solved": true, "iterations": 4, "prompt_tokens": 5169, "completion_tokens": 444, "duration": 19.047990083694458, "iteration_states": [{"generated_code": "def max_fill(grid, capacity):\n    wells = [sum(row) for row in grid]\n    total_water = sum(wells)\n    buckets_needed = math.ceil(total_water / capacity)\n    return buckets_needed", "is_solved": false, "iteration": 0, "prompt_tokens": 373, "completion_tokens": 47, "duration": 3.505402088165283}, {"generated_code": "import math\n\ndef max_fill(grid, capacity):\n    wells = [sum(row) for row in grid]\n    total_water = sum(wells)\n    buckets_needed = math.ceil(total_water / capacity)\n    return buckets_needed", "is_solved": false, "iteration": 1, "prompt_tokens": 1724, "completion_tokens": 152, "duration": 7.729218482971191}, {"generated_code": "import math\n\ndef max_fill(grid, capacity):\n    wells = [sum(row) for row in grid]\n    total_water = sum(wells)\n    buckets_needed = math.ceil(total_water / capacity)\n    return buckets_needed", "is_solved": false, "iteration": 2, "prompt_tokens": 2984, "completion_tokens": 268, "duration": 12.227697610855103}, {"generated_code": "import math\n\ndef max_fill(grid, capacity):\n    wells = [sum(row) for row in grid]\n    total_water = sum(wells)\n    buckets_needed = math.ceil(total_water / capacity)\n    return buckets_needed", "is_solved": false, "iteration": 3, "prompt_tokens": 3920, "completion_tokens": 330, "duration": 15.24539041519165}, {"generated_code": "import math\n\ndef max_fill(grid, capacity):\n    wells = [sum(row) for row in grid]\n    total_water = sum(wells)\n    buckets_needed = 0\n    for well in wells:\n        buckets_needed += math.ceil(well / capacity)\n    return buckets_needed", "is_solved": true, "iteration": 4, "prompt_tokens": 5169, "completion_tokens": 444, "duration": 19.047990083694458}]}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if num < 100)", "is_solved": true, "iterations": 6, "prompt_tokens": 5482, "completion_tokens": 460, "duration": 21.917858839035034, "iteration_states": [{"generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num < 100)", "is_solved": false, "iteration": 0, "prompt_tokens": 178, "completion_tokens": 31, "duration": 2.967463731765747}, {"generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num < 100)", "is_solved": false, "iteration": 1, "prompt_tokens": 1167, "completion_tokens": 131, "duration": 6.972917556762695}, {"generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num < 100)", "is_solved": false, "iteration": 2, "prompt_tokens": 1874, "completion_tokens": 162, "duration": 9.579710721969604}, {"generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num < 100)", "is_solved": false, "iteration": 3, "prompt_tokens": 2861, "completion_tokens": 260, "duration": 13.060614347457886}, {"generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num < 100)", "is_solved": false, "iteration": 4, "prompt_tokens": 3566, "completion_tokens": 290, "duration": 15.310040950775146}, {"generated_code": "def add_elements(arr, k):\n    return sum(arr[:k])", "is_solved": false, "iteration": 5, "prompt_tokens": 4544, "completion_tokens": 367, "duration": 18.390610218048096}, {"generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if num < 100)", "is_solved": true, "iteration": 6, "prompt_tokens": 5482, "completion_tokens": 460, "duration": 21.917858839035034}]}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "is_solved": false, "iterations": 9, "prompt_tokens": 7485, "completion_tokens": 743, "duration": 31.777034044265747, "iteration_states": [{"generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "is_solved": false, "iteration": 0, "prompt_tokens": 154, "completion_tokens": 35, "duration": 3.812481641769409}, {"generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "is_solved": false, "iteration": 1, "prompt_tokens": 1078, "completion_tokens": 135, "duration": 7.433868408203125}, {"generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "is_solved": false, "iteration": 2, "prompt_tokens": 1728, "completion_tokens": 190, "duration": 9.839739322662354}, {"generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "is_solved": false, "iteration": 3, "prompt_tokens": 2672, "completion_tokens": 281, "duration": 13.263908624649048}, {"generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "is_solved": false, "iteration": 4, "prompt_tokens": 3342, "completion_tokens": 313, "duration": 15.38467025756836}, {"generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "is_solved": false, "iteration": 5, "prompt_tokens": 4272, "completion_tokens": 415, "duration": 18.57236957550049}, {"generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "is_solved": false, "iteration": 6, "prompt_tokens": 4928, "completion_tokens": 470, "duration": 21.085227012634277}, {"generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "is_solved": false, "iteration": 7, "prompt_tokens": 5874, "completion_tokens": 577, "duration": 24.78023052215576}, {"generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "is_solved": false, "iteration": 8, "prompt_tokens": 6546, "completion_tokens": 628, "duration": 27.21593141555786}, {"generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "is_solved": false, "iteration": 9, "prompt_tokens": 7485, "completion_tokens": 743, "duration": 31.777034044265747}]}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    decreasing_indices = []\n    \n    if not arr:\n        return -1\n    \n    prev = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < prev:\n            decreasing_indices.append(i)\n        prev = arr[i]\n    \n    if len(decreasing_indices) == 0:\n        return -1\n    elif len(decreasing_indices) == 1:\n        return decreasing_indices[0]\n    else:\n        return decreasing_indices[1]", "is_solved": true, "iterations": 5, "prompt_tokens": 4717, "completion_tokens": 816, "duration": 30.710102558135986, "iteration_states": [{"generated_code": "def can_arrange(arr):\n    index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            index = i-1\n            break\n    return index", "is_solved": false, "iteration": 0, "prompt_tokens": 153, "completion_tokens": 52, "duration": 5.050522565841675}, {"generated_code": "def can_arrange(arr):\n    decreasing_count = 0\n    decreasing_index = -1\n    \n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            decreasing_count += 1\n            if decreasing_count > 1:\n                return -1\n            decreasing_index = i-1\n    \n    if decreasing_count == 1:\n        return decreasing_index\n    else:\n        return -1", "is_solved": false, "iteration": 1, "prompt_tokens": 1052, "completion_tokens": 202, "duration": 10.638752222061157}, {"generated_code": "def can_arrange(arr):\n    decreasing_count = 0\n    decreasing_index = -1\n    \n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            decreasing_count += 1\n            if decreasing_count > 1:\n                return -1\n            decreasing_index = i-1\n    \n    if decreasing_count == 1:\n        return decreasing_index\n    else:\n        return -1", "is_solved": false, "iteration": 2, "prompt_tokens": 2061, "completion_tokens": 378, "duration": 16.26737332344055}, {"generated_code": "def can_arrange(arr):\n    prev = arr[0]\n    decreasing_index = -1\n    \n    for i in range(1, len(arr)):\n        if arr[i] < prev:\n            if decreasing_index != -1:\n                return -1\n            decreasing_index = i\n        prev = arr[i]\n    \n    return decreasing_index", "is_solved": false, "iteration": 3, "prompt_tokens": 2770, "completion_tokens": 452, "duration": 19.67844319343567}, {"generated_code": "def can_arrange(arr):\n    decreasing_index = -1\n    \n    if not arr:\n        return -1\n    \n    prev = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < prev:\n            if decreasing_index != -1:\n                return -1\n            decreasing_index = i\n        prev = arr[i]\n    \n    return decreasing_index", "is_solved": false, "iteration": 4, "prompt_tokens": 3738, "completion_tokens": 616, "duration": 24.796844482421875}, {"generated_code": "def can_arrange(arr):\n    decreasing_indices = []\n    \n    if not arr:\n        return -1\n    \n    prev = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < prev:\n            decreasing_indices.append(i)\n        prev = arr[i]\n    \n    if len(decreasing_indices) == 0:\n        return -1\n    elif len(decreasing_indices) == 1:\n        return decreasing_indices[0]\n    else:\n        return decreasing_indices[1]", "is_solved": true, "iteration": 5, "prompt_tokens": 4717, "completion_tokens": 816, "duration": 30.710102558135986}]}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a*2) or b in (a+a)", "is_solved": false, "iterations": 9, "prompt_tokens": 7294, "completion_tokens": 697, "duration": 33.43971347808838, "iteration_states": [{"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a*2)", "is_solved": false, "iteration": 0, "prompt_tokens": 179, "completion_tokens": 29, "duration": 3.6121397018432617}, {"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a*2) or b in (a+a)", "is_solved": false, "iteration": 1, "prompt_tokens": 1084, "completion_tokens": 132, "duration": 7.819219589233398}, {"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a*2) or b in (a+a)", "is_solved": false, "iteration": 2, "prompt_tokens": 1982, "completion_tokens": 232, "duration": 12.024618148803711}, {"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a*2) or b in (a+a)", "is_solved": false, "iteration": 3, "prompt_tokens": 2637, "completion_tokens": 266, "duration": 14.512318134307861}, {"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a*2) or b in (a+a)", "is_solved": false, "iteration": 4, "prompt_tokens": 3530, "completion_tokens": 365, "duration": 18.35783886909485}, {"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a*2) or b in (a+a)", "is_solved": false, "iteration": 5, "prompt_tokens": 4180, "completion_tokens": 409, "duration": 20.829424142837524}, {"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a*2) or b in (a+a)", "is_solved": false, "iteration": 6, "prompt_tokens": 5069, "completion_tokens": 504, "duration": 24.888211250305176}, {"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a*2) or b in (a+a)", "is_solved": false, "iteration": 7, "prompt_tokens": 5715, "completion_tokens": 548, "duration": 27.30491828918457}, {"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a*2) or b in (a+a)", "is_solved": false, "iteration": 8, "prompt_tokens": 6626, "completion_tokens": 665, "duration": 31.181952714920044}, {"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a*2) or b in (a+a)", "is_solved": false, "iteration": 9, "prompt_tokens": 7294, "completion_tokens": 697, "duration": 33.43971347808838}]}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "is_solved": false, "iterations": 9, "prompt_tokens": 10148, "completion_tokens": 690, "duration": 35.177204847335815, "iteration_states": [{"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))", "is_solved": false, "iteration": 0, "prompt_tokens": 165, "completion_tokens": 31, "duration": 2.5527098178863525}, {"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "is_solved": false, "iteration": 1, "prompt_tokens": 1498, "completion_tokens": 116, "duration": 6.528331995010376}, {"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "is_solved": false, "iteration": 2, "prompt_tokens": 2833, "completion_tokens": 255, "duration": 11.414727926254272}, {"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "is_solved": false, "iteration": 3, "prompt_tokens": 3722, "completion_tokens": 291, "duration": 14.536017417907715}, {"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "is_solved": false, "iteration": 4, "prompt_tokens": 5010, "completion_tokens": 381, "duration": 18.65706467628479}, {"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "is_solved": false, "iteration": 5, "prompt_tokens": 5852, "completion_tokens": 417, "duration": 21.09839415550232}, {"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "is_solved": false, "iteration": 6, "prompt_tokens": 7145, "completion_tokens": 512, "duration": 25.005207300186157}, {"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "is_solved": false, "iteration": 7, "prompt_tokens": 7992, "completion_tokens": 548, "duration": 27.539860248565674}, {"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "is_solved": false, "iteration": 8, "prompt_tokens": 9293, "completion_tokens": 654, "duration": 32.44819450378418}, {"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "is_solved": false, "iteration": 9, "prompt_tokens": 10148, "completion_tokens": 690, "duration": 35.177204847335815}]}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)) and len(lst) == len(set(lst))", "is_solved": false, "iterations": 9, "prompt_tokens": 11431, "completion_tokens": 942, "duration": 37.63569498062134, "iteration_states": [{"generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1) if lst.count(lst[i]) == 1)", "is_solved": false, "iteration": 0, "prompt_tokens": 299, "completion_tokens": 43, "duration": 4.305203914642334}, {"generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1) if lst.count(lst[i]) <= 1)", "is_solved": false, "iteration": 1, "prompt_tokens": 1671, "completion_tokens": 146, "duration": 8.269343376159668}, {"generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)) and len(lst) == len(set(lst))", "is_solved": false, "iteration": 2, "prompt_tokens": 3061, "completion_tokens": 266, "duration": 12.66696047782898}, {"generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)) and len(lst) == len(set(lst))", "is_solved": false, "iteration": 3, "prompt_tokens": 4428, "completion_tokens": 375, "duration": 16.32391357421875}, {"generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)) and len(lst) == len(set(lst))", "is_solved": false, "iteration": 4, "prompt_tokens": 5383, "completion_tokens": 417, "duration": 18.611995697021484}, {"generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)) and len(lst) == len(set(lst))", "is_solved": false, "iteration": 5, "prompt_tokens": 6769, "completion_tokens": 568, "duration": 23.438024282455444}, {"generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)) and len(lst) == len(set(lst))", "is_solved": false, "iteration": 6, "prompt_tokens": 7743, "completion_tokens": 611, "duration": 26.108720541000366}, {"generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)) and len(lst) == len(set(lst))", "is_solved": false, "iteration": 7, "prompt_tokens": 9098, "completion_tokens": 722, "duration": 29.961811304092407}, {"generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)) and len(lst) == len(set(lst))", "is_solved": false, "iteration": 8, "prompt_tokens": 10041, "completion_tokens": 778, "duration": 32.72580146789551}, {"generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)) and len(lst) == len(set(lst))", "is_solved": false, "iteration": 9, "prompt_tokens": 11431, "completion_tokens": 942, "duration": 37.63569498062134}]}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 and (i+1) % 3 != 0 else x for i, x in enumerate(lst))", "is_solved": false, "iterations": 9, "prompt_tokens": 11587, "completion_tokens": 937, "duration": 34.98616361618042, "iteration_states": [{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 54, "duration": 1.426814079284668}, {"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 and (i+1) % 3 != 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 1, "prompt_tokens": 1719, "completion_tokens": 213, "duration": 6.71412205696106}, {"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 and (i+1) % 3 != 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 2, "prompt_tokens": 3210, "completion_tokens": 327, "duration": 10.573724269866943}, {"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 and (i+1) % 3 != 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 3, "prompt_tokens": 4184, "completion_tokens": 381, "duration": 13.022838354110718}, {"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 and (i+1) % 3 != 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 4, "prompt_tokens": 5670, "completion_tokens": 490, "duration": 16.997995853424072}, {"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 and (i+1) % 3 != 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 5, "prompt_tokens": 6639, "completion_tokens": 556, "duration": 19.932697057724}, {"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 and (i+1) % 3 != 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 6, "prompt_tokens": 8126, "completion_tokens": 678, "duration": 24.1355197429657}, {"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 and (i+1) % 3 != 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 7, "prompt_tokens": 9096, "completion_tokens": 744, "duration": 26.942400693893433}, {"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 and (i+1) % 3 != 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 8, "prompt_tokens": 10600, "completion_tokens": 883, "duration": 31.990386962890625}, {"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 and (i+1) % 3 != 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 9, "prompt_tokens": 11587, "completion_tokens": 937, "duration": 34.98616361618042}]}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) != type(b):\n        return a if type(a) == float else b\n    if a == b:\n        return None\n    return a if a > b else b", "is_solved": false, "iterations": 9, "prompt_tokens": 7949, "completion_tokens": 876, "duration": 36.54176902770996, "iteration_states": [{"generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a == b:\n            return None\n        return a if a > b else b\n    return a if type(a) == float else b", "is_solved": false, "iteration": 0, "prompt_tokens": 191, "completion_tokens": 52, "duration": 3.0268993377685547}, {"generated_code": "def compare_one(a, b):\n    if type(a) != type(b):\n        return a if type(a) == float else b\n    if a == b:\n        return None\n    return a if a > b else b", "is_solved": false, "iteration": 1, "prompt_tokens": 1175, "completion_tokens": 160, "duration": 6.686961889266968}, {"generated_code": "def compare_one(a, b):\n    if type(a) != type(b):\n        return a if type(a) == float else b\n    if a == b:\n        return None\n    return a if a > b else b", "is_solved": false, "iteration": 2, "prompt_tokens": 2154, "completion_tokens": 263, "duration": 10.495457887649536}, {"generated_code": "def compare_one(a, b):\n    if type(a) != type(b):\n        return a if type(a) == float else b\n    if a == b:\n        return None\n    return a if a > b else b", "is_solved": false, "iteration": 3, "prompt_tokens": 2853, "completion_tokens": 333, "duration": 13.019093751907349}, {"generated_code": "def compare_one(a, b):\n    if type(a) != type(b):\n        return a if type(a) == float else b\n    if a == b:\n        return None\n    return a if a > b else b", "is_solved": false, "iteration": 4, "prompt_tokens": 3832, "completion_tokens": 474, "duration": 17.25305676460266}, {"generated_code": "def compare_one(a, b):\n    if type(a) != type(b):\n        return a if type(a) == float else b\n    if a == b:\n        return None\n    return a if a > b else b", "is_solved": false, "iteration": 5, "prompt_tokens": 4531, "completion_tokens": 529, "duration": 19.56587028503418}, {"generated_code": "def compare_one(a, b):\n    if type(a) != type(b):\n        return a if type(a) == float else b\n    if a == b:\n        return None\n    return a if a > b else b", "is_solved": false, "iteration": 6, "prompt_tokens": 5531, "completion_tokens": 645, "duration": 23.497161626815796}, {"generated_code": "def compare_one(a, b):\n    if type(a) != type(b):\n        return a if type(a) == float else b\n    if a == b:\n        return None\n    return a if a > b else b", "is_solved": false, "iteration": 7, "prompt_tokens": 6251, "completion_tokens": 689, "duration": 25.947532176971436}, {"generated_code": "def compare_one(a, b):\n    if type(a) != type(b):\n        return a if type(a) == float else b\n    if a == b:\n        return None\n    return a if a > b else b", "is_solved": false, "iteration": 8, "prompt_tokens": 7240, "completion_tokens": 794, "duration": 31.11223578453064}, {"generated_code": "def compare_one(a, b):\n    if type(a) != type(b):\n        return a if type(a) == float else b\n    if a == b:\n        return None\n    return a if a > b else b", "is_solved": false, "iteration": 9, "prompt_tokens": 7949, "completion_tokens": 876, "duration": 36.54176902770996}]}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt.strip():\n        return False\n    last_char = txt.strip()[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt.rstrip().split()[-1]) == 1:\n        return True\n    return False", "is_solved": false, "iterations": 9, "prompt_tokens": 8798, "completion_tokens": 996, "duration": 46.967711448669434, "iteration_states": [{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    last_char = txt.strip()[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt.split()[-1]) == 1:\n        return True\n    return False", "is_solved": false, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 66, "duration": 5.334384918212891}, {"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt.strip():\n        return False\n    last_char = txt.strip()[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt.rstrip().split()[-1]) == 1:\n        return True\n    return False", "is_solved": false, "iteration": 1, "prompt_tokens": 1292, "completion_tokens": 194, "duration": 9.964791536331177}, {"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt.strip():\n        return False\n    last_char = txt.strip()[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt.rstrip().split()[-1]) == 1:\n        return True\n    return False", "is_solved": false, "iteration": 2, "prompt_tokens": 2399, "completion_tokens": 325, "duration": 14.165433883666992}, {"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt.strip():\n        return False\n    last_char = txt.strip()[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt.rstrip().split()[-1]) == 1:\n        return True\n    return False", "is_solved": false, "iteration": 3, "prompt_tokens": 3162, "completion_tokens": 401, "duration": 17.213852643966675}, {"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt.strip():\n        return False\n    last_char = txt.strip()[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt.rstrip().split()[-1]) == 1:\n        return True\n    return False", "is_solved": false, "iteration": 4, "prompt_tokens": 4268, "completion_tokens": 515, "duration": 20.994328260421753}, {"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt.strip():\n        return False\n    last_char = txt.strip()[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt.rstrip().split()[-1]) == 1:\n        return True\n    return False", "is_solved": false, "iteration": 5, "prompt_tokens": 5030, "completion_tokens": 561, "duration": 23.353965520858765}, {"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt.strip():\n        return False\n    last_char = txt.strip()[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt.rstrip().split()[-1]) == 1:\n        return True\n    return False", "is_solved": false, "iteration": 6, "prompt_tokens": 6130, "completion_tokens": 679, "duration": 32.874186754226685}, {"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt.strip():\n        return False\n    last_char = txt.strip()[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt.rstrip().split()[-1]) == 1:\n        return True\n    return False", "is_solved": false, "iteration": 7, "prompt_tokens": 6886, "completion_tokens": 765, "duration": 38.80114245414734}, {"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt.strip():\n        return False\n    last_char = txt.strip()[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt.rstrip().split()[-1]) == 1:\n        return True\n    return False", "is_solved": false, "iteration": 8, "prompt_tokens": 8014, "completion_tokens": 914, "duration": 43.52097988128662}, {"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt.strip():\n        return False\n    last_char = txt.strip()[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt.rstrip().split()[-1]) == 1:\n        return True\n    return False", "is_solved": false, "iteration": 9, "prompt_tokens": 8798, "completion_tokens": 996, "duration": 46.967711448669434}]}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        odd_lower_case = sum(1 for char in set(txt) if char.islower() and ord(char) % 2 == 1)\n        return odd_lower_case", "is_solved": false, "iterations": 9, "prompt_tokens": 8576, "completion_tokens": 1033, "duration": 35.49238348007202, "iteration_states": [{"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "is_solved": false, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 60, "duration": 3.0317656993865967}, {"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        words = []\n        current_word = ''\n        for char in txt:\n            if char.isalpha():\n                current_word += char\n            else:\n                if current_word:\n                    words.append(current_word)\n                    current_word = ''\n        if current_word:\n            words.append(current_word)\n        return words", "is_solved": false, "iteration": 1, "prompt_tokens": 1207, "completion_tokens": 228, "duration": 8.213372468948364}, {"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        odd_lower_case = sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)\n        return odd_lower_case", "is_solved": false, "iteration": 2, "prompt_tokens": 2320, "completion_tokens": 373, "duration": 12.292856931686401}, {"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        odd_lower_case = sum(1 for char in set(txt) if char.islower() and ord(char) % 2 == 1)\n        return odd_lower_case", "is_solved": false, "iteration": 3, "prompt_tokens": 3331, "completion_tokens": 492, "duration": 16.504812717437744}, {"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        odd_lower_case = sum(1 for char in set(txt) if char.islower() and ord(char) % 2 == 1)\n        return odd_lower_case", "is_solved": false, "iteration": 4, "prompt_tokens": 4352, "completion_tokens": 629, "duration": 20.28583550453186}, {"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        odd_lower_case = sum(1 for char in set(txt) if char.islower() and ord(char) % 2 == 1)\n        return odd_lower_case", "is_solved": false, "iteration": 5, "prompt_tokens": 5078, "completion_tokens": 689, "duration": 22.74363136291504}, {"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        odd_lower_case = sum(1 for char in set(txt) if char.islower() and ord(char) % 2 == 1)\n        return odd_lower_case", "is_solved": false, "iteration": 6, "prompt_tokens": 6118, "completion_tokens": 831, "duration": 26.968787908554077}, {"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        odd_lower_case = sum(1 for char in set(txt) if char.islower() and ord(char) % 2 == 1)\n        return odd_lower_case", "is_solved": false, "iteration": 7, "prompt_tokens": 6863, "completion_tokens": 890, "duration": 30.36485004425049}, {"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        odd_lower_case = sum(1 for char in set(txt) if char.islower() and ord(char) % 2 == 1)\n        return odd_lower_case", "is_solved": false, "iteration": 8, "prompt_tokens": 7867, "completion_tokens": 985, "duration": 33.36396265029907}, {"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        odd_lower_case = sum(1 for char in set(txt) if char.islower() and ord(char) % 2 == 1)\n        return odd_lower_case", "is_solved": false, "iteration": 9, "prompt_tokens": 8576, "completion_tokens": 1033, "duration": 35.49238348007202}]}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    opening = 0\n    closing = 0\n    for paren in lst[0] + lst[1]:\n        if paren == '(':\n            opening += 1\n        else:\n            if opening > 0:\n                opening -= 1\n            else:\n                closing += 1\n    \n    return 'Yes' if opening == closing == 0 else 'No'", "is_solved": false, "iterations": 9, "prompt_tokens": 9963, "completion_tokens": 1101, "duration": 40.73431396484375, "iteration_states": [{"generated_code": "def match_parens(lst):\n    return 'Yes' if abs(lst[0].count('(') - lst[0].count(')')) <= 1 and abs(lst[1].count('(') - lst[1].count(')')) <= 1 else 'No'", "is_solved": false, "iteration": 0, "prompt_tokens": 218, "completion_tokens": 62, "duration": 3.538313865661621}, {"generated_code": "def match_parens(lst):\n    opening = 0\n    closing = 0\n    for paren in lst[0] + lst[1]:\n        if paren == '(':\n            opening += 1\n        else:\n            if opening > 0:\n                opening -= 1\n            else:\n                closing += 1\n    \n    return 'Yes' if opening == closing == 0 else 'No'", "is_solved": false, "iteration": 1, "prompt_tokens": 1483, "completion_tokens": 227, "duration": 9.137817144393921}, {"generated_code": "def match_parens(lst):\n    opening = 0\n    closing = 0\n    for paren in lst[0] + lst[1]:\n        if paren == '(':\n            opening += 1\n        else:\n            if opening > 0:\n                opening -= 1\n            else:\n                closing += 1\n    \n    return 'Yes' if opening == closing == 0 else 'No'", "is_solved": false, "iteration": 2, "prompt_tokens": 2738, "completion_tokens": 361, "duration": 13.902400493621826}, {"generated_code": "def match_parens(lst):\n    opening = 0\n    closing = 0\n    for paren in lst[0] + lst[1]:\n        if paren == '(':\n            opening += 1\n        else:\n            if opening > 0:\n                opening -= 1\n            else:\n                closing += 1\n    \n    return 'Yes' if opening == closing == 0 else 'No'", "is_solved": false, "iteration": 3, "prompt_tokens": 3586, "completion_tokens": 449, "duration": 16.913881063461304}, {"generated_code": "def match_parens(lst):\n    opening = 0\n    closing = 0\n    for paren in lst[0] + lst[1]:\n        if paren == '(':\n            opening += 1\n        else:\n            if opening > 0:\n                opening -= 1\n            else:\n                closing += 1\n    \n    return 'Yes' if opening == closing == 0 else 'No'", "is_solved": false, "iteration": 4, "prompt_tokens": 4864, "completion_tokens": 595, "duration": 21.1430504322052}, {"generated_code": "def match_parens(lst):\n    opening = 0\n    closing = 0\n    for paren in lst[0] + lst[1]:\n        if paren == '(':\n            opening += 1\n        else:\n            if opening > 0:\n                opening -= 1\n            else:\n                closing += 1\n    \n    return 'Yes' if opening == closing == 0 else 'No'", "is_solved": false, "iteration": 5, "prompt_tokens": 5735, "completion_tokens": 666, "duration": 24.16991090774536}, {"generated_code": "def match_parens(lst):\n    opening = 0\n    closing = 0\n    for paren in lst[0] + lst[1]:\n        if paren == '(':\n            opening += 1\n        else:\n            if opening > 0:\n                opening -= 1\n            else:\n                closing += 1\n    \n    return 'Yes' if opening == closing == 0 else 'No'", "is_solved": false, "iteration": 6, "prompt_tokens": 6986, "completion_tokens": 802, "duration": 30.57447624206543}, {"generated_code": "def match_parens(lst):\n    opening = 0\n    closing = 0\n    for paren in lst[0] + lst[1]:\n        if paren == '(':\n            opening += 1\n        else:\n            if opening > 0:\n                opening -= 1\n            else:\n                closing += 1\n    \n    return 'Yes' if opening == closing == 0 else 'No'", "is_solved": false, "iteration": 7, "prompt_tokens": 7830, "completion_tokens": 893, "duration": 33.522332429885864}, {"generated_code": "def match_parens(lst):\n    opening = 0\n    closing = 0\n    for paren in lst[0] + lst[1]:\n        if paren == '(':\n            opening += 1\n        else:\n            if opening > 0:\n                opening -= 1\n            else:\n                closing += 1\n    \n    return 'Yes' if opening == closing == 0 else 'No'", "is_solved": false, "iteration": 8, "prompt_tokens": 9100, "completion_tokens": 1032, "duration": 37.77275323867798}, {"generated_code": "def match_parens(lst):\n    opening = 0\n    closing = 0\n    for paren in lst[0] + lst[1]:\n        if paren == '(':\n            opening += 1\n        else:\n            if opening > 0:\n                opening -= 1\n            else:\n                closing += 1\n    \n    return 'Yes' if opening == closing == 0 else 'No'", "is_solved": false, "iteration": 9, "prompt_tokens": 9963, "completion_tokens": 1101, "duration": 40.73431396484375}]}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1, 3]\n    else:\n        sequence = [1, 3]\n        for i in range(2, n):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n        return sequence", "is_solved": false, "iterations": 9, "prompt_tokens": 14161, "completion_tokens": 1352, "duration": 44.82016587257385, "iteration_states": [{"generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1]\n    else:\n        sequence = [0, 1, 1]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n        return sequence", "is_solved": false, "iteration": 0, "prompt_tokens": 285, "completion_tokens": 108, "duration": 6.019955396652222}, {"generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1, 3]\n    else:\n        sequence = [1, 3]\n        for i in range(2, n):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n        return sequence", "is_solved": false, "iteration": 1, "prompt_tokens": 2159, "completion_tokens": 291, "duration": 11.92842984199524}, {"generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1, 3]\n    else:\n        sequence = [1, 3]\n        for i in range(2, n):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n        return sequence", "is_solved": false, "iteration": 2, "prompt_tokens": 3981, "completion_tokens": 442, "duration": 15.95469045639038}, {"generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1, 3]\n    else:\n        sequence = [1, 3]\n        for i in range(2, n):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n        return sequence", "is_solved": false, "iteration": 3, "prompt_tokens": 5145, "completion_tokens": 549, "duration": 18.870067834854126}, {"generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1, 3]\n    else:\n        sequence = [1, 3]\n        for i in range(2, n):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n        return sequence", "is_solved": false, "iteration": 4, "prompt_tokens": 6974, "completion_tokens": 707, "duration": 22.97680926322937}, {"generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1, 3]\n    else:\n        sequence = [1, 3]\n        for i in range(2, n):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n        return sequence", "is_solved": false, "iteration": 5, "prompt_tokens": 8145, "completion_tokens": 814, "duration": 26.299386262893677}, {"generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1, 3]\n    else:\n        sequence = [1, 3]\n        for i in range(2, n):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n        return sequence", "is_solved": false, "iteration": 6, "prompt_tokens": 9988, "completion_tokens": 986, "duration": 31.200703620910645}, {"generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1, 3]\n    else:\n        sequence = [1, 3]\n        for i in range(2, n):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n        return sequence", "is_solved": false, "iteration": 7, "prompt_tokens": 11173, "completion_tokens": 1093, "duration": 35.10220408439636}, {"generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1, 3]\n    else:\n        sequence = [1, 3]\n        for i in range(2, n):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n        return sequence", "is_solved": false, "iteration": 8, "prompt_tokens": 12996, "completion_tokens": 1245, "duration": 40.63304662704468}, {"generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1, 3]\n    else:\n        sequence = [1, 3]\n        for i in range(2, n):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n        return sequence", "is_solved": false, "iteration": 9, "prompt_tokens": 14161, "completion_tokens": 1352, "duration": 44.82016587257385}]}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    count = 0\n    for i in range(2, n//2 + 1, 2):\n        if (n - i) % 2 == 0 and (n - i) >= 2:\n            count += 1\n    return count == 4", "is_solved": false, "iterations": 9, "prompt_tokens": 7437, "completion_tokens": 1094, "duration": 42.34444522857666, "iteration_states": [{"generated_code": "def is_equal_to_sum_even(n):\n    count = 0\n    for i in range(2, n//2 + 1, 2):\n        if n - i in range(2, n, 2):\n            count += 1\n    return count == 4", "is_solved": false, "iteration": 0, "prompt_tokens": 127, "completion_tokens": 64, "duration": 5.258005857467651}, {"generated_code": "def is_equal_to_sum_even(n):\n    count = 0\n    for i in range(2, n//2 + 1, 2):\n        if (n - i) % 2 == 0 and (n - i) >= 2:\n            count += 1\n    return count == 4", "is_solved": false, "iteration": 1, "prompt_tokens": 1057, "completion_tokens": 194, "duration": 9.81117582321167}, {"generated_code": "def is_equal_to_sum_even(n):\n    count = 0\n    for i in range(2, n//2 + 1, 2):\n        if (n - i) % 2 == 0 and (n - i) >= 2:\n            count += 1\n    return count == 4", "is_solved": false, "iteration": 2, "prompt_tokens": 1999, "completion_tokens": 348, "duration": 14.614965200424194}, {"generated_code": "def is_equal_to_sum_even(n):\n    count = 0\n    for i in range(2, n//2 + 1, 2):\n        if (n - i) % 2 == 0 and (n - i) >= 2:\n            count += 1\n    return count == 4", "is_solved": false, "iteration": 3, "prompt_tokens": 2649, "completion_tokens": 426, "duration": 17.513105392456055}, {"generated_code": "def is_equal_to_sum_even(n):\n    count = 0\n    for i in range(2, n//2 + 1, 2):\n        if (n - i) % 2 == 0 and (n - i) >= 2:\n            count += 1\n    return count == 4", "is_solved": false, "iteration": 4, "prompt_tokens": 3576, "completion_tokens": 548, "duration": 21.276110887527466}, {"generated_code": "def is_equal_to_sum_even(n):\n    count = 0\n    for i in range(2, n//2 + 1, 2):\n        if (n - i) % 2 == 0 and (n - i) >= 2:\n            count += 1\n    return count == 4", "is_solved": false, "iteration": 5, "prompt_tokens": 4211, "completion_tokens": 621, "duration": 23.674028635025024}, {"generated_code": "def is_equal_to_sum_even(n):\n    count = 0\n    for i in range(2, n//2 + 1, 2):\n        if (n - i) % 2 == 0 and (n - i) >= 2:\n            count += 1\n    return count == 4", "is_solved": false, "iteration": 6, "prompt_tokens": 5168, "completion_tokens": 784, "duration": 31.661792278289795}, {"generated_code": "def is_equal_to_sum_even(n):\n    count = 0\n    for i in range(2, n//2 + 1, 2):\n        if (n - i) % 2 == 0 and (n - i) >= 2:\n            count += 1\n    return count == 4", "is_solved": false, "iteration": 7, "prompt_tokens": 5833, "completion_tokens": 883, "duration": 35.11728024482727}, {"generated_code": "def is_equal_to_sum_even(n):\n    count = 0\n    for i in range(2, n//2 + 1, 2):\n        if (n - i) % 2 == 0 and (n - i) >= 2:\n            count += 1\n    return count == 4", "is_solved": false, "iteration": 8, "prompt_tokens": 6781, "completion_tokens": 1021, "duration": 39.511860847473145}, {"generated_code": "def is_equal_to_sum_even(n):\n    count = 0\n    for i in range(2, n//2 + 1, 2):\n        if (n - i) % 2 == 0 and (n - i) >= 2:\n            count += 1\n    return count == 4", "is_solved": false, "iteration": 9, "prompt_tokens": 7437, "completion_tokens": 1094, "duration": 42.34444522857666}]}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    open_brackets = 0\n    max_open = 0\n    \n    for char in string:\n        if char == '[':\n            open_brackets += 1\n            max_open = max(max_open, open_brackets)\n        elif char == ']':\n            if open_brackets == 0:\n                return False\n            open_brackets -= 1\n    \n    return open_brackets == 0 and max_open > 1", "is_solved": false, "iterations": 9, "prompt_tokens": 9668, "completion_tokens": 1296, "duration": 47.346123695373535, "iteration_states": [{"generated_code": "def is_nested(string):\n    opening_brackets = []\n    \n    for char in string:\n        if char == '[':\n            opening_brackets.append(char)\n        elif char == ']':\n            if opening_brackets:\n                opening_brackets.pop()\n    \n    return len(opening_brackets) != 0\n\n# Test cases\nprint(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\nprint(is_nested('[[][]]'))\nprint(is_nested('[[]][['))", "is_solved": false, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 116, "duration": 6.233360767364502}, {"generated_code": "def is_nested(string):\n    open_brackets = 0\n    \n    for char in string:\n        if char == '[':\n            open_brackets += 1\n        elif char == ']':\n            if open_brackets == 0:\n                return False\n            open_brackets -= 1\n    \n    return open_brackets != 0", "is_solved": false, "iteration": 1, "prompt_tokens": 1458, "completion_tokens": 264, "duration": 11.134874105453491}, {"generated_code": "def is_nested(string):\n    open_brackets = 0\n    max_open = 0\n    \n    for char in string:\n        if char == '[':\n            open_brackets += 1\n            max_open = max(max_open, open_brackets)\n        elif char == ']':\n            if open_brackets == 0:\n                return False\n            open_brackets -= 1\n    \n    return max_open > 1", "is_solved": false, "iteration": 2, "prompt_tokens": 2599, "completion_tokens": 392, "duration": 15.635580778121948}, {"generated_code": "def is_nested(string):\n    open_brackets = 0\n    max_open = 0\n    \n    for char in string:\n        if char == '[':\n            open_brackets += 1\n            max_open = max(max_open, open_brackets)\n        elif char == ']':\n            if open_brackets == 0:\n                return False\n            open_brackets -= 1\n    \n    return max_open > 1", "is_solved": false, "iteration": 3, "prompt_tokens": 3760, "completion_tokens": 513, "duration": 19.503052234649658}, {"generated_code": "def is_nested(string):\n    open_brackets = 0\n    max_open = 0\n    \n    for char in string:\n        if char == '[':\n            open_brackets += 1\n            max_open = max(max_open, open_brackets)\n        elif char == ']':\n            if open_brackets == 0:\n                return False\n            open_brackets -= 1\n    \n    return open_brackets == 0 and max_open > 1", "is_solved": false, "iteration": 4, "prompt_tokens": 4551, "completion_tokens": 611, "duration": 22.826047658920288}, {"generated_code": "def is_nested(string):\n    open_brackets = 0\n    max_open = 0\n    \n    for char in string:\n        if char == '[':\n            open_brackets += 1\n            max_open = max(max_open, open_brackets)\n        elif char == ']':\n            if open_brackets == 0:\n                return False\n            open_brackets -= 1\n    \n    return open_brackets == 0 and max_open > 1", "is_solved": false, "iteration": 5, "prompt_tokens": 5708, "completion_tokens": 801, "duration": 28.486725568771362}, {"generated_code": "def is_nested(string):\n    open_brackets = 0\n    max_open = 0\n    \n    for char in string:\n        if char == '[':\n            open_brackets += 1\n            max_open = max(max_open, open_brackets)\n        elif char == ']':\n            if open_brackets == 0:\n                return False\n            open_brackets -= 1\n    \n    return open_brackets == 0 and max_open > 1", "is_solved": false, "iteration": 6, "prompt_tokens": 6493, "completion_tokens": 928, "duration": 32.389565229415894}, {"generated_code": "def is_nested(string):\n    open_brackets = 0\n    max_open = 0\n    \n    for char in string:\n        if char == '[':\n            open_brackets += 1\n            max_open = max(max_open, open_brackets)\n        elif char == ']':\n            if open_brackets == 0:\n                return False\n            open_brackets -= 1\n    \n    return open_brackets == 0 and max_open > 1", "is_solved": false, "iteration": 7, "prompt_tokens": 7672, "completion_tokens": 1065, "duration": 37.38405752182007}, {"generated_code": "def is_nested(string):\n    open_brackets = 0\n    max_open = 0\n    \n    for char in string:\n        if char == '[':\n            open_brackets += 1\n            max_open = max(max_open, open_brackets)\n        elif char == ']':\n            if open_brackets == 0:\n                return False\n            open_brackets -= 1\n    \n    return open_brackets == 0 and max_open > 1", "is_solved": false, "iteration": 8, "prompt_tokens": 8479, "completion_tokens": 1138, "duration": 40.85812568664551}, {"generated_code": "def is_nested(string):\n    open_brackets = 0\n    max_open = 0\n    \n    for char in string:\n        if char == '[':\n            open_brackets += 1\n            max_open = max(max_open, open_brackets)\n        elif char == ']':\n            if open_brackets == 0:\n                return False\n            open_brackets -= 1\n    \n    return open_brackets == 0 and max_open > 1", "is_solved": false, "iteration": 9, "prompt_tokens": 9668, "completion_tokens": 1296, "duration": 47.346123695373535}]}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    else:\n        return tuple(planets[end_idx+1:start_idx][::-1] if start_idx != 7 else planets[:end_idx])", "is_solved": false, "iterations": 9, "prompt_tokens": 10172, "completion_tokens": 1688, "duration": 45.21079134941101, "iteration_states": [{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    else:\n        return tuple(planets[end_idx+1:start_idx][::-1])", "is_solved": false, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 126, "duration": 2.1185858249664307}, {"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    else:\n        return tuple(planets[end_idx+1:start_idx][::-1] if start_idx != 7 else planets[:end_idx])", "is_solved": false, "iteration": 1, "prompt_tokens": 1504, "completion_tokens": 315, "duration": 7.352751016616821}, {"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    else:\n        return tuple(planets[end_idx+1:start_idx][::-1] if start_idx != 7 else planets[:end_idx])", "is_solved": false, "iteration": 2, "prompt_tokens": 2768, "completion_tokens": 507, "duration": 12.66687297821045}, {"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    else:\n        return tuple(planets[end_idx+1:start_idx][::-1] if start_idx != 7 else planets[:end_idx])", "is_solved": false, "iteration": 3, "prompt_tokens": 3643, "completion_tokens": 650, "duration": 16.60687494277954}, {"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    else:\n        return tuple(planets[end_idx+1:start_idx][::-1] if start_idx != 7 else planets[:end_idx])", "is_solved": false, "iteration": 4, "prompt_tokens": 4911, "completion_tokens": 843, "duration": 21.365503549575806}, {"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    else:\n        return tuple(planets[end_idx+1:start_idx][::-1] if start_idx != 7 else planets[:end_idx])", "is_solved": false, "iteration": 5, "prompt_tokens": 5790, "completion_tokens": 970, "duration": 24.941543340682983}, {"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    else:\n        return tuple(planets[end_idx+1:start_idx][::-1] if start_idx != 7 else planets[:end_idx])", "is_solved": false, "iteration": 6, "prompt_tokens": 7077, "completion_tokens": 1182, "duration": 30.918622493743896}, {"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    else:\n        return tuple(planets[end_idx+1:start_idx][::-1] if start_idx != 7 else planets[:end_idx])", "is_solved": false, "iteration": 7, "prompt_tokens": 7975, "completion_tokens": 1326, "duration": 35.48330330848694}, {"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    else:\n        return tuple(planets[end_idx+1:start_idx][::-1] if start_idx != 7 else planets[:end_idx])", "is_solved": false, "iteration": 8, "prompt_tokens": 9268, "completion_tokens": 1530, "duration": 40.836132287979126}, {"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    else:\n        return tuple(planets[end_idx+1:start_idx][::-1] if start_idx != 7 else planets[:end_idx])", "is_solved": false, "iteration": 9, "prompt_tokens": 10172, "completion_tokens": 1688, "duration": 45.21079134941101}]}
{"task_id": "HumanEval/127", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    length = intersection_end - intersection_start + 1\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iterations": 9, "prompt_tokens": 13110, "completion_tokens": 1953, "duration": 52.38629651069641, "iteration_states": [{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    length = intersection_end - intersection_start + 1\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 0, "prompt_tokens": 304, "completion_tokens": 159, "duration": 5.277536869049072}, {"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    length = intersection_end - intersection_start + 1\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 1, "prompt_tokens": 1992, "completion_tokens": 409, "duration": 11.210719585418701}, {"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    length = intersection_end - intersection_start + 1\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 2, "prompt_tokens": 3122, "completion_tokens": 568, "duration": 16.097679615020752}, {"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    length = intersection_end - intersection_start + 1\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 3, "prompt_tokens": 4780, "completion_tokens": 788, "duration": 22.038312673568726}, {"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    length = intersection_end - intersection_start + 1\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 4, "prompt_tokens": 5880, "completion_tokens": 947, "duration": 26.53293251991272}, {"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    length = intersection_end - intersection_start + 1\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 5, "prompt_tokens": 7554, "completion_tokens": 1183, "duration": 32.78425097465515}, {"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    length = intersection_end - intersection_start + 1\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 6, "prompt_tokens": 8670, "completion_tokens": 1342, "duration": 37.13704490661621}, {"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    length = intersection_end - intersection_start + 1\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 7, "prompt_tokens": 10330, "completion_tokens": 1559, "duration": 42.00347304344177}, {"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    length = intersection_end - intersection_start + 1\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 8, "prompt_tokens": 11432, "completion_tokens": 1713, "duration": 45.672430753707886}, {"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    length = intersection_end - intersection_start + 1\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 9, "prompt_tokens": 13110, "completion_tokens": 1953, "duration": 52.38629651069641}]}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    def dfs(x, y, path_len, path):\n        if path_len == k:\n            return path\n\n        min_path = []\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and not visited[nx][ny]:\n                visited[nx][ny] = True\n                new_path = dfs(nx, ny, path_len + 1, path + [grid[nx][ny]])\n                if not min_path or new_path < min_path:\n                    min_path = new_path\n                visited[nx][ny] = False\n\n        return min_path\n\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    result = []\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            visited[i][j] = True\n            temp_path = dfs(i, j, 1, [grid[i][j]])\n            if not result or temp_path < result:\n                result = temp_path\n            visited[i][j] = False\n\n    return result", "is_solved": false, "iterations": 9, "prompt_tokens": 22381, "completion_tokens": 3129, "duration": 70.94079852104187, "iteration_states": [{"generated_code": "def minPath(grid, k):\n    def dfs(x, y, path_len, path):\n        if path_len == k:\n            return path\n\n        min_path = []\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and not visited[nx][ny]:\n                visited[nx][ny] = True\n                new_path = dfs(nx, ny, path_len + 1, path + [grid[nx][ny]])\n                if not min_path or new_path < min_path:\n                    min_path = new_path\n                visited[nx][ny] = False\n\n        return min_path\n\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    result = []\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            visited[i][j] = True\n            result = dfs(i, j, 1, [grid[i][j]])\n            visited[i][j] = False\n\n    return result", "is_solved": false, "iteration": 0, "prompt_tokens": 446, "completion_tokens": 263, "duration": 4.281391620635986}, {"generated_code": "def minPath(grid, k):\n    def dfs(x, y, path_len, path):\n        if path_len == k:\n            return path\n\n        min_path = []\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and not visited[nx][ny]:\n                visited[nx][ny] = True\n                new_path = dfs(nx, ny, path_len + 1, path + [grid[nx][ny]])\n                if not min_path or new_path < min_path:\n                    min_path = new_path\n                visited[nx][ny] = False\n\n        return min_path\n\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    result = []\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            visited[i][j] = True\n            result = dfs(i, j, 1, [grid[i][j]])\n            visited[i][j] = False\n\n    return result", "is_solved": false, "iteration": 1, "prompt_tokens": 3362, "completion_tokens": 595, "duration": 12.499977588653564}, {"generated_code": "def minPath(grid, k):\n    def dfs(x, y, path_len, path):\n        if path_len == k:\n            return path\n\n        min_path = []\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and not visited[nx][ny]:\n                visited[nx][ny] = True\n                new_path = dfs(nx, ny, path_len + 1, path + [grid[nx][ny]])\n                if not min_path or new_path < min_path:\n                    min_path = new_path\n                visited[nx][ny] = False\n\n        return min_path\n\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    result = []\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            visited[i][j] = True\n            result = dfs(i, j, 1, [grid[i][j]])\n            visited[i][j] = False\n\n    return result", "is_solved": false, "iteration": 2, "prompt_tokens": 5156, "completion_tokens": 867, "duration": 18.991388082504272}, {"generated_code": "def minPath(grid, k):\n    def dfs(x, y, path_len, path):\n        if path_len == k:\n            return path\n\n        min_path = []\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and not visited[nx][ny]:\n                visited[nx][ny] = True\n                new_path = dfs(nx, ny, path_len + 1, path + [grid[nx][ny]])\n                if not min_path or new_path < min_path:\n                    min_path = new_path\n                visited[nx][ny] = False\n\n        return min_path\n\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    result = []\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            visited[i][j] = True\n            result = dfs(i, j, 1, [grid[i][j]])\n            visited[i][j] = False\n\n    return result", "is_solved": false, "iteration": 3, "prompt_tokens": 8108, "completion_tokens": 1219, "duration": 26.238621711730957}, {"generated_code": "def minPath(grid, k):\n    def dfs(x, y, path_len, path):\n        if path_len == k:\n            return path\n\n        min_path = []\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and not visited[nx][ny]:\n                visited[nx][ny] = True\n                new_path = dfs(nx, ny, path_len + 1, path + [grid[nx][ny]])\n                if not min_path or new_path < min_path:\n                    min_path = new_path\n                visited[nx][ny] = False\n\n        return min_path\n\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    result = []\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            visited[i][j] = True\n            result = dfs(i, j, 1, [grid[i][j]])\n            visited[i][j] = False\n\n    return result", "is_solved": false, "iteration": 4, "prompt_tokens": 9938, "completion_tokens": 1474, "duration": 31.625519275665283}, {"generated_code": "def minPath(grid, k):\n    def dfs(x, y, path_len, path):\n        if path_len == k:\n            return path\n\n        min_path = []\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and not visited[nx][ny]:\n                visited[nx][ny] = True\n                new_path = dfs(nx, ny, path_len + 1, path + [grid[nx][ny]])\n                if not min_path or new_path < min_path:\n                    min_path = new_path\n                visited[nx][ny] = False\n\n        return min_path\n\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    result = []\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            visited[i][j] = True\n            temp_path = dfs(i, j, 1, [grid[i][j]])\n            if not result or temp_path < result:\n                result = temp_path\n            visited[i][j] = False\n\n    return result", "is_solved": false, "iteration": 5, "prompt_tokens": 12865, "completion_tokens": 1814, "duration": 39.640583992004395}, {"generated_code": "def minPath(grid, k):\n    def dfs(x, y, path_len, path):\n        if path_len == k:\n            return path\n\n        min_path = []\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and not visited[nx][ny]:\n                visited[nx][ny] = True\n                new_path = dfs(nx, ny, path_len + 1, path + [grid[nx][ny]])\n                if not min_path or new_path < min_path:\n                    min_path = new_path\n                visited[nx][ny] = False\n\n        return min_path\n\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    result = []\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            visited[i][j] = True\n            temp_path = dfs(i, j, 1, [grid[i][j]])\n            if not result or temp_path < result:\n                result = temp_path\n            visited[i][j] = False\n\n    return result", "is_solved": false, "iteration": 6, "prompt_tokens": 15811, "completion_tokens": 2157, "duration": 46.302494764328}, {"generated_code": "def minPath(grid, k):\n    def dfs(x, y, path_len, path):\n        if path_len == k:\n            return path\n\n        min_path = []\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and not visited[nx][ny]:\n                visited[nx][ny] = True\n                new_path = dfs(nx, ny, path_len + 1, path + [grid[nx][ny]])\n                if not min_path or new_path < min_path:\n                    min_path = new_path\n                visited[nx][ny] = False\n\n        return min_path\n\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    result = []\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            visited[i][j] = True\n            temp_path = dfs(i, j, 1, [grid[i][j]])\n            if not result or temp_path < result:\n                result = temp_path\n            visited[i][j] = False\n\n    return result", "is_solved": false, "iteration": 7, "prompt_tokens": 17624, "completion_tokens": 2443, "duration": 53.260422468185425}, {"generated_code": "def minPath(grid, k):\n    def dfs(x, y, path_len, path):\n        if path_len == k:\n            return path\n\n        min_path = []\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and not visited[nx][ny]:\n                visited[nx][ny] = True\n                new_path = dfs(nx, ny, path_len + 1, path + [grid[nx][ny]])\n                if not min_path or new_path < min_path:\n                    min_path = new_path\n                visited[nx][ny] = False\n\n        return min_path\n\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    result = []\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            visited[i][j] = True\n            temp_path = dfs(i, j, 1, [grid[i][j]])\n            if not result or temp_path < result:\n                result = temp_path\n            visited[i][j] = False\n\n    return result", "is_solved": false, "iteration": 8, "prompt_tokens": 20569, "completion_tokens": 2818, "duration": 63.02010941505432}, {"generated_code": "def minPath(grid, k):\n    def dfs(x, y, path_len, path):\n        if path_len == k:\n            return path\n\n        min_path = []\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and not visited[nx][ny]:\n                visited[nx][ny] = True\n                new_path = dfs(nx, ny, path_len + 1, path + [grid[nx][ny]])\n                if not min_path or new_path < min_path:\n                    min_path = new_path\n                visited[nx][ny] = False\n\n        return min_path\n\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    result = []\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            visited[i][j] = True\n            temp_path = dfs(i, j, 1, [grid[i][j]])\n            if not result or temp_path < result:\n                result = temp_path\n            visited[i][j] = False\n\n    return result", "is_solved": false, "iteration": 9, "prompt_tokens": 22381, "completion_tokens": 3129, "duration": 70.94079852104187}]}
