{"generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 61, "duration": 3.7879819869995117, "task_id": "HumanEval/0", "result": "passed", "passed": true}
{"generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    temp = ''\n    for char in paren_string:\n        if char == '(':\n            stack.append('(')\n            temp += '('\n        elif char == ')':\n            stack.pop()\n            temp += ')'\n            if not stack:\n                result.append(temp)\n                temp = ''\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 165, "completion_tokens": 86, "duration": 4.6310436725616455, "task_id": "HumanEval/1", "result": "passed", "passed": true}
{"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": true, "iteration": 0, "prompt_tokens": 135, "completion_tokens": 21, "duration": 3.479076385498047, "task_id": "HumanEval/2", "result": "passed", "passed": true}
{"generated_code": "def below_zero(operations):\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 37, "duration": 3.4491524696350098, "task_id": "HumanEval/3", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 49, "duration": 3.9055840969085693, "task_id": "HumanEval/4", "result": "passed", "passed": true}
{"generated_code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 56, "duration": 3.8390955924987793, "task_id": "HumanEval/5", "result": "passed", "passed": true}
{"generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                if depth > max_depth:\n                    max_depth = depth\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 97, "duration": 4.703549146652222, "task_id": "HumanEval/6", "result": "passed", "passed": true}
{"generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "is_solved": true, "iteration": 0, "prompt_tokens": 143, "completion_tokens": 35, "duration": 3.61719012260437, "task_id": "HumanEval/7", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    maximum = float('-inf')\n    for num in numbers:\n        maximum = max(maximum, num)\n        result.append(maximum)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 150, "completion_tokens": 54, "duration": 3.7376515865325928, "task_id": "HumanEval/9", "result": "passed", "passed": true}
{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 41, "duration": 3.579258441925049, "task_id": "HumanEval/11", "result": "passed", "passed": true}
{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 42, "duration": 3.5393548011779785, "task_id": "HumanEval/13", "result": "passed", "passed": true}
{"generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 32, "duration": 3.6700150966644287, "task_id": "HumanEval/14", "result": "passed", "passed": true}
{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 27, "duration": 3.5287091732025146, "task_id": "HumanEval/15", "result": "passed", "passed": true}
{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 3.326807737350464, "task_id": "HumanEval/16", "result": "passed", "passed": true}
{"generated_code": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    return [durations[note] for note in notes]", "is_solved": true, "iteration": 0, "prompt_tokens": 222, "completion_tokens": 59, "duration": 3.708634614944458, "task_id": "HumanEval/17", "result": "passed", "passed": true}
{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 74, "duration": 3.952439308166504, "task_id": "HumanEval/18", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_map[x])\n    return ' '.join(sorted_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 103, "duration": 4.493385076522827, "task_id": "HumanEval/19", "result": "passed", "passed": true}
{"generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    \n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    \n    return closest_pair", "is_solved": true, "iteration": 0, "prompt_tokens": 216, "completion_tokens": 99, "duration": 4.436337947845459, "task_id": "HumanEval/20", "result": "passed", "passed": true}
{"generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 53, "duration": 3.686016082763672, "task_id": "HumanEval/21", "result": "passed", "passed": true}
{"generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 31, "duration": 3.3969316482543945, "task_id": "HumanEval/22", "result": "passed", "passed": true}
{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 3.471254587173462, "task_id": "HumanEval/23", "result": "passed", "passed": true}
{"generated_code": "def largest_divisor(n: int) -> int:\n    return max([i for i in range(1, n) if n % i == 0])", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 37, "duration": 3.5331480503082275, "task_id": "HumanEval/24", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 70, "duration": 4.299970865249634, "task_id": "HumanEval/25", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 38, "duration": 3.51297664642334, "task_id": "HumanEval/26", "result": "passed", "passed": true}
{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 36, "duration": 3.3321757316589355, "task_id": "HumanEval/27", "result": "passed", "passed": true}
{"generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 20, "duration": 3.289001703262329, "task_id": "HumanEval/28", "result": "passed", "passed": true}
{"generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 34, "duration": 3.4382829666137695, "task_id": "HumanEval/29", "result": "passed", "passed": true}
{"generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 25, "duration": 3.446502208709717, "task_id": "HumanEval/30", "result": "passed", "passed": true}
{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 57, "duration": 3.4670627117156982, "task_id": "HumanEval/31", "result": "passed", "passed": true}
{"generated_code": "def find_zero(xs: list):\n    return -xs[0] / xs[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 23, "duration": 3.333569288253784, "task_id": "HumanEval/32", "result": "failed: name 'poly' is not defined", "passed": false}
{"generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 17, "duration": 3.2383384704589844, "task_id": "HumanEval/34", "result": "passed", "passed": true}
{"generated_code": "def max_element(l: list):\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 16, "duration": 3.126251459121704, "task_id": "HumanEval/35", "result": "passed", "passed": true}
{"generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iteration": 0, "prompt_tokens": 208, "completion_tokens": 162, "duration": 4.739898920059204, "task_id": "HumanEval/38", "result": "passed", "passed": true}
{"generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 1:\n            return n\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    i = 0\n    while count < n:\n        i += 1\n        num = fibonacci(i)\n        if is_prime(num):\n            count += 1\n    return num", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 163, "duration": 4.843162536621094, "task_id": "HumanEval/39", "result": "passed", "passed": true}
{"generated_code": "def triples_sum_to_zero(l: list):\n    return any(sum((x, y, z)) == 0 for x in l for y in l for z in l if x != y != z)", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 46, "duration": 5.7354347705841064, "task_id": "HumanEval/40", "result": "passed", "passed": true}
{"generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 23, "duration": 5.429662704467773, "task_id": "HumanEval/42", "result": "passed", "passed": true}
{"generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 42, "duration": 4.737221002578735, "task_id": "HumanEval/43", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 17, "duration": 6.2418904304504395, "task_id": "HumanEval/45", "result": "passed", "passed": true}
{"generated_code": "def fib4(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    fib_list = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib_list.append(fib_list[-1] + fib_list[-2] + fib_list[-3] + fib_list[-4])\n    \n    return fib_list[-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 116, "duration": 5.7989301681518555, "task_id": "HumanEval/46", "result": "passed", "passed": true}
{"generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "is_solved": true, "iteration": 0, "prompt_tokens": 125, "completion_tokens": 61, "duration": 1.5516915321350098, "task_id": "HumanEval/47", "result": "passed", "passed": true}
{"generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 20, "duration": 4.236940145492554, "task_id": "HumanEval/48", "result": "passed", "passed": true}
{"generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 25, "duration": 5.464749574661255, "task_id": "HumanEval/49", "result": "passed", "passed": true}
{"generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": true, "iteration": 0, "prompt_tokens": 140, "completion_tokens": 82, "duration": 6.010514259338379, "task_id": "HumanEval/50", "result": "passed", "passed": true}
{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in ['a', 'e', 'i', 'o', 'u']])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 42, "duration": 5.764646291732788, "task_id": "HumanEval/51", "result": "passed", "passed": true}
{"generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 26, "duration": 4.350031137466431, "task_id": "HumanEval/52", "result": "passed", "passed": true}
{"generated_code": "def add(x: int, y: int):\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 20, "duration": 5.648186683654785, "task_id": "HumanEval/53", "result": "passed", "passed": true}
{"generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 38, "duration": 6.5305821895599365, "task_id": "HumanEval/55", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 64, "duration": 5.029238224029541, "task_id": "HumanEval/56", "result": "passed", "passed": true}
{"generated_code": "def sort_even(l: list):\n    even_values = sorted([val for idx, val in enumerate(l) if idx % 2 == 0])\n    result = [even_values.pop(0) if idx % 2 == 0 else val for idx, val in enumerate(l)]\n    return result", "is_solved": true, "iteration": 1, "prompt_tokens": 1129, "completion_tokens": 175, "duration": 7.789571523666382, "task_id": "HumanEval/37", "result": "passed", "passed": true}
{"generated_code": "def sort_third(l: list):\n    sorted_indices = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = sorted([l[i] for i in sorted_indices])\n    result = l.copy()\n    for i, v in zip(sorted_indices, sorted_values):\n        result[i] = v\n    return result", "is_solved": true, "iteration": 1, "prompt_tokens": 1669, "completion_tokens": 213, "duration": 9.055387258529663, "task_id": "HumanEval/33", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        sum_result = sum(numbers)\n        product_result = 1\n        for num in numbers:\n            product_result *= num\n        return sum_result, product_result", "is_solved": true, "iteration": 1, "prompt_tokens": 1058, "completion_tokens": 255, "duration": 9.379279375076294, "task_id": "HumanEval/8", "result": "passed", "passed": true}
{"generated_code": "def change_base(x: int, base: int):\n    return str(base_conv(x, base))\n\ndef base_conv(x, base):\n    if x == 0:\n        return ''\n    else:\n        return base_conv(x // base, base) + str(x % base)", "is_solved": true, "iteration": 4, "prompt_tokens": 2987, "completion_tokens": 308, "duration": 18.001006603240967, "task_id": "HumanEval/44", "result": "passed", "passed": true}
{"generated_code": "def same_chars(s0: str, s1: str):\n    from collections import Counter\n    return Counter(s0) == Counter(s1)", "is_solved": false, "iteration": 7, "prompt_tokens": 5129, "completion_tokens": 458, "duration": 23.998015642166138, "task_id": "HumanEval/54", "result": "failed: ", "passed": false}
{"generated_code": "def car_race_collision(n: int):\n    return n*(n-1)", "is_solved": false, "iteration": 7, "prompt_tokens": 4592, "completion_tokens": 417, "duration": 41.89842677116394, "task_id": "HumanEval/41", "result": "failed: ", "passed": false}
{"generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return min(strings, key=lambda x: (-len(x), x))", "is_solved": false, "iteration": 7, "prompt_tokens": 4076, "completion_tokens": 510, "duration": 69.26008868217468, "task_id": "HumanEval/12", "result": "failed: ", "passed": false}
{"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and ('7' in str(i) or i % 7 == 0):\n            count += 1\n    return count", "is_solved": false, "iteration": 7, "prompt_tokens": 5135, "completion_tokens": 805, "duration": 167.04054617881775, "task_id": "HumanEval/36", "result": "failed: ", "passed": false}
{"generated_code": "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    \n    for i in range(len(string), 0, -1):\n        if string[:i] == string[:i][::-1]:\n            if i == len(string):\n                return string\n            return string + string[:i-1][::-1]", "is_solved": false, "iteration": 7, "prompt_tokens": 5119, "completion_tokens": 833, "duration": 167.3202841281891, "task_id": "HumanEval/10", "result": "failed: ", "passed": false}
{"generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 54, "duration": 5.898924827575684, "task_id": "HumanEval/57", "result": "passed", "passed": true}
{"generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 29, "duration": 4.415369749069214, "task_id": "HumanEval/58", "result": "passed", "passed": true}
{"generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 50, "duration": 4.908264875411987, "task_id": "HumanEval/59", "result": "passed", "passed": true}
{"generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 22, "duration": 4.242558002471924, "task_id": "HumanEval/60", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str):\n    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 68, "duration": 6.116909980773926, "task_id": "HumanEval/61", "result": "passed", "passed": true}
{"generated_code": "def derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 28, "duration": 3.1749978065490723, "task_id": "HumanEval/62", "result": "passed", "passed": true}
{"generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 72, "duration": 5.622449636459351, "task_id": "HumanEval/63", "result": "passed", "passed": true}
{"generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 5.672107219696045, "task_id": "HumanEval/66", "result": "passed", "passed": true}
{"generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 37, "duration": 5.641664266586304, "task_id": "HumanEval/67", "result": "passed", "passed": true}
{"generated_code": "def pluck(arr):\n    evens = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens, key=lambda x: (x[0], x[1]))\n    return [min_even[0], min_even[1]]", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 78, "duration": 5.097854852676392, "task_id": "HumanEval/68", "result": "passed", "passed": true}
{"generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 44, "duration": 5.86173415184021, "task_id": "HumanEval/70", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 92, "duration": 6.1586079597473145, "task_id": "HumanEval/71", "result": "passed", "passed": true}
{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 5.8480916023254395, "task_id": "HumanEval/72", "result": "passed", "passed": true}
{"generated_code": "def smallest_change(arr):\n    length = len(arr)\n    changes = 0\n    for i in range(length // 2):\n        if arr[i] != arr[length - i - 1]:\n            changes += 1\n    return changes", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 55, "duration": 1.1043100357055664, "task_id": "HumanEval/73", "result": "passed", "passed": true}
{"generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or (n != 1 and x % n == 0 and is_simple_power(x // n, n)))", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 52, "duration": 4.641237735748291, "task_id": "HumanEval/76", "result": "passed", "passed": true}
{"generated_code": "def hex_key(num):\n    prime_digits = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 60, "duration": 3.5844950675964355, "task_id": "HumanEval/78", "result": "passed", "passed": true}
{"generated_code": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal)[2:] + 'db'", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 25, "duration": 4.3092145919799805, "task_id": "HumanEval/79", "result": "passed", "passed": true}
{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 70, "duration": 3.4724762439727783, "task_id": "HumanEval/82", "result": "passed", "passed": true}
{"generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 21, "duration": 4.153321743011475, "task_id": "HumanEval/84", "result": "passed", "passed": true}
{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 105, "completion_tokens": 34, "duration": 2.8639819622039795, "task_id": "HumanEval/85", "result": "passed", "passed": true}
{"generated_code": "def anti_shuffle(s):\n    words = s.split()\n    result = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        result.append(ordered_word)\n    return ' '.join(result)", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 48, "duration": 4.981414556503296, "task_id": "HumanEval/86", "result": "passed", "passed": true}
{"generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 68, "duration": 4.027481555938721, "task_id": "HumanEval/87", "result": "passed", "passed": true}
{"generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            base = ord('a') if char.islower() else ord('A')\n            result += chr((ord(char) - base + 2 * 2) % 26 + base)\n        else:\n            result += char\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 76, "duration": 3.5757226943969727, "task_id": "HumanEval/89", "result": "passed", "passed": true}
{"generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 52, "duration": 4.791964769363403, "task_id": "HumanEval/90", "result": "passed", "passed": true}
{"generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences if sentence]\n    \n    count = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0] == \"I\":\n            count += 1\n    \n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 71, "duration": 3.5930309295654297, "task_id": "HumanEval/91", "result": "passed", "passed": true}
{"generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 54, "duration": 4.871682405471802, "task_id": "HumanEval/92", "result": "passed", "passed": true}
{"generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    prime_values = [num for num in lst if is_prime(num)]\n    largest_prime = max(prime_values)\n    \n    return sum_of_digits(largest_prime)", "is_solved": true, "iteration": 0, "prompt_tokens": 336, "completion_tokens": 120, "duration": 5.921804666519165, "task_id": "HumanEval/94", "result": "failed: name 'skjkasdkd' is not defined", "passed": false}
{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 87, "duration": 3.5806374549865723, "task_id": "HumanEval/96", "result": "passed", "passed": true}
{"generated_code": "def multiply(a, b):\n    return int(str(abs(a) % 10)) * int(str(abs(b) % 10))", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 27, "duration": 4.40070652961731, "task_id": "HumanEval/97", "result": "passed", "passed": true}
{"generated_code": "def count_upper(s):\n    return sum(1 for i in range(0, len(s), 2) if s[i] in 'AEIOU')", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 37, "duration": 4.357618093490601, "task_id": "HumanEval/98", "result": "passed", "passed": true}
{"generated_code": "def closest_integer(value):\n    value = float(value)\n    return int(value + 0.5) if value > 0 else int(value - 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 39, "duration": 4.614492893218994, "task_id": "HumanEval/99", "result": "passed", "passed": true}
{"generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(',', ' ').split()]", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 25, "duration": 2.786447525024414, "task_id": "HumanEval/101", "result": "passed", "passed": true}
{"generated_code": "def choose_num(x, y):\n    return max([i for i in range(x, y+1) if i % 2 == 0] + [-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 39, "duration": 2.6726202964782715, "task_id": "HumanEval/102", "result": "passed", "passed": true}
{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m-n+1))\n    return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 46, "duration": 3.154949903488159, "task_id": "HumanEval/103", "result": "passed", "passed": true}
{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 33, "duration": 2.7222673892974854, "task_id": "HumanEval/104", "result": "passed", "passed": true}
{"generated_code": "def by_length(arr):\n    nums = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    arr = [x for x in arr if 1 <= x <= 9]\n    arr.sort()\n    arr.reverse()\n    return [nums[x-1] for x in arr]", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 78, "duration": 3.382270097732544, "task_id": "HumanEval/105", "result": "passed", "passed": true}
{"generated_code": "def f(n):\n    def factorial(num):\n        if num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    \n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 92, "duration": 1.7012665271759033, "task_id": "HumanEval/106", "result": "passed", "passed": true}
{"generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 94, "completion_tokens": 64, "duration": 1.0854251384735107, "task_id": "HumanEval/83", "result": "passed", "passed": true}
{"generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count, odd_count = 0, 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 98, "duration": 3.75720477104187, "task_id": "HumanEval/107", "result": "passed", "passed": true}
{"generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    sorted_arr = sorted(arr)\n    for _ in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n        \n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 63, "duration": 3.3378124237060547, "task_id": "HumanEval/109", "result": "passed", "passed": true}
{"generated_code": "def reverse_delete(s, c):\n    result = \"\".join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 508, "completion_tokens": 78, "duration": 4.2718048095703125, "task_id": "HumanEval/112", "result": "passed", "passed": true}
{"generated_code": "def is_happy(s):\n    return len(s) >= 3 and all(s[i] != s[i+1] and s[i+1] != s[i+2] and s[i+2] != s[i] for i in range(len(s)-2))", "is_solved": true, "iteration": 1, "prompt_tokens": 939, "completion_tokens": 157, "duration": 4.781182765960693, "task_id": "HumanEval/80", "result": "passed", "passed": true}
{"generated_code": "def sort_array(array):\n    if not array:\n        return []\n    \n    sorted_array = sorted(array)\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array", "is_solved": true, "iteration": 1, "prompt_tokens": 1312, "completion_tokens": 156, "duration": 7.328365087509155, "task_id": "HumanEval/88", "result": "passed", "passed": true}
{"generated_code": "def search(lst):\n    from collections import Counter\n    counts = Counter(lst)\n    max_num = -1\n    for num, freq in counts.items():\n        if num > 0 and freq >= num:\n            max_num = max(max_num, num)\n    return max_num", "is_solved": true, "iteration": 1, "prompt_tokens": 3143, "completion_tokens": 175, "duration": 8.18663239479065, "task_id": "HumanEval/69", "result": "passed", "passed": true}
{"generated_code": "def histogram(test):\n    lst = test.split()\n    hist = {}\n    for letter in lst:\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    if not hist:\n        return {}\n    max_count = max(hist.values())\n    return {k: v for k, v in hist.items() if v == max_count}", "is_solved": true, "iteration": 1, "prompt_tokens": 1240, "completion_tokens": 227, "duration": 8.788388967514038, "task_id": "HumanEval/111", "result": "passed", "passed": true}
{"generated_code": "def vowels_count(s):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    \n    for i, char in enumerate(s):\n        if char.lower() in vowels:\n            count += 1\n        elif char.lower() == 'y' and i == len(s) - 1:\n            count += 1\n    \n    return count", "is_solved": true, "iteration": 2, "prompt_tokens": 1814, "completion_tokens": 343, "duration": 13.421899795532227, "task_id": "HumanEval/64", "result": "passed", "passed": true}
{"generated_code": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    \n    lowercase_keys = all(str(key).islower() for key in dict.keys() if isinstance(key, str))\n    uppercase_keys = all(str(key).isupper() for key in dict.keys() if isinstance(key, str))\n    non_string_keys = any(not isinstance(key, str) for key in dict.keys())\n    \n    return (lowercase_keys or uppercase_keys) and not non_string_keys", "is_solved": true, "iteration": 2, "prompt_tokens": 2127, "completion_tokens": 334, "duration": 14.150453090667725, "task_id": "HumanEval/95", "result": "passed", "passed": true}
{"generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if stones[i-1] % 2 == 0:\n            stones.append(stones[i-1] + 2)\n        else:\n            stones.append(stones[i-1] + 2)\n    return stones", "is_solved": true, "iteration": 3, "prompt_tokens": 2566, "completion_tokens": 362, "duration": 15.404322624206543, "task_id": "HumanEval/100", "result": "passed", "passed": true}
{"generated_code": "def total_match(lst1, lst2):\n    total_chars1 = sum(len(x) for x in lst1)\n    total_chars2 = sum(len(x) for x in lst2)\n    \n    if total_chars1 <= total_chars2:\n        return lst1\n    else:\n        return lst2", "is_solved": true, "iteration": 4, "prompt_tokens": 4275, "completion_tokens": 529, "duration": 22.0433247089386, "task_id": "HumanEval/74", "result": "passed", "passed": true}
{"generated_code": "def iscube(a):\n    return a >= 0 and round(a**(1/3))**3 == a", "is_solved": false, "iteration": 7, "prompt_tokens": 4642, "completion_tokens": 495, "duration": 25.10324788093567, "task_id": "HumanEval/77", "result": "failed: Third test error: False", "passed": false}
{"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)}n the str{i+1}ng {s} of the {i+1}nput.\" for i, s in enumerate(lst)]", "is_solved": false, "iteration": 7, "prompt_tokens": 6559, "completion_tokens": 716, "duration": 25.984529495239258, "task_id": "HumanEval/113", "result": "failed: Test 1", "passed": false}
{"generated_code": "def count_nums(arr):\n    def sum_digits(num):\n        if num < 0:\n            num *= -1\n        return sum(int(digit) for digit in str(num))\n    \n    count = 0\n    for num in arr:\n        if sum_digits(num) > 0:\n            count += 1\n    return count", "is_solved": false, "iteration": 7, "prompt_tokens": 6041, "completion_tokens": 806, "duration": 27.056766510009766, "task_id": "HumanEval/108", "result": "failed: ", "passed": false}
{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift] if shift < len(x_str) else x_str[::-1]", "is_solved": false, "iteration": 7, "prompt_tokens": 4545, "completion_tokens": 888, "duration": 33.96666073799133, "task_id": "HumanEval/65", "result": "failed: ", "passed": false}
{"generated_code": "def exchange(lst1, lst2):\n    odd_nums_count_lst1 = sum(1 for num in lst1 if num % 2 != 0)\n    odd_nums_count_lst2 = sum(1 for num in lst2 if num % 2 != 0)\n    \n    if odd_nums_count_lst1 != odd_nums_count_lst2:\n        return \"NO\"\n    return \"YES\"", "is_solved": false, "iteration": 7, "prompt_tokens": 7238, "completion_tokens": 929, "duration": 33.349239349365234, "task_id": "HumanEval/110", "result": "failed: ", "passed": false}
{"generated_code": "def encode(message):\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                result += chr((ord(char)+2 - ord('a')) % 26 + ord('A'))\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result", "is_solved": false, "iteration": 7, "prompt_tokens": 5516, "completion_tokens": 936, "duration": 31.955498456954956, "task_id": "HumanEval/93", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    count = 0\n    factors = set()\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i) and i not in factors:\n            count += 1\n            factors.add(i)\n    \n    return count == 3", "is_solved": false, "iteration": 7, "prompt_tokens": 6116, "completion_tokens": 1438, "duration": 44.47930574417114, "task_id": "HumanEval/75", "result": "failed: ", "passed": false}
{"generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        if gpa > 3.7:\n            return 'A'\n        if gpa > 3.3:\n            return 'A-'\n        if gpa > 3.0:\n            return 'B+'\n        if gpa > 2.7:\n            return 'B'\n        if gpa > 2.3:\n            return 'B-'\n        if gpa > 2.0:\n            return 'C+'\n        if gpa > 1.7:\n            return 'C'\n        if gpa > 1.3:\n            return 'C-'\n        if gpa > 1.0:\n            return 'D+'\n        if gpa >= 0.7:\n            return 'D'\n        if gpa > 0.0:\n            return 'D-'\n        return 'E'\n\n    return [grade(g) for g in grades]", "is_solved": false, "iteration": 7, "prompt_tokens": 8652, "completion_tokens": 2008, "duration": 50.008708000183105, "task_id": "HumanEval/81", "result": "failed: ", "passed": false}
{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 60, "duration": 3.7184066772460938, "task_id": "HumanEval/114", "result": "passed", "passed": true}
{"generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 220, "completion_tokens": 28, "duration": 3.368082284927368, "task_id": "HumanEval/116", "result": "passed", "passed": true}
{"generated_code": "def select_words(s, n):\n    if not s:\n        return []\n    words = s.split()\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = []\n    for word in words:\n        if len([c for c in word if c in consonants]) == n:\n            result.append(word)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 86, "duration": 4.235817909240723, "task_id": "HumanEval/117", "result": "passed", "passed": true}
{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 98, "duration": 3.4160122871398926, "task_id": "HumanEval/118", "result": "passed", "passed": true}
{"generated_code": "def get_odd_collatz(n):\n    collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    \n    return sorted(list(set([num for num in collatz if num % 2 != 0])))", "is_solved": true, "iteration": 0, "prompt_tokens": 281, "completion_tokens": 85, "duration": 3.982318878173828, "task_id": "HumanEval/123", "result": "passed", "passed": true}
{"generated_code": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n        return True\n    except:\n        return False", "is_solved": true, "iteration": 0, "prompt_tokens": 313, "completion_tokens": 149, "duration": 4.932066202163696, "task_id": "HumanEval/124", "result": "passed", "passed": true}
{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        product *= num // abs(num) if num != 0 else 0\n        sum_magnitudes += abs(num)\n    return product * sum_magnitudes", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 75, "duration": 3.701418399810791, "task_id": "HumanEval/128", "result": "passed", "passed": true}
{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(num) ** 2 for num in lst)", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 28, "duration": 3.7298011779785156, "task_id": "HumanEval/133", "result": "passed", "passed": true}
{"generated_code": "def largest_smallest_integers(lst):\n    negative_integers = [num for num in lst if num < 0]\n    positive_integers = [num for num in lst if num > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)", "is_solved": true, "iteration": 0, "prompt_tokens": 188, "completion_tokens": 90, "duration": 4.1900529861450195, "task_id": "HumanEval/136", "result": "passed", "passed": true}
{"generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        fact = 1\n        for j in range(1, i+1):\n            fact *= j\n        result *= fact\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 60, "duration": 5.106764793395996, "task_id": "HumanEval/139", "result": "passed", "passed": true}
{"generated_code": "def file_name_check(file_name):\n    if file_name.count(\".\") != 1:\n        return 'No'\n    file_parts = file_name.split(\".\")\n    if len(file_parts) != 2:\n        return 'No'\n    if not file_parts[0] or not file_parts[0][0].isalpha():\n        return 'No'\n    if len([c for c in file_parts[0] if c.isdigit()]) > 3:\n        return 'No'\n    if file_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 130, "duration": 2.550602436065674, "task_id": "HumanEval/141", "result": "passed", "passed": true}
{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "is_solved": true, "iteration": 0, "prompt_tokens": 197, "completion_tokens": 94, "duration": 3.0800018310546875, "task_id": "HumanEval/143", "result": "passed", "passed": true}
{"generated_code": "from fractions import Fraction\n\ndef simplify(x, n):\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 34, "duration": 3.2925808429718018, "task_id": "HumanEval/144", "result": "passed", "passed": true}
{"generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 81, "duration": 4.610205888748169, "task_id": "HumanEval/146", "result": "passed", "passed": true}
{"generated_code": "def list_sort(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 237, "completion_tokens": 39, "duration": 2.81819486618042, "task_id": "HumanEval/149", "result": "failed: name 'sorted_list_sum' is not defined", "passed": false}
{"generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 78, "duration": 4.968517303466797, "task_id": "HumanEval/150", "result": "passed", "passed": true}
{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int))", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 39, "duration": 0.860107421875, "task_id": "HumanEval/151", "result": "passed", "passed": true}
{"generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.6411662101745605, "task_id": "HumanEval/152", "result": "passed", "passed": true}
{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def calc_strength(ext):\n        return sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\n    \n    max_strength = float('-inf')\n    strongest_ext = \"\"\n    \n    for ext in extensions:\n        strength = calc_strength(ext)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_ext = ext\n    \n    return f\"{class_name}.{strongest_ext}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 105, "duration": 1.6746180057525635, "task_id": "HumanEval/153", "result": "passed", "passed": true}
{"generated_code": "def even_odd_count(num):\n    even_count = len([i for i in str(abs(num)) if int(i) % 2 == 0])\n    odd_count = len([i for i in str(abs(num)) if int(i) % 2 != 0])\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 115, "completion_tokens": 65, "duration": 2.838606119155884, "task_id": "HumanEval/155", "result": "passed", "passed": true}
{"generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    \n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    \n    return result.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 143, "duration": 2.278186321258545, "task_id": "HumanEval/156", "result": "passed", "passed": true}
{"generated_code": "def right_angle_triangle(a, b, c):\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 63, "duration": 1.2231793403625488, "task_id": "HumanEval/157", "result": "passed", "passed": true}
{"generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n    \n    max_unique_chars = 0\n    max_word = \"\"\n    \n    for word in words:\n        curr_unique_chars = unique_chars(word)\n        if curr_unique_chars > max_unique_chars or (curr_unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = curr_unique_chars\n            max_word = word\n    \n    return max_word", "is_solved": true, "iteration": 0, "prompt_tokens": 170, "completion_tokens": 95, "duration": 5.631035089492798, "task_id": "HumanEval/158", "result": "passed", "passed": true}
{"generated_code": "def eat(number, need, remaining):\n    eaten = number + min(need, remaining)\n    left = max(remaining - need, 0)\n    return [eaten, left]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 43, "duration": 2.6561062335968018, "task_id": "HumanEval/159", "result": "passed", "passed": true}
{"generated_code": "def do_algebra(operators, operands):\n    expression = str(operands[0])\n    for i in range(len(operators)):\n        expression += operators[i] + str(operands[i + 1])\n    return eval(expression)", "is_solved": true, "iteration": 0, "prompt_tokens": 257, "completion_tokens": 51, "duration": 1.1593248844146729, "task_id": "HumanEval/160", "result": "passed", "passed": true}
{"generated_code": "def solve(s):\n    result = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not has_letter:\n        return s[::-1]\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 81, "duration": 3.5644960403442383, "task_id": "HumanEval/161", "result": "passed", "passed": true}
{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 36, "duration": 0.8799667358398438, "task_id": "HumanEval/162", "result": "passed", "passed": true}
{"generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n# Example\nn = 5\nprint(get_max_triples(n))", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 119, "duration": 5.007686138153076, "task_id": "HumanEval/147", "result": "passed", "passed": true}
{"generated_code": "def digits(n):\n    prod = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            prod *= int(digit)\n    return prod if prod != 1 else 1 if any(int(d) % 2 != 0 for d in str(n)) else 0", "is_solved": true, "iteration": 1, "prompt_tokens": 815, "completion_tokens": 184, "duration": 5.32581901550293, "task_id": "HumanEval/131", "result": "passed", "passed": true}
{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    else:\n        return tuple(planets[end_idx+1:start_idx])", "is_solved": true, "iteration": 1, "prompt_tokens": 1391, "completion_tokens": 317, "duration": 7.48267674446106, "task_id": "HumanEval/148", "result": "passed", "passed": true}
{"generated_code": "def maximum(arr, k):\n    if k == 0:\n        return []\n    return sorted(arr)[-k:]", "is_solved": true, "iteration": 2, "prompt_tokens": 2862, "completion_tokens": 169, "duration": 10.158845901489258, "task_id": "HumanEval/120", "result": "passed", "passed": true}
{"generated_code": "def is_equal_to_sum_even(n):\n    count = 0\n    for i in range(2, n//2 + 1, 2):\n        if n - i in range(2, n, 2):\n            count += 1\n            if count >= 2:\n                return True\n    return False", "is_solved": true, "iteration": 2, "prompt_tokens": 1812, "completion_tokens": 393, "duration": 16.333958387374878, "task_id": "HumanEval/138", "result": "passed", "passed": true}
{"generated_code": "def compare_one(a, b):\n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        if a == b:\n            return None\n        return a if a > b else b\n    else:\n        a_num = float(a.replace(',', '.')) if isinstance(a, str) else a\n        b_num = float(b.replace(',', '.')) if isinstance(b, str) else b\n        if a_num == b_num:\n            return None\n        return a if a_num > b_num else b", "is_solved": true, "iteration": 3, "prompt_tokens": 2525, "completion_tokens": 436, "duration": 14.077348470687866, "task_id": "HumanEval/137", "result": "passed", "passed": true}
{"generated_code": "def max_fill(grid, capacity):\n    total_buckets_needed = 0\n    for row in grid:\n        well_water = sum(row)\n        buckets_needed = well_water // capacity\n        if well_water % capacity != 0:\n            buckets_needed += 1\n        total_buckets_needed += buckets_needed\n    return total_buckets_needed", "is_solved": true, "iteration": 3, "prompt_tokens": 3518, "completion_tokens": 341, "duration": 15.36416482925415, "task_id": "HumanEval/115", "result": "passed", "passed": true}
{"generated_code": "def is_sorted(lst):\n    return lst == sorted(set(lst))", "is_solved": false, "iteration": 7, "prompt_tokens": 7422, "completion_tokens": 441, "duration": 23.96652317047119, "task_id": "HumanEval/126", "result": "failed: This prints if this assert fails 7 (good for debugging!)", "passed": false}
{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    last_char = txt[-1]\n    return last_char.isalpha() and (len(txt) == 1 or txt[-2].isspace())", "is_solved": true, "iteration": 7, "prompt_tokens": 5942, "completion_tokens": 601, "duration": 27.86624002456665, "task_id": "HumanEval/134", "result": "passed", "passed": true}
{"generated_code": "def add_elements(arr, k):\n    return sum(arr[:k])", "is_solved": false, "iteration": 7, "prompt_tokens": 5065, "completion_tokens": 478, "duration": 25.245083570480347, "task_id": "HumanEval/122", "result": "failed: ", "passed": false}
{"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "is_solved": false, "iteration": 7, "prompt_tokens": 7018, "completion_tokens": 539, "duration": 23.44332265853882, "task_id": "HumanEval/145", "result": "failed: ", "passed": false}
{"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if i % 2 == 0 and lst[i] % 2 != 0)", "is_solved": false, "iteration": 7, "prompt_tokens": 5629, "completion_tokens": 579, "duration": 22.482417106628418, "task_id": "HumanEval/121", "result": "failed: ", "passed": false}
{"generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "is_solved": false, "iteration": 7, "prompt_tokens": 5031, "completion_tokens": 616, "duration": 26.164154291152954, "task_id": "HumanEval/163", "result": "failed: Test 1", "passed": false}
{"generated_code": "def match_parens(lst):\n    total_parens = lst[0] + lst[1]\n    stack = []\n    for paren in total_parens:\n        if paren == '(':\n            stack.append(paren)\n        elif paren == ')':\n            if len(stack) == 0 or stack[-1] != '(':\n                return 'No'\n            stack.pop()\n    return 'Yes' if len(stack) == 0 else 'No'", "is_solved": false, "iteration": 7, "prompt_tokens": 6955, "completion_tokens": 727, "duration": 27.437015056610107, "task_id": "HumanEval/119", "result": "failed: ", "passed": false}
{"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a*2) or len(a) == len(b) and b in (a*3) or b in (a+a)", "is_solved": false, "iteration": 7, "prompt_tokens": 5255, "completion_tokens": 676, "duration": 26.991958379745483, "task_id": "HumanEval/154", "result": "failed: test #3", "passed": false}
{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 and (i+1) % 3 != 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 7, "prompt_tokens": 8173, "completion_tokens": 743, "duration": 27.812013149261475, "task_id": "HumanEval/142", "result": "failed: ", "passed": false}
{"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    elif txt:\n        count = sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)\n        return count\n    else:\n        return 0", "is_solved": false, "iteration": 7, "prompt_tokens": 5964, "completion_tokens": 907, "duration": 31.11440896987915, "task_id": "HumanEval/125", "result": "failed: ", "passed": false}
{"generated_code": "def fix_spaces(text):\n    result = []\n    count = 0\n    for c in text:\n        if c == ' ':\n            count += 1\n            if count == 1:\n                result.append('_')\n            elif count == 2:\n                result.pop()\n                result.append('-')\n        else:\n            result.append(c)\n            count = 0\n    return ''.join(result)", "is_solved": false, "iteration": 7, "prompt_tokens": 5262, "completion_tokens": 1028, "duration": 35.86547923088074, "task_id": "HumanEval/140", "result": "failed: This prints if this assert fails 3 (good for debugging!)", "passed": false}
{"generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1, 3]\n    else:\n        sequence = [1, 3]\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-2])\n        return sequence", "is_solved": false, "iteration": 7, "prompt_tokens": 10262, "completion_tokens": 1079, "duration": 35.8174250125885, "task_id": "HumanEval/130", "result": "failed: ", "passed": false}
{"generated_code": "def is_nested(string):\n    open_brackets = 0\n    max_nested_depth = 0\n    \n    for char in string:\n        if char == '[':\n            open_brackets += 1\n            max_nested_depth = max(max_nested_depth, open_brackets)\n        elif char == ']':\n            open_brackets -= 1\n            \n    return max_nested_depth > 1 and open_brackets == 0", "is_solved": false, "iteration": 7, "prompt_tokens": 7312, "completion_tokens": 1267, "duration": 40.80256104469299, "task_id": "HumanEval/132", "result": "failed: ", "passed": false}
{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    length = intersection_end - intersection_start + 1\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 7, "prompt_tokens": 9345, "completion_tokens": 1553, "duration": 43.129236936569214, "task_id": "HumanEval/127", "result": "failed: ", "passed": false}
{"generated_code": "def can_arrange(arr):\n    index = -1\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            index = i\n    return index", "is_solved": false, "iteration": 7, "prompt_tokens": 4670, "completion_tokens": 606, "duration": 26.090128421783447, "task_id": "HumanEval/135", "result": "failed: ", "passed": false}
{"generated_code": "def minPath(grid, k):\n    def dfs(x, y, path_len, path):\n        if path_len == k:\n            return path[:]\n\n        min_path = None\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and not visited[nx][ny]:\n                visited[nx][ny] = True\n                new_path = dfs(nx, ny, path_len + 1, path + [grid[nx][ny]])\n                if min_path is None or new_path < min_path:\n                    min_path = new_path\n                visited[nx][ny] = False\n\n        return min_path\n\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    result = None\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            visited[i][j] = True\n            new_path = dfs(i, j, 1, [grid[i][j]])\n            if result is None or new_path < result:\n                result = new_path\n            visited[i][j] = False\n\n    return result", "is_solved": false, "iteration": 7, "prompt_tokens": 17572, "completion_tokens": 2606, "duration": 59.00403451919556, "task_id": "HumanEval/129", "result": "failed: ", "passed": false}
{"generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 61, "duration": 3.7879819869995117, "task_id": "HumanEval/0", "result": "passed", "passed": true}
{"generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    temp = ''\n    for char in paren_string:\n        if char == '(':\n            stack.append('(')\n            temp += '('\n        elif char == ')':\n            stack.pop()\n            temp += ')'\n            if not stack:\n                result.append(temp)\n                temp = ''\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 165, "completion_tokens": 86, "duration": 4.6310436725616455, "task_id": "HumanEval/1", "result": "passed", "passed": true}
{"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": true, "iteration": 0, "prompt_tokens": 135, "completion_tokens": 21, "duration": 3.479076385498047, "task_id": "HumanEval/2", "result": "passed", "passed": true}
{"generated_code": "def below_zero(operations):\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 37, "duration": 3.4491524696350098, "task_id": "HumanEval/3", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 49, "duration": 3.9055840969085693, "task_id": "HumanEval/4", "result": "passed", "passed": true}
{"generated_code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 56, "duration": 3.8390955924987793, "task_id": "HumanEval/5", "result": "passed", "passed": true}
{"generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                if depth > max_depth:\n                    max_depth = depth\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 97, "duration": 4.703549146652222, "task_id": "HumanEval/6", "result": "passed", "passed": true}
{"generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "is_solved": true, "iteration": 0, "prompt_tokens": 143, "completion_tokens": 35, "duration": 3.61719012260437, "task_id": "HumanEval/7", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    maximum = float('-inf')\n    for num in numbers:\n        maximum = max(maximum, num)\n        result.append(maximum)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 150, "completion_tokens": 54, "duration": 3.7376515865325928, "task_id": "HumanEval/9", "result": "passed", "passed": true}
{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 41, "duration": 3.579258441925049, "task_id": "HumanEval/11", "result": "passed", "passed": true}
{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 42, "duration": 3.5393548011779785, "task_id": "HumanEval/13", "result": "passed", "passed": true}
{"generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 32, "duration": 3.6700150966644287, "task_id": "HumanEval/14", "result": "passed", "passed": true}
{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 27, "duration": 3.5287091732025146, "task_id": "HumanEval/15", "result": "passed", "passed": true}
{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 3.326807737350464, "task_id": "HumanEval/16", "result": "passed", "passed": true}
{"generated_code": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    return [durations[note] for note in notes]", "is_solved": true, "iteration": 0, "prompt_tokens": 222, "completion_tokens": 59, "duration": 3.708634614944458, "task_id": "HumanEval/17", "result": "passed", "passed": true}
{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 74, "duration": 3.952439308166504, "task_id": "HumanEval/18", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_map[x])\n    return ' '.join(sorted_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 103, "duration": 4.493385076522827, "task_id": "HumanEval/19", "result": "passed", "passed": true}
{"generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    \n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    \n    return closest_pair", "is_solved": true, "iteration": 0, "prompt_tokens": 216, "completion_tokens": 99, "duration": 4.436337947845459, "task_id": "HumanEval/20", "result": "passed", "passed": true}
{"generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 53, "duration": 3.686016082763672, "task_id": "HumanEval/21", "result": "passed", "passed": true}
{"generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 31, "duration": 3.3969316482543945, "task_id": "HumanEval/22", "result": "passed", "passed": true}
{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 3.471254587173462, "task_id": "HumanEval/23", "result": "passed", "passed": true}
{"generated_code": "def largest_divisor(n: int) -> int:\n    return max([i for i in range(1, n) if n % i == 0])", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 37, "duration": 3.5331480503082275, "task_id": "HumanEval/24", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 70, "duration": 4.299970865249634, "task_id": "HumanEval/25", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 38, "duration": 3.51297664642334, "task_id": "HumanEval/26", "result": "passed", "passed": true}
{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 36, "duration": 3.3321757316589355, "task_id": "HumanEval/27", "result": "passed", "passed": true}
{"generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 20, "duration": 3.289001703262329, "task_id": "HumanEval/28", "result": "passed", "passed": true}
{"generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 34, "duration": 3.4382829666137695, "task_id": "HumanEval/29", "result": "passed", "passed": true}
{"generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 25, "duration": 3.446502208709717, "task_id": "HumanEval/30", "result": "passed", "passed": true}
{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 57, "duration": 3.4670627117156982, "task_id": "HumanEval/31", "result": "passed", "passed": true}
{"generated_code": "def find_zero(xs: list):\n    return -xs[0] / xs[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 23, "duration": 3.333569288253784, "task_id": "HumanEval/32", "result": "failed: name 'poly' is not defined", "passed": false}
{"generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 17, "duration": 3.2383384704589844, "task_id": "HumanEval/34", "result": "passed", "passed": true}
{"generated_code": "def max_element(l: list):\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 16, "duration": 3.126251459121704, "task_id": "HumanEval/35", "result": "passed", "passed": true}
{"generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iteration": 0, "prompt_tokens": 208, "completion_tokens": 162, "duration": 4.739898920059204, "task_id": "HumanEval/38", "result": "passed", "passed": true}
{"generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 1:\n            return n\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    i = 0\n    while count < n:\n        i += 1\n        num = fibonacci(i)\n        if is_prime(num):\n            count += 1\n    return num", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 163, "duration": 4.843162536621094, "task_id": "HumanEval/39", "result": "passed", "passed": true}
{"generated_code": "def triples_sum_to_zero(l: list):\n    return any(sum((x, y, z)) == 0 for x in l for y in l for z in l if x != y != z)", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 46, "duration": 5.7354347705841064, "task_id": "HumanEval/40", "result": "passed", "passed": true}
{"generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 23, "duration": 5.429662704467773, "task_id": "HumanEval/42", "result": "passed", "passed": true}
{"generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 42, "duration": 4.737221002578735, "task_id": "HumanEval/43", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 17, "duration": 6.2418904304504395, "task_id": "HumanEval/45", "result": "passed", "passed": true}
{"generated_code": "def fib4(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    fib_list = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib_list.append(fib_list[-1] + fib_list[-2] + fib_list[-3] + fib_list[-4])\n    \n    return fib_list[-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 116, "duration": 5.7989301681518555, "task_id": "HumanEval/46", "result": "passed", "passed": true}
{"generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "is_solved": true, "iteration": 0, "prompt_tokens": 125, "completion_tokens": 61, "duration": 1.5516915321350098, "task_id": "HumanEval/47", "result": "passed", "passed": true}
{"generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 20, "duration": 4.236940145492554, "task_id": "HumanEval/48", "result": "passed", "passed": true}
{"generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 25, "duration": 5.464749574661255, "task_id": "HumanEval/49", "result": "passed", "passed": true}
{"generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": true, "iteration": 0, "prompt_tokens": 140, "completion_tokens": 82, "duration": 6.010514259338379, "task_id": "HumanEval/50", "result": "passed", "passed": true}
{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in ['a', 'e', 'i', 'o', 'u']])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 42, "duration": 5.764646291732788, "task_id": "HumanEval/51", "result": "passed", "passed": true}
{"generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 26, "duration": 4.350031137466431, "task_id": "HumanEval/52", "result": "passed", "passed": true}
{"generated_code": "def add(x: int, y: int):\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 20, "duration": 5.648186683654785, "task_id": "HumanEval/53", "result": "passed", "passed": true}
{"generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 38, "duration": 6.5305821895599365, "task_id": "HumanEval/55", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 64, "duration": 5.029238224029541, "task_id": "HumanEval/56", "result": "passed", "passed": true}
{"generated_code": "def change_base(x: int, base: int):\n    if base < 2 or base > 10:\n        return \"Invalid base. Please provide a base between 2 and 10.\"\n    \n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    \n    return result", "is_solved": true, "iteration": 1, "prompt_tokens": 991, "completion_tokens": 164, "duration": 9.030894756317139, "task_id": "HumanEval/44", "result": "passed", "passed": true}
{"generated_code": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)", "is_solved": true, "iteration": 2, "prompt_tokens": 1844, "completion_tokens": 194, "duration": 12.989659786224365, "task_id": "HumanEval/54", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    \n    total_sum = sum(numbers)\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    \n    return total_sum, total_product", "is_solved": true, "iteration": 2, "prompt_tokens": 1888, "completion_tokens": 388, "duration": 12.721872806549072, "task_id": "HumanEval/8", "result": "passed", "passed": true}
{"generated_code": "def car_race_collision(n: int):\n    return n**2", "is_solved": true, "iteration": 6, "prompt_tokens": 3854, "completion_tokens": 315, "duration": 22.543981075286865, "task_id": "HumanEval/41", "result": "passed", "passed": true}
{"generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return min(strings, key=lambda x: (len(x), x))", "is_solved": false, "iteration": 7, "prompt_tokens": 4099, "completion_tokens": 522, "duration": 22.576024770736694, "task_id": "HumanEval/12", "result": "failed: ", "passed": false}
{"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "is_solved": false, "iteration": 7, "prompt_tokens": 5135, "completion_tokens": 776, "duration": 28.94590449333191, "task_id": "HumanEval/36", "result": "failed: ", "passed": false}
{"generated_code": "def sort_even(l: list):\n    even_indices = sorted([i for i in range(len(l)) if i % 2 == 0], key=lambda x: l[x])\n    result = l.copy()\n    for idx, val in enumerate(even_indices):\n        result[val] = l[even_indices[idx]]\n    return result", "is_solved": false, "iteration": 7, "prompt_tokens": 5948, "completion_tokens": 856, "duration": 28.03804612159729, "task_id": "HumanEval/37", "result": "failed: ", "passed": false}
{"generated_code": "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n\n    i = len(string)\n    while i >= 0:\n        if string[:i] == string[:i][::-1]:\n            break\n        i -= 1\n    \n    if string == string[::-1]:\n        return string\n    \n    return string + string[:i][::-1]", "is_solved": false, "iteration": 7, "prompt_tokens": 5417, "completion_tokens": 864, "duration": 28.69692850112915, "task_id": "HumanEval/10", "result": "failed: ", "passed": false}
{"generated_code": "def sort_third(l: list):\n    sorted_indices = sorted([i for i in range(len(l)) if i % 3 == 0], key=lambda x: l[x])\n    sorted_values = [l[i] for i in sorted_indices]\n    result = l.copy()\n    for i, v in zip(sorted_indices, sorted_values):\n        if i % 3 == 0:\n            result[i] = v\n    return result", "is_solved": false, "iteration": 7, "prompt_tokens": 8918, "completion_tokens": 911, "duration": 31.890965700149536, "task_id": "HumanEval/33", "result": "failed: ", "passed": false}
{"generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 54, "duration": 5.898924827575684, "task_id": "HumanEval/57", "result": "passed", "passed": true}
{"generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 29, "duration": 4.415369749069214, "task_id": "HumanEval/58", "result": "passed", "passed": true}
{"generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 50, "duration": 4.908264875411987, "task_id": "HumanEval/59", "result": "passed", "passed": true}
{"generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 22, "duration": 4.242558002471924, "task_id": "HumanEval/60", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str):\n    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 68, "duration": 6.116909980773926, "task_id": "HumanEval/61", "result": "passed", "passed": true}
{"generated_code": "def derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 28, "duration": 3.1749978065490723, "task_id": "HumanEval/62", "result": "passed", "passed": true}
{"generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 72, "duration": 5.622449636459351, "task_id": "HumanEval/63", "result": "passed", "passed": true}
{"generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 5.672107219696045, "task_id": "HumanEval/66", "result": "passed", "passed": true}
{"generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 37, "duration": 5.641664266586304, "task_id": "HumanEval/67", "result": "passed", "passed": true}
{"generated_code": "def pluck(arr):\n    evens = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens, key=lambda x: (x[0], x[1]))\n    return [min_even[0], min_even[1]]", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 78, "duration": 5.097854852676392, "task_id": "HumanEval/68", "result": "passed", "passed": true}
{"generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 44, "duration": 5.86173415184021, "task_id": "HumanEval/70", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 92, "duration": 6.1586079597473145, "task_id": "HumanEval/71", "result": "passed", "passed": true}
{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 5.8480916023254395, "task_id": "HumanEval/72", "result": "passed", "passed": true}
{"generated_code": "def smallest_change(arr):\n    length = len(arr)\n    changes = 0\n    for i in range(length // 2):\n        if arr[i] != arr[length - i - 1]:\n            changes += 1\n    return changes", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 55, "duration": 1.1043100357055664, "task_id": "HumanEval/73", "result": "passed", "passed": true}
{"generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or (n != 1 and x % n == 0 and is_simple_power(x // n, n)))", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 52, "duration": 4.641237735748291, "task_id": "HumanEval/76", "result": "passed", "passed": true}
{"generated_code": "def hex_key(num):\n    prime_digits = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 60, "duration": 3.5844950675964355, "task_id": "HumanEval/78", "result": "passed", "passed": true}
{"generated_code": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal)[2:] + 'db'", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 25, "duration": 4.3092145919799805, "task_id": "HumanEval/79", "result": "passed", "passed": true}
{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 70, "duration": 3.4724762439727783, "task_id": "HumanEval/82", "result": "passed", "passed": true}
{"generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 21, "duration": 4.153321743011475, "task_id": "HumanEval/84", "result": "passed", "passed": true}
{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 105, "completion_tokens": 34, "duration": 2.8639819622039795, "task_id": "HumanEval/85", "result": "passed", "passed": true}
{"generated_code": "def anti_shuffle(s):\n    words = s.split()\n    result = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        result.append(ordered_word)\n    return ' '.join(result)", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 48, "duration": 4.981414556503296, "task_id": "HumanEval/86", "result": "passed", "passed": true}
{"generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 68, "duration": 4.027481555938721, "task_id": "HumanEval/87", "result": "passed", "passed": true}
{"generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            base = ord('a') if char.islower() else ord('A')\n            result += chr((ord(char) - base + 2 * 2) % 26 + base)\n        else:\n            result += char\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 76, "duration": 3.5757226943969727, "task_id": "HumanEval/89", "result": "passed", "passed": true}
{"generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 52, "duration": 4.791964769363403, "task_id": "HumanEval/90", "result": "passed", "passed": true}
{"generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences if sentence]\n    \n    count = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0] == \"I\":\n            count += 1\n    \n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 71, "duration": 3.5930309295654297, "task_id": "HumanEval/91", "result": "passed", "passed": true}
{"generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 54, "duration": 4.871682405471802, "task_id": "HumanEval/92", "result": "passed", "passed": true}
{"generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    prime_values = [num for num in lst if is_prime(num)]\n    largest_prime = max(prime_values)\n    \n    return sum_of_digits(largest_prime)", "is_solved": true, "iteration": 0, "prompt_tokens": 336, "completion_tokens": 120, "duration": 5.921804666519165, "task_id": "HumanEval/94", "result": "failed: name 'skjkasdkd' is not defined", "passed": false}
{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 87, "duration": 3.5806374549865723, "task_id": "HumanEval/96", "result": "passed", "passed": true}
{"generated_code": "def multiply(a, b):\n    return int(str(abs(a) % 10)) * int(str(abs(b) % 10))", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 27, "duration": 4.40070652961731, "task_id": "HumanEval/97", "result": "passed", "passed": true}
{"generated_code": "def count_upper(s):\n    return sum(1 for i in range(0, len(s), 2) if s[i] in 'AEIOU')", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 37, "duration": 4.357618093490601, "task_id": "HumanEval/98", "result": "passed", "passed": true}
{"generated_code": "def closest_integer(value):\n    value = float(value)\n    return int(value + 0.5) if value > 0 else int(value - 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 39, "duration": 4.614492893218994, "task_id": "HumanEval/99", "result": "passed", "passed": true}
{"generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(',', ' ').split()]", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 25, "duration": 2.786447525024414, "task_id": "HumanEval/101", "result": "passed", "passed": true}
{"generated_code": "def choose_num(x, y):\n    return max([i for i in range(x, y+1) if i % 2 == 0] + [-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 39, "duration": 2.6726202964782715, "task_id": "HumanEval/102", "result": "passed", "passed": true}
{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m-n+1))\n    return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 46, "duration": 3.154949903488159, "task_id": "HumanEval/103", "result": "passed", "passed": true}
{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 33, "duration": 2.7222673892974854, "task_id": "HumanEval/104", "result": "passed", "passed": true}
{"generated_code": "def by_length(arr):\n    nums = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    arr = [x for x in arr if 1 <= x <= 9]\n    arr.sort()\n    arr.reverse()\n    return [nums[x-1] for x in arr]", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 78, "duration": 3.382270097732544, "task_id": "HumanEval/105", "result": "passed", "passed": true}
{"generated_code": "def f(n):\n    def factorial(num):\n        if num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    \n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 92, "duration": 1.7012665271759033, "task_id": "HumanEval/106", "result": "passed", "passed": true}
{"generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count, odd_count = 0, 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 98, "duration": 3.75720477104187, "task_id": "HumanEval/107", "result": "passed", "passed": true}
{"generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    sorted_arr = sorted(arr)\n    for _ in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n        \n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 63, "duration": 3.3378124237060547, "task_id": "HumanEval/109", "result": "passed", "passed": true}
{"generated_code": "def reverse_delete(s, c):\n    result = \"\".join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 508, "completion_tokens": 78, "duration": 4.2718048095703125, "task_id": "HumanEval/112", "result": "passed", "passed": true}
{"generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 94, "completion_tokens": 64, "duration": 1.0854251384735107, "task_id": "HumanEval/83", "result": "passed", "passed": true}
{"generated_code": "def sort_array(array):\n    sorted_array = sorted(array)\n    if not array:\n        return []\n    elif (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array", "is_solved": true, "iteration": 1, "prompt_tokens": 1308, "completion_tokens": 151, "duration": 7.531364917755127, "task_id": "HumanEval/88", "result": "passed", "passed": true}
{"generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            n += 2\n        else:\n            n += 2\n        stones.append(n)\n    return stones", "is_solved": true, "iteration": 1, "prompt_tokens": 1077, "completion_tokens": 188, "duration": 10.58942461013794, "task_id": "HumanEval/100", "result": "passed", "passed": true}
{"generated_code": "def search(lst):\n    from collections import Counter\n    counts = Counter(lst)\n    max_num = -1\n    for num, freq in counts.items():\n        if num > max_num and freq >= num:\n            max_num = num\n    return max_num", "is_solved": true, "iteration": 1, "prompt_tokens": 3133, "completion_tokens": 161, "duration": 8.119481325149536, "task_id": "HumanEval/69", "result": "passed", "passed": true}
{"generated_code": "def histogram(test):\n    lst = test.split()\n    hist = {}\n    for letter in lst:\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    if not hist:\n        return {}\n    max_count = max(hist.values())\n    return {k: v for k, v in hist.items() if v == max_count}", "is_solved": true, "iteration": 1, "prompt_tokens": 1239, "completion_tokens": 226, "duration": 8.939517974853516, "task_id": "HumanEval/111", "result": "passed", "passed": true}
{"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(1 for num in lst1 if num % 2 != 0) <= sum(1 for num in lst2 if num % 2 == 0) else \"NO\"", "is_solved": true, "iteration": 1, "prompt_tokens": 1363, "completion_tokens": 185, "duration": 9.047255754470825, "task_id": "HumanEval/110", "result": "passed", "passed": true}
{"generated_code": "def total_match(lst1, lst2):\n    len1 = sum(len(x) for x in lst1)\n    len2 = sum(len(x) for x in lst2)\n    \n    if len1 < len2:\n        return lst1\n    elif len2 < len1:\n        return lst2\n    else:\n        return lst1", "is_solved": true, "iteration": 1, "prompt_tokens": 1348, "completion_tokens": 228, "duration": 12.15189266204834, "task_id": "HumanEval/74", "result": "passed", "passed": true}
{"generated_code": "def is_happy(s):\n    return all(s[i] != s[i+1] and s[i+1] != s[i+2] and s[i] != s[i+2] for i in range(len(s)-2)) and len(s) >= 3", "is_solved": true, "iteration": 2, "prompt_tokens": 1702, "completion_tokens": 252, "duration": 8.408896923065186, "task_id": "HumanEval/80", "result": "passed", "passed": true}
{"generated_code": "def vowels_count(s):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n\n    for i, char in enumerate(s):\n        if char.lower() in vowels or (char.lower() == 'y' and i == len(s)-1):\n            count += 1\n    \n    return count", "is_solved": true, "iteration": 2, "prompt_tokens": 1820, "completion_tokens": 340, "duration": 13.447875499725342, "task_id": "HumanEval/64", "result": "passed", "passed": true}
{"generated_code": "def check_dict_case(dict):\n    if not dict or any(not isinstance(key, str) for key in dict.keys()):\n        return False\n\n    lowercase_keys = all(str(key).islower() for key in dict.keys())\n    uppercase_keys = all(str(key).isupper() for key in dict.keys())\n\n    return lowercase_keys or uppercase_keys", "is_solved": true, "iteration": 5, "prompt_tokens": 4337, "completion_tokens": 614, "duration": 23.81035351753235, "task_id": "HumanEval/95", "result": "passed", "passed": true}
{"generated_code": "def iscube(a):\n    return a >= 0 and round(a**(1/3))**3 == a", "is_solved": false, "iteration": 7, "prompt_tokens": 4362, "completion_tokens": 419, "duration": 23.257214546203613, "task_id": "HumanEval/77", "result": "failed: Third test error: False", "passed": false}
{"generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        digits_sum = sum(int(digit) for digit in str(abs(num)))\n        if digits_sum > 0:\n            count += 1\n    return count", "is_solved": false, "iteration": 7, "prompt_tokens": 5828, "completion_tokens": 698, "duration": 25.820844888687134, "task_id": "HumanEval/108", "result": "failed: ", "passed": false}
{"generated_code": "def encode(message):\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                result += chr((ord(char) - ord('a') + 2) % 26 + ord('A'))\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result", "is_solved": false, "iteration": 7, "prompt_tokens": 5234, "completion_tokens": 868, "duration": 28.83517599105835, "task_id": "HumanEval/93", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    if len(x_str) == 1:\n        return x_str\n    \n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "is_solved": false, "iteration": 7, "prompt_tokens": 4522, "completion_tokens": 794, "duration": 35.04410099983215, "task_id": "HumanEval/65", "result": "failed: ", "passed": false}
{"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)}n the str{i+1}ng {s} of the {i+1}nput.\" for i, s in enumerate(lst)]", "is_solved": false, "iteration": 7, "prompt_tokens": 6612, "completion_tokens": 753, "duration": 31.97000551223755, "task_id": "HumanEval/113", "result": "failed: Test 1", "passed": false}
{"generated_code": "from itertools import combinations\n\ndef is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    prime_factors = [i for i in range(2, a) if a % i == 0 and is_prime(i)]\n    \n    if len(prime_factors) < 3:\n        return False\n    \n    for comb in combinations(prime_factors, 3):\n        if a == comb[0] * comb[1] * comb[2]:\n            return True\n    \n    return False", "is_solved": false, "iteration": 7, "prompt_tokens": 6138, "completion_tokens": 1407, "duration": 40.388432025909424, "task_id": "HumanEval/75", "result": "failed: ", "passed": false}
{"generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        if gpa > 3.7:\n            return 'A'\n        if gpa > 3.3:\n            return 'A-'\n        if gpa > 3.0:\n            return 'B+'\n        if gpa > 2.7:\n            return 'B'\n        if gpa > 2.3:\n            return 'B-'\n        if gpa > 2.0:\n            return 'C+'\n        if gpa > 1.7:\n            return 'C'\n        if gpa > 1.3:\n            return 'C-'\n        if gpa > 1.0:\n            return 'D+'\n        if gpa >= 0.7:\n            return 'D'\n        if gpa > 0.0:\n            return 'D-'\n        return 'E'\n\n    return [grade(g) for g in grades]", "is_solved": false, "iteration": 7, "prompt_tokens": 9180, "completion_tokens": 2093, "duration": 90.29838991165161, "task_id": "HumanEval/81", "result": "failed: ", "passed": false}
{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 60, "duration": 3.7184066772460938, "task_id": "HumanEval/114", "result": "passed", "passed": true}
{"generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 220, "completion_tokens": 28, "duration": 3.368082284927368, "task_id": "HumanEval/116", "result": "passed", "passed": true}
{"generated_code": "def select_words(s, n):\n    if not s:\n        return []\n    words = s.split()\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = []\n    for word in words:\n        if len([c for c in word if c in consonants]) == n:\n            result.append(word)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 86, "duration": 4.235817909240723, "task_id": "HumanEval/117", "result": "passed", "passed": true}
{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 98, "duration": 3.4160122871398926, "task_id": "HumanEval/118", "result": "passed", "passed": true}
{"generated_code": "def get_odd_collatz(n):\n    collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    \n    return sorted(list(set([num for num in collatz if num % 2 != 0])))", "is_solved": true, "iteration": 0, "prompt_tokens": 281, "completion_tokens": 85, "duration": 3.982318878173828, "task_id": "HumanEval/123", "result": "passed", "passed": true}
{"generated_code": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n        return True\n    except:\n        return False", "is_solved": true, "iteration": 0, "prompt_tokens": 313, "completion_tokens": 149, "duration": 4.932066202163696, "task_id": "HumanEval/124", "result": "passed", "passed": true}
{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        product *= num // abs(num) if num != 0 else 0\n        sum_magnitudes += abs(num)\n    return product * sum_magnitudes", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 75, "duration": 3.701418399810791, "task_id": "HumanEval/128", "result": "passed", "passed": true}
{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(num) ** 2 for num in lst)", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 28, "duration": 3.7298011779785156, "task_id": "HumanEval/133", "result": "passed", "passed": true}
{"generated_code": "def largest_smallest_integers(lst):\n    negative_integers = [num for num in lst if num < 0]\n    positive_integers = [num for num in lst if num > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)", "is_solved": true, "iteration": 0, "prompt_tokens": 188, "completion_tokens": 90, "duration": 4.1900529861450195, "task_id": "HumanEval/136", "result": "passed", "passed": true}
{"generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        fact = 1\n        for j in range(1, i+1):\n            fact *= j\n        result *= fact\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 60, "duration": 5.106764793395996, "task_id": "HumanEval/139", "result": "passed", "passed": true}
{"generated_code": "def file_name_check(file_name):\n    if file_name.count(\".\") != 1:\n        return 'No'\n    file_parts = file_name.split(\".\")\n    if len(file_parts) != 2:\n        return 'No'\n    if not file_parts[0] or not file_parts[0][0].isalpha():\n        return 'No'\n    if len([c for c in file_parts[0] if c.isdigit()]) > 3:\n        return 'No'\n    if file_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 130, "duration": 2.550602436065674, "task_id": "HumanEval/141", "result": "passed", "passed": true}
{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "is_solved": true, "iteration": 0, "prompt_tokens": 197, "completion_tokens": 94, "duration": 3.0800018310546875, "task_id": "HumanEval/143", "result": "passed", "passed": true}
{"generated_code": "from fractions import Fraction\n\ndef simplify(x, n):\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 34, "duration": 3.2925808429718018, "task_id": "HumanEval/144", "result": "passed", "passed": true}
{"generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 81, "duration": 4.610205888748169, "task_id": "HumanEval/146", "result": "passed", "passed": true}
{"generated_code": "def list_sort(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 237, "completion_tokens": 39, "duration": 2.81819486618042, "task_id": "HumanEval/149", "result": "failed: name 'sorted_list_sum' is not defined", "passed": false}
{"generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 78, "duration": 4.968517303466797, "task_id": "HumanEval/150", "result": "passed", "passed": true}
{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int))", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 39, "duration": 0.860107421875, "task_id": "HumanEval/151", "result": "passed", "passed": true}
{"generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.6411662101745605, "task_id": "HumanEval/152", "result": "passed", "passed": true}
{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def calc_strength(ext):\n        return sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\n    \n    max_strength = float('-inf')\n    strongest_ext = \"\"\n    \n    for ext in extensions:\n        strength = calc_strength(ext)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_ext = ext\n    \n    return f\"{class_name}.{strongest_ext}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 105, "duration": 1.6746180057525635, "task_id": "HumanEval/153", "result": "passed", "passed": true}
{"generated_code": "def even_odd_count(num):\n    even_count = len([i for i in str(abs(num)) if int(i) % 2 == 0])\n    odd_count = len([i for i in str(abs(num)) if int(i) % 2 != 0])\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 115, "completion_tokens": 65, "duration": 2.838606119155884, "task_id": "HumanEval/155", "result": "passed", "passed": true}
{"generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    \n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    \n    return result.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 143, "duration": 2.278186321258545, "task_id": "HumanEval/156", "result": "passed", "passed": true}
{"generated_code": "def right_angle_triangle(a, b, c):\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 63, "duration": 1.2231793403625488, "task_id": "HumanEval/157", "result": "passed", "passed": true}
{"generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n    \n    max_unique_chars = 0\n    max_word = \"\"\n    \n    for word in words:\n        curr_unique_chars = unique_chars(word)\n        if curr_unique_chars > max_unique_chars or (curr_unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = curr_unique_chars\n            max_word = word\n    \n    return max_word", "is_solved": true, "iteration": 0, "prompt_tokens": 170, "completion_tokens": 95, "duration": 5.631035089492798, "task_id": "HumanEval/158", "result": "passed", "passed": true}
{"generated_code": "def eat(number, need, remaining):\n    eaten = number + min(need, remaining)\n    left = max(remaining - need, 0)\n    return [eaten, left]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 43, "duration": 2.6561062335968018, "task_id": "HumanEval/159", "result": "passed", "passed": true}
{"generated_code": "def do_algebra(operators, operands):\n    expression = str(operands[0])\n    for i in range(len(operators)):\n        expression += operators[i] + str(operands[i + 1])\n    return eval(expression)", "is_solved": true, "iteration": 0, "prompt_tokens": 257, "completion_tokens": 51, "duration": 1.1593248844146729, "task_id": "HumanEval/160", "result": "passed", "passed": true}
{"generated_code": "def solve(s):\n    result = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not has_letter:\n        return s[::-1]\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 81, "duration": 3.5644960403442383, "task_id": "HumanEval/161", "result": "passed", "passed": true}
{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 36, "duration": 0.8799667358398438, "task_id": "HumanEval/162", "result": "passed", "passed": true}
{"generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n# Example\nn = 5\nprint(get_max_triples(n))", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 119, "duration": 5.007686138153076, "task_id": "HumanEval/147", "result": "passed", "passed": true}
{"generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:] if k > 0 else []", "is_solved": true, "iteration": 2, "prompt_tokens": 2854, "completion_tokens": 158, "duration": 9.352832078933716, "task_id": "HumanEval/120", "result": "passed", "passed": true}
{"generated_code": "def digits(n):\n    prod = 1\n    all_even = True\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            prod *= int(digit)\n            all_even = False\n    return prod if not all_even else 0", "is_solved": true, "iteration": 2, "prompt_tokens": 1485, "completion_tokens": 262, "duration": 8.41317868232727, "task_id": "HumanEval/131", "result": "passed", "passed": true}
{"generated_code": "def is_equal_to_sum_even(n):\n    count = 0\n    for i in range(2, n//2 + 1, 2):\n        if n - i in range(2, n, 2):\n            count += 1\n    return count >= 2", "is_solved": true, "iteration": 2, "prompt_tokens": 1755, "completion_tokens": 336, "duration": 14.884121179580688, "task_id": "HumanEval/138", "result": "passed", "passed": true}
{"generated_code": "def can_arrange(arr):\n    index = -1\n    for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return index", "is_solved": true, "iteration": 5, "prompt_tokens": 3503, "completion_tokens": 544, "duration": 23.450705528259277, "task_id": "HumanEval/135", "result": "passed", "passed": true}
{"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)", "is_solved": true, "iteration": 6, "prompt_tokens": 4729, "completion_tokens": 574, "duration": 23.455374240875244, "task_id": "HumanEval/121", "result": "passed", "passed": true}
{"generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if len(str(num)) <= 2)", "is_solved": true, "iteration": 7, "prompt_tokens": 5049, "completion_tokens": 470, "duration": 27.335702657699585, "task_id": "HumanEval/122", "result": "passed", "passed": true}
{"generated_code": "def is_sorted(lst):\n    return lst == sorted(lst) and len(set(lst)) == len(lst)", "is_solved": false, "iteration": 7, "prompt_tokens": 7462, "completion_tokens": 453, "duration": 25.098291397094727, "task_id": "HumanEval/126", "result": "failed: This prints if this assert fails 7 (good for debugging!)", "passed": false}
{"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "is_solved": false, "iteration": 7, "prompt_tokens": 6952, "completion_tokens": 495, "duration": 26.285479068756104, "task_id": "HumanEval/145", "result": "failed: ", "passed": false}
{"generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "is_solved": false, "iteration": 7, "prompt_tokens": 4929, "completion_tokens": 552, "duration": 26.069469690322876, "task_id": "HumanEval/163", "result": "failed: Test 1", "passed": false}
{"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a*2) or len(a) == len(b) and b in (a*3)", "is_solved": false, "iteration": 7, "prompt_tokens": 4979, "completion_tokens": 531, "duration": 28.781898736953735, "task_id": "HumanEval/154", "result": "failed: test #1", "passed": false}
{"generated_code": "import math\n\ndef max_fill(grid, capacity):\n    wells = [sum(row) for row in grid]\n    total_water = sum(wells)\n    buckets_needed = math.ceil(total_water / capacity)\n    return buckets_needed", "is_solved": false, "iteration": 7, "prompt_tokens": 7395, "completion_tokens": 672, "duration": 31.47176718711853, "task_id": "HumanEval/115", "result": "failed: Error", "passed": false}
{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 and (i+1) % 3 != 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 7, "prompt_tokens": 8162, "completion_tokens": 717, "duration": 28.050321578979492, "task_id": "HumanEval/142", "result": "failed: ", "passed": false}
{"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char.lower()) % 2 != 0)", "is_solved": false, "iteration": 7, "prompt_tokens": 5454, "completion_tokens": 801, "duration": 29.269072771072388, "task_id": "HumanEval/125", "result": "failed: ", "passed": false}
{"generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a == b:\n            return None\n        return a if a > b else b\n    try:\n        a = float(a.replace(',', '.')) if isinstance(a, str) else float(a)\n        if a == b:\n            return None\n        return a if a > b else b\n    except ValueError:\n        return a if type(a) == float else b", "is_solved": false, "iteration": 7, "prompt_tokens": 6276, "completion_tokens": 1021, "duration": 32.85101580619812, "task_id": "HumanEval/137", "result": "failed: '>' not supported between instances of 'float' and 'str'", "passed": false}
{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt.strip():\n        return False\n    last_char = txt.strip()[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt.rstrip().split()[-1]) == 1:\n        return True\n    return False", "is_solved": false, "iteration": 7, "prompt_tokens": 5966, "completion_tokens": 753, "duration": 32.99972128868103, "task_id": "HumanEval/134", "result": "failed: ", "passed": false}
{"generated_code": "def fix_spaces(text):\n    result = []\n    count = 0\n    for c in text:\n        if c == ' ':\n            count += 1\n            if count > 2:\n                result.append('-')\n            else:\n                result.append('_')\n        else:\n            result.append(c)\n            count = 0\n    return ''.join(result)", "is_solved": false, "iteration": 7, "prompt_tokens": 5315, "completion_tokens": 915, "duration": 33.70718502998352, "task_id": "HumanEval/140", "result": "failed: This prints if this assert fails 4 (good for debugging!)", "passed": false}
{"generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1, 3]\n    sequence = [1, 3]\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            sequence.append(1 + i // 2)\n        else:\n            sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-1])\n    return sequence", "is_solved": false, "iteration": 7, "prompt_tokens": 10248, "completion_tokens": 1110, "duration": 35.2347514629364, "task_id": "HumanEval/130", "result": "failed: ", "passed": false}
{"generated_code": "def match_parens(lst):\n    diff = lst[0].count('(') - lst[0].count(')')\n    diff += lst[1].count('(') - lst[1].count(')')\n    \n    if diff == 0:\n        return 'Yes'\n    else:\n        return 'No'", "is_solved": false, "iteration": 7, "prompt_tokens": 7274, "completion_tokens": 950, "duration": 33.69927167892456, "task_id": "HumanEval/119", "result": "failed: ", "passed": false}
{"generated_code": "def is_nested(string):\n    opening_brackets = []\n    nested = False\n    \n    for char in string:\n        if char == '[':\n            opening_brackets.append(char)\n        elif char == ']' and opening_brackets:\n            opening_brackets.pop()\n            if len(opening_brackets) > 0:\n                nested = True\n                break\n    \n    return nested", "is_solved": false, "iteration": 7, "prompt_tokens": 6773, "completion_tokens": 1023, "duration": 38.8883490562439, "task_id": "HumanEval/132", "result": "failed: ", "passed": false}
{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    elif start_idx > end_idx:\n        return tuple(planets[end_idx+1:start_idx][::-1])\n    else:\n        return ()", "is_solved": false, "iteration": 7, "prompt_tokens": 7024, "completion_tokens": 1280, "duration": 33.98830318450928, "task_id": "HumanEval/148", "result": "failed: Fourth test error: ('Uranus', 'Saturn', 'Jupiter', 'Mars', 'Earth')", "passed": false}
{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    length = intersection_end - intersection_start + 1\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 7, "prompt_tokens": 9335, "completion_tokens": 1539, "duration": 43.720099210739136, "task_id": "HumanEval/127", "result": "failed: ", "passed": false}
{"generated_code": "def minPath(grid, k):\n    def dfs(x, y, path_len, path):\n        if path_len == k:\n            return path\n\n        min_path = []\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and not visited[nx][ny]:\n                visited[nx][ny] = True\n                new_path = dfs(nx, ny, path_len + 1, path + [grid[nx][ny]])\n                if not min_path or new_path < min_path:\n                    min_path = new_path\n                visited[nx][ny] = False\n\n        return min_path\n\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    result = []\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            visited[i][j] = True\n            result = dfs(i, j, 1, [grid[i][j]])\n            visited[i][j] = False\n\n    return result", "is_solved": false, "iteration": 7, "prompt_tokens": 16649, "completion_tokens": 2400, "duration": 55.70948338508606, "task_id": "HumanEval/129", "result": "failed: ", "passed": false}
{"generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 61, "duration": 3.7879819869995117, "task_id": "HumanEval/0", "result": "passed", "passed": true}
{"generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    temp = ''\n    for char in paren_string:\n        if char == '(':\n            stack.append('(')\n            temp += '('\n        elif char == ')':\n            stack.pop()\n            temp += ')'\n            if not stack:\n                result.append(temp)\n                temp = ''\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 165, "completion_tokens": 86, "duration": 4.6310436725616455, "task_id": "HumanEval/1", "result": "passed", "passed": true}
{"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": true, "iteration": 0, "prompt_tokens": 135, "completion_tokens": 21, "duration": 3.479076385498047, "task_id": "HumanEval/2", "result": "passed", "passed": true}
{"generated_code": "def below_zero(operations):\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 37, "duration": 3.4491524696350098, "task_id": "HumanEval/3", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 49, "duration": 3.9055840969085693, "task_id": "HumanEval/4", "result": "passed", "passed": true}
{"generated_code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 56, "duration": 3.8390955924987793, "task_id": "HumanEval/5", "result": "passed", "passed": true}
{"generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                if depth > max_depth:\n                    max_depth = depth\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 97, "duration": 4.703549146652222, "task_id": "HumanEval/6", "result": "passed", "passed": true}
{"generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "is_solved": true, "iteration": 0, "prompt_tokens": 143, "completion_tokens": 35, "duration": 3.61719012260437, "task_id": "HumanEval/7", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    maximum = float('-inf')\n    for num in numbers:\n        maximum = max(maximum, num)\n        result.append(maximum)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 150, "completion_tokens": 54, "duration": 3.7376515865325928, "task_id": "HumanEval/9", "result": "passed", "passed": true}
{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 41, "duration": 3.579258441925049, "task_id": "HumanEval/11", "result": "passed", "passed": true}
{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 42, "duration": 3.5393548011779785, "task_id": "HumanEval/13", "result": "passed", "passed": true}
{"generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 32, "duration": 3.6700150966644287, "task_id": "HumanEval/14", "result": "passed", "passed": true}
{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 27, "duration": 3.5287091732025146, "task_id": "HumanEval/15", "result": "passed", "passed": true}
{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 3.326807737350464, "task_id": "HumanEval/16", "result": "passed", "passed": true}
{"generated_code": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    return [durations[note] for note in notes]", "is_solved": true, "iteration": 0, "prompt_tokens": 222, "completion_tokens": 59, "duration": 3.708634614944458, "task_id": "HumanEval/17", "result": "passed", "passed": true}
{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 74, "duration": 3.952439308166504, "task_id": "HumanEval/18", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_map[x])\n    return ' '.join(sorted_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 103, "duration": 4.493385076522827, "task_id": "HumanEval/19", "result": "passed", "passed": true}
{"generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    \n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    \n    return closest_pair", "is_solved": true, "iteration": 0, "prompt_tokens": 216, "completion_tokens": 99, "duration": 4.436337947845459, "task_id": "HumanEval/20", "result": "passed", "passed": true}
{"generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 53, "duration": 3.686016082763672, "task_id": "HumanEval/21", "result": "passed", "passed": true}
{"generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 31, "duration": 3.3969316482543945, "task_id": "HumanEval/22", "result": "passed", "passed": true}
{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 3.471254587173462, "task_id": "HumanEval/23", "result": "passed", "passed": true}
{"generated_code": "def largest_divisor(n: int) -> int:\n    return max([i for i in range(1, n) if n % i == 0])", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 37, "duration": 3.5331480503082275, "task_id": "HumanEval/24", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 70, "duration": 4.299970865249634, "task_id": "HumanEval/25", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 38, "duration": 3.51297664642334, "task_id": "HumanEval/26", "result": "passed", "passed": true}
{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 36, "duration": 3.3321757316589355, "task_id": "HumanEval/27", "result": "passed", "passed": true}
{"generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 20, "duration": 3.289001703262329, "task_id": "HumanEval/28", "result": "passed", "passed": true}
{"generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 34, "duration": 3.4382829666137695, "task_id": "HumanEval/29", "result": "passed", "passed": true}
{"generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 25, "duration": 3.446502208709717, "task_id": "HumanEval/30", "result": "passed", "passed": true}
{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 57, "duration": 3.4670627117156982, "task_id": "HumanEval/31", "result": "passed", "passed": true}
{"generated_code": "def find_zero(xs: list):\n    return -xs[0] / xs[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 23, "duration": 3.333569288253784, "task_id": "HumanEval/32", "result": "failed: name 'poly' is not defined", "passed": false}
{"generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 17, "duration": 3.2383384704589844, "task_id": "HumanEval/34", "result": "passed", "passed": true}
{"generated_code": "def max_element(l: list):\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 16, "duration": 3.126251459121704, "task_id": "HumanEval/35", "result": "passed", "passed": true}
{"generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iteration": 0, "prompt_tokens": 208, "completion_tokens": 162, "duration": 4.739898920059204, "task_id": "HumanEval/38", "result": "passed", "passed": true}
{"generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 1:\n            return n\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    i = 0\n    while count < n:\n        i += 1\n        num = fibonacci(i)\n        if is_prime(num):\n            count += 1\n    return num", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 163, "duration": 4.843162536621094, "task_id": "HumanEval/39", "result": "passed", "passed": true}
{"generated_code": "def triples_sum_to_zero(l: list):\n    return any(sum((x, y, z)) == 0 for x in l for y in l for z in l if x != y != z)", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 46, "duration": 5.7354347705841064, "task_id": "HumanEval/40", "result": "passed", "passed": true}
{"generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 23, "duration": 5.429662704467773, "task_id": "HumanEval/42", "result": "passed", "passed": true}
{"generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 42, "duration": 4.737221002578735, "task_id": "HumanEval/43", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 17, "duration": 6.2418904304504395, "task_id": "HumanEval/45", "result": "passed", "passed": true}
{"generated_code": "def fib4(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    fib_list = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib_list.append(fib_list[-1] + fib_list[-2] + fib_list[-3] + fib_list[-4])\n    \n    return fib_list[-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 116, "duration": 5.7989301681518555, "task_id": "HumanEval/46", "result": "passed", "passed": true}
{"generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "is_solved": true, "iteration": 0, "prompt_tokens": 125, "completion_tokens": 61, "duration": 1.5516915321350098, "task_id": "HumanEval/47", "result": "passed", "passed": true}
{"generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 20, "duration": 4.236940145492554, "task_id": "HumanEval/48", "result": "passed", "passed": true}
{"generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 25, "duration": 5.464749574661255, "task_id": "HumanEval/49", "result": "passed", "passed": true}
{"generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": true, "iteration": 0, "prompt_tokens": 140, "completion_tokens": 82, "duration": 6.010514259338379, "task_id": "HumanEval/50", "result": "passed", "passed": true}
{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in ['a', 'e', 'i', 'o', 'u']])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 42, "duration": 5.764646291732788, "task_id": "HumanEval/51", "result": "passed", "passed": true}
{"generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 26, "duration": 4.350031137466431, "task_id": "HumanEval/52", "result": "passed", "passed": true}
{"generated_code": "def add(x: int, y: int):\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 20, "duration": 5.648186683654785, "task_id": "HumanEval/53", "result": "passed", "passed": true}
{"generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 38, "duration": 6.5305821895599365, "task_id": "HumanEval/55", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 64, "duration": 5.029238224029541, "task_id": "HumanEval/56", "result": "passed", "passed": true}
{"generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_length = max(len(s) for s in strings)\n    longest_strings = [s for s in strings if len(s) == max_length]\n    return longest_strings[0]", "is_solved": true, "iteration": 1, "prompt_tokens": 809, "completion_tokens": 161, "duration": 7.702747344970703, "task_id": "HumanEval/12", "result": "passed", "passed": true}
{"generated_code": "def sort_even(l: list):\n    even_values = sorted([x for x in l[::2]])\n    result = [val if idx % 2 != 0 else even_values.pop(0) for idx, val in enumerate(l)]\n    return result", "is_solved": true, "iteration": 1, "prompt_tokens": 1138, "completion_tokens": 175, "duration": 7.648141622543335, "task_id": "HumanEval/37", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        product = 1\n        for num in numbers:\n            product *= num\n        return sum(numbers), product", "is_solved": true, "iteration": 1, "prompt_tokens": 1033, "completion_tokens": 220, "duration": 8.532317876815796, "task_id": "HumanEval/8", "result": "passed", "passed": true}
{"generated_code": "def change_base(x: int, base: int):\n    digits = []\n    while x > 0:\n        digits.insert(0, str(x % base))\n        x //= base\n    return ''.join(digits) if digits else '0'", "is_solved": true, "iteration": 2, "prompt_tokens": 1679, "completion_tokens": 238, "duration": 12.444274187088013, "task_id": "HumanEval/44", "result": "passed", "passed": true}
{"generated_code": "def sort_third(l: list):\n    third_indices = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = sorted([l[i] for i in third_indices])\n    result = l.copy()\n    for i, v in zip(third_indices, sorted_values):\n        result[i] = v\n    return result", "is_solved": true, "iteration": 2, "prompt_tokens": 3165, "completion_tokens": 375, "duration": 13.528754711151123, "task_id": "HumanEval/33", "result": "passed", "passed": true}
{"generated_code": "def car_race_collision(n: int):\n    return n**2", "is_solved": true, "iteration": 6, "prompt_tokens": 3904, "completion_tokens": 340, "duration": 22.289603233337402, "task_id": "HumanEval/41", "result": "passed", "passed": true}
{"generated_code": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)", "is_solved": true, "iteration": 6, "prompt_tokens": 4696, "completion_tokens": 468, "duration": 24.37190055847168, "task_id": "HumanEval/54", "result": "passed", "passed": true}
{"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "is_solved": false, "iteration": 7, "prompt_tokens": 5074, "completion_tokens": 732, "duration": 29.12727451324463, "task_id": "HumanEval/36", "result": "failed: ", "passed": false}
{"generated_code": "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    \n    for i in range(len(string), 0, -1):\n        if string[:i] == string[:i][::-1]:\n            if string[i:] == '':\n                return string\n            return string + string[:i-1][::-1]", "is_solved": false, "iteration": 7, "prompt_tokens": 5106, "completion_tokens": 783, "duration": 28.777641534805298, "task_id": "HumanEval/10", "result": "failed: ", "passed": false}
{"generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 54, "duration": 5.898924827575684, "task_id": "HumanEval/57", "result": "passed", "passed": true}
{"generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 29, "duration": 4.415369749069214, "task_id": "HumanEval/58", "result": "passed", "passed": true}
{"generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 50, "duration": 4.908264875411987, "task_id": "HumanEval/59", "result": "passed", "passed": true}
{"generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 22, "duration": 4.242558002471924, "task_id": "HumanEval/60", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str):\n    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 68, "duration": 6.116909980773926, "task_id": "HumanEval/61", "result": "passed", "passed": true}
{"generated_code": "def derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 28, "duration": 3.1749978065490723, "task_id": "HumanEval/62", "result": "passed", "passed": true}
{"generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 72, "duration": 5.622449636459351, "task_id": "HumanEval/63", "result": "passed", "passed": true}
{"generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 5.672107219696045, "task_id": "HumanEval/66", "result": "passed", "passed": true}
{"generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 37, "duration": 5.641664266586304, "task_id": "HumanEval/67", "result": "passed", "passed": true}
{"generated_code": "def pluck(arr):\n    evens = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens, key=lambda x: (x[0], x[1]))\n    return [min_even[0], min_even[1]]", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 78, "duration": 5.097854852676392, "task_id": "HumanEval/68", "result": "passed", "passed": true}
{"generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 44, "duration": 5.86173415184021, "task_id": "HumanEval/70", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 92, "duration": 6.1586079597473145, "task_id": "HumanEval/71", "result": "passed", "passed": true}
{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 5.8480916023254395, "task_id": "HumanEval/72", "result": "passed", "passed": true}
{"generated_code": "def smallest_change(arr):\n    length = len(arr)\n    changes = 0\n    for i in range(length // 2):\n        if arr[i] != arr[length - i - 1]:\n            changes += 1\n    return changes", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 55, "duration": 1.1043100357055664, "task_id": "HumanEval/73", "result": "passed", "passed": true}
{"generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or (n != 1 and x % n == 0 and is_simple_power(x // n, n)))", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 52, "duration": 4.641237735748291, "task_id": "HumanEval/76", "result": "passed", "passed": true}
{"generated_code": "def hex_key(num):\n    prime_digits = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 60, "duration": 3.5844950675964355, "task_id": "HumanEval/78", "result": "passed", "passed": true}
{"generated_code": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal)[2:] + 'db'", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 25, "duration": 4.3092145919799805, "task_id": "HumanEval/79", "result": "passed", "passed": true}
{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 70, "duration": 3.4724762439727783, "task_id": "HumanEval/82", "result": "passed", "passed": true}
{"generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 21, "duration": 4.153321743011475, "task_id": "HumanEval/84", "result": "passed", "passed": true}
{"generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 94, "completion_tokens": 64, "duration": 1.0854251384735107, "task_id": "HumanEval/83", "result": "passed", "passed": true}
{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 105, "completion_tokens": 34, "duration": 2.8639819622039795, "task_id": "HumanEval/85", "result": "passed", "passed": true}
{"generated_code": "def anti_shuffle(s):\n    words = s.split()\n    result = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        result.append(ordered_word)\n    return ' '.join(result)", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 48, "duration": 4.981414556503296, "task_id": "HumanEval/86", "result": "passed", "passed": true}
{"generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 68, "duration": 4.027481555938721, "task_id": "HumanEval/87", "result": "passed", "passed": true}
{"generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            base = ord('a') if char.islower() else ord('A')\n            result += chr((ord(char) - base + 2 * 2) % 26 + base)\n        else:\n            result += char\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 76, "duration": 3.5757226943969727, "task_id": "HumanEval/89", "result": "passed", "passed": true}
{"generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 52, "duration": 4.791964769363403, "task_id": "HumanEval/90", "result": "passed", "passed": true}
{"generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences if sentence]\n    \n    count = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0] == \"I\":\n            count += 1\n    \n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 71, "duration": 3.5930309295654297, "task_id": "HumanEval/91", "result": "passed", "passed": true}
{"generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 54, "duration": 4.871682405471802, "task_id": "HumanEval/92", "result": "passed", "passed": true}
{"generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    prime_values = [num for num in lst if is_prime(num)]\n    largest_prime = max(prime_values)\n    \n    return sum_of_digits(largest_prime)", "is_solved": true, "iteration": 0, "prompt_tokens": 336, "completion_tokens": 120, "duration": 5.921804666519165, "task_id": "HumanEval/94", "result": "failed: name 'skjkasdkd' is not defined", "passed": false}
{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 87, "duration": 3.5806374549865723, "task_id": "HumanEval/96", "result": "passed", "passed": true}
{"generated_code": "def multiply(a, b):\n    return int(str(abs(a) % 10)) * int(str(abs(b) % 10))", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 27, "duration": 4.40070652961731, "task_id": "HumanEval/97", "result": "passed", "passed": true}
{"generated_code": "def count_upper(s):\n    return sum(1 for i in range(0, len(s), 2) if s[i] in 'AEIOU')", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 37, "duration": 4.357618093490601, "task_id": "HumanEval/98", "result": "passed", "passed": true}
{"generated_code": "def closest_integer(value):\n    value = float(value)\n    return int(value + 0.5) if value > 0 else int(value - 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 39, "duration": 4.614492893218994, "task_id": "HumanEval/99", "result": "passed", "passed": true}
{"generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(',', ' ').split()]", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 25, "duration": 2.786447525024414, "task_id": "HumanEval/101", "result": "passed", "passed": true}
{"generated_code": "def choose_num(x, y):\n    return max([i for i in range(x, y+1) if i % 2 == 0] + [-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 39, "duration": 2.6726202964782715, "task_id": "HumanEval/102", "result": "passed", "passed": true}
{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m-n+1))\n    return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 46, "duration": 3.154949903488159, "task_id": "HumanEval/103", "result": "passed", "passed": true}
{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 33, "duration": 2.7222673892974854, "task_id": "HumanEval/104", "result": "passed", "passed": true}
{"generated_code": "def by_length(arr):\n    nums = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    arr = [x for x in arr if 1 <= x <= 9]\n    arr.sort()\n    arr.reverse()\n    return [nums[x-1] for x in arr]", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 78, "duration": 3.382270097732544, "task_id": "HumanEval/105", "result": "passed", "passed": true}
{"generated_code": "def f(n):\n    def factorial(num):\n        if num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    \n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 92, "duration": 1.7012665271759033, "task_id": "HumanEval/106", "result": "passed", "passed": true}
{"generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count, odd_count = 0, 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 98, "duration": 3.75720477104187, "task_id": "HumanEval/107", "result": "passed", "passed": true}
{"generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    sorted_arr = sorted(arr)\n    for _ in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n        \n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 63, "duration": 3.3378124237060547, "task_id": "HumanEval/109", "result": "passed", "passed": true}
{"generated_code": "def reverse_delete(s, c):\n    result = \"\".join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 508, "completion_tokens": 78, "duration": 4.2718048095703125, "task_id": "HumanEval/112", "result": "passed", "passed": true}
{"generated_code": "def sort_array(array):\n    if not array:\n        return []\n    \n    sorted_array = sorted(array)\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array", "is_solved": true, "iteration": 1, "prompt_tokens": 1312, "completion_tokens": 156, "duration": 7.586064100265503, "task_id": "HumanEval/88", "result": "passed", "passed": true}
{"generated_code": "def search(lst):\n    from collections import Counter\n    counts = Counter(lst)\n    result = -1\n    for num, freq in counts.items():\n        if num > 0 and freq >= num:\n            result = max(result, num)\n    return result", "is_solved": true, "iteration": 1, "prompt_tokens": 3131, "completion_tokens": 159, "duration": 8.072983026504517, "task_id": "HumanEval/69", "result": "passed", "passed": true}
{"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(1 for num in lst1 if num % 2 != 0) <= sum(1 for num in lst2 if num % 2 == 0) else \"NO\"", "is_solved": true, "iteration": 1, "prompt_tokens": 1356, "completion_tokens": 178, "duration": 8.148197412490845, "task_id": "HumanEval/110", "result": "passed", "passed": true}
{"generated_code": "def histogram(test):\n    lst = test.split()\n    hist = {}\n    for letter in lst:\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    if not hist:\n        return {}\n    max_count = max(hist.values())\n    return {k: v for k, v in hist.items() if v == max_count}", "is_solved": true, "iteration": 1, "prompt_tokens": 1235, "completion_tokens": 222, "duration": 9.297995567321777, "task_id": "HumanEval/111", "result": "passed", "passed": true}
{"generated_code": "def vowels_count(s):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    \n    for i, char in enumerate(s):\n        if char.lower() in vowels or (char.lower() == 'y' and i == len(s) - 1):\n            count += 1\n    \n    return count", "is_solved": true, "iteration": 2, "prompt_tokens": 1810, "completion_tokens": 332, "duration": 14.587477922439575, "task_id": "HumanEval/64", "result": "passed", "passed": true}
{"generated_code": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    \n    lowercase_keys = all(str(key).islower() for key in dict.keys() if isinstance(key, str))\n    uppercase_keys = all(str(key).isupper() for key in dict.keys() if isinstance(key, str))\n    non_string_keys = any(not isinstance(key, str) for key in dict.keys())\n    \n    return (lowercase_keys or uppercase_keys) and not non_string_keys", "is_solved": true, "iteration": 2, "prompt_tokens": 2141, "completion_tokens": 348, "duration": 15.15357494354248, "task_id": "HumanEval/95", "result": "passed", "passed": true}
{"generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 2)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones", "is_solved": true, "iteration": 3, "prompt_tokens": 2860, "completion_tokens": 413, "duration": 17.11277937889099, "task_id": "HumanEval/100", "result": "passed", "passed": true}
{"generated_code": "def total_match(lst1, lst2):\n    sum1 = sum(len(x) for x in lst1)\n    sum2 = sum(len(x) for x in lst2)\n    \n    if sum1 < sum2:\n        return lst1\n    elif sum2 < sum1:\n        return lst2\n    else:\n        return lst1", "is_solved": true, "iteration": 4, "prompt_tokens": 4277, "completion_tokens": 570, "duration": 22.422260761260986, "task_id": "HumanEval/74", "result": "passed", "passed": true}
{"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_factors = []\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            while a % i == 0:\n                prime_factors.append(i)\n                a //= i\n\n    return len(prime_factors) == 3 and all(is_prime(num) for num in prime_factors)", "is_solved": true, "iteration": 3, "prompt_tokens": 2800, "completion_tokens": 646, "duration": 24.274552822113037, "task_id": "HumanEval/75", "result": "passed", "passed": true}
{"generated_code": "def iscube(a):\n    if a < 0:\n        return False\n    return int(a**(1/3))**3 == a", "is_solved": false, "iteration": 7, "prompt_tokens": 4573, "completion_tokens": 470, "duration": 26.968191862106323, "task_id": "HumanEval/77", "result": "failed: Third test error: False", "passed": false}
{"generated_code": "def count_nums(arr):\n    def sum_digits(num):\n        if num < 0:\n            num = str(num)[1:]\n        return sum(int(digit) for digit in str(num))\n    \n    return sum(1 for num in arr if sum_digits(num) > 0)", "is_solved": false, "iteration": 7, "prompt_tokens": 5938, "completion_tokens": 669, "duration": 28.274890899658203, "task_id": "HumanEval/108", "result": "failed: ", "passed": false}
{"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)}n the str{i+1}ng {s} of the {i+1}nput.\" for i, s in enumerate(lst)]", "is_solved": false, "iteration": 7, "prompt_tokens": 6536, "completion_tokens": 721, "duration": 27.461899280548096, "task_id": "HumanEval/113", "result": "failed: Test 1", "passed": false}
{"generated_code": "def is_happy(s):\n    return len(s) >= 3 and all(s[i] != s[i+1] != s[i+2] for i in range(len(s)-2))", "is_solved": false, "iteration": 7, "prompt_tokens": 5320, "completion_tokens": 736, "duration": 29.23913335800171, "task_id": "HumanEval/80", "result": "failed: iopaxioi", "passed": false}
{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift] if shift <= len(x_str) // 2 else x_str[1:] + x_str[0]", "is_solved": false, "iteration": 7, "prompt_tokens": 4565, "completion_tokens": 786, "duration": 33.28205728530884, "task_id": "HumanEval/65", "result": "failed: ", "passed": false}
{"generated_code": "def encode(message):\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                result += chr((ord(char)+2 - ord('a')) % 26 + ord('A'))\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result", "is_solved": false, "iteration": 7, "prompt_tokens": 5793, "completion_tokens": 976, "duration": 30.70518159866333, "task_id": "HumanEval/93", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        if gpa > 3.7:\n            return 'A'\n        if gpa > 3.3:\n            return 'A-'\n        if gpa > 3.0:\n            return 'B+'\n        if gpa > 2.7:\n            return 'B'\n        if gpa > 2.3:\n            return 'B-'\n        if gpa > 2.0:\n            return 'C+'\n        if gpa > 1.7:\n            return 'C'\n        if gpa > 1.3:\n            return 'C-'\n        if gpa > 1.0:\n            return 'D+'\n        if gpa > 0.7:\n            return 'D'\n        if gpa >= 0.0:\n            return 'D-'\n        return 'E'\n\n    return [grade(g) for g in grades]", "is_solved": false, "iteration": 7, "prompt_tokens": 8771, "completion_tokens": 2059, "duration": 57.46260666847229, "task_id": "HumanEval/81", "result": "failed: ", "passed": false}
{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 60, "duration": 3.7184066772460938, "task_id": "HumanEval/114", "result": "passed", "passed": true}
{"generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 220, "completion_tokens": 28, "duration": 3.368082284927368, "task_id": "HumanEval/116", "result": "passed", "passed": true}
{"generated_code": "def select_words(s, n):\n    if not s:\n        return []\n    words = s.split()\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = []\n    for word in words:\n        if len([c for c in word if c in consonants]) == n:\n            result.append(word)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 86, "duration": 4.235817909240723, "task_id": "HumanEval/117", "result": "passed", "passed": true}
{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 98, "duration": 3.4160122871398926, "task_id": "HumanEval/118", "result": "passed", "passed": true}
{"generated_code": "def get_odd_collatz(n):\n    collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    \n    return sorted(list(set([num for num in collatz if num % 2 != 0])))", "is_solved": true, "iteration": 0, "prompt_tokens": 281, "completion_tokens": 85, "duration": 3.982318878173828, "task_id": "HumanEval/123", "result": "passed", "passed": true}
{"generated_code": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n        return True\n    except:\n        return False", "is_solved": true, "iteration": 0, "prompt_tokens": 313, "completion_tokens": 149, "duration": 4.932066202163696, "task_id": "HumanEval/124", "result": "passed", "passed": true}
{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        product *= num // abs(num) if num != 0 else 0\n        sum_magnitudes += abs(num)\n    return product * sum_magnitudes", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 75, "duration": 3.701418399810791, "task_id": "HumanEval/128", "result": "passed", "passed": true}
{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(num) ** 2 for num in lst)", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 28, "duration": 3.7298011779785156, "task_id": "HumanEval/133", "result": "passed", "passed": true}
{"generated_code": "def largest_smallest_integers(lst):\n    negative_integers = [num for num in lst if num < 0]\n    positive_integers = [num for num in lst if num > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)", "is_solved": true, "iteration": 0, "prompt_tokens": 188, "completion_tokens": 90, "duration": 4.1900529861450195, "task_id": "HumanEval/136", "result": "passed", "passed": true}
{"generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        fact = 1\n        for j in range(1, i+1):\n            fact *= j\n        result *= fact\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 60, "duration": 5.106764793395996, "task_id": "HumanEval/139", "result": "passed", "passed": true}
{"generated_code": "def file_name_check(file_name):\n    if file_name.count(\".\") != 1:\n        return 'No'\n    file_parts = file_name.split(\".\")\n    if len(file_parts) != 2:\n        return 'No'\n    if not file_parts[0] or not file_parts[0][0].isalpha():\n        return 'No'\n    if len([c for c in file_parts[0] if c.isdigit()]) > 3:\n        return 'No'\n    if file_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 130, "duration": 2.550602436065674, "task_id": "HumanEval/141", "result": "passed", "passed": true}
{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "is_solved": true, "iteration": 0, "prompt_tokens": 197, "completion_tokens": 94, "duration": 3.0800018310546875, "task_id": "HumanEval/143", "result": "passed", "passed": true}
{"generated_code": "from fractions import Fraction\n\ndef simplify(x, n):\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 34, "duration": 3.2925808429718018, "task_id": "HumanEval/144", "result": "passed", "passed": true}
{"generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 81, "duration": 4.610205888748169, "task_id": "HumanEval/146", "result": "passed", "passed": true}
{"generated_code": "def list_sort(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 237, "completion_tokens": 39, "duration": 2.81819486618042, "task_id": "HumanEval/149", "result": "failed: name 'sorted_list_sum' is not defined", "passed": false}
{"generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 78, "duration": 4.968517303466797, "task_id": "HumanEval/150", "result": "passed", "passed": true}
{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int))", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 39, "duration": 0.860107421875, "task_id": "HumanEval/151", "result": "passed", "passed": true}
{"generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.6411662101745605, "task_id": "HumanEval/152", "result": "passed", "passed": true}
{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def calc_strength(ext):\n        return sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\n    \n    max_strength = float('-inf')\n    strongest_ext = \"\"\n    \n    for ext in extensions:\n        strength = calc_strength(ext)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_ext = ext\n    \n    return f\"{class_name}.{strongest_ext}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 105, "duration": 1.6746180057525635, "task_id": "HumanEval/153", "result": "passed", "passed": true}
{"generated_code": "def even_odd_count(num):\n    even_count = len([i for i in str(abs(num)) if int(i) % 2 == 0])\n    odd_count = len([i for i in str(abs(num)) if int(i) % 2 != 0])\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 115, "completion_tokens": 65, "duration": 2.838606119155884, "task_id": "HumanEval/155", "result": "passed", "passed": true}
{"generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    \n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    \n    return result.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 143, "duration": 2.278186321258545, "task_id": "HumanEval/156", "result": "passed", "passed": true}
{"generated_code": "def right_angle_triangle(a, b, c):\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 63, "duration": 1.2231793403625488, "task_id": "HumanEval/157", "result": "passed", "passed": true}
{"generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n    \n    max_unique_chars = 0\n    max_word = \"\"\n    \n    for word in words:\n        curr_unique_chars = unique_chars(word)\n        if curr_unique_chars > max_unique_chars or (curr_unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = curr_unique_chars\n            max_word = word\n    \n    return max_word", "is_solved": true, "iteration": 0, "prompt_tokens": 170, "completion_tokens": 95, "duration": 5.631035089492798, "task_id": "HumanEval/158", "result": "passed", "passed": true}
{"generated_code": "def eat(number, need, remaining):\n    eaten = number + min(need, remaining)\n    left = max(remaining - need, 0)\n    return [eaten, left]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 43, "duration": 2.6561062335968018, "task_id": "HumanEval/159", "result": "passed", "passed": true}
{"generated_code": "def do_algebra(operators, operands):\n    expression = str(operands[0])\n    for i in range(len(operators)):\n        expression += operators[i] + str(operands[i + 1])\n    return eval(expression)", "is_solved": true, "iteration": 0, "prompt_tokens": 257, "completion_tokens": 51, "duration": 1.1593248844146729, "task_id": "HumanEval/160", "result": "passed", "passed": true}
{"generated_code": "def solve(s):\n    result = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not has_letter:\n        return s[::-1]\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 81, "duration": 3.5644960403442383, "task_id": "HumanEval/161", "result": "passed", "passed": true}
{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 36, "duration": 0.8799667358398438, "task_id": "HumanEval/162", "result": "passed", "passed": true}
{"generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n# Example\nn = 5\nprint(get_max_triples(n))", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 119, "duration": 5.007686138153076, "task_id": "HumanEval/147", "result": "passed", "passed": true}
{"generated_code": "def solution(lst):\n    return sum(num for i, num in enumerate(lst) if i % 2 == 0 and num % 2 != 0)", "is_solved": true, "iteration": 2, "prompt_tokens": 1826, "completion_tokens": 224, "duration": 9.265501976013184, "task_id": "HumanEval/121", "result": "passed", "passed": true}
{"generated_code": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k][::-1]", "is_solved": true, "iteration": 2, "prompt_tokens": 2960, "completion_tokens": 188, "duration": 10.815344095230103, "task_id": "HumanEval/120", "result": "passed", "passed": true}
{"generated_code": "def can_arrange(arr):\n    index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            index = i\n    return index", "is_solved": true, "iteration": 2, "prompt_tokens": 1733, "completion_tokens": 292, "duration": 13.543411254882812, "task_id": "HumanEval/135", "result": "passed", "passed": true}
{"generated_code": "import math\n\ndef max_fill(grid, capacity):\n    total_water = 0\n    for row in grid:\n        well_water = sum(row)\n        total_water += math.ceil(well_water / capacity)\n    return total_water", "is_solved": true, "iteration": 3, "prompt_tokens": 3504, "completion_tokens": 317, "duration": 13.367556095123291, "task_id": "HumanEval/115", "result": "passed", "passed": true}
{"generated_code": "def add_elements(arr, k):\n    return sum(arr[:k])", "is_solved": false, "iteration": 7, "prompt_tokens": 5541, "completion_tokens": 538, "duration": 26.156835317611694, "task_id": "HumanEval/122", "result": "failed: ", "passed": false}
{"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(x) if d.isdigit()), nums.index(x)))", "is_solved": false, "iteration": 7, "prompt_tokens": 6976, "completion_tokens": 516, "duration": 26.898329257965088, "task_id": "HumanEval/145", "result": "failed: ", "passed": false}
{"generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "is_solved": false, "iteration": 7, "prompt_tokens": 5018, "completion_tokens": 644, "duration": 27.61268639564514, "task_id": "HumanEval/163", "result": "failed: Test 1", "passed": false}
{"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a*2) or len(a) == len(b) and b in (a[::-1]*2)", "is_solved": false, "iteration": 7, "prompt_tokens": 5034, "completion_tokens": 637, "duration": 28.144720792770386, "task_id": "HumanEval/154", "result": "failed: test #1", "passed": false}
{"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "is_solved": false, "iteration": 7, "prompt_tokens": 5392, "completion_tokens": 696, "duration": 26.224969625473022, "task_id": "HumanEval/125", "result": "failed: ", "passed": false}
{"generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)) and len(set(lst)) == len(lst)", "is_solved": false, "iteration": 7, "prompt_tokens": 8224, "completion_tokens": 696, "duration": 32.080201148986816, "task_id": "HumanEval/126", "result": "failed: This prints if this assert fails 7 (good for debugging!)", "passed": false}
{"generated_code": "def is_equal_to_sum_even(n):\n    count = 0\n    for i in range(2, n//2 + 1, 2):\n        if n - i in range(2, n, 2):\n            count += 1\n    return count == 2", "is_solved": false, "iteration": 7, "prompt_tokens": 4955, "completion_tokens": 818, "duration": 33.74124884605408, "task_id": "HumanEval/138", "result": "failed: ", "passed": false}
{"generated_code": "def digits(n):\n    prod = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0 and int(digit) != 0:\n            prod *= int(digit)\n    return prod if prod != 1 else 0", "is_solved": false, "iteration": 7, "prompt_tokens": 4286, "completion_tokens": 664, "duration": 26.289364337921143, "task_id": "HumanEval/131", "result": "failed: ", "passed": false}
{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    last_char = txt.strip()[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt.rstrip().split()[-1]) == 1:\n        return True\n    return False", "is_solved": false, "iteration": 7, "prompt_tokens": 5922, "completion_tokens": 734, "duration": 29.79550075531006, "task_id": "HumanEval/134", "result": "failed: ", "passed": false}
{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 and (i+1) % 3 != 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 7, "prompt_tokens": 8207, "completion_tokens": 748, "duration": 30.528583765029907, "task_id": "HumanEval/142", "result": "failed: ", "passed": false}
{"generated_code": "def compare_one(a, b):\n    if a == b:\n        return None\n    if (isinstance(a, (int, float)) and isinstance(b, (int, float))) or (isinstance(a, str) and isinstance(b, str)):\n        return a if a > b else b\n    return str(a) if isinstance(a, str) else str(b)", "is_solved": false, "iteration": 7, "prompt_tokens": 5452, "completion_tokens": 870, "duration": 29.35641074180603, "task_id": "HumanEval/137", "result": "failed: ", "passed": false}
{"generated_code": "def fix_spaces(text):\n    result = []\n    count = 0\n    for c in text:\n        if c == ' ':\n            count += 1\n            if count > 2:\n                result.append('-')\n            else:\n                result.append('_')\n        else:\n            result.append(c)\n            count = 0\n    return ''.join(result)", "is_solved": false, "iteration": 7, "prompt_tokens": 5262, "completion_tokens": 893, "duration": 32.44797086715698, "task_id": "HumanEval/140", "result": "failed: This prints if this assert fails 4 (good for debugging!)", "passed": false}
{"generated_code": "def match_parens(lst):\n    total_open = lst[0].count('(') + lst[1].count('(')\n    total_close = lst[0].count(')') + lst[1].count(')')\n    return 'Yes' if total_open == total_close and lst[0][0] != ')' and lst[1][-1] != '(' else 'No'", "is_solved": false, "iteration": 7, "prompt_tokens": 6930, "completion_tokens": 874, "duration": 32.68271803855896, "task_id": "HumanEval/119", "result": "failed: ", "passed": false}
{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    else:\n        return tuple(planets[end_idx+1:start_idx][::-1])", "is_solved": false, "iteration": 7, "prompt_tokens": 6919, "completion_tokens": 1209, "duration": 30.895676136016846, "task_id": "HumanEval/148", "result": "failed: Fourth test error: ('Uranus', 'Saturn', 'Jupiter', 'Mars', 'Earth')", "passed": false}
{"generated_code": "def tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    else:\n        sequence = [1, 3]\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n        return sequence", "is_solved": false, "iteration": 7, "prompt_tokens": 10921, "completion_tokens": 1148, "duration": 36.638290882110596, "task_id": "HumanEval/130", "result": "failed: ", "passed": false}
{"generated_code": "def is_nested(string):\n    stack = []\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack[-1] != '[':\n                continue\n            stack.pop()\n            if stack:  # Check if there is a nested bracket in the subsequence\n                return True\n            \n    return False", "is_solved": false, "iteration": 7, "prompt_tokens": 7699, "completion_tokens": 1485, "duration": 43.52276015281677, "task_id": "HumanEval/132", "result": "failed: ", "passed": false}
{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    length = intersection_end - intersection_start + 1\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 7, "prompt_tokens": 9323, "completion_tokens": 1526, "duration": 42.23778557777405, "task_id": "HumanEval/127", "result": "failed: ", "passed": false}
{"generated_code": "def minPath(grid, k):\n    def dfs(x, y, path_len, path):\n        if path_len == k:\n            return path\n\n        min_path = []\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and not visited[nx][ny]:\n                visited[nx][ny] = True\n                new_path = dfs(nx, ny, path_len + 1, path + [grid[nx][ny]])\n                if new_path and (not min_path or new_path < min_path):\n                    min_path = new_path\n                visited[nx][ny] = False\n\n        return min_path\n\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    result = []\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            visited[i][j] = True\n            path = dfs(i, j, 1, [grid[i][j]])\n            if path and (not result or path < result):\n                result = path\n            visited[i][j] = False\n\n    return result", "is_solved": false, "iteration": 7, "prompt_tokens": 18248, "completion_tokens": 2981, "duration": 68.69210839271545, "task_id": "HumanEval/129", "result": "failed: ", "passed": false}
{"generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 61, "duration": 3.7879819869995117, "task_id": "HumanEval/0", "result": "passed", "passed": true}
{"generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    temp = ''\n    for char in paren_string:\n        if char == '(':\n            stack.append('(')\n            temp += '('\n        elif char == ')':\n            stack.pop()\n            temp += ')'\n            if not stack:\n                result.append(temp)\n                temp = ''\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 165, "completion_tokens": 86, "duration": 4.6310436725616455, "task_id": "HumanEval/1", "result": "passed", "passed": true}
{"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": true, "iteration": 0, "prompt_tokens": 135, "completion_tokens": 21, "duration": 3.479076385498047, "task_id": "HumanEval/2", "result": "passed", "passed": true}
{"generated_code": "def below_zero(operations):\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 37, "duration": 3.4491524696350098, "task_id": "HumanEval/3", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 49, "duration": 3.9055840969085693, "task_id": "HumanEval/4", "result": "passed", "passed": true}
{"generated_code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 56, "duration": 3.8390955924987793, "task_id": "HumanEval/5", "result": "passed", "passed": true}
{"generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                if depth > max_depth:\n                    max_depth = depth\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 97, "duration": 4.703549146652222, "task_id": "HumanEval/6", "result": "passed", "passed": true}
{"generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "is_solved": true, "iteration": 0, "prompt_tokens": 143, "completion_tokens": 35, "duration": 3.61719012260437, "task_id": "HumanEval/7", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    maximum = float('-inf')\n    for num in numbers:\n        maximum = max(maximum, num)\n        result.append(maximum)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 150, "completion_tokens": 54, "duration": 3.7376515865325928, "task_id": "HumanEval/9", "result": "passed", "passed": true}
{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 41, "duration": 3.579258441925049, "task_id": "HumanEval/11", "result": "passed", "passed": true}
{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 42, "duration": 3.5393548011779785, "task_id": "HumanEval/13", "result": "passed", "passed": true}
{"generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 32, "duration": 3.6700150966644287, "task_id": "HumanEval/14", "result": "passed", "passed": true}
{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 27, "duration": 3.5287091732025146, "task_id": "HumanEval/15", "result": "passed", "passed": true}
{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 3.326807737350464, "task_id": "HumanEval/16", "result": "passed", "passed": true}
{"generated_code": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    return [durations[note] for note in notes]", "is_solved": true, "iteration": 0, "prompt_tokens": 222, "completion_tokens": 59, "duration": 3.708634614944458, "task_id": "HumanEval/17", "result": "passed", "passed": true}
{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 74, "duration": 3.952439308166504, "task_id": "HumanEval/18", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_map[x])\n    return ' '.join(sorted_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 103, "duration": 4.493385076522827, "task_id": "HumanEval/19", "result": "passed", "passed": true}
{"generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    \n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    \n    return closest_pair", "is_solved": true, "iteration": 0, "prompt_tokens": 216, "completion_tokens": 99, "duration": 4.436337947845459, "task_id": "HumanEval/20", "result": "passed", "passed": true}
{"generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 53, "duration": 3.686016082763672, "task_id": "HumanEval/21", "result": "passed", "passed": true}
{"generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 31, "duration": 3.3969316482543945, "task_id": "HumanEval/22", "result": "passed", "passed": true}
{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 3.471254587173462, "task_id": "HumanEval/23", "result": "passed", "passed": true}
{"generated_code": "def largest_divisor(n: int) -> int:\n    return max([i for i in range(1, n) if n % i == 0])", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 37, "duration": 3.5331480503082275, "task_id": "HumanEval/24", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 70, "duration": 4.299970865249634, "task_id": "HumanEval/25", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 38, "duration": 3.51297664642334, "task_id": "HumanEval/26", "result": "passed", "passed": true}
{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 36, "duration": 3.3321757316589355, "task_id": "HumanEval/27", "result": "passed", "passed": true}
{"generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 20, "duration": 3.289001703262329, "task_id": "HumanEval/28", "result": "passed", "passed": true}
{"generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 34, "duration": 3.4382829666137695, "task_id": "HumanEval/29", "result": "passed", "passed": true}
{"generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 25, "duration": 3.446502208709717, "task_id": "HumanEval/30", "result": "passed", "passed": true}
{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 57, "duration": 3.4670627117156982, "task_id": "HumanEval/31", "result": "passed", "passed": true}
{"generated_code": "def find_zero(xs: list):\n    return -xs[0] / xs[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 23, "duration": 3.333569288253784, "task_id": "HumanEval/32", "result": "failed: name 'poly' is not defined", "passed": false}
{"generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 17, "duration": 3.2383384704589844, "task_id": "HumanEval/34", "result": "passed", "passed": true}
{"generated_code": "def max_element(l: list):\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 16, "duration": 3.126251459121704, "task_id": "HumanEval/35", "result": "passed", "passed": true}
{"generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iteration": 0, "prompt_tokens": 208, "completion_tokens": 162, "duration": 4.739898920059204, "task_id": "HumanEval/38", "result": "passed", "passed": true}
{"generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 1:\n            return n\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    i = 0\n    while count < n:\n        i += 1\n        num = fibonacci(i)\n        if is_prime(num):\n            count += 1\n    return num", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 163, "duration": 4.843162536621094, "task_id": "HumanEval/39", "result": "passed", "passed": true}
{"generated_code": "def triples_sum_to_zero(l: list):\n    return any(sum((x, y, z)) == 0 for x in l for y in l for z in l if x != y != z)", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 46, "duration": 5.7354347705841064, "task_id": "HumanEval/40", "result": "passed", "passed": true}
{"generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 23, "duration": 5.429662704467773, "task_id": "HumanEval/42", "result": "passed", "passed": true}
{"generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 42, "duration": 4.737221002578735, "task_id": "HumanEval/43", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 17, "duration": 6.2418904304504395, "task_id": "HumanEval/45", "result": "passed", "passed": true}
{"generated_code": "def fib4(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    fib_list = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib_list.append(fib_list[-1] + fib_list[-2] + fib_list[-3] + fib_list[-4])\n    \n    return fib_list[-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 116, "duration": 5.7989301681518555, "task_id": "HumanEval/46", "result": "passed", "passed": true}
{"generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "is_solved": true, "iteration": 0, "prompt_tokens": 125, "completion_tokens": 61, "duration": 1.5516915321350098, "task_id": "HumanEval/47", "result": "passed", "passed": true}
{"generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 20, "duration": 4.236940145492554, "task_id": "HumanEval/48", "result": "passed", "passed": true}
{"generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 25, "duration": 5.464749574661255, "task_id": "HumanEval/49", "result": "passed", "passed": true}
{"generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": true, "iteration": 0, "prompt_tokens": 140, "completion_tokens": 82, "duration": 6.010514259338379, "task_id": "HumanEval/50", "result": "passed", "passed": true}
{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in ['a', 'e', 'i', 'o', 'u']])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 42, "duration": 5.764646291732788, "task_id": "HumanEval/51", "result": "passed", "passed": true}
{"generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 26, "duration": 4.350031137466431, "task_id": "HumanEval/52", "result": "passed", "passed": true}
{"generated_code": "def add(x: int, y: int):\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 20, "duration": 5.648186683654785, "task_id": "HumanEval/53", "result": "passed", "passed": true}
{"generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 38, "duration": 6.5305821895599365, "task_id": "HumanEval/55", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 64, "duration": 5.029238224029541, "task_id": "HumanEval/56", "result": "passed", "passed": true}
{"generated_code": "def sort_third(l: list):\n    sorted_values = sorted([l[i] for i in range(len(l)) if i % 3 == 0])\n    result = l.copy()\n    for i in range(len(l)):\n        if i % 3 == 0:\n            result[i] = sorted_values.pop(0)\n    return result", "is_solved": true, "iteration": 1, "prompt_tokens": 1657, "completion_tokens": 198, "duration": 7.991580963134766, "task_id": "HumanEval/33", "result": "passed", "passed": true}
{"generated_code": "def change_base(x: int, base: int):\n    def to_base(n, b):\n        if n == 0:\n            return '0'\n        digits = ''\n        while n > 0:\n            digits = str(n % b) + digits\n            n //= b\n        return digits\n\n    return to_base(x, base)", "is_solved": true, "iteration": 1, "prompt_tokens": 995, "completion_tokens": 166, "duration": 8.507539749145508, "task_id": "HumanEval/44", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        product = 1\n        for num in numbers:\n            product *= num\n        return sum(numbers), product", "is_solved": true, "iteration": 1, "prompt_tokens": 1057, "completion_tokens": 244, "duration": 8.70676875114441, "task_id": "HumanEval/8", "result": "passed", "passed": true}
{"generated_code": "def car_race_collision(n: int):\n    return n**2", "is_solved": true, "iteration": 5, "prompt_tokens": 3368, "completion_tokens": 304, "duration": 18.024590253829956, "task_id": "HumanEval/41", "result": "passed", "passed": true}
{"generated_code": "def sort_even(l: list):\n    even_indices = sorted([idx for idx in range(len(l)) if idx % 2 == 0], key=lambda x: l[x])\n    sorted_even_values = sorted([l[idx] for idx in even_indices])\n    result = [sorted_even_values.pop(0) if idx in even_indices else val for idx, val in enumerate(l)]\n    return result", "is_solved": true, "iteration": 3, "prompt_tokens": 2751, "completion_tokens": 426, "duration": 14.525699853897095, "task_id": "HumanEval/37", "result": "passed", "passed": true}
{"generated_code": "def same_chars(s0: str, s1: str):\n    from collections import Counter\n    return Counter(s0) == Counter(s1)", "is_solved": false, "iteration": 7, "prompt_tokens": 5189, "completion_tokens": 480, "duration": 24.78128457069397, "task_id": "HumanEval/54", "result": "failed: ", "passed": false}
{"generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return min(strings, key=lambda x: (len(x), x))", "is_solved": false, "iteration": 7, "prompt_tokens": 4155, "completion_tokens": 551, "duration": 24.050936222076416, "task_id": "HumanEval/12", "result": "failed: ", "passed": false}
{"generated_code": "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    \n    for i in range(len(string), 0, -1):\n        if string[:i] == string[:i][::-1]:\n            suffix = string[i:]\n            if suffix == '':\n                return string\n            return string + suffix[::-1]", "is_solved": false, "iteration": 7, "prompt_tokens": 5021, "completion_tokens": 778, "duration": 26.742932558059692, "task_id": "HumanEval/10", "result": "failed: ", "passed": false}
{"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "is_solved": false, "iteration": 7, "prompt_tokens": 5105, "completion_tokens": 758, "duration": 32.75009202957153, "task_id": "HumanEval/36", "result": "failed: ", "passed": false}
{"generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 54, "duration": 5.898924827575684, "task_id": "HumanEval/57", "result": "passed", "passed": true}
{"generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 29, "duration": 4.415369749069214, "task_id": "HumanEval/58", "result": "passed", "passed": true}
{"generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 50, "duration": 4.908264875411987, "task_id": "HumanEval/59", "result": "passed", "passed": true}
{"generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 22, "duration": 4.242558002471924, "task_id": "HumanEval/60", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str):\n    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 68, "duration": 6.116909980773926, "task_id": "HumanEval/61", "result": "passed", "passed": true}
{"generated_code": "def derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 28, "duration": 3.1749978065490723, "task_id": "HumanEval/62", "result": "passed", "passed": true}
{"generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 72, "duration": 5.622449636459351, "task_id": "HumanEval/63", "result": "passed", "passed": true}
{"generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 5.672107219696045, "task_id": "HumanEval/66", "result": "passed", "passed": true}
{"generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 37, "duration": 5.641664266586304, "task_id": "HumanEval/67", "result": "passed", "passed": true}
{"generated_code": "def pluck(arr):\n    evens = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens, key=lambda x: (x[0], x[1]))\n    return [min_even[0], min_even[1]]", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 78, "duration": 5.097854852676392, "task_id": "HumanEval/68", "result": "passed", "passed": true}
{"generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 44, "duration": 5.86173415184021, "task_id": "HumanEval/70", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 92, "duration": 6.1586079597473145, "task_id": "HumanEval/71", "result": "passed", "passed": true}
{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 5.8480916023254395, "task_id": "HumanEval/72", "result": "passed", "passed": true}
{"generated_code": "def smallest_change(arr):\n    length = len(arr)\n    changes = 0\n    for i in range(length // 2):\n        if arr[i] != arr[length - i - 1]:\n            changes += 1\n    return changes", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 55, "duration": 1.1043100357055664, "task_id": "HumanEval/73", "result": "passed", "passed": true}
{"generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or (n != 1 and x % n == 0 and is_simple_power(x // n, n)))", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 52, "duration": 4.641237735748291, "task_id": "HumanEval/76", "result": "passed", "passed": true}
{"generated_code": "def hex_key(num):\n    prime_digits = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 60, "duration": 3.5844950675964355, "task_id": "HumanEval/78", "result": "passed", "passed": true}
{"generated_code": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal)[2:] + 'db'", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 25, "duration": 4.3092145919799805, "task_id": "HumanEval/79", "result": "passed", "passed": true}
{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 70, "duration": 3.4724762439727783, "task_id": "HumanEval/82", "result": "passed", "passed": true}
{"generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 21, "duration": 4.153321743011475, "task_id": "HumanEval/84", "result": "passed", "passed": true}
{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 105, "completion_tokens": 34, "duration": 2.8639819622039795, "task_id": "HumanEval/85", "result": "passed", "passed": true}
{"generated_code": "def anti_shuffle(s):\n    words = s.split()\n    result = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        result.append(ordered_word)\n    return ' '.join(result)", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 48, "duration": 4.981414556503296, "task_id": "HumanEval/86", "result": "passed", "passed": true}
{"generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 68, "duration": 4.027481555938721, "task_id": "HumanEval/87", "result": "passed", "passed": true}
{"generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            base = ord('a') if char.islower() else ord('A')\n            result += chr((ord(char) - base + 2 * 2) % 26 + base)\n        else:\n            result += char\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 76, "duration": 3.5757226943969727, "task_id": "HumanEval/89", "result": "passed", "passed": true}
{"generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 52, "duration": 4.791964769363403, "task_id": "HumanEval/90", "result": "passed", "passed": true}
{"generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences if sentence]\n    \n    count = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0] == \"I\":\n            count += 1\n    \n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 71, "duration": 3.5930309295654297, "task_id": "HumanEval/91", "result": "passed", "passed": true}
{"generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 54, "duration": 4.871682405471802, "task_id": "HumanEval/92", "result": "passed", "passed": true}
{"generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    prime_values = [num for num in lst if is_prime(num)]\n    largest_prime = max(prime_values)\n    \n    return sum_of_digits(largest_prime)", "is_solved": true, "iteration": 0, "prompt_tokens": 336, "completion_tokens": 120, "duration": 5.921804666519165, "task_id": "HumanEval/94", "result": "failed: name 'skjkasdkd' is not defined", "passed": false}
{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 87, "duration": 3.5806374549865723, "task_id": "HumanEval/96", "result": "passed", "passed": true}
{"generated_code": "def multiply(a, b):\n    return int(str(abs(a) % 10)) * int(str(abs(b) % 10))", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 27, "duration": 4.40070652961731, "task_id": "HumanEval/97", "result": "passed", "passed": true}
{"generated_code": "def count_upper(s):\n    return sum(1 for i in range(0, len(s), 2) if s[i] in 'AEIOU')", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 37, "duration": 4.357618093490601, "task_id": "HumanEval/98", "result": "passed", "passed": true}
{"generated_code": "def closest_integer(value):\n    value = float(value)\n    return int(value + 0.5) if value > 0 else int(value - 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 39, "duration": 4.614492893218994, "task_id": "HumanEval/99", "result": "passed", "passed": true}
{"generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(',', ' ').split()]", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 25, "duration": 2.786447525024414, "task_id": "HumanEval/101", "result": "passed", "passed": true}
{"generated_code": "def choose_num(x, y):\n    return max([i for i in range(x, y+1) if i % 2 == 0] + [-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 39, "duration": 2.6726202964782715, "task_id": "HumanEval/102", "result": "passed", "passed": true}
{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m-n+1))\n    return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 46, "duration": 3.154949903488159, "task_id": "HumanEval/103", "result": "passed", "passed": true}
{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 33, "duration": 2.7222673892974854, "task_id": "HumanEval/104", "result": "passed", "passed": true}
{"generated_code": "def by_length(arr):\n    nums = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    arr = [x for x in arr if 1 <= x <= 9]\n    arr.sort()\n    arr.reverse()\n    return [nums[x-1] for x in arr]", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 78, "duration": 3.382270097732544, "task_id": "HumanEval/105", "result": "passed", "passed": true}
{"generated_code": "def f(n):\n    def factorial(num):\n        if num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    \n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 92, "duration": 1.7012665271759033, "task_id": "HumanEval/106", "result": "passed", "passed": true}
{"generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count, odd_count = 0, 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 98, "duration": 3.75720477104187, "task_id": "HumanEval/107", "result": "passed", "passed": true}
{"generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    sorted_arr = sorted(arr)\n    for _ in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n        \n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 63, "duration": 3.3378124237060547, "task_id": "HumanEval/109", "result": "passed", "passed": true}
{"generated_code": "def reverse_delete(s, c):\n    result = \"\".join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 508, "completion_tokens": 78, "duration": 4.2718048095703125, "task_id": "HumanEval/112", "result": "passed", "passed": true}
{"generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 94, "completion_tokens": 64, "duration": 1.0854251384735107, "task_id": "HumanEval/83", "result": "passed", "passed": true}
{"generated_code": "def sort_array(array):\n    sorted_array = sorted(array)\n    if not array:\n        return []\n    elif (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array", "is_solved": true, "iteration": 1, "prompt_tokens": 1318, "completion_tokens": 161, "duration": 7.516366004943848, "task_id": "HumanEval/88", "result": "passed", "passed": true}
{"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(1 for num in lst1 if num % 2 != 0) <= sum(1 for num in lst2 if num % 2 == 0) else \"NO\"", "is_solved": true, "iteration": 1, "prompt_tokens": 1342, "completion_tokens": 164, "duration": 7.886589527130127, "task_id": "HumanEval/110", "result": "passed", "passed": true}
{"generated_code": "def histogram(test):\n    if not test:\n        return {}\n    \n    lst = test.split()\n    hist = {}\n    for letter in lst:\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n    return {k: v for k, v in hist.items() if v == max_count}", "is_solved": true, "iteration": 1, "prompt_tokens": 1271, "completion_tokens": 259, "duration": 10.444136142730713, "task_id": "HumanEval/111", "result": "passed", "passed": true}
{"generated_code": "def search(lst):\n    from collections import Counter\n    counts = Counter(lst)\n    result = -1\n    for num, freq in counts.items():\n        if num > 0 and freq >= num:\n            result = max(result, num)\n    return result", "is_solved": true, "iteration": 2, "prompt_tokens": 6156, "completion_tokens": 289, "duration": 11.851685762405396, "task_id": "HumanEval/69", "result": "passed", "passed": true}
{"generated_code": "def iscube(a):\n    return int(a**(1/3) + 0.00000001)**3 == a if a >= 0 else int((-a)**(1/3) + 0.00000001)**3 == -a", "is_solved": true, "iteration": 3, "prompt_tokens": 2130, "completion_tokens": 301, "duration": 15.158191442489624, "task_id": "HumanEval/77", "result": "passed", "passed": true}
{"generated_code": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    \n    lowercase_keys = all(str(key).islower() for key in dict.keys() if isinstance(key, str))\n    uppercase_keys = all(str(key).isupper() for key in dict.keys() if isinstance(key, str))\n    \n    return (lowercase_keys or uppercase_keys) and all(isinstance(key, str) for key in dict.keys())", "is_solved": true, "iteration": 2, "prompt_tokens": 2160, "completion_tokens": 356, "duration": 16.497881412506104, "task_id": "HumanEval/95", "result": "passed", "passed": true}
{"generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(word) for word in lst1)\n    total_chars_lst2 = sum(len(word) for word in lst2)\n\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    else:\n        return lst2 if total_chars_lst2 < total_chars_lst1 else lst1", "is_solved": true, "iteration": 4, "prompt_tokens": 4265, "completion_tokens": 508, "duration": 22.442690134048462, "task_id": "HumanEval/74", "result": "passed", "passed": true}
{"generated_code": "def is_happy(s):\n    return len(s) >= 3 and all(s[i] != s[i+1] != s[i+2] and s[i] != s[i+2] for i in range(len(s)-2))", "is_solved": true, "iteration": 6, "prompt_tokens": 4310, "completion_tokens": 555, "duration": 19.921462774276733, "task_id": "HumanEval/80", "result": "passed", "passed": true}
{"generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 2)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones", "is_solved": true, "iteration": 5, "prompt_tokens": 4422, "completion_tokens": 669, "duration": 26.129144430160522, "task_id": "HumanEval/100", "result": "passed", "passed": true}
{"generated_code": "def vowels_count(s):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    \n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n        elif char.lower() == 'y' and s.index(char) == len(s) - 1:\n            count += 1\n    \n    return count", "is_solved": true, "iteration": 6, "prompt_tokens": 4914, "completion_tokens": 1000, "duration": 32.53410482406616, "task_id": "HumanEval/64", "result": "passed", "passed": true}
{"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)}n the str{i+1}ng {s} of the {i+1}nput.\" for i, s in enumerate(lst)]", "is_solved": false, "iteration": 7, "prompt_tokens": 6570, "completion_tokens": 710, "duration": 26.5055148601532, "task_id": "HumanEval/113", "result": "failed: Test 1", "passed": false}
{"generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        sum_digits = sum(int(digit) for digit in str(num) if digit.isdigit())\n        if num < 0:\n            sum_digits *= -1\n        if sum_digits > 0:\n            count += 1\n    return count", "is_solved": false, "iteration": 7, "prompt_tokens": 5881, "completion_tokens": 731, "duration": 28.105159282684326, "task_id": "HumanEval/108", "result": "failed: ", "passed": false}
{"generated_code": "def encode(message):\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                result += chr((ord(char)+2 - ord('a')) % 26 + ord('A'))\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result", "is_solved": false, "iteration": 7, "prompt_tokens": 5458, "completion_tokens": 878, "duration": 26.536311388015747, "task_id": "HumanEval/93", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    \n    if shift == 0:\n        return x_str\n    \n    shifted_num = x_str[-shift:] + x_str[:-shift]\n    \n    if x_str.startswith('0') and shifted_num[0] != '0':\n        return shifted_num.lstrip('0')\n    \n    return shifted_num", "is_solved": false, "iteration": 7, "prompt_tokens": 4921, "completion_tokens": 1009, "duration": 34.23424220085144, "task_id": "HumanEval/65", "result": "failed: ", "passed": false}
{"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    primes = []\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            primes.append(i)\n    \n    if len(primes) != 3:\n        return False\n\n    product = 1\n    for prime in primes:\n        product *= prime\n    \n    return product == a", "is_solved": false, "iteration": 7, "prompt_tokens": 6523, "completion_tokens": 1470, "duration": 44.67821288108826, "task_id": "HumanEval/75", "result": "failed: ", "passed": false}
{"generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        if gpa > 3.7:\n            return 'A'\n        if gpa > 3.3:\n            return 'A-'\n        if gpa > 3.0:\n            return 'B+'\n        if gpa > 2.7:\n            return 'B'\n        if gpa > 2.3:\n            return 'B-'\n        if gpa > 2.0:\n            return 'C+'\n        if gpa > 1.7:\n            return 'C'\n        if gpa > 1.3:\n            return 'C-'\n        if gpa > 1.0:\n            return 'D+'\n        if gpa > 0.7:\n            return 'D'\n        if gpa >= 0.0:\n            return 'D-'\n        return 'E'\n\n    return [grade(g) for g in grades]", "is_solved": false, "iteration": 7, "prompt_tokens": 8789, "completion_tokens": 2069, "duration": 54.21287512779236, "task_id": "HumanEval/81", "result": "failed: ", "passed": false}
{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 60, "duration": 3.7184066772460938, "task_id": "HumanEval/114", "result": "passed", "passed": true}
{"generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 220, "completion_tokens": 28, "duration": 3.368082284927368, "task_id": "HumanEval/116", "result": "passed", "passed": true}
{"generated_code": "def select_words(s, n):\n    if not s:\n        return []\n    words = s.split()\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = []\n    for word in words:\n        if len([c for c in word if c in consonants]) == n:\n            result.append(word)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 86, "duration": 4.235817909240723, "task_id": "HumanEval/117", "result": "passed", "passed": true}
{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 98, "duration": 3.4160122871398926, "task_id": "HumanEval/118", "result": "passed", "passed": true}
{"generated_code": "def get_odd_collatz(n):\n    collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    \n    return sorted(list(set([num for num in collatz if num % 2 != 0])))", "is_solved": true, "iteration": 0, "prompt_tokens": 281, "completion_tokens": 85, "duration": 3.982318878173828, "task_id": "HumanEval/123", "result": "passed", "passed": true}
{"generated_code": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n        return True\n    except:\n        return False", "is_solved": true, "iteration": 0, "prompt_tokens": 313, "completion_tokens": 149, "duration": 4.932066202163696, "task_id": "HumanEval/124", "result": "passed", "passed": true}
{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        product *= num // abs(num) if num != 0 else 0\n        sum_magnitudes += abs(num)\n    return product * sum_magnitudes", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 75, "duration": 3.701418399810791, "task_id": "HumanEval/128", "result": "passed", "passed": true}
{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(num) ** 2 for num in lst)", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 28, "duration": 3.7298011779785156, "task_id": "HumanEval/133", "result": "passed", "passed": true}
{"generated_code": "def largest_smallest_integers(lst):\n    negative_integers = [num for num in lst if num < 0]\n    positive_integers = [num for num in lst if num > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)", "is_solved": true, "iteration": 0, "prompt_tokens": 188, "completion_tokens": 90, "duration": 4.1900529861450195, "task_id": "HumanEval/136", "result": "passed", "passed": true}
{"generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        fact = 1\n        for j in range(1, i+1):\n            fact *= j\n        result *= fact\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 60, "duration": 5.106764793395996, "task_id": "HumanEval/139", "result": "passed", "passed": true}
{"generated_code": "def file_name_check(file_name):\n    if file_name.count(\".\") != 1:\n        return 'No'\n    file_parts = file_name.split(\".\")\n    if len(file_parts) != 2:\n        return 'No'\n    if not file_parts[0] or not file_parts[0][0].isalpha():\n        return 'No'\n    if len([c for c in file_parts[0] if c.isdigit()]) > 3:\n        return 'No'\n    if file_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 130, "duration": 2.550602436065674, "task_id": "HumanEval/141", "result": "passed", "passed": true}
{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "is_solved": true, "iteration": 0, "prompt_tokens": 197, "completion_tokens": 94, "duration": 3.0800018310546875, "task_id": "HumanEval/143", "result": "passed", "passed": true}
{"generated_code": "from fractions import Fraction\n\ndef simplify(x, n):\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 34, "duration": 3.2925808429718018, "task_id": "HumanEval/144", "result": "passed", "passed": true}
{"generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 81, "duration": 4.610205888748169, "task_id": "HumanEval/146", "result": "passed", "passed": true}
{"generated_code": "def list_sort(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 237, "completion_tokens": 39, "duration": 2.81819486618042, "task_id": "HumanEval/149", "result": "failed: name 'sorted_list_sum' is not defined", "passed": false}
{"generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 78, "duration": 4.968517303466797, "task_id": "HumanEval/150", "result": "passed", "passed": true}
{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int))", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 39, "duration": 0.860107421875, "task_id": "HumanEval/151", "result": "passed", "passed": true}
{"generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.6411662101745605, "task_id": "HumanEval/152", "result": "passed", "passed": true}
{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def calc_strength(ext):\n        return sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\n    \n    max_strength = float('-inf')\n    strongest_ext = \"\"\n    \n    for ext in extensions:\n        strength = calc_strength(ext)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_ext = ext\n    \n    return f\"{class_name}.{strongest_ext}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 105, "duration": 1.6746180057525635, "task_id": "HumanEval/153", "result": "passed", "passed": true}
{"generated_code": "def even_odd_count(num):\n    even_count = len([i for i in str(abs(num)) if int(i) % 2 == 0])\n    odd_count = len([i for i in str(abs(num)) if int(i) % 2 != 0])\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 115, "completion_tokens": 65, "duration": 2.838606119155884, "task_id": "HumanEval/155", "result": "passed", "passed": true}
{"generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    \n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    \n    return result.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 143, "duration": 2.278186321258545, "task_id": "HumanEval/156", "result": "passed", "passed": true}
{"generated_code": "def right_angle_triangle(a, b, c):\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 63, "duration": 1.2231793403625488, "task_id": "HumanEval/157", "result": "passed", "passed": true}
{"generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n    \n    max_unique_chars = 0\n    max_word = \"\"\n    \n    for word in words:\n        curr_unique_chars = unique_chars(word)\n        if curr_unique_chars > max_unique_chars or (curr_unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = curr_unique_chars\n            max_word = word\n    \n    return max_word", "is_solved": true, "iteration": 0, "prompt_tokens": 170, "completion_tokens": 95, "duration": 5.631035089492798, "task_id": "HumanEval/158", "result": "passed", "passed": true}
{"generated_code": "def eat(number, need, remaining):\n    eaten = number + min(need, remaining)\n    left = max(remaining - need, 0)\n    return [eaten, left]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 43, "duration": 2.6561062335968018, "task_id": "HumanEval/159", "result": "passed", "passed": true}
{"generated_code": "def do_algebra(operators, operands):\n    expression = str(operands[0])\n    for i in range(len(operators)):\n        expression += operators[i] + str(operands[i + 1])\n    return eval(expression)", "is_solved": true, "iteration": 0, "prompt_tokens": 257, "completion_tokens": 51, "duration": 1.1593248844146729, "task_id": "HumanEval/160", "result": "passed", "passed": true}
{"generated_code": "def solve(s):\n    result = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not has_letter:\n        return s[::-1]\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 81, "duration": 3.5644960403442383, "task_id": "HumanEval/161", "result": "passed", "passed": true}
{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 36, "duration": 0.8799667358398438, "task_id": "HumanEval/162", "result": "passed", "passed": true}
{"generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n# Example\nn = 5\nprint(get_max_triples(n))", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 119, "duration": 5.007686138153076, "task_id": "HumanEval/147", "result": "passed", "passed": true}
{"generated_code": "def is_equal_to_sum_even(n):\n    for i in range(2, n//2 + 1, 2):\n        if n - i in range(2, n, 2):\n            for j in range(2, n//2 + 1, 2):\n                if n - i - j in range(2, n, 2):\n                    for k in range(2, n//2 + 1, 2):\n                        if n - i - j - k in range(2, n, 2):\n                            return True\n    return False", "is_solved": true, "iteration": 1, "prompt_tokens": 905, "completion_tokens": 225, "duration": 9.17589521408081, "task_id": "HumanEval/138", "result": "passed", "passed": true}
{"generated_code": "def digits(n):\n    prod = 1\n    has_odd_digit = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            prod *= int(digit)\n            has_odd_digit = True\n    return prod if has_odd_digit else 0", "is_solved": true, "iteration": 1, "prompt_tokens": 812, "completion_tokens": 174, "duration": 5.586350440979004, "task_id": "HumanEval/131", "result": "passed", "passed": true}
{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple([planet for planet in planets if start_idx < planets.index(planet) < end_idx])\n    else:\n        return tuple([planet for planet in planets if end_idx < planets.index(planet) < start_idx])", "is_solved": true, "iteration": 1, "prompt_tokens": 1361, "completion_tokens": 307, "duration": 7.331240892410278, "task_id": "HumanEval/148", "result": "passed", "passed": true}
{"generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:] if k > 0 else []", "is_solved": true, "iteration": 2, "prompt_tokens": 2892, "completion_tokens": 196, "duration": 10.119975566864014, "task_id": "HumanEval/120", "result": "passed", "passed": true}
{"generated_code": "import math\n\ndef max_fill(grid, capacity):\n    wells = [sum(row) for row in grid]\n    total_water = sum(wells)\n    \n    buckets_needed = 0\n    for well in wells:\n        buckets_needed += math.ceil(well / capacity)\n    \n    return buckets_needed", "is_solved": true, "iteration": 2, "prompt_tokens": 2708, "completion_tokens": 263, "duration": 10.796129703521729, "task_id": "HumanEval/115", "result": "passed", "passed": true}
{"generated_code": "def compare_one(a, b):\n    a_num = float(a.replace(',', '.')) if isinstance(a, str) else a\n    b_num = float(b.replace(',', '.')) if isinstance(b, str) else b\n    \n    if a_num > b_num:\n        return a if isinstance(a, str) else a_num\n    elif b_num > a_num:\n        return b if isinstance(b, str) else b_num\n    else:\n        return None", "is_solved": true, "iteration": 3, "prompt_tokens": 2440, "completion_tokens": 394, "duration": 13.822096586227417, "task_id": "HumanEval/137", "result": "passed", "passed": true}
{"generated_code": "def can_arrange(arr):\n    index = -1\n    for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            index = i\n            break\n    return index", "is_solved": true, "iteration": 5, "prompt_tokens": 3495, "completion_tokens": 489, "duration": 20.53189730644226, "task_id": "HumanEval/135", "result": "passed", "passed": true}
{"generated_code": "def add_elements(arr, k):\n    return sum(arr[:k])", "is_solved": false, "iteration": 7, "prompt_tokens": 5082, "completion_tokens": 493, "duration": 22.58134627342224, "task_id": "HumanEval/122", "result": "failed: ", "passed": false}
{"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "is_solved": false, "iteration": 7, "prompt_tokens": 7009, "completion_tokens": 607, "duration": 24.566129684448242, "task_id": "HumanEval/145", "result": "failed: ", "passed": false}
{"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "is_solved": false, "iteration": 7, "prompt_tokens": 6065, "completion_tokens": 568, "duration": 24.31107234954834, "task_id": "HumanEval/121", "result": "failed: ", "passed": false}
{"generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "is_solved": false, "iteration": 7, "prompt_tokens": 4972, "completion_tokens": 611, "duration": 26.304994821548462, "task_id": "HumanEval/163", "result": "failed: Test 1", "passed": false}
{"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a + a) or b in (a*2)", "is_solved": false, "iteration": 7, "prompt_tokens": 5041, "completion_tokens": 603, "duration": 26.04505205154419, "task_id": "HumanEval/154", "result": "failed: test #3", "passed": false}
{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 and (i+1) % 3 != 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 7, "prompt_tokens": 8125, "completion_tokens": 694, "duration": 24.303468942642212, "task_id": "HumanEval/142", "result": "failed: ", "passed": false}
{"generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)) and len(set(lst)) == len(lst)", "is_solved": false, "iteration": 7, "prompt_tokens": 8533, "completion_tokens": 644, "duration": 27.326715230941772, "task_id": "HumanEval/126", "result": "failed: This prints if this assert fails 7 (good for debugging!)", "passed": false}
{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt.strip():\n        return False\n    last_char = txt.strip()[-1]\n    if last_char.isalpha() and len(txt.split()[-1]) == 1:\n        return True\n    return False", "is_solved": false, "iteration": 7, "prompt_tokens": 5893, "completion_tokens": 737, "duration": 28.310920476913452, "task_id": "HumanEval/134", "result": "failed: ", "passed": false}
{"generated_code": "def fix_spaces(text):\n    result = []\n    count = 0\n    for c in text:\n        if c == ' ':\n            count += 1\n            if count > 2:\n                result.append('-')\n                count = 0\n            else:\n                result.append('_')\n        else:\n            result.append(c)\n            count = 0\n    return ''.join(result)", "is_solved": false, "iteration": 7, "prompt_tokens": 5281, "completion_tokens": 950, "duration": 30.372578859329224, "task_id": "HumanEval/140", "result": "failed: This prints if this assert fails 4 (good for debugging!)", "passed": false}
{"generated_code": "def match_parens(lst):\n    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')' and stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                stack.append(char)\n    \n    return 'Yes' if not stack or (len(stack) == 2 and stack[0] == '(' and stack[1] == ')') else 'No'", "is_solved": false, "iteration": 7, "prompt_tokens": 7046, "completion_tokens": 893, "duration": 31.02826452255249, "task_id": "HumanEval/119", "result": "failed: ", "passed": false}
{"generated_code": "def is_nested(string):\n    opening_brackets = []\n    \n    for char in string:\n        if char == '[':\n            opening_brackets.append(char)\n        elif char == ']':\n            if opening_brackets and opening_brackets[-1] == '[':\n                opening_brackets.pop()\n    \n    return len(opening_brackets) != 0 and '[' in string and ']' in string\n\n# Test cases\nprint(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\nprint(is_nested('[[][]]'))\nprint(is_nested('[[]][['))", "is_solved": false, "iteration": 7, "prompt_tokens": 6890, "completion_tokens": 1211, "duration": 36.39533615112305, "task_id": "HumanEval/132", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"generated_code": "def tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    else:\n        sequence = [1, 3]\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n        return sequence", "is_solved": false, "iteration": 7, "prompt_tokens": 10911, "completion_tokens": 1108, "duration": 45.314204692840576, "task_id": "HumanEval/130", "result": "failed: ", "passed": false}
{"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    elif txt:\n        return sum(1 for i in range(len(txt)-1) if txt[i].islower() and ord(txt[i]) % 2 != 0 and (not txt[i+1].islower() or ord(txt[i+1]) % 2 == 0) ) + (1 if txt[-1].islower() and ord(txt[-1]) % 2 != 0 else 0)\n    else:\n        return 0", "is_solved": false, "iteration": 7, "prompt_tokens": 6358, "completion_tokens": 1149, "duration": 38.218857765197754, "task_id": "HumanEval/125", "result": "failed: ", "passed": false}
{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    length = intersection_end - intersection_start + 1\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 7, "prompt_tokens": 9341, "completion_tokens": 1533, "duration": 40.96066904067993, "task_id": "HumanEval/127", "result": "failed: ", "passed": false}
{"generated_code": "def minPath(grid, k):\n    def dfs(x, y, path_len, path):\n        if path_len == k:\n            return path\n\n        min_path = None\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and not visited[nx][ny]:\n                visited[nx][ny] = True\n                new_path = dfs(nx, ny, path_len + 1, path + [grid[nx][ny]])\n                if min_path is None or new_path < min_path:\n                    min_path = new_path\n                visited[nx][ny] = False\n\n        return min_path\n\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    result = None\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            visited[i][j] = True\n            new_path = dfs(i, j, 1, [grid[i][j]])\n            if result is None or new_path < result:\n                result = new_path\n            visited[i][j] = False\n\n    return result", "is_solved": false, "iteration": 7, "prompt_tokens": 17378, "completion_tokens": 2399, "duration": 56.411137342453, "task_id": "HumanEval/129", "result": "failed: ", "passed": false}
{"generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 61, "duration": 3.7879819869995117, "task_id": "HumanEval/0", "result": "passed", "passed": true}
{"generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    temp = ''\n    for char in paren_string:\n        if char == '(':\n            stack.append('(')\n            temp += '('\n        elif char == ')':\n            stack.pop()\n            temp += ')'\n            if not stack:\n                result.append(temp)\n                temp = ''\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 165, "completion_tokens": 86, "duration": 4.6310436725616455, "task_id": "HumanEval/1", "result": "passed", "passed": true}
{"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": true, "iteration": 0, "prompt_tokens": 135, "completion_tokens": 21, "duration": 3.479076385498047, "task_id": "HumanEval/2", "result": "passed", "passed": true}
{"generated_code": "def below_zero(operations):\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 37, "duration": 3.4491524696350098, "task_id": "HumanEval/3", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 49, "duration": 3.9055840969085693, "task_id": "HumanEval/4", "result": "passed", "passed": true}
{"generated_code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 56, "duration": 3.8390955924987793, "task_id": "HumanEval/5", "result": "passed", "passed": true}
{"generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                if depth > max_depth:\n                    max_depth = depth\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 97, "duration": 4.703549146652222, "task_id": "HumanEval/6", "result": "passed", "passed": true}
{"generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "is_solved": true, "iteration": 0, "prompt_tokens": 143, "completion_tokens": 35, "duration": 3.61719012260437, "task_id": "HumanEval/7", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    maximum = float('-inf')\n    for num in numbers:\n        maximum = max(maximum, num)\n        result.append(maximum)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 150, "completion_tokens": 54, "duration": 3.7376515865325928, "task_id": "HumanEval/9", "result": "passed", "passed": true}
{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 41, "duration": 3.579258441925049, "task_id": "HumanEval/11", "result": "passed", "passed": true}
{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 42, "duration": 3.5393548011779785, "task_id": "HumanEval/13", "result": "passed", "passed": true}
{"generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 32, "duration": 3.6700150966644287, "task_id": "HumanEval/14", "result": "passed", "passed": true}
{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 27, "duration": 3.5287091732025146, "task_id": "HumanEval/15", "result": "passed", "passed": true}
{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 3.326807737350464, "task_id": "HumanEval/16", "result": "passed", "passed": true}
{"generated_code": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    return [durations[note] for note in notes]", "is_solved": true, "iteration": 0, "prompt_tokens": 222, "completion_tokens": 59, "duration": 3.708634614944458, "task_id": "HumanEval/17", "result": "passed", "passed": true}
{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 74, "duration": 3.952439308166504, "task_id": "HumanEval/18", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_map[x])\n    return ' '.join(sorted_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 103, "duration": 4.493385076522827, "task_id": "HumanEval/19", "result": "passed", "passed": true}
{"generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    \n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    \n    return closest_pair", "is_solved": true, "iteration": 0, "prompt_tokens": 216, "completion_tokens": 99, "duration": 4.436337947845459, "task_id": "HumanEval/20", "result": "passed", "passed": true}
{"generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 53, "duration": 3.686016082763672, "task_id": "HumanEval/21", "result": "passed", "passed": true}
{"generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 31, "duration": 3.3969316482543945, "task_id": "HumanEval/22", "result": "passed", "passed": true}
{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 3.471254587173462, "task_id": "HumanEval/23", "result": "passed", "passed": true}
{"generated_code": "def largest_divisor(n: int) -> int:\n    return max([i for i in range(1, n) if n % i == 0])", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 37, "duration": 3.5331480503082275, "task_id": "HumanEval/24", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 70, "duration": 4.299970865249634, "task_id": "HumanEval/25", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 38, "duration": 3.51297664642334, "task_id": "HumanEval/26", "result": "passed", "passed": true}
{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 36, "duration": 3.3321757316589355, "task_id": "HumanEval/27", "result": "passed", "passed": true}
{"generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 20, "duration": 3.289001703262329, "task_id": "HumanEval/28", "result": "passed", "passed": true}
{"generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 34, "duration": 3.4382829666137695, "task_id": "HumanEval/29", "result": "passed", "passed": true}
{"generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 25, "duration": 3.446502208709717, "task_id": "HumanEval/30", "result": "passed", "passed": true}
{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 57, "duration": 3.4670627117156982, "task_id": "HumanEval/31", "result": "passed", "passed": true}
{"generated_code": "def find_zero(xs: list):\n    return -xs[0] / xs[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 23, "duration": 3.333569288253784, "task_id": "HumanEval/32", "result": "failed: name 'poly' is not defined", "passed": false}
{"generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 17, "duration": 3.2383384704589844, "task_id": "HumanEval/34", "result": "passed", "passed": true}
{"generated_code": "def max_element(l: list):\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 16, "duration": 3.126251459121704, "task_id": "HumanEval/35", "result": "passed", "passed": true}
{"generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iteration": 0, "prompt_tokens": 208, "completion_tokens": 162, "duration": 4.739898920059204, "task_id": "HumanEval/38", "result": "passed", "passed": true}
{"generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 1:\n            return n\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    i = 0\n    while count < n:\n        i += 1\n        num = fibonacci(i)\n        if is_prime(num):\n            count += 1\n    return num", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 163, "duration": 4.843162536621094, "task_id": "HumanEval/39", "result": "passed", "passed": true}
{"generated_code": "def triples_sum_to_zero(l: list):\n    return any(sum((x, y, z)) == 0 for x in l for y in l for z in l if x != y != z)", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 46, "duration": 5.7354347705841064, "task_id": "HumanEval/40", "result": "passed", "passed": true}
{"generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 23, "duration": 5.429662704467773, "task_id": "HumanEval/42", "result": "passed", "passed": true}
{"generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 42, "duration": 4.737221002578735, "task_id": "HumanEval/43", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 17, "duration": 6.2418904304504395, "task_id": "HumanEval/45", "result": "passed", "passed": true}
{"generated_code": "def fib4(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    fib_list = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib_list.append(fib_list[-1] + fib_list[-2] + fib_list[-3] + fib_list[-4])\n    \n    return fib_list[-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 116, "duration": 5.7989301681518555, "task_id": "HumanEval/46", "result": "passed", "passed": true}
{"generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "is_solved": true, "iteration": 0, "prompt_tokens": 125, "completion_tokens": 61, "duration": 1.5516915321350098, "task_id": "HumanEval/47", "result": "passed", "passed": true}
{"generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 20, "duration": 4.236940145492554, "task_id": "HumanEval/48", "result": "passed", "passed": true}
{"generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 25, "duration": 5.464749574661255, "task_id": "HumanEval/49", "result": "passed", "passed": true}
{"generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": true, "iteration": 0, "prompt_tokens": 140, "completion_tokens": 82, "duration": 6.010514259338379, "task_id": "HumanEval/50", "result": "passed", "passed": true}
{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in ['a', 'e', 'i', 'o', 'u']])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 42, "duration": 5.764646291732788, "task_id": "HumanEval/51", "result": "passed", "passed": true}
{"generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 26, "duration": 4.350031137466431, "task_id": "HumanEval/52", "result": "passed", "passed": true}
{"generated_code": "def add(x: int, y: int):\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 20, "duration": 5.648186683654785, "task_id": "HumanEval/53", "result": "passed", "passed": true}
{"generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 38, "duration": 6.5305821895599365, "task_id": "HumanEval/55", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 64, "duration": 5.029238224029541, "task_id": "HumanEval/56", "result": "passed", "passed": true}
{"generated_code": "def car_race_collision(n: int):\n    return n**2", "is_solved": true, "iteration": 1, "prompt_tokens": 933, "completion_tokens": 108, "duration": 8.256481647491455, "task_id": "HumanEval/41", "result": "passed", "passed": true}
{"generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_length = max(len(s) for s in strings)\n    return next(s for s in strings if len(s) == max_length)", "is_solved": true, "iteration": 1, "prompt_tokens": 808, "completion_tokens": 151, "duration": 7.499176502227783, "task_id": "HumanEval/12", "result": "passed", "passed": true}
{"generated_code": "def sort_even(l: list):\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    sorted_even_values = sorted([l[i] for i in even_indices])\n    \n    result = l.copy()\n    for i, val in zip(even_indices, sorted_even_values):\n        result[i] = val\n    \n    return result", "is_solved": true, "iteration": 1, "prompt_tokens": 1167, "completion_tokens": 228, "duration": 8.22635555267334, "task_id": "HumanEval/37", "result": "passed", "passed": true}
{"generated_code": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)", "is_solved": true, "iteration": 2, "prompt_tokens": 1844, "completion_tokens": 195, "duration": 11.607208967208862, "task_id": "HumanEval/54", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\nfrom functools import reduce\nimport operator\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    total_sum = sum(numbers)\n    total_product = reduce(operator.mul, numbers, 1)\n    return total_sum, total_product", "is_solved": true, "iteration": 2, "prompt_tokens": 1865, "completion_tokens": 364, "duration": 11.527279615402222, "task_id": "HumanEval/8", "result": "passed", "passed": true}
{"generated_code": "def sort_third(l: list):\n    sorted_indices = [i for i in range(len(l)) if i % 3 == 0 and i < len(l)]\n    sorted_values = sorted([l[i] for i in sorted_indices])\n    result = l.copy()\n    for i, v in zip(sorted_indices, sorted_values):\n        result[i] = v\n    return result", "is_solved": true, "iteration": 4, "prompt_tokens": 5527, "completion_tokens": 627, "duration": 20.370218515396118, "task_id": "HumanEval/33", "result": "passed", "passed": true}
{"generated_code": "def change_base(x: int, base: int):\n    digits = \"0123456789\"\n    result = \"\"\n    \n    while x > 0:\n        remainder = x % base\n        result = digits[remainder] + result\n        x = x // base\n    \n    return result", "is_solved": true, "iteration": 6, "prompt_tokens": 4212, "completion_tokens": 658, "duration": 26.03817868232727, "task_id": "HumanEval/44", "result": "passed", "passed": true}
{"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 and i % 13 == 0 and '7' in str(i):\n            count += 1\n    return count", "is_solved": false, "iteration": 7, "prompt_tokens": 5114, "completion_tokens": 759, "duration": 30.390125274658203, "task_id": "HumanEval/36", "result": "failed: ", "passed": false}
{"generated_code": "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    \n    for i in range(len(string), 0, -1):\n        if string[:i] == string[:i][::-1]:\n            if i == len(string):\n                return string\n            return string + string[:i-1][::-1]", "is_solved": false, "iteration": 7, "prompt_tokens": 5108, "completion_tokens": 811, "duration": 27.697560787200928, "task_id": "HumanEval/10", "result": "failed: ", "passed": false}
{"generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 54, "duration": 5.898924827575684, "task_id": "HumanEval/57", "result": "passed", "passed": true}
{"generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 29, "duration": 4.415369749069214, "task_id": "HumanEval/58", "result": "passed", "passed": true}
{"generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 50, "duration": 4.908264875411987, "task_id": "HumanEval/59", "result": "passed", "passed": true}
{"generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 22, "duration": 4.242558002471924, "task_id": "HumanEval/60", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str):\n    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 68, "duration": 6.116909980773926, "task_id": "HumanEval/61", "result": "passed", "passed": true}
{"generated_code": "def derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 28, "duration": 3.1749978065490723, "task_id": "HumanEval/62", "result": "passed", "passed": true}
{"generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 72, "duration": 5.622449636459351, "task_id": "HumanEval/63", "result": "passed", "passed": true}
{"generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 5.672107219696045, "task_id": "HumanEval/66", "result": "passed", "passed": true}
{"generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 37, "duration": 5.641664266586304, "task_id": "HumanEval/67", "result": "passed", "passed": true}
{"generated_code": "def pluck(arr):\n    evens = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens, key=lambda x: (x[0], x[1]))\n    return [min_even[0], min_even[1]]", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 78, "duration": 5.097854852676392, "task_id": "HumanEval/68", "result": "passed", "passed": true}
{"generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 44, "duration": 5.86173415184021, "task_id": "HumanEval/70", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 92, "duration": 6.1586079597473145, "task_id": "HumanEval/71", "result": "passed", "passed": true}
{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 5.8480916023254395, "task_id": "HumanEval/72", "result": "passed", "passed": true}
{"generated_code": "def smallest_change(arr):\n    length = len(arr)\n    changes = 0\n    for i in range(length // 2):\n        if arr[i] != arr[length - i - 1]:\n            changes += 1\n    return changes", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 55, "duration": 1.1043100357055664, "task_id": "HumanEval/73", "result": "passed", "passed": true}
{"generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or (n != 1 and x % n == 0 and is_simple_power(x // n, n)))", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 52, "duration": 4.641237735748291, "task_id": "HumanEval/76", "result": "passed", "passed": true}
{"generated_code": "def hex_key(num):\n    prime_digits = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 60, "duration": 3.5844950675964355, "task_id": "HumanEval/78", "result": "passed", "passed": true}
{"generated_code": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal)[2:] + 'db'", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 25, "duration": 4.3092145919799805, "task_id": "HumanEval/79", "result": "passed", "passed": true}
{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 70, "duration": 3.4724762439727783, "task_id": "HumanEval/82", "result": "passed", "passed": true}
{"generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 21, "duration": 4.153321743011475, "task_id": "HumanEval/84", "result": "passed", "passed": true}
{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 105, "completion_tokens": 34, "duration": 2.8639819622039795, "task_id": "HumanEval/85", "result": "passed", "passed": true}
{"generated_code": "def anti_shuffle(s):\n    words = s.split()\n    result = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        result.append(ordered_word)\n    return ' '.join(result)", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 48, "duration": 4.981414556503296, "task_id": "HumanEval/86", "result": "passed", "passed": true}
{"generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 68, "duration": 4.027481555938721, "task_id": "HumanEval/87", "result": "passed", "passed": true}
{"generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            base = ord('a') if char.islower() else ord('A')\n            result += chr((ord(char) - base + 2 * 2) % 26 + base)\n        else:\n            result += char\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 76, "duration": 3.5757226943969727, "task_id": "HumanEval/89", "result": "passed", "passed": true}
{"generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 52, "duration": 4.791964769363403, "task_id": "HumanEval/90", "result": "passed", "passed": true}
{"generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences if sentence]\n    \n    count = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0] == \"I\":\n            count += 1\n    \n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 71, "duration": 3.5930309295654297, "task_id": "HumanEval/91", "result": "passed", "passed": true}
{"generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 54, "duration": 4.871682405471802, "task_id": "HumanEval/92", "result": "passed", "passed": true}
{"generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    prime_values = [num for num in lst if is_prime(num)]\n    largest_prime = max(prime_values)\n    \n    return sum_of_digits(largest_prime)", "is_solved": true, "iteration": 0, "prompt_tokens": 336, "completion_tokens": 120, "duration": 5.921804666519165, "task_id": "HumanEval/94", "result": "failed: name 'skjkasdkd' is not defined", "passed": false}
{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 87, "duration": 3.5806374549865723, "task_id": "HumanEval/96", "result": "passed", "passed": true}
{"generated_code": "def multiply(a, b):\n    return int(str(abs(a) % 10)) * int(str(abs(b) % 10))", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 27, "duration": 4.40070652961731, "task_id": "HumanEval/97", "result": "passed", "passed": true}
{"generated_code": "def count_upper(s):\n    return sum(1 for i in range(0, len(s), 2) if s[i] in 'AEIOU')", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 37, "duration": 4.357618093490601, "task_id": "HumanEval/98", "result": "passed", "passed": true}
{"generated_code": "def closest_integer(value):\n    value = float(value)\n    return int(value + 0.5) if value > 0 else int(value - 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 39, "duration": 4.614492893218994, "task_id": "HumanEval/99", "result": "passed", "passed": true}
{"generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(',', ' ').split()]", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 25, "duration": 2.786447525024414, "task_id": "HumanEval/101", "result": "passed", "passed": true}
{"generated_code": "def choose_num(x, y):\n    return max([i for i in range(x, y+1) if i % 2 == 0] + [-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 39, "duration": 2.6726202964782715, "task_id": "HumanEval/102", "result": "passed", "passed": true}
{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m-n+1))\n    return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 46, "duration": 3.154949903488159, "task_id": "HumanEval/103", "result": "passed", "passed": true}
{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 33, "duration": 2.7222673892974854, "task_id": "HumanEval/104", "result": "passed", "passed": true}
{"generated_code": "def by_length(arr):\n    nums = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    arr = [x for x in arr if 1 <= x <= 9]\n    arr.sort()\n    arr.reverse()\n    return [nums[x-1] for x in arr]", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 78, "duration": 3.382270097732544, "task_id": "HumanEval/105", "result": "passed", "passed": true}
{"generated_code": "def f(n):\n    def factorial(num):\n        if num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    \n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 92, "duration": 1.7012665271759033, "task_id": "HumanEval/106", "result": "passed", "passed": true}
{"generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count, odd_count = 0, 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 98, "duration": 3.75720477104187, "task_id": "HumanEval/107", "result": "passed", "passed": true}
{"generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    sorted_arr = sorted(arr)\n    for _ in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n        \n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 63, "duration": 3.3378124237060547, "task_id": "HumanEval/109", "result": "passed", "passed": true}
{"generated_code": "def reverse_delete(s, c):\n    result = \"\".join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 508, "completion_tokens": 78, "duration": 4.2718048095703125, "task_id": "HumanEval/112", "result": "passed", "passed": true}
{"generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 94, "completion_tokens": 64, "duration": 1.0854251384735107, "task_id": "HumanEval/83", "result": "passed", "passed": true}
{"generated_code": "def histogram(test):\n    lst = test.split()\n    hist = {}\n    for letter in lst:\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    if not hist:\n        return {}\n    max_count = max(hist.values())\n    return {k: v for k, v in hist.items() if v == max_count}", "is_solved": true, "iteration": 1, "prompt_tokens": 1221, "completion_tokens": 208, "duration": 8.268556118011475, "task_id": "HumanEval/111", "result": "passed", "passed": true}
{"generated_code": "def sort_array(array):\n    if not array:\n        return array\n    \n    sorted_array = sorted(array)\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array", "is_solved": true, "iteration": 1, "prompt_tokens": 1318, "completion_tokens": 162, "duration": 7.941652297973633, "task_id": "HumanEval/88", "result": "passed", "passed": true}
{"generated_code": "def vowels_count(s):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    \n    for char in s:\n        if char.lower() in vowels or (char.lower() == 'y' and char == s[-1]):\n            count += 1\n    \n    return count", "is_solved": true, "iteration": 1, "prompt_tokens": 1028, "completion_tokens": 216, "duration": 9.662714004516602, "task_id": "HumanEval/64", "result": "passed", "passed": true}
{"generated_code": "def search(lst):\n    from collections import Counter\n    counts = Counter(lst)\n    result = -1\n    for num, freq in counts.items():\n        if num > 0 and freq >= num:\n            result = max(result, num)\n    return result", "is_solved": true, "iteration": 1, "prompt_tokens": 3142, "completion_tokens": 170, "duration": 8.295331954956055, "task_id": "HumanEval/69", "result": "passed", "passed": true}
{"generated_code": "import sympy\n\ndef is_multiply_prime(a):\n    def prime_factors(n):\n        factors = []\n        for i in range(2, n+1):\n            while n % i == 0:\n                factors.append(i)\n                n //= i\n        return factors\n    \n    factors = prime_factors(a)\n    return len(factors) == 3 and all(sympy.isprime(f) for f in factors)", "is_solved": true, "iteration": 1, "prompt_tokens": 1110, "completion_tokens": 277, "duration": 11.893023014068604, "task_id": "HumanEval/75", "result": "passed", "passed": true}
{"generated_code": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    \n    lowercase_keys = all(isinstance(key, str) and key.islower() for key in dict.keys())\n    uppercase_keys = all(isinstance(key, str) and key.isupper() for key in dict.keys())\n    \n    return lowercase_keys or uppercase_keys", "is_solved": true, "iteration": 1, "prompt_tokens": 1211, "completion_tokens": 224, "duration": 11.475757122039795, "task_id": "HumanEval/95", "result": "passed", "passed": true}
{"generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 2)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones", "is_solved": true, "iteration": 3, "prompt_tokens": 2885, "completion_tokens": 438, "duration": 18.3592848777771, "task_id": "HumanEval/100", "result": "passed", "passed": true}
{"generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    return lst1 if total_chars_lst1 <= total_chars_lst2 else lst2", "is_solved": true, "iteration": 5, "prompt_tokens": 5311, "completion_tokens": 659, "duration": 28.364378452301025, "task_id": "HumanEval/74", "result": "passed", "passed": true}
{"generated_code": "def iscube(a):\n    return int(a**(1/3))**3 == a if a >= 0 else int(-(-a)**(1/3))**3 == a", "is_solved": false, "iteration": 7, "prompt_tokens": 4601, "completion_tokens": 539, "duration": 25.11849617958069, "task_id": "HumanEval/77", "result": "failed: Fourth test error: False", "passed": false}
{"generated_code": "def is_happy(s):\n    return all(s[i] != s[i+1] != s[i+2] for i in range(len(s)-2)) and len(s) >= 3", "is_solved": false, "iteration": 7, "prompt_tokens": 4900, "completion_tokens": 645, "duration": 25.588440656661987, "task_id": "HumanEval/80", "result": "failed: iopaxioi", "passed": false}
{"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(1 for num in lst1 if num % 2 != 0) == sum(1 for num in lst2 if num % 2 != 0) else \"NO\"", "is_solved": false, "iteration": 7, "prompt_tokens": 6887, "completion_tokens": 681, "duration": 28.20034384727478, "task_id": "HumanEval/110", "result": "failed: ", "passed": false}
{"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)}n the str{i+1}ng {s} of the {i+1}nput.\" for i, s in enumerate(lst)]", "is_solved": false, "iteration": 7, "prompt_tokens": 6529, "completion_tokens": 715, "duration": 26.971498012542725, "task_id": "HumanEval/113", "result": "failed: Test 1", "passed": false}
{"generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num == 0:\n            continue\n        sum_digits = sum(int(digit) for digit in str(abs(num)))\n        if sum_digits > 0:\n            count += 1\n    return count", "is_solved": false, "iteration": 7, "prompt_tokens": 6006, "completion_tokens": 754, "duration": 29.563295602798462, "task_id": "HumanEval/108", "result": "failed: ", "passed": false}
{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift] if shift <= len(x_str) // 2 else x_str[-shift:] + x_str[:-shift][::-1]", "is_solved": false, "iteration": 7, "prompt_tokens": 4558, "completion_tokens": 782, "duration": 33.345566511154175, "task_id": "HumanEval/65", "result": "failed: ", "passed": false}
{"generated_code": "def encode(message):\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                result += chr((ord(char)+2 - ord('a')) % 26 + ord('A'))\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result", "is_solved": false, "iteration": 7, "prompt_tokens": 5818, "completion_tokens": 1010, "duration": 31.197738647460938, "task_id": "HumanEval/93", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        if gpa > 3.7:\n            return 'A'\n        if gpa > 3.3:\n            return 'A-'\n        if gpa > 3.0:\n            return 'B+'\n        if gpa > 2.7:\n            return 'B'\n        if gpa > 2.3:\n            return 'B-'\n        if gpa > 2.0:\n            return 'C+'\n        if gpa > 1.7:\n            return 'C'\n        if gpa > 1.3:\n            return 'C-'\n        if gpa > 1.0:\n            return 'D+'\n        if gpa > 0.7:\n            return 'D'\n        if gpa >= 0.0:\n            return 'D-'\n        return 'E'\n\n    return [grade(g) for g in grades]", "is_solved": false, "iteration": 7, "prompt_tokens": 8772, "completion_tokens": 2081, "duration": 50.977869749069214, "task_id": "HumanEval/81", "result": "failed: ", "passed": false}
{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 60, "duration": 3.7184066772460938, "task_id": "HumanEval/114", "result": "passed", "passed": true}
{"generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 220, "completion_tokens": 28, "duration": 3.368082284927368, "task_id": "HumanEval/116", "result": "passed", "passed": true}
{"generated_code": "def select_words(s, n):\n    if not s:\n        return []\n    words = s.split()\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = []\n    for word in words:\n        if len([c for c in word if c in consonants]) == n:\n            result.append(word)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 86, "duration": 4.235817909240723, "task_id": "HumanEval/117", "result": "passed", "passed": true}
{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 98, "duration": 3.4160122871398926, "task_id": "HumanEval/118", "result": "passed", "passed": true}
{"generated_code": "def get_odd_collatz(n):\n    collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    \n    return sorted(list(set([num for num in collatz if num % 2 != 0])))", "is_solved": true, "iteration": 0, "prompt_tokens": 281, "completion_tokens": 85, "duration": 3.982318878173828, "task_id": "HumanEval/123", "result": "passed", "passed": true}
{"generated_code": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n        return True\n    except:\n        return False", "is_solved": true, "iteration": 0, "prompt_tokens": 313, "completion_tokens": 149, "duration": 4.932066202163696, "task_id": "HumanEval/124", "result": "passed", "passed": true}
{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        product *= num // abs(num) if num != 0 else 0\n        sum_magnitudes += abs(num)\n    return product * sum_magnitudes", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 75, "duration": 3.701418399810791, "task_id": "HumanEval/128", "result": "passed", "passed": true}
{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(num) ** 2 for num in lst)", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 28, "duration": 3.7298011779785156, "task_id": "HumanEval/133", "result": "passed", "passed": true}
{"generated_code": "def largest_smallest_integers(lst):\n    negative_integers = [num for num in lst if num < 0]\n    positive_integers = [num for num in lst if num > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)", "is_solved": true, "iteration": 0, "prompt_tokens": 188, "completion_tokens": 90, "duration": 4.1900529861450195, "task_id": "HumanEval/136", "result": "passed", "passed": true}
{"generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        fact = 1\n        for j in range(1, i+1):\n            fact *= j\n        result *= fact\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 60, "duration": 5.106764793395996, "task_id": "HumanEval/139", "result": "passed", "passed": true}
{"generated_code": "def file_name_check(file_name):\n    if file_name.count(\".\") != 1:\n        return 'No'\n    file_parts = file_name.split(\".\")\n    if len(file_parts) != 2:\n        return 'No'\n    if not file_parts[0] or not file_parts[0][0].isalpha():\n        return 'No'\n    if len([c for c in file_parts[0] if c.isdigit()]) > 3:\n        return 'No'\n    if file_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 130, "duration": 2.550602436065674, "task_id": "HumanEval/141", "result": "passed", "passed": true}
{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "is_solved": true, "iteration": 0, "prompt_tokens": 197, "completion_tokens": 94, "duration": 3.0800018310546875, "task_id": "HumanEval/143", "result": "passed", "passed": true}
{"generated_code": "from fractions import Fraction\n\ndef simplify(x, n):\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 34, "duration": 3.2925808429718018, "task_id": "HumanEval/144", "result": "passed", "passed": true}
{"generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 81, "duration": 4.610205888748169, "task_id": "HumanEval/146", "result": "passed", "passed": true}
{"generated_code": "def list_sort(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 237, "completion_tokens": 39, "duration": 2.81819486618042, "task_id": "HumanEval/149", "result": "failed: name 'sorted_list_sum' is not defined", "passed": false}
{"generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 78, "duration": 4.968517303466797, "task_id": "HumanEval/150", "result": "passed", "passed": true}
{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int))", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 39, "duration": 0.860107421875, "task_id": "HumanEval/151", "result": "passed", "passed": true}
{"generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.6411662101745605, "task_id": "HumanEval/152", "result": "passed", "passed": true}
{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def calc_strength(ext):\n        return sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\n    \n    max_strength = float('-inf')\n    strongest_ext = \"\"\n    \n    for ext in extensions:\n        strength = calc_strength(ext)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_ext = ext\n    \n    return f\"{class_name}.{strongest_ext}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 105, "duration": 1.6746180057525635, "task_id": "HumanEval/153", "result": "passed", "passed": true}
{"generated_code": "def even_odd_count(num):\n    even_count = len([i for i in str(abs(num)) if int(i) % 2 == 0])\n    odd_count = len([i for i in str(abs(num)) if int(i) % 2 != 0])\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 115, "completion_tokens": 65, "duration": 2.838606119155884, "task_id": "HumanEval/155", "result": "passed", "passed": true}
{"generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    \n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    \n    return result.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 143, "duration": 2.278186321258545, "task_id": "HumanEval/156", "result": "passed", "passed": true}
{"generated_code": "def right_angle_triangle(a, b, c):\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 63, "duration": 1.2231793403625488, "task_id": "HumanEval/157", "result": "passed", "passed": true}
{"generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n    \n    max_unique_chars = 0\n    max_word = \"\"\n    \n    for word in words:\n        curr_unique_chars = unique_chars(word)\n        if curr_unique_chars > max_unique_chars or (curr_unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = curr_unique_chars\n            max_word = word\n    \n    return max_word", "is_solved": true, "iteration": 0, "prompt_tokens": 170, "completion_tokens": 95, "duration": 5.631035089492798, "task_id": "HumanEval/158", "result": "passed", "passed": true}
{"generated_code": "def eat(number, need, remaining):\n    eaten = number + min(need, remaining)\n    left = max(remaining - need, 0)\n    return [eaten, left]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 43, "duration": 2.6561062335968018, "task_id": "HumanEval/159", "result": "passed", "passed": true}
{"generated_code": "def do_algebra(operators, operands):\n    expression = str(operands[0])\n    for i in range(len(operators)):\n        expression += operators[i] + str(operands[i + 1])\n    return eval(expression)", "is_solved": true, "iteration": 0, "prompt_tokens": 257, "completion_tokens": 51, "duration": 1.1593248844146729, "task_id": "HumanEval/160", "result": "passed", "passed": true}
{"generated_code": "def solve(s):\n    result = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not has_letter:\n        return s[::-1]\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 81, "duration": 3.5644960403442383, "task_id": "HumanEval/161", "result": "passed", "passed": true}
{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 36, "duration": 0.8799667358398438, "task_id": "HumanEval/162", "result": "passed", "passed": true}
{"generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n# Example\nn = 5\nprint(get_max_triples(n))", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 119, "duration": 5.007686138153076, "task_id": "HumanEval/147", "result": "passed", "passed": true}
{"generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:] if k > 0 else []", "is_solved": true, "iteration": 2, "prompt_tokens": 2876, "completion_tokens": 180, "duration": 9.695887088775635, "task_id": "HumanEval/120", "result": "passed", "passed": true}
{"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)", "is_solved": true, "iteration": 4, "prompt_tokens": 3209, "completion_tokens": 369, "duration": 14.160013437271118, "task_id": "HumanEval/121", "result": "passed", "passed": true}
{"generated_code": "import math\n\ndef max_fill(grid, capacity):\n    wells = [sum(row) for row in grid]\n    total_water = sum(wells)\n    buckets_needed = 0\n    for well in wells:\n        buckets_needed += math.ceil(well / capacity)\n    return buckets_needed", "is_solved": true, "iteration": 2, "prompt_tokens": 2735, "completion_tokens": 288, "duration": 17.358479261398315, "task_id": "HumanEval/115", "result": "passed", "passed": true}
{"generated_code": "def fix_spaces(text):\n    result = ''\n    count = 0\n    for c in text:\n        if c == ' ':\n            count += 1\n            if count > 2:\n                result = result.rstrip('_') + '-'\n                count = 0\n            else:\n                result += '_'\n        else:\n            result += c\n            count = 0\n    return result\n\n# Test cases\nprint(fix_spaces(\"Example\"))  # \"Example\"\nprint(fix_spaces(\"Example 1\"))  # \"Example_1\"\nprint(fix_spaces(\" Example 2\"))  # \"_Example_2\"\nprint(fix_spaces(\" Example   3\"))  # \"_Example-3\"", "is_solved": true, "iteration": 2, "prompt_tokens": 2070, "completion_tokens": 538, "duration": 17.737602472305298, "task_id": "HumanEval/140", "result": "passed", "passed": true}
{"generated_code": "def can_arrange(arr):\n    index = -1\n    for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            index = i\n        elif index != -1:\n            break\n    return index", "is_solved": true, "iteration": 7, "prompt_tokens": 4787, "completion_tokens": 754, "duration": 29.652575492858887, "task_id": "HumanEval/135", "result": "passed", "passed": true}
{"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(x) if d.isdigit()), nums.index(x)))", "is_solved": false, "iteration": 7, "prompt_tokens": 7020, "completion_tokens": 607, "duration": 24.891846179962158, "task_id": "HumanEval/145", "result": "failed: ", "passed": false}
{"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a*2) or len(a) == len(b) and b in (a[::-1]*2)", "is_solved": false, "iteration": 7, "prompt_tokens": 4975, "completion_tokens": 582, "duration": 24.4642333984375, "task_id": "HumanEval/154", "result": "failed: test #1", "passed": false}
{"generated_code": "def add_elements(arr, k):\n    return sum(arr[:k])", "is_solved": false, "iteration": 7, "prompt_tokens": 5475, "completion_tokens": 576, "duration": 25.24101495742798, "task_id": "HumanEval/122", "result": "failed: ", "passed": false}
{"generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "is_solved": false, "iteration": 7, "prompt_tokens": 5036, "completion_tokens": 650, "duration": 28.218437910079956, "task_id": "HumanEval/163", "result": "failed: Test 1", "passed": false}
{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 7, "prompt_tokens": 8061, "completion_tokens": 705, "duration": 24.79300308227539, "task_id": "HumanEval/142", "result": "failed: ", "passed": false}
{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    txt = txt.strip()\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt.split()[-1]) == 1:\n        return True\n    return False", "is_solved": false, "iteration": 7, "prompt_tokens": 6001, "completion_tokens": 772, "duration": 28.810050010681152, "task_id": "HumanEval/134", "result": "failed: ", "passed": false}
{"generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)) and all(lst.count(num) <= 1 for num in lst)", "is_solved": false, "iteration": 7, "prompt_tokens": 8249, "completion_tokens": 665, "duration": 30.095479488372803, "task_id": "HumanEval/126", "result": "failed: This prints if this assert fails 7 (good for debugging!)", "passed": false}
{"generated_code": "def digits(n):\n    return 0 if all(int(digit) % 2 == 0 for digit in str(n)) else 1 if 1 in [int(digit) % 2 for digit in str(n)] else 0", "is_solved": false, "iteration": 7, "prompt_tokens": 4446, "completion_tokens": 730, "duration": 26.545822143554688, "task_id": "HumanEval/131", "result": "failed: ", "passed": false}
{"generated_code": "def compare_one(a, b):\n    if a == b:\n        return None\n    if type(a) == type(b):\n        return a if a > b else b\n    return a if type(a) == float else b", "is_solved": false, "iteration": 7, "prompt_tokens": 5343, "completion_tokens": 824, "duration": 29.06694746017456, "task_id": "HumanEval/137", "result": "failed: ", "passed": false}
{"generated_code": "def match_parens(lst):\n    total_open = lst[0].count('(') + lst[1].count('(')\n    total_close = lst[0].count(')') + lst[1].count(')')\n    \n    return 'Yes' if total_open == total_close else 'No'", "is_solved": false, "iteration": 7, "prompt_tokens": 6589, "completion_tokens": 927, "duration": 29.71055316925049, "task_id": "HumanEval/119", "result": "failed: ", "passed": false}
{"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "is_solved": false, "iteration": 7, "prompt_tokens": 5382, "completion_tokens": 860, "duration": 30.365941047668457, "task_id": "HumanEval/125", "result": "failed: ", "passed": false}
{"generated_code": "def is_equal_to_sum_even(n):\n    count = 0\n    for i in range(2, n//2 + 1, 2):\n        for j in range(i, n//2 + 1, 2):\n            for k in range(j, n//2 + 1, 2):\n                if i + j + k <= n and n - (i + j + k) in range(k, n, 2):\n                    count += 1\n    return count >= 4", "is_solved": false, "iteration": 7, "prompt_tokens": 5359, "completion_tokens": 1103, "duration": 34.181262254714966, "task_id": "HumanEval/138", "result": "failed: ", "passed": false}
{"generated_code": "def is_nested(string):\n    opening_brackets = []\n    \n    for char in string:\n        if char == '[':\n            opening_brackets.append(char)\n        elif char == ']':\n            if not opening_brackets:\n                return False\n            opening_brackets.pop()\n    \n    return len(opening_brackets) < len(string) // 2\n\n# Test cases\nprint(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\nprint(is_nested('[[][]]'))\nprint(is_nested('[[]][['))", "is_solved": false, "iteration": 7, "prompt_tokens": 7095, "completion_tokens": 1208, "duration": 37.24778461456299, "task_id": "HumanEval/132", "result": "failed: ", "passed": false}
{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    else:\n        return tuple(planets[end_idx+1:start_idx][::-1])", "is_solved": false, "iteration": 7, "prompt_tokens": 6976, "completion_tokens": 1262, "duration": 33.79468631744385, "task_id": "HumanEval/148", "result": "failed: Fourth test error: ('Uranus', 'Saturn', 'Jupiter', 'Mars', 'Earth')", "passed": false}
{"generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1, 3]\n    else:\n        sequence = [0, 1, 1]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n        return sequence", "is_solved": false, "iteration": 7, "prompt_tokens": 10251, "completion_tokens": 1073, "duration": 35.00369143486023, "task_id": "HumanEval/130", "result": "failed: ", "passed": false}
{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    length = intersection_end - intersection_start + 1\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 7, "prompt_tokens": 9314, "completion_tokens": 1523, "duration": 39.72092366218567, "task_id": "HumanEval/127", "result": "failed: ", "passed": false}
{"generated_code": "def minPath(grid, k):\n    def dfs(x, y, path_len, path):\n        if path_len == k:\n            return path\n\n        min_path = []\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]):\n                new_path = dfs(nx, ny, path_len + 1, path + [grid[nx][ny]])\n                if not min_path or new_path < min_path:\n                    min_path = new_path\n\n        return min_path\n\n    all_paths = []\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            result = dfs(i, j, 1, [grid[i][j]])\n            all_paths.append(result)\n\n    return min(all_paths)", "is_solved": true, "iteration": 6, "prompt_tokens": 15772, "completion_tokens": 2359, "duration": 50.252158880233765, "task_id": "HumanEval/129", "result": "timed out", "passed": false}
