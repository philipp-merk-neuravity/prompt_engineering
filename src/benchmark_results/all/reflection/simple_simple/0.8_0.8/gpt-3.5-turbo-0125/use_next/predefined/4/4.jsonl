{"task_id": "HumanEval/0", "generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": true, "iterations": 0, "prompt_tokens": 174, "completion_tokens": 61, "duration": 3.7879819869995117, "iteration_states": [{"generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 61, "duration": 3.7879819869995117}]}
{"task_id": "HumanEval/1", "generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    temp = ''\n    for char in paren_string:\n        if char == '(':\n            stack.append('(')\n            temp += '('\n        elif char == ')':\n            stack.pop()\n            temp += ')'\n            if not stack:\n                result.append(temp)\n                temp = ''\n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 165, "completion_tokens": 86, "duration": 4.6310436725616455, "iteration_states": [{"generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    temp = ''\n    for char in paren_string:\n        if char == '(':\n            stack.append('(')\n            temp += '('\n        elif char == ')':\n            stack.pop()\n            temp += ')'\n            if not stack:\n                result.append(temp)\n                temp = ''\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 165, "completion_tokens": 86, "duration": 4.6310436725616455}]}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": true, "iterations": 0, "prompt_tokens": 135, "completion_tokens": 21, "duration": 3.479076385498047, "iteration_states": [{"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": true, "iteration": 0, "prompt_tokens": 135, "completion_tokens": 21, "duration": 3.479076385498047}]}
{"task_id": "HumanEval/3", "generated_code": "def below_zero(operations):\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "is_solved": true, "iterations": 0, "prompt_tokens": 169, "completion_tokens": 37, "duration": 3.4491524696350098, "iteration_states": [{"generated_code": "def below_zero(operations):\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 37, "duration": 3.4491524696350098}]}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iterations": 0, "prompt_tokens": 167, "completion_tokens": 49, "duration": 3.9055840969085693, "iteration_states": [{"generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 49, "duration": 3.9055840969085693}]}
{"task_id": "HumanEval/5", "generated_code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 142, "completion_tokens": 56, "duration": 3.8390955924987793, "iteration_states": [{"generated_code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 56, "duration": 3.8390955924987793}]}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                if depth > max_depth:\n                    max_depth = depth\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 162, "completion_tokens": 97, "duration": 4.703549146652222, "iteration_states": [{"generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                if depth > max_depth:\n                    max_depth = depth\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 97, "duration": 4.703549146652222}]}
{"task_id": "HumanEval/7", "generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "is_solved": true, "iterations": 0, "prompt_tokens": 143, "completion_tokens": 35, "duration": 3.61719012260437, "iteration_states": [{"generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "is_solved": true, "iteration": 0, "prompt_tokens": 143, "completion_tokens": 35, "duration": 3.61719012260437}]}
{"task_id": "HumanEval/9", "generated_code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    maximum = float('-inf')\n    for num in numbers:\n        maximum = max(maximum, num)\n        result.append(maximum)\n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 150, "completion_tokens": 54, "duration": 3.7376515865325928, "iteration_states": [{"generated_code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    maximum = float('-inf')\n    for num in numbers:\n        maximum = max(maximum, num)\n        result.append(maximum)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 150, "completion_tokens": 54, "duration": 3.7376515865325928}]}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])", "is_solved": true, "iterations": 0, "prompt_tokens": 126, "completion_tokens": 41, "duration": 3.579258441925049, "iteration_states": [{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 41, "duration": 3.579258441925049}]}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a", "is_solved": true, "iterations": 0, "prompt_tokens": 120, "completion_tokens": 42, "duration": 3.5393548011779785, "iteration_states": [{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 42, "duration": 3.5393548011779785}]}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iterations": 0, "prompt_tokens": 109, "completion_tokens": 32, "duration": 3.6700150966644287, "iteration_states": [{"generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 32, "duration": 3.6700150966644287}]}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "is_solved": true, "iterations": 0, "prompt_tokens": 118, "completion_tokens": 27, "duration": 3.5287091732025146, "iteration_states": [{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 27, "duration": 3.5287091732025146}]}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iterations": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 3.326807737350464, "iteration_states": [{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 3.326807737350464}]}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    return [durations[note] for note in notes]", "is_solved": true, "iterations": 0, "prompt_tokens": 222, "completion_tokens": 59, "duration": 3.708634614944458, "iteration_states": [{"generated_code": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    return [durations[note] for note in notes]", "is_solved": true, "iteration": 0, "prompt_tokens": 222, "completion_tokens": 59, "duration": 3.708634614944458}]}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "is_solved": true, "iterations": 0, "prompt_tokens": 138, "completion_tokens": 74, "duration": 3.952439308166504, "iteration_states": [{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 74, "duration": 3.952439308166504}]}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_map[x])\n    return ' '.join(sorted_numbers)", "is_solved": true, "iterations": 0, "prompt_tokens": 155, "completion_tokens": 103, "duration": 4.493385076522827, "iteration_states": [{"generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_map[x])\n    return ' '.join(sorted_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 103, "duration": 4.493385076522827}]}
{"task_id": "HumanEval/20", "generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    \n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    \n    return closest_pair", "is_solved": true, "iterations": 0, "prompt_tokens": 216, "completion_tokens": 99, "duration": 4.436337947845459, "iteration_states": [{"generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    \n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    \n    return closest_pair", "is_solved": true, "iteration": 0, "prompt_tokens": 216, "completion_tokens": 99, "duration": 4.436337947845459}]}
{"task_id": "HumanEval/21", "generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "is_solved": true, "iterations": 0, "prompt_tokens": 173, "completion_tokens": 53, "duration": 3.686016082763672, "iteration_states": [{"generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 53, "duration": 3.686016082763672}]}
{"task_id": "HumanEval/22", "generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]", "is_solved": true, "iterations": 0, "prompt_tokens": 141, "completion_tokens": 31, "duration": 3.3969316482543945, "iteration_states": [{"generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 31, "duration": 3.3969316482543945}]}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iterations": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 3.471254587173462, "iteration_states": [{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 3.471254587173462}]}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    return max([i for i in range(1, n) if n % i == 0])", "is_solved": true, "iterations": 0, "prompt_tokens": 102, "completion_tokens": 37, "duration": 3.5331480503082275, "iteration_states": [{"generated_code": "def largest_divisor(n: int) -> int:\n    return max([i for i in range(1, n) if n % i == 0])", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 37, "duration": 3.5331480503082275}]}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "is_solved": true, "iterations": 0, "prompt_tokens": 176, "completion_tokens": 70, "duration": 4.299970865249634, "iteration_states": [{"generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 70, "duration": 4.299970865249634}]}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "is_solved": true, "iterations": 0, "prompt_tokens": 134, "completion_tokens": 38, "duration": 3.51297664642334, "iteration_states": [{"generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 38, "duration": 3.51297664642334}]}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "is_solved": true, "iterations": 0, "prompt_tokens": 98, "completion_tokens": 36, "duration": 3.3321757316589355, "iteration_states": [{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 36, "duration": 3.3321757316589355}]}
{"task_id": "HumanEval/28", "generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "is_solved": true, "iterations": 0, "prompt_tokens": 107, "completion_tokens": 20, "duration": 3.289001703262329, "iteration_states": [{"generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 20, "duration": 3.289001703262329}]}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iterations": 0, "prompt_tokens": 137, "completion_tokens": 34, "duration": 3.4382829666137695, "iteration_states": [{"generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 34, "duration": 3.4382829666137695}]}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "is_solved": true, "iterations": 0, "prompt_tokens": 163, "completion_tokens": 25, "duration": 3.446502208709717, "iteration_states": [{"generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 25, "duration": 3.446502208709717}]}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "is_solved": true, "iterations": 0, "prompt_tokens": 149, "completion_tokens": 57, "duration": 3.4670627117156982, "iteration_states": [{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 57, "duration": 3.4670627117156982}]}
{"task_id": "HumanEval/32", "generated_code": "def find_zero(xs: list):\n    return -xs[0] / xs[1]", "is_solved": true, "iterations": 0, "prompt_tokens": 309, "completion_tokens": 23, "duration": 3.333569288253784, "iteration_states": [{"generated_code": "def find_zero(xs: list):\n    return -xs[0] / xs[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 23, "duration": 3.333569288253784}]}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "is_solved": true, "iterations": 0, "prompt_tokens": 123, "completion_tokens": 17, "duration": 3.2383384704589844, "iteration_states": [{"generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 17, "duration": 3.2383384704589844}]}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "is_solved": true, "iterations": 0, "prompt_tokens": 132, "completion_tokens": 16, "duration": 3.126251459121704, "iteration_states": [{"generated_code": "def max_element(l: list):\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 16, "duration": 3.126251459121704}]}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iterations": 0, "prompt_tokens": 208, "completion_tokens": 162, "duration": 4.739898920059204, "iteration_states": [{"generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iteration": 0, "prompt_tokens": 208, "completion_tokens": 162, "duration": 4.739898920059204}]}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 1:\n            return n\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    i = 0\n    while count < n:\n        i += 1\n        num = fibonacci(i)\n        if is_prime(num):\n            count += 1\n    return num", "is_solved": true, "iterations": 0, "prompt_tokens": 147, "completion_tokens": 163, "duration": 4.843162536621094, "iteration_states": [{"generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 1:\n            return n\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    i = 0\n    while count < n:\n        i += 1\n        num = fibonacci(i)\n        if is_prime(num):\n            count += 1\n    return num", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 163, "duration": 4.843162536621094}]}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    return any(sum((x, y, z)) == 0 for x in l for y in l for z in l if x != y != z)", "is_solved": true, "iterations": 0, "prompt_tokens": 209, "completion_tokens": 46, "duration": 5.7354347705841064, "iteration_states": [{"generated_code": "def triples_sum_to_zero(l: list):\n    return any(sum((x, y, z)) == 0 for x in l for y in l for z in l if x != y != z)", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 46, "duration": 5.7354347705841064}]}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "is_solved": true, "iterations": 0, "prompt_tokens": 158, "completion_tokens": 23, "duration": 5.429662704467773, "iteration_states": [{"generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 23, "duration": 5.429662704467773}]}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "is_solved": true, "iterations": 0, "prompt_tokens": 207, "completion_tokens": 42, "duration": 4.737221002578735, "iteration_states": [{"generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 42, "duration": 4.737221002578735}]}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "is_solved": true, "iterations": 0, "prompt_tokens": 96, "completion_tokens": 17, "duration": 6.2418904304504395, "iteration_states": [{"generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 17, "duration": 6.2418904304504395}]}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    fib_list = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib_list.append(fib_list[-1] + fib_list[-2] + fib_list[-3] + fib_list[-4])\n    \n    return fib_list[-1]", "is_solved": true, "iterations": 0, "prompt_tokens": 221, "completion_tokens": 116, "duration": 5.7989301681518555, "iteration_states": [{"generated_code": "def fib4(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    fib_list = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib_list.append(fib_list[-1] + fib_list[-2] + fib_list[-3] + fib_list[-4])\n    \n    return fib_list[-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 116, "duration": 5.7989301681518555}]}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "is_solved": true, "iterations": 0, "prompt_tokens": 125, "completion_tokens": 61, "duration": 1.5516915321350098, "iteration_states": [{"generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "is_solved": true, "iteration": 0, "prompt_tokens": 125, "completion_tokens": 61, "duration": 1.5516915321350098}]}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "is_solved": true, "iterations": 0, "prompt_tokens": 121, "completion_tokens": 20, "duration": 4.236940145492554, "iteration_states": [{"generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 20, "duration": 4.236940145492554}]}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "is_solved": true, "iterations": 0, "prompt_tokens": 155, "completion_tokens": 25, "duration": 5.464749574661255, "iteration_states": [{"generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 25, "duration": 5.464749574661255}]}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": true, "iterations": 0, "prompt_tokens": 140, "completion_tokens": 82, "duration": 6.010514259338379, "iteration_states": [{"generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": true, "iteration": 0, "prompt_tokens": 140, "completion_tokens": 82, "duration": 6.010514259338379}]}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in ['a', 'e', 'i', 'o', 'u']])", "is_solved": true, "iterations": 0, "prompt_tokens": 172, "completion_tokens": 42, "duration": 5.764646291732788, "iteration_states": [{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in ['a', 'e', 'i', 'o', 'u']])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 42, "duration": 5.764646291732788}]}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "is_solved": true, "iterations": 0, "prompt_tokens": 129, "completion_tokens": 26, "duration": 4.350031137466431, "iteration_states": [{"generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 26, "duration": 4.350031137466431}]}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "is_solved": true, "iterations": 0, "prompt_tokens": 103, "completion_tokens": 20, "duration": 5.648186683654785, "iteration_states": [{"generated_code": "def add(x: int, y: int):\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 20, "duration": 5.648186683654785}]}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "is_solved": true, "iterations": 0, "prompt_tokens": 102, "completion_tokens": 38, "duration": 6.5305821895599365, "iteration_states": [{"generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 38, "duration": 6.5305821895599365}]}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iterations": 0, "prompt_tokens": 142, "completion_tokens": 64, "duration": 5.029238224029541, "iteration_states": [{"generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 64, "duration": 5.029238224029541}]}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n**2", "is_solved": true, "iterations": 1, "prompt_tokens": 943, "completion_tokens": 118, "duration": 6.803693532943726, "iteration_states": [{"generated_code": "def car_race_collision(n: int):\n    return n*(n-1)", "is_solved": false, "iteration": 0, "prompt_tokens": 201, "completion_tokens": 20, "duration": 4.578029155731201}, {"generated_code": "def car_race_collision(n: int):\n    return n**2", "is_solved": true, "iteration": 1, "prompt_tokens": 943, "completion_tokens": 118, "duration": 6.803693532943726}]}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    sorted_values = sorted([l[i] for i in range(0, len(l), 3)])\n    result = l.copy()\n    result[::3] = sorted_values\n    return result", "is_solved": true, "iterations": 1, "prompt_tokens": 1669, "completion_tokens": 188, "duration": 6.8375890254974365, "iteration_states": [{"generated_code": "def sort_third(l: list):\n    sorted_indices = sorted([i for i in range(len(l)) if i % 3 == 0], key=lambda x: l[x])\n    sorted_values = [l[i] for i in sorted_indices]\n    result = l.copy()\n    for i, v in zip(sorted_indices, sorted_values):\n        result[i] = v\n    return result", "is_solved": false, "iteration": 0, "prompt_tokens": 200, "completion_tokens": 85, "duration": 4.414771556854248}, {"generated_code": "def sort_third(l: list):\n    sorted_values = sorted([l[i] for i in range(0, len(l), 3)])\n    result = l.copy()\n    result[::3] = sorted_values\n    return result", "is_solved": true, "iteration": 1, "prompt_tokens": 1669, "completion_tokens": 188, "duration": 6.8375890254974365}]}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    result = ''\n    while x:\n        result = str(x % base) + result\n        x //= base\n    return result", "is_solved": true, "iterations": 1, "prompt_tokens": 1013, "completion_tokens": 165, "duration": 7.298094272613525, "iteration_states": [{"generated_code": "def change_base(x: int, base: int):\n    return str(int(str(x), 10 if base == 10 else base))", "is_solved": false, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 32, "duration": 4.395244598388672}, {"generated_code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    result = ''\n    while x:\n        result = str(x % base) + result\n        x //= base\n    return result", "is_solved": true, "iteration": 1, "prompt_tokens": 1013, "completion_tokens": 165, "duration": 7.298094272613525}]}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n\n    prod = 1\n    for num in numbers:\n        prod *= num\n\n    return sum(numbers), prod if 0 not in numbers else 0", "is_solved": true, "iterations": 2, "prompt_tokens": 1844, "completion_tokens": 353, "duration": 8.968103170394897, "iteration_states": [{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        return sum(numbers), 1 if 0 in numbers else eval('*'.join(map(str, numbers)))\n\n# Test cases\nprint(sum_product([]))  # (0, 1)\nprint(sum_product([1, 2, 3, 4]))  # (10, 24)", "is_solved": false, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 103, "duration": 4.0435051918029785}, {"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    \n    prod = 1\n    for num in numbers:\n        if num != 0:\n            prod *= num\n\n    return sum(numbers), prod", "is_solved": false, "iteration": 1, "prompt_tokens": 1037, "completion_tokens": 228, "duration": 6.5808024406433105}, {"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n\n    prod = 1\n    for num in numbers:\n        prod *= num\n\n    return sum(numbers), prod if 0 not in numbers else 0", "is_solved": true, "iteration": 2, "prompt_tokens": 1844, "completion_tokens": 353, "duration": 8.968103170394897}]}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)", "is_solved": true, "iterations": 3, "prompt_tokens": 2688, "completion_tokens": 277, "duration": 11.457684516906738, "iteration_states": [{"generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "is_solved": false, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 28, "duration": 5.186999797821045}, {"generated_code": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1) and all(s0.count(char) == s1.count(char) for char in set(s0))", "is_solved": false, "iteration": 1, "prompt_tokens": 1012, "completion_tokens": 129, "duration": 7.326702117919922}, {"generated_code": "def same_chars(s0: str, s1: str):\n    from collections import Counter\n    return Counter(s0) == Counter(s1)", "is_solved": false, "iteration": 2, "prompt_tokens": 1864, "completion_tokens": 206, "duration": 9.076782703399658}, {"generated_code": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)", "is_solved": true, "iteration": 3, "prompt_tokens": 2688, "completion_tokens": 277, "duration": 11.457684516906738}]}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_length = max(len(s) for s in strings)\n    longest_strings = [s for s in strings if len(s) == max_length]\n    return longest_strings[0]", "is_solved": true, "iterations": 3, "prompt_tokens": 2194, "completion_tokens": 397, "duration": 11.097129821777344, "iteration_states": [{"generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), x))", "is_solved": false, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 39, "duration": 3.525851011276245}, {"generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (-len(x), x))", "is_solved": false, "iteration": 1, "prompt_tokens": 820, "completion_tokens": 149, "duration": 5.846748352050781}, {"generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_length = max(len(s) for s in strings)\n    longest_strings = [s for s in strings if len(s) == max_length]\n    return min(longest_strings)", "is_solved": false, "iteration": 2, "prompt_tokens": 1475, "completion_tokens": 259, "duration": 8.375335454940796}, {"generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_length = max(len(s) for s in strings)\n    longest_strings = [s for s in strings if len(s) == max_length]\n    return longest_strings[0]", "is_solved": true, "iteration": 3, "prompt_tokens": 2194, "completion_tokens": 397, "duration": 11.097129821777344}]}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    sorted_even_vals = sorted([l[i] for i in even_indices])\n    result = [val if idx % 2 != 0 else sorted_even_vals.pop(0) for idx, val in enumerate(l)]\n    return result", "is_solved": true, "iterations": 3, "prompt_tokens": 3128, "completion_tokens": 462, "duration": 11.906111478805542, "iteration_states": [{"generated_code": "def sort_even(l: list):\n    even_values = sorted([x for x in l[::2]])\n    result = [val if idx % 2 == 0 else even_values.pop(0) for idx, val in enumerate(l)]\n    return result", "is_solved": false, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 58, "duration": 3.5508744716644287}, {"generated_code": "def sort_even(l: list):\n    even_values = sorted([x for x in l[::2]])\n    result = [val if idx % 2 == 0 else even_values.pop(0) for idx, val in enumerate(l)]\n    return result", "is_solved": false, "iteration": 1, "prompt_tokens": 1126, "completion_tokens": 163, "duration": 5.837781190872192}, {"generated_code": "def sort_even(l: list):\n    even_indices = sorted([i for i in range(len(l)) if i % 2 == 0], key=lambda x: l[x])\n    sorted_even_vals = [l[i] for i in even_indices]\n    result = [val if idx % 2 == 0 else sorted_even_vals.pop(0) for idx, val in enumerate(l)]\n    return result", "is_solved": false, "iteration": 2, "prompt_tokens": 2091, "completion_tokens": 311, "duration": 8.804845809936523}, {"generated_code": "def sort_even(l: list):\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    sorted_even_vals = sorted([l[i] for i in even_indices])\n    result = [val if idx % 2 != 0 else sorted_even_vals.pop(0) for idx, val in enumerate(l)]\n    return result", "is_solved": true, "iteration": 3, "prompt_tokens": 3128, "completion_tokens": 462, "duration": 11.906111478805542}]}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 and i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "is_solved": false, "iterations": 9, "prompt_tokens": 7731, "completion_tokens": 1238, "duration": 29.052669763565063, "iteration_states": [{"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "is_solved": false, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 57, "duration": 4.1797919273376465}, {"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and str(i).count('7') == 1:\n            count += 1\n    return count", "is_solved": false, "iteration": 1, "prompt_tokens": 984, "completion_tokens": 206, "duration": 6.904622316360474}, {"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0 or '7' in str(i):\n            count += 1\n    return count", "is_solved": false, "iteration": 2, "prompt_tokens": 1822, "completion_tokens": 324, "duration": 9.668821573257446}, {"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 != 0) and (i % 13 != 0) and '7' not in str(i):\n            count += 1\n    return count", "is_solved": false, "iteration": 3, "prompt_tokens": 2691, "completion_tokens": 478, "duration": 12.704479455947876}, {"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "is_solved": false, "iteration": 4, "prompt_tokens": 3536, "completion_tokens": 595, "duration": 15.240249633789062}, {"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 7 == 0) and ('3' in str(i) or '5' in str(i)):\n            count += 1\n    return count", "is_solved": false, "iteration": 5, "prompt_tokens": 4367, "completion_tokens": 716, "duration": 18.558611392974854}, {"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and ('7' in str(i)):\n            count += 1\n    return count", "is_solved": false, "iteration": 6, "prompt_tokens": 5194, "completion_tokens": 843, "duration": 21.139102458953857}, {"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) or ('7' in str(i)):\n            count += 1\n    return count", "is_solved": false, "iteration": 7, "prompt_tokens": 6040, "completion_tokens": 979, "duration": 23.679101943969727}, {"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "is_solved": false, "iteration": 8, "prompt_tokens": 6893, "completion_tokens": 1110, "duration": 26.31429672241211}, {"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 and i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "is_solved": false, "iteration": 9, "prompt_tokens": 7731, "completion_tokens": 1238, "duration": 29.052669763565063}]}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string: str) -> str:\n    def is_palindrome(s):\n        return s == s[::-1]\n\n    if string == '':\n        return ''\n\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            palindrome_suffix = string[i:]\n            return string + palindrome_suffix[:-1][::-1]\n\n    return string + string[:-1][::-1]", "is_solved": false, "iterations": 9, "prompt_tokens": 7675, "completion_tokens": 1344, "duration": 30.13390278816223, "iteration_states": [{"generated_code": "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    for i in range(len(string), 0, -1):\n        if string[:i] == string[:i][::-1]:\n            return string + string[:i-1][::-1]", "is_solved": false, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 64, "duration": 3.7330939769744873}, {"generated_code": "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    \n    def is_palindrome(s):\n        return s == s[::-1]\n    \n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i-1][::-1]", "is_solved": false, "iteration": 1, "prompt_tokens": 986, "completion_tokens": 193, "duration": 6.58388090133667}, {"generated_code": "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    \n    def is_palindrome(s):\n        return s == s[::-1]\n    \n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            palindrome_suffix = string[i:]\n            return string + palindrome_suffix[::-1]\n    return string", "is_solved": false, "iteration": 2, "prompt_tokens": 1800, "completion_tokens": 325, "duration": 9.46765661239624}, {"generated_code": "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    \n    def is_palindrome(s):\n        return s == s[::-1]\n    \n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            palindrome_suffix = string[i:]\n            return string + palindrome_suffix[::-1]\n    \n    return string + string[:-1][::-1]", "is_solved": false, "iteration": 3, "prompt_tokens": 2634, "completion_tokens": 483, "duration": 12.261602878570557}, {"generated_code": "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n\n    def is_palindrome(s):\n        return s == s[::-1]\n\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            palindrome_suffix = string[i:]\n            return string + palindrome_suffix[:-1][::-1]\n\n    return string + string[:-1][::-1]", "is_solved": false, "iteration": 4, "prompt_tokens": 3458, "completion_tokens": 615, "duration": 14.800337076187134}, {"generated_code": "def make_palindrome(string: str) -> str:\n    def is_palindrome(s):\n        return s == s[::-1]\n\n    if string == '':\n        return ''\n\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            palindrome_suffix = string[i:]\n            return string + palindrome_suffix[:-1][::-1]\n\n    return string + string[:-1][::-1]", "is_solved": false, "iteration": 5, "prompt_tokens": 4284, "completion_tokens": 749, "duration": 17.89856243133545}, {"generated_code": "def make_palindrome(string: str) -> str:\n    def is_palindrome(s):\n        return s == s[::-1]\n\n    if string == '':\n        return ''\n\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            palindrome_suffix = string[i:]\n            return string + string[:i][::-1]\n\n    return string + string[:-1][::-1]", "is_solved": false, "iteration": 6, "prompt_tokens": 5131, "completion_tokens": 903, "duration": 21.089482307434082}, {"generated_code": "def make_palindrome(string: str) -> str:\n    def is_palindrome(s):\n        return s == s[::-1]\n\n    if string == '':\n        return ''\n\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            palindrome_suffix = string[i:]\n            return string + string[:i][::-1]\n\n    return string + string[:-1][::-1]", "is_solved": false, "iteration": 7, "prompt_tokens": 5974, "completion_tokens": 1044, "duration": 24.16489052772522}, {"generated_code": "def make_palindrome(string: str) -> str:\n    def is_palindrome(s):\n        return s == s[::-1]\n\n    if string == '':\n        return ''\n\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            palindrome_suffix = string[i:]\n            return string + palindrome_suffix[::-1]\n\n    return string + string[:-1][::-1]", "is_solved": false, "iteration": 8, "prompt_tokens": 6831, "completion_tokens": 1197, "duration": 27.12920594215393}, {"generated_code": "def make_palindrome(string: str) -> str:\n    def is_palindrome(s):\n        return s == s[::-1]\n\n    if string == '':\n        return ''\n\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            palindrome_suffix = string[i:]\n            return string + palindrome_suffix[:-1][::-1]\n\n    return string + string[:-1][::-1]", "is_solved": false, "iteration": 9, "prompt_tokens": 7675, "completion_tokens": 1344, "duration": 30.13390278816223}]}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iterations": 0, "prompt_tokens": 137, "completion_tokens": 54, "duration": 5.898924827575684, "iteration_states": [{"generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 54, "duration": 5.898924827575684}]}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "is_solved": true, "iterations": 0, "prompt_tokens": 164, "completion_tokens": 29, "duration": 4.415369749069214, "iteration_states": [{"generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 29, "duration": 4.415369749069214}]}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "is_solved": true, "iterations": 0, "prompt_tokens": 113, "completion_tokens": 50, "duration": 4.908264875411987, "iteration_states": [{"generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 50, "duration": 4.908264875411987}]}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "is_solved": true, "iterations": 0, "prompt_tokens": 144, "completion_tokens": 22, "duration": 4.242558002471924, "iteration_states": [{"generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 22, "duration": 4.242558002471924}]}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0", "is_solved": true, "iterations": 0, "prompt_tokens": 139, "completion_tokens": 68, "duration": 6.116909980773926, "iteration_states": [{"generated_code": "def correct_bracketing(brackets: str):\n    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 68, "duration": 6.116909980773926}]}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))]", "is_solved": true, "iterations": 0, "prompt_tokens": 158, "completion_tokens": 28, "duration": 3.1749978065490723, "iteration_states": [{"generated_code": "def derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 28, "duration": 3.1749978065490723}]}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "is_solved": true, "iterations": 0, "prompt_tokens": 199, "completion_tokens": 72, "duration": 5.622449636459351, "iteration_states": [{"generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 72, "duration": 5.622449636459351}]}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "is_solved": true, "iterations": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 5.672107219696045, "iteration_states": [{"generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 5.672107219696045}]}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "is_solved": true, "iterations": 0, "prompt_tokens": 260, "completion_tokens": 37, "duration": 5.641664266586304, "iteration_states": [{"generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 37, "duration": 5.641664266586304}]}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    evens = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens, key=lambda x: (x[0], x[1]))\n    return [min_even[0], min_even[1]]", "is_solved": true, "iterations": 0, "prompt_tokens": 362, "completion_tokens": 78, "duration": 5.097854852676392, "iteration_states": [{"generated_code": "def pluck(arr):\n    evens = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens, key=lambda x: (x[0], x[1]))\n    return [min_even[0], min_even[1]]", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 78, "duration": 5.097854852676392}]}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 174, "completion_tokens": 44, "duration": 5.86173415184021, "iteration_states": [{"generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 44, "duration": 5.86173415184021}]}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "is_solved": true, "iterations": 0, "prompt_tokens": 171, "completion_tokens": 92, "duration": 6.1586079597473145, "iteration_states": [{"generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 92, "duration": 6.1586079597473145}]}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iterations": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 5.8480916023254395, "iteration_states": [{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 5.8480916023254395}]}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    length = len(arr)\n    changes = 0\n    for i in range(length // 2):\n        if arr[i] != arr[length - i - 1]:\n            changes += 1\n    return changes", "is_solved": true, "iterations": 0, "prompt_tokens": 207, "completion_tokens": 55, "duration": 1.1043100357055664, "iteration_states": [{"generated_code": "def smallest_change(arr):\n    length = len(arr)\n    changes = 0\n    for i in range(length // 2):\n        if arr[i] != arr[length - i - 1]:\n            changes += 1\n    return changes", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 55, "duration": 1.1043100357055664}]}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or (n != 1 and x % n == 0 and is_simple_power(x // n, n)))", "is_solved": true, "iterations": 0, "prompt_tokens": 192, "completion_tokens": 52, "duration": 4.641237735748291, "iteration_states": [{"generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or (n != 1 and x % n == 0 and is_simple_power(x // n, n)))", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 52, "duration": 4.641237735748291}]}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_digits = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count", "is_solved": true, "iterations": 0, "prompt_tokens": 349, "completion_tokens": 60, "duration": 3.5844950675964355, "iteration_states": [{"generated_code": "def hex_key(num):\n    prime_digits = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 60, "duration": 3.5844950675964355}]}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal)[2:] + 'db'", "is_solved": true, "iterations": 0, "prompt_tokens": 189, "completion_tokens": 25, "duration": 4.3092145919799805, "iteration_states": [{"generated_code": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal)[2:] + 'db'", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 25, "duration": 4.3092145919799805}]}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iterations": 0, "prompt_tokens": 131, "completion_tokens": 70, "duration": 3.4724762439727783, "iteration_states": [{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 70, "duration": 3.4724762439727783}]}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "is_solved": true, "iterations": 0, "prompt_tokens": 183, "completion_tokens": 21, "duration": 4.153321743011475, "iteration_states": [{"generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 21, "duration": 4.153321743011475}]}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "is_solved": true, "iterations": 0, "prompt_tokens": 94, "completion_tokens": 64, "duration": 1.0854251384735107, "iteration_states": [{"generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 94, "completion_tokens": 64, "duration": 1.0854251384735107}]}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "is_solved": true, "iterations": 0, "prompt_tokens": 105, "completion_tokens": 34, "duration": 2.8639819622039795, "iteration_states": [{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 105, "completion_tokens": 34, "duration": 2.8639819622039795}]}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    result = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        result.append(ordered_word)\n    return ' '.join(result)", "is_solved": true, "iterations": 0, "prompt_tokens": 180, "completion_tokens": 48, "duration": 4.981414556503296, "iteration_states": [{"generated_code": "def anti_shuffle(s):\n    words = s.split()\n    result = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        result.append(ordered_word)\n    return ' '.join(result)", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 48, "duration": 4.981414556503296}]}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 309, "completion_tokens": 68, "duration": 4.027481555938721, "iteration_states": [{"generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 68, "duration": 4.027481555938721}]}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            base = ord('a') if char.islower() else ord('A')\n            result += chr((ord(char) - base + 2 * 2) % 26 + base)\n        else:\n            result += char\n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 160, "completion_tokens": 76, "duration": 3.5757226943969727, "iteration_states": [{"generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            base = ord('a') if char.islower() else ord('A')\n            result += chr((ord(char) - base + 2 * 2) % 26 + base)\n        else:\n            result += char\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 76, "duration": 3.5757226943969727}]}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "is_solved": true, "iterations": 0, "prompt_tokens": 174, "completion_tokens": 52, "duration": 4.791964769363403, "iteration_states": [{"generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 52, "duration": 4.791964769363403}]}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences if sentence]\n    \n    count = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0] == \"I\":\n            count += 1\n    \n    return count", "is_solved": true, "iterations": 0, "prompt_tokens": 157, "completion_tokens": 71, "duration": 3.5930309295654297, "iteration_states": [{"generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences if sentence]\n    \n    count = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0] == \"I\":\n            count += 1\n    \n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 71, "duration": 3.5930309295654297}]}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "is_solved": true, "iterations": 0, "prompt_tokens": 185, "completion_tokens": 54, "duration": 4.871682405471802, "iteration_states": [{"generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 54, "duration": 4.871682405471802}]}
{"task_id": "HumanEval/94", "generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    prime_values = [num for num in lst if is_prime(num)]\n    largest_prime = max(prime_values)\n    \n    return sum_of_digits(largest_prime)", "is_solved": true, "iterations": 0, "prompt_tokens": 336, "completion_tokens": 120, "duration": 5.921804666519165, "iteration_states": [{"generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    prime_values = [num for num in lst if is_prime(num)]\n    largest_prime = max(prime_values)\n    \n    return sum_of_digits(largest_prime)", "is_solved": true, "iteration": 0, "prompt_tokens": 336, "completion_tokens": 120, "duration": 5.921804666519165}]}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "is_solved": true, "iterations": 0, "prompt_tokens": 195, "completion_tokens": 87, "duration": 3.5806374549865723, "iteration_states": [{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 87, "duration": 3.5806374549865723}]}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return int(str(abs(a) % 10)) * int(str(abs(b) % 10))", "is_solved": true, "iterations": 0, "prompt_tokens": 148, "completion_tokens": 27, "duration": 4.40070652961731, "iteration_states": [{"generated_code": "def multiply(a, b):\n    return int(str(abs(a) % 10)) * int(str(abs(b) % 10))", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 27, "duration": 4.40070652961731}]}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    return sum(1 for i in range(0, len(s), 2) if s[i] in 'AEIOU')", "is_solved": true, "iterations": 0, "prompt_tokens": 122, "completion_tokens": 37, "duration": 4.357618093490601, "iteration_states": [{"generated_code": "def count_upper(s):\n    return sum(1 for i in range(0, len(s), 2) if s[i] in 'AEIOU')", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 37, "duration": 4.357618093490601}]}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    value = float(value)\n    return int(value + 0.5) if value > 0 else int(value - 0.5)", "is_solved": true, "iterations": 0, "prompt_tokens": 206, "completion_tokens": 39, "duration": 4.614492893218994, "iteration_states": [{"generated_code": "def closest_integer(value):\n    value = float(value)\n    return int(value + 0.5) if value > 0 else int(value - 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 39, "duration": 4.614492893218994}]}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(',', ' ').split()]", "is_solved": true, "iterations": 0, "prompt_tokens": 166, "completion_tokens": 25, "duration": 2.786447525024414, "iteration_states": [{"generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(',', ' ').split()]", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 25, "duration": 2.786447525024414}]}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    return max([i for i in range(x, y+1) if i % 2 == 0] + [-1])", "is_solved": true, "iterations": 0, "prompt_tokens": 144, "completion_tokens": 39, "duration": 2.6726202964782715, "iteration_states": [{"generated_code": "def choose_num(x, y):\n    return max([i for i in range(x, y+1) if i % 2 == 0] + [-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 39, "duration": 2.6726202964782715}]}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m-n+1))\n    return bin(avg)", "is_solved": true, "iterations": 0, "prompt_tokens": 190, "completion_tokens": 46, "duration": 3.154949903488159, "iteration_states": [{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m-n+1))\n    return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 46, "duration": 3.154949903488159}]}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iterations": 0, "prompt_tokens": 152, "completion_tokens": 33, "duration": 2.7222673892974854, "iteration_states": [{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 33, "duration": 2.7222673892974854}]}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    nums = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    arr = [x for x in arr if 1 <= x <= 9]\n    arr.sort()\n    arr.reverse()\n    return [nums[x-1] for x in arr]", "is_solved": true, "iterations": 0, "prompt_tokens": 326, "completion_tokens": 78, "duration": 3.382270097732544, "iteration_states": [{"generated_code": "def by_length(arr):\n    nums = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    arr = [x for x in arr if 1 <= x <= 9]\n    arr.sort()\n    arr.reverse()\n    return [nums[x-1] for x in arr]", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 78, "duration": 3.382270097732544}]}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    def factorial(num):\n        if num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    \n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 174, "completion_tokens": 92, "duration": 1.7012665271759033, "iteration_states": [{"generated_code": "def f(n):\n    def factorial(num):\n        if num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    \n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 92, "duration": 1.7012665271759033}]}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count, odd_count = 0, 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "is_solved": true, "iterations": 0, "prompt_tokens": 261, "completion_tokens": 98, "duration": 3.75720477104187, "iteration_states": [{"generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count, odd_count = 0, 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 98, "duration": 3.75720477104187}]}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    sorted_arr = sorted(arr)\n    for _ in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n        \n    return False", "is_solved": true, "iterations": 0, "prompt_tokens": 349, "completion_tokens": 63, "duration": 3.3378124237060547, "iteration_states": [{"generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    sorted_arr = sorted(arr)\n    for _ in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n        \n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 63, "duration": 3.3378124237060547}]}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = \"\".join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iterations": 0, "prompt_tokens": 508, "completion_tokens": 78, "duration": 4.2718048095703125, "iteration_states": [{"generated_code": "def reverse_delete(s, c):\n    result = \"\".join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 508, "completion_tokens": 78, "duration": 4.2718048095703125}]}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    if not array:\n        return []\n    \n    sorted_array = sorted(array)\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array", "is_solved": true, "iterations": 1, "prompt_tokens": 1313, "completion_tokens": 157, "duration": 6.004330635070801, "iteration_states": [{"generated_code": "def sort_array(array):\n    sorted_array = sorted(array)\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array", "is_solved": false, "iteration": 0, "prompt_tokens": 253, "completion_tokens": 50, "duration": 3.571953773498535}, {"generated_code": "def sort_array(array):\n    if not array:\n        return []\n    \n    sorted_array = sorted(array)\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array", "is_solved": true, "iteration": 1, "prompt_tokens": 1313, "completion_tokens": 157, "duration": 6.004330635070801}]}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(1 for num in lst1 if num % 2 != 0) <= sum(1 for num in lst2 if num % 2 == 0) else \"NO\"", "is_solved": true, "iterations": 1, "prompt_tokens": 1356, "completion_tokens": 178, "duration": 6.021646738052368, "iteration_states": [{"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(1 for num in lst1 if num % 2 != 0) <= len(lst2) else \"NO\"", "is_solved": false, "iteration": 0, "prompt_tokens": 247, "completion_tokens": 44, "duration": 3.410109043121338}, {"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(1 for num in lst1 if num % 2 != 0) <= sum(1 for num in lst2 if num % 2 == 0) else \"NO\"", "is_solved": true, "iteration": 1, "prompt_tokens": 1356, "completion_tokens": 178, "duration": 6.021646738052368}]}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    \n    keys = dict.keys()\n    if all(isinstance(key, str) for key in keys):\n        lowercase_keys = all(key.islower() for key in keys)\n        uppercase_keys = all(key.isupper() for key in keys)\n        return lowercase_keys or uppercase_keys\n    else:\n        return False", "is_solved": true, "iterations": 1, "prompt_tokens": 1156, "completion_tokens": 180, "duration": 8.672712087631226, "iteration_states": [{"generated_code": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    \n    lowercase_keys = all(key.islower() for key in dict.keys())\n    uppercase_keys = all(key.isupper() for key in dict.keys())\n    \n    return lowercase_keys or uppercase_keys", "is_solved": false, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 62, "duration": 6.021496057510376}, {"generated_code": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    \n    keys = dict.keys()\n    if all(isinstance(key, str) for key in keys):\n        lowercase_keys = all(key.islower() for key in keys)\n        uppercase_keys = all(key.isupper() for key in keys)\n        return lowercase_keys or uppercase_keys\n    else:\n        return False", "is_solved": true, "iteration": 1, "prompt_tokens": 1156, "completion_tokens": 180, "duration": 8.672712087631226}]}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    sum1 = sum(len(x) for x in lst1)\n    sum2 = sum(len(x) for x in lst2)\n    \n    if sum1 < sum2:\n        return lst1\n    elif sum1 > sum2:\n        return lst2\n    else:\n        return lst1", "is_solved": true, "iterations": 1, "prompt_tokens": 1317, "completion_tokens": 197, "duration": 9.186126947402954, "iteration_states": [{"generated_code": "def total_match(lst1, lst2):\n    sum1 = sum(len(x) for x in lst1)\n    sum2 = sum(len(x) for x in lst2)\n    \n    if sum1 < sum2:\n        return lst1\n    else:\n        return lst2", "is_solved": false, "iteration": 0, "prompt_tokens": 243, "completion_tokens": 63, "duration": 6.388736724853516}, {"generated_code": "def total_match(lst1, lst2):\n    sum1 = sum(len(x) for x in lst1)\n    sum2 = sum(len(x) for x in lst2)\n    \n    if sum1 < sum2:\n        return lst1\n    elif sum1 > sum2:\n        return lst2\n    else:\n        return lst1", "is_solved": true, "iteration": 1, "prompt_tokens": 1317, "completion_tokens": 197, "duration": 9.186126947402954}]}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    return all(s[i] != s[i+1] and s[i] != s[i+2] and s[i+1] != s[i+2] for i in range(len(s)-2)) if len(s) >= 3 else False", "is_solved": true, "iterations": 1, "prompt_tokens": 950, "completion_tokens": 171, "duration": 3.8294570446014404, "iteration_states": [{"generated_code": "def is_happy(s):\n    return all(s[i] != s[i+1] != s[i+2] for i in range(len(s)-2)) if len(s) >= 3 else False", "is_solved": false, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 47, "duration": 1.0319738388061523}, {"generated_code": "def is_happy(s):\n    return all(s[i] != s[i+1] and s[i] != s[i+2] and s[i+1] != s[i+2] for i in range(len(s)-2)) if len(s) >= 3 else False", "is_solved": true, "iteration": 1, "prompt_tokens": 950, "completion_tokens": 171, "duration": 3.8294570446014404}]}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    lst = test.split()\n    hist = {}\n    if not lst:\n        return {}\n    for letter in lst:\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n    return {k: v for k, v in hist.items() if v == max_count}", "is_solved": true, "iterations": 1, "prompt_tokens": 1239, "completion_tokens": 226, "duration": 7.086573600769043, "iteration_states": [{"generated_code": "def histogram(test):\n    lst = test.split()\n    hist = {}\n    for letter in lst:\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n    return {k: v for k, v in hist.items() if v == max_count}", "is_solved": false, "iteration": 0, "prompt_tokens": 201, "completion_tokens": 79, "duration": 4.324152231216431}, {"generated_code": "def histogram(test):\n    lst = test.split()\n    hist = {}\n    if not lst:\n        return {}\n    for letter in lst:\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n    return {k: v for k, v in hist.items() if v == max_count}", "is_solved": true, "iteration": 1, "prompt_tokens": 1239, "completion_tokens": 226, "duration": 7.086573600769043}]}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    count = 0\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    \n    for i, char in enumerate(s):\n        if char.lower() in vowels or (char.lower() == 'y' and i == len(s) - 1):\n            count += 1\n    \n    return count", "is_solved": true, "iterations": 2, "prompt_tokens": 1795, "completion_tokens": 318, "duration": 10.168331861495972, "iteration_states": [{"generated_code": "def vowels_count(s):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    \n    if s[-1].lower() == 'y':\n        count += 1\n    \n    for char in s[:-1]:\n        if char.lower() in vowels:\n            count += 1\n    \n    return count", "is_solved": false, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 78, "duration": 5.1695027351379395}, {"generated_code": "def vowels_count(s):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'y'])\n    count = 0\n    \n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    \n    return count", "is_solved": false, "iteration": 1, "prompt_tokens": 1026, "completion_tokens": 202, "duration": 7.733496189117432}, {"generated_code": "def vowels_count(s):\n    count = 0\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    \n    for i, char in enumerate(s):\n        if char.lower() in vowels or (char.lower() == 'y' and i == len(s) - 1):\n            count += 1\n    \n    return count", "is_solved": true, "iteration": 2, "prompt_tokens": 1795, "completion_tokens": 318, "duration": 10.168331861495972}]}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 2)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones", "is_solved": true, "iterations": 2, "prompt_tokens": 1979, "completion_tokens": 310, "duration": 11.571051120758057, "iteration_states": [{"generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            n += 2\n        else:\n            n += 1\n        stones.append(n)\n    return stones", "is_solved": false, "iteration": 0, "prompt_tokens": 182, "completion_tokens": 61, "duration": 5.982418060302734}, {"generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 1)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones", "is_solved": false, "iteration": 1, "prompt_tokens": 1073, "completion_tokens": 194, "duration": 8.920314073562622}, {"generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 2)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones", "is_solved": true, "iteration": 2, "prompt_tokens": 1979, "completion_tokens": 310, "duration": 11.571051120758057}]}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return a >= 0 and round(abs(a)**(1/3))**3 == abs(a)", "is_solved": false, "iterations": 9, "prompt_tokens": 6418, "completion_tokens": 704, "duration": 21.934945583343506, "iteration_states": [{"generated_code": "def iscube(a):\n    return int(a**(1/3))**3 == a", "is_solved": false, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 23, "duration": 4.322655439376831}, {"generated_code": "def iscube(a):\n    return a >= 0 and round(a**(1/3))**3 == a", "is_solved": false, "iteration": 1, "prompt_tokens": 863, "completion_tokens": 97, "duration": 6.806242942810059}, {"generated_code": "def iscube(a):\n    return a >= 0 and (a**(1/3)).is_integer()", "is_solved": false, "iteration": 2, "prompt_tokens": 1541, "completion_tokens": 162, "duration": 8.44187045097351}, {"generated_code": "def iscube(a):\n    return a >= 0 and (a**(1/3)).is_integer() if a >= 0 else (-a)**(1/3).is_integer()", "is_solved": false, "iteration": 3, "prompt_tokens": 2233, "completion_tokens": 242, "duration": 10.646482706069946}, {"generated_code": "def iscube(a):\n    return round(a**(1/3))**3 == a", "is_solved": false, "iteration": 4, "prompt_tokens": 2958, "completion_tokens": 311, "duration": 12.530174970626831}, {"generated_code": "def iscube(a):\n    return a >= 0 and round(a**(1/3))**3 == a", "is_solved": false, "iteration": 5, "prompt_tokens": 3657, "completion_tokens": 393, "duration": 14.46077561378479}, {"generated_code": "def iscube(a):\n    return a >= 0 and round(abs(a)**(1/3))**3 == abs(a)", "is_solved": false, "iteration": 6, "prompt_tokens": 4355, "completion_tokens": 483, "duration": 16.219542980194092}, {"generated_code": "def iscube(a):\n    return a >= 0 and round(abs(a)**(1/3))**3 == abs(a)", "is_solved": false, "iteration": 7, "prompt_tokens": 5050, "completion_tokens": 564, "duration": 18.144991159439087}, {"generated_code": "def iscube(a):\n    return a >= 0 and round(abs(a)**(1/3))**3 == abs(a)", "is_solved": false, "iteration": 8, "prompt_tokens": 5728, "completion_tokens": 628, "duration": 20.047727823257446}, {"generated_code": "def iscube(a):\n    return a >= 0 and round(abs(a)**(1/3))**3 == abs(a)", "is_solved": false, "iteration": 9, "prompt_tokens": 6418, "completion_tokens": 704, "duration": 21.934945583343506}]}
{"task_id": "HumanEval/69", "generated_code": "from collections import Counter\n\ndef search(lst):\n    counter = Counter(lst)\n    max_freq_value = -1\n    for num, freq in counter.items():\n        if num > 0 and freq >= num:\n            max_freq_value = max(max_freq_value, num)\n    return max_freq_value", "is_solved": true, "iterations": 7, "prompt_tokens": 21450, "completion_tokens": 887, "duration": 23.569854736328125, "iteration_states": [{"generated_code": "def search(lst):\n    from collections import Counter\n    counts = Counter(lst)\n    for num, freq in counts.items():\n        if num > 0 and freq >= num:\n            return num\n    return -1", "is_solved": false, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 49, "duration": 3.606308937072754}, {"generated_code": "def search(lst):\n    lst_set = set(lst)\n    for i in range(1, len(lst)+2):\n        if i not in lst_set:\n            return i\n    return -1", "is_solved": false, "iteration": 1, "prompt_tokens": 3145, "completion_tokens": 160, "duration": 6.346490859985352}, {"generated_code": "from collections import Counter\n\ndef search(lst):\n    counts = Counter(lst)\n    for num, freq in counts.items():\n        if num > 0 and freq >= num:\n            return num\n    return -1", "is_solved": false, "iteration": 2, "prompt_tokens": 6291, "completion_tokens": 266, "duration": 9.25828742980957}, {"generated_code": "def search(lst):\n    lst_set = set(lst)\n    for i in range(1, max(lst) + 2):\n        if i not in lst_set:\n            return i\n    return -1", "is_solved": false, "iteration": 3, "prompt_tokens": 9220, "completion_tokens": 380, "duration": 11.771318674087524}, {"generated_code": "from collections import Counter\n\ndef search(lst):\n    counter = Counter(lst)\n    max_value = max(lst)\n    for i in range(1, max_value + 1):\n        if i in counter and counter[i] >= i:\n            return i\n    return -1", "is_solved": false, "iteration": 4, "prompt_tokens": 12369, "completion_tokens": 498, "duration": 15.419418811798096}, {"generated_code": "from collections import Counter\n\ndef search(lst):\n    counter = Counter(lst)\n    max_freq_value = -1\n    for num, freq in counter.items():\n        if num == freq and num > max_freq_value:\n            max_freq_value = num\n    return max_freq_value", "is_solved": false, "iteration": 5, "prompt_tokens": 15369, "completion_tokens": 621, "duration": 18.074674606323242}, {"generated_code": "from collections import Counter\n\ndef search(lst):\n    counter = Counter(lst)\n    max_freq_value = -1\n    for num, freq in counter.items():\n        if num > 0 and num == freq and num > max_freq_value:\n            max_freq_value = num\n    return max_freq_value", "is_solved": false, "iteration": 6, "prompt_tokens": 18404, "completion_tokens": 754, "duration": 20.682599544525146}, {"generated_code": "from collections import Counter\n\ndef search(lst):\n    counter = Counter(lst)\n    max_freq_value = -1\n    for num, freq in counter.items():\n        if num > 0 and freq >= num:\n            max_freq_value = max(max_freq_value, num)\n    return max_freq_value", "is_solved": true, "iteration": 7, "prompt_tokens": 21450, "completion_tokens": 887, "duration": 23.569854736328125}]}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        if gpa > 3.7:\n            return 'A'\n        if gpa > 3.3:\n            return 'A-'\n        if gpa > 3.0:\n            return 'B+'\n        if gpa > 2.7:\n            return 'B'\n        if gpa > 2.3:\n            return 'B-'\n        if gpa > 2.0:\n            return 'C+'\n        if gpa > 1.7:\n            return 'C'\n        if gpa > 1.3:\n            return 'C-'\n        if gpa > 1.0:\n            return 'D+'\n        if gpa > 0.7:\n            return 'D'\n        if gpa > 0.0:\n            return 'D-'\n        return 'E'\n\n    return [grade(g) for g in grades]", "is_solved": true, "iterations": 4, "prompt_tokens": 5950, "completion_tokens": 1375, "duration": 29.39318037033081, "iteration_states": [{"generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        if gpa > 3.7:\n            return 'A'\n        if gpa > 3.3:\n            return 'A-'\n        if gpa > 3.0:\n            return 'B+'\n        if gpa > 2.7:\n            return 'B'\n        if gpa > 2.3:\n            return 'B-'\n        if gpa > 2.0:\n            return 'C+'\n        if gpa > 1.7:\n            return 'C'\n        if gpa > 1.3:\n            return 'C-'\n        if gpa > 1.0:\n            return 'D+'\n        if gpa > 0.7:\n            return 'D'\n        if gpa >= 0.0:\n            return 'D-'\n        return 'E'\n\n    return [grade(g) for g in grades]", "is_solved": false, "iteration": 0, "prompt_tokens": 320, "completion_tokens": 221, "duration": 8.414106845855713}, {"generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        if gpa > 3.7:\n            return 'A'\n        if gpa > 3.3:\n            return 'A-'\n        if gpa > 3.0:\n            return 'B+'\n        if gpa > 2.7:\n            return 'B'\n        if gpa > 2.3:\n            return 'B-'\n        if gpa > 2.0:\n            return 'C+'\n        if gpa > 1.7:\n            return 'C'\n        if gpa > 1.3:\n            return 'C-'\n        if gpa > 1.0:\n            return 'D+'\n        if gpa >= 0.7:\n            return 'D'\n        if gpa >= 0.0:\n            return 'D-'\n        return 'E'\n\n    return [grade(g) for g in grades]", "is_solved": false, "iteration": 1, "prompt_tokens": 1724, "completion_tokens": 503, "duration": 14.350631952285767}, {"generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        if gpa > 3.7:\n            return 'A'\n        if gpa > 3.3:\n            return 'A-'\n        if gpa > 3.0:\n            return 'B+'\n        if gpa > 2.7:\n            return 'B'\n        if gpa > 2.3:\n            return 'B-'\n        if gpa > 2.0:\n            return 'C+'\n        if gpa > 1.7:\n            return 'C'\n        if gpa > 1.3:\n            return 'C-'\n        if gpa > 1.0:\n            return 'D+'\n        if gpa >= 0.7:\n            return 'D'\n        if gpa >= 0.0:\n            return 'D-'\n        return 'E'\n\n    return [grade(g) for g in grades]", "is_solved": false, "iteration": 2, "prompt_tokens": 3134, "completion_tokens": 791, "duration": 19.043805360794067}, {"generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        if gpa > 3.7:\n            return 'A'\n        if gpa > 3.3:\n            return 'A-'\n        if gpa > 3.0:\n            return 'B+'\n        if gpa > 2.7:\n            return 'B'\n        if gpa > 2.3:\n            return 'B-'\n        if gpa > 2.0:\n            return 'C+'\n        if gpa > 1.7:\n            return 'C'\n        if gpa > 1.3:\n            return 'C-'\n        if gpa > 1.0:\n            return 'D+'\n        if gpa >= 0.7:\n            return 'D'\n        if gpa > 0.0:\n            return 'D-'\n        return 'E'\n\n    return [grade(g) for g in grades]", "is_solved": false, "iteration": 3, "prompt_tokens": 4565, "completion_tokens": 1100, "duration": 24.50015926361084}, {"generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        if gpa > 3.7:\n            return 'A'\n        if gpa > 3.3:\n            return 'A-'\n        if gpa > 3.0:\n            return 'B+'\n        if gpa > 2.7:\n            return 'B'\n        if gpa > 2.3:\n            return 'B-'\n        if gpa > 2.0:\n            return 'C+'\n        if gpa > 1.7:\n            return 'C'\n        if gpa > 1.3:\n            return 'C-'\n        if gpa > 1.0:\n            return 'D+'\n        if gpa > 0.7:\n            return 'D'\n        if gpa > 0.0:\n            return 'D-'\n        return 'E'\n\n    return [grade(g) for g in grades]", "is_solved": true, "iteration": 4, "prompt_tokens": 5950, "completion_tokens": 1375, "duration": 29.39318037033081}]}
{"task_id": "HumanEval/75", "generated_code": "import math\n\ndef is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_factors_count(n):\n        count = 0\n        for i in range(2, n):\n            while n % i == 0 and is_prime(i):\n                n //= i\n                count += 1\n        return count\n\n    return prime_factors_count(a) == 3", "is_solved": true, "iterations": 6, "prompt_tokens": 6043, "completion_tokens": 1219, "duration": 28.314890146255493, "iteration_states": [{"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    count = 0\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            count += 1\n    return count == 3", "is_solved": false, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 106, "duration": 6.856443166732788}, {"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    prime_factors = set()\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            prime_factors.add(i)\n    \n    return len(prime_factors) == 3", "is_solved": false, "iteration": 1, "prompt_tokens": 1093, "completion_tokens": 281, "duration": 10.10549259185791}, {"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    prime_factors = set()\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            prime_factors.add(i)\n    \n    return len(prime_factors) >= 3", "is_solved": false, "iteration": 2, "prompt_tokens": 2091, "completion_tokens": 480, "duration": 14.558436155319214}, {"generated_code": "import math\n\ndef is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    prime_factors = set()\n    for i in range(2, a):\n        while a % i == 0 and is_prime(i):\n            prime_factors.add(i)\n            a //= i\n    \n    return len(prime_factors) >= 3", "is_solved": false, "iteration": 3, "prompt_tokens": 3098, "completion_tokens": 692, "duration": 18.77717423439026}, {"generated_code": "import math\n\ndef is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    prime_factors = set()\n    for i in range(2, a):\n        while a % i == 0 and is_prime(i):\n            prime_factors.add(i)\n            a //= i\n    \n    return len(prime_factors) == 3", "is_solved": false, "iteration": 4, "prompt_tokens": 4081, "completion_tokens": 872, "duration": 21.86397433280945}, {"generated_code": "import math\n\ndef is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    count = 0\n    for i in range(2, a):\n        while a % i == 0 and is_prime(i):\n            a //= i\n            count += 1\n    \n    return count == 3 and is_prime(a)", "is_solved": false, "iteration": 5, "prompt_tokens": 5056, "completion_tokens": 1044, "duration": 24.826963186264038}, {"generated_code": "import math\n\ndef is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_factors_count(n):\n        count = 0\n        for i in range(2, n):\n            while n % i == 0 and is_prime(i):\n                n //= i\n                count += 1\n        return count\n\n    return prime_factors_count(a) == 3", "is_solved": true, "iteration": 6, "prompt_tokens": 6043, "completion_tokens": 1219, "duration": 28.314890146255493}]}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in num)} in the string {i} of the input.\" for i, num in enumerate(lst, 1)]", "is_solved": false, "iterations": 9, "prompt_tokens": 9750, "completion_tokens": 1087, "duration": 27.70158362388611, "iteration_states": [{"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)}n the str{i+1}ng {s} of the {i+1}nput.\" for i, s in enumerate(lst)]", "is_solved": false, "iteration": 0, "prompt_tokens": 223, "completion_tokens": 65, "duration": 3.23934006690979}, {"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)} in the str{i+1}ng {s} of the {i+1}nput.\" for i, s in enumerate(lst)]", "is_solved": false, "iteration": 1, "prompt_tokens": 1276, "completion_tokens": 173, "duration": 5.825451850891113}, {"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in str(num))} in the str{i+1}ng {num} of the {i+1}nput.\" for i, num in enumerate(lst)]", "is_solved": false, "iteration": 2, "prompt_tokens": 2358, "completion_tokens": 312, "duration": 8.80141830444336}, {"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in num)} in the str{i+1}ng {num} of the {i+1}nput.\" for i, num in enumerate(lst)]", "is_solved": false, "iteration": 3, "prompt_tokens": 3408, "completion_tokens": 413, "duration": 11.039976835250854}, {"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in num)} in the str{i+1}ng {num} of the {i+1}nput.\" for i, num in enumerate(lst)]", "is_solved": false, "iteration": 4, "prompt_tokens": 4468, "completion_tokens": 528, "duration": 13.436609983444214}, {"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in num)}n the str{lst.index(num)+1}ng {num} of the {lst.index(num)+1}nput.\" for num in lst]", "is_solved": false, "iteration": 5, "prompt_tokens": 5541, "completion_tokens": 658, "duration": 18.21769404411316}, {"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in num)}n the str{lst.index(num)+1}ng {num} of the {lst.index(num)+1}nput.\" for num in lst]", "is_solved": false, "iteration": 6, "prompt_tokens": 6611, "completion_tokens": 781, "duration": 20.69819474220276}, {"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in num)}n the str{i+1}ng {num} of the {i+1}nput.\" for i, num in enumerate(lst)]", "is_solved": false, "iteration": 7, "prompt_tokens": 7678, "completion_tokens": 899, "duration": 23.399060249328613}, {"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in num)} in the string {num} of the input.\" for num in lst]", "is_solved": false, "iteration": 8, "prompt_tokens": 8727, "completion_tokens": 989, "duration": 25.528422832489014}, {"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in num)} in the string {i} of the input.\" for i, num in enumerate(lst, 1)]", "is_solved": false, "iteration": 9, "prompt_tokens": 9750, "completion_tokens": 1087, "duration": 27.70158362388611}]}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num == 0:\n            count += 1\n        elif num < 0:\n            count += sum(1 for digit in str(num) if digit.isdigit() and digit != '0') + 1\n        else:\n            count += sum(1 for digit in str(num) if digit.isdigit() and digit != '0')\n    return count", "is_solved": false, "iterations": 9, "prompt_tokens": 9293, "completion_tokens": 1323, "duration": 29.793242931365967, "iteration_states": [{"generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num < 0:\n            num = str(num)[1:]\n        if sum(int(digit) for digit in str(num)) > 0:\n            count += 1\n    return count", "is_solved": false, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 63, "duration": 3.6947553157806396}, {"generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        signed_num = str(num)\n        if num < 0:\n            signed_num = signed_num[1:]\n        if sum(int(digit) for digit in signed_num) > 0:\n            count += 1\n    return count", "is_solved": false, "iteration": 1, "prompt_tokens": 1146, "completion_tokens": 189, "duration": 6.740330219268799}, {"generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        all_positive_digits = all(int(digit) > 0 for digit in str(abs(num)) if digit.isdigit())\n        if all_positive_digits:\n            count += 1\n    return count", "is_solved": false, "iteration": 2, "prompt_tokens": 2130, "completion_tokens": 301, "duration": 9.136767625808716}, {"generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        all_nonzero_digits = all(int(digit) != 0 for digit in str(abs(num)) if digit.isdigit())\n        if all_nonzero_digits:\n            count += 1\n    return count", "is_solved": false, "iteration": 3, "prompt_tokens": 3103, "completion_tokens": 424, "duration": 11.936858892440796}, {"generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        all_nonzero_digits = all(int(digit) != 0 for digit in str(abs(num)) if digit.isdigit())\n        if num == 0:\n            all_nonzero_digits = False\n        if all_nonzero_digits:\n            count += 1\n    return count", "is_solved": false, "iteration": 4, "prompt_tokens": 4078, "completion_tokens": 560, "duration": 14.494802951812744}, {"generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num == 0:\n            count += 1\n        else:\n            all_nonzero_digits = all(int(digit) != 0 for digit in str(abs(num)) if digit.isdigit())\n            if all_nonzero_digits:\n                count += 1\n    return count", "is_solved": false, "iteration": 5, "prompt_tokens": 5089, "completion_tokens": 703, "duration": 17.2307608127594}, {"generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num == 0:\n            count += 1\n        elif num < 0:\n            count += sum(1 for digit in str(num) if digit.isdigit() and digit != '0') - 1\n        else:\n            count += sum(1 for digit in str(num) if digit.isdigit() and digit != '0')\n    return count", "is_solved": false, "iteration": 6, "prompt_tokens": 6122, "completion_tokens": 863, "duration": 20.470136404037476}, {"generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num == 0:\n            count += 1\n        elif num < 0:\n            count += sum(1 for digit in str(num) if digit.isdigit() and digit != '0') + 1\n        else:\n            count += sum(1 for digit in str(num) if digit.isdigit() and digit != '0')\n    return count", "is_solved": false, "iteration": 7, "prompt_tokens": 7171, "completion_tokens": 1015, "duration": 23.615468502044678}, {"generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num == 0:\n            count += 1\n        elif num < 0:\n            count += sum(1 for digit in str(num) if digit.isdigit() and digit != '0') + 1\n        else:\n            count += sum(1 for digit in str(num) if digit.isdigit() and digit != '0')\n    return count", "is_solved": false, "iteration": 8, "prompt_tokens": 8241, "completion_tokens": 1178, "duration": 26.870092630386353}, {"generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num == 0:\n            count += 1\n        elif num < 0:\n            count += sum(1 for digit in str(num) if digit.isdigit() and digit != '0') + 1\n        else:\n            count += sum(1 for digit in str(num) if digit.isdigit() and digit != '0')\n    return count", "is_solved": false, "iteration": 9, "prompt_tokens": 9293, "completion_tokens": 1323, "duration": 29.793242931365967}]}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    \n    if shift == 0:\n        return x_str\n    elif shift < len(x_str):\n        return x_str[-shift:] + x_str[:-shift]\n    else:\n        return x_str[::-1]", "is_solved": false, "iterations": 9, "prompt_tokens": 6863, "completion_tokens": 1316, "duration": 34.73826193809509, "iteration_states": [{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "is_solved": false, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 55, "duration": 6.772214412689209}, {"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift] if shift <= len(x_str) // 2 else x_str[-shift:] + x_str[:-shift][::-1]", "is_solved": false, "iteration": 1, "prompt_tokens": 847, "completion_tokens": 205, "duration": 12.559570789337158}, {"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        if shift <= len(x_str) // 2:\n            return x_str[-shift:] + x_str[:-shift]\n        else:\n            return x_str[-shift:] + x_str[:-shift][::-1]", "is_solved": false, "iteration": 2, "prompt_tokens": 1623, "completion_tokens": 372, "duration": 15.477375507354736}, {"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "is_solved": false, "iteration": 3, "prompt_tokens": 2393, "completion_tokens": 490, "duration": 18.02775287628174}, {"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    \n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift] if shift <= len(x_str) // 2 else x_str[::-1]", "is_solved": false, "iteration": 4, "prompt_tokens": 3089, "completion_tokens": 613, "duration": 20.47531294822693}, {"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    \n    if shift == 0:\n        return x_str\n    else:\n        if shift <= len(x_str) // 2:\n            return x_str[-shift:] + x_str[:-shift]\n        else:\n            return x_str[-shift:] + x_str[:-shift] if shift <= len(x_str) // 2 else x_str[::-1]", "is_solved": false, "iteration": 5, "prompt_tokens": 3825, "completion_tokens": 770, "duration": 23.522828102111816}, {"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    \n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift] if shift <= len(x_str) // 2 else x_str[-shift:] + x_str[:-shift] if shift <= len(x_str) else x_str[::-1]", "is_solved": false, "iteration": 6, "prompt_tokens": 4627, "completion_tokens": 928, "duration": 26.738133430480957}, {"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    \n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift] if shift <= len(x_str) else x_str[::-1]", "is_solved": false, "iteration": 7, "prompt_tokens": 5407, "completion_tokens": 1060, "duration": 29.56920623779297}, {"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    \n    return x_str[-shift:] + x_str[:-shift] if shift <= len(x_str) else x_str[-shift:] + x_str[:-shift][::-1]", "is_solved": false, "iteration": 8, "prompt_tokens": 6142, "completion_tokens": 1185, "duration": 31.977948904037476}, {"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    \n    if shift == 0:\n        return x_str\n    elif shift < len(x_str):\n        return x_str[-shift:] + x_str[:-shift]\n    else:\n        return x_str[::-1]", "is_solved": false, "iteration": 9, "prompt_tokens": 6863, "completion_tokens": 1316, "duration": 34.73826193809509}]}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    result = \"\"\n    vowels = 'aeiouAEIOU'\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_char = chr((ord(char.lower()) - ord('a') + 2) % 26 + ord('a'))\n                result += encoded_char.upper() if char.isupper() else encoded_char\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result", "is_solved": false, "iterations": 9, "prompt_tokens": 8542, "completion_tokens": 1536, "duration": 33.20496416091919, "iteration_states": [{"generated_code": "def encode(message):\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                result += chr((ord(char)+2 - ord('a')) % 26 + ord('A'))\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result", "is_solved": false, "iteration": 0, "prompt_tokens": 159, "completion_tokens": 78, "duration": 3.3758485317230225}, {"generated_code": "def encode(message):\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                result += chr((ord(char) + 2 - ord('a')) % 26 + ord('A'))\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result.upper()", "is_solved": false, "iteration": 1, "prompt_tokens": 1014, "completion_tokens": 210, "duration": 5.880305290222168}, {"generated_code": "def encode(message):\n    result = \"\"\n    vowels = 'aeiouAEIOU'\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_char = chr((ord(char) + 2 - ord('a')) % 26 + ord('A'))\n                result += encoded_char if char.isupper() else encoded_char.lower()\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result", "is_solved": false, "iteration": 2, "prompt_tokens": 1907, "completion_tokens": 373, "duration": 9.254534721374512}, {"generated_code": "def encode(message):\n    result = \"\"\n    vowels = 'aeiouAEIOU'\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_char = chr((ord(char) + 2 - ord('a')) % 26 + ord('A'))\n                result += encoded_char if char.isupper() else encoded_char.lower()\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result", "is_solved": false, "iteration": 3, "prompt_tokens": 2834, "completion_tokens": 524, "duration": 12.079862833023071}, {"generated_code": "def encode(message):\n    result = \"\"\n    vowels = 'aeiouAEIOU'\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_char = chr(ord(char) + 2)\n                if encoded_char.lower() in vowels:\n                    encoded_char = chr(ord(char) + 2 + 26)\n                result += encoded_char if char.isupper() else encoded_char.lower()\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result", "is_solved": false, "iteration": 4, "prompt_tokens": 3773, "completion_tokens": 698, "duration": 15.47097396850586}, {"generated_code": "def encode(message):\n    result = \"\"\n    vowels = 'aeiouAEIOU'\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_char = chr(ord(char) + 2)\n                if encoded_char.lower() in vowels:\n                    encoded_char = chr(ord(char) + 2 - 26)\n                result += encoded_char.upper() if char.isupper() else encoded_char.lower()\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result", "is_solved": false, "iteration": 5, "prompt_tokens": 4728, "completion_tokens": 868, "duration": 19.845379114151}, {"generated_code": "def encode(message):\n    result = \"\"\n    vowels = 'aeiouAEIOU'\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_char = chr(ord(char) + 2)\n                if encoded_char.lower() in vowels:\n                    encoded_char = chr(ord(char) + 2 - 26)\n                result += encoded_char.upper() if char.isupper() else encoded_char.lower()\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result", "is_solved": false, "iteration": 6, "prompt_tokens": 5683, "completion_tokens": 1034, "duration": 23.33789324760437}, {"generated_code": "def encode(message):\n    result = \"\"\n    vowels = 'aeiouAEIOU'\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_char = chr((ord(char.lower()) - ord('a') + 2) % 26 + ord('a'))\n                result += encoded_char.upper() if char.isupper() else encoded_char\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result", "is_solved": false, "iteration": 7, "prompt_tokens": 6656, "completion_tokens": 1208, "duration": 26.65485453605652}, {"generated_code": "def encode(message):\n    result = \"\"\n    vowels = 'aeiouAEIOU'\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_char = chr((ord(char.lower()) - ord('a') + 2) % 26 + ord('a'))\n                result += encoded_char.upper() if char.isupper() else encoded_char\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result", "is_solved": false, "iteration": 8, "prompt_tokens": 7590, "completion_tokens": 1363, "duration": 29.543436765670776}, {"generated_code": "def encode(message):\n    result = \"\"\n    vowels = 'aeiouAEIOU'\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_char = chr((ord(char.lower()) - ord('a') + 2) % 26 + ord('a'))\n                result += encoded_char.upper() if char.isupper() else encoded_char\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result", "is_solved": false, "iteration": 9, "prompt_tokens": 8542, "completion_tokens": 1536, "duration": 33.20496416091919}]}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": true, "iterations": 0, "prompt_tokens": 138, "completion_tokens": 60, "duration": 3.7184066772460938, "iteration_states": [{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 60, "duration": 3.7184066772460938}]}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": true, "iterations": 0, "prompt_tokens": 220, "completion_tokens": 28, "duration": 3.368082284927368, "iteration_states": [{"generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 220, "completion_tokens": 28, "duration": 3.368082284927368}]}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    if not s:\n        return []\n    words = s.split()\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = []\n    for word in words:\n        if len([c for c in word if c in consonants]) == n:\n            result.append(word)\n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 231, "completion_tokens": 86, "duration": 4.235817909240723, "iteration_states": [{"generated_code": "def select_words(s, n):\n    if not s:\n        return []\n    words = s.split()\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = []\n    for word in words:\n        if len([c for c in word if c in consonants]) == n:\n            result.append(word)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 86, "duration": 4.235817909240723}]}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "is_solved": true, "iterations": 0, "prompt_tokens": 199, "completion_tokens": 98, "duration": 3.4160122871398926, "iteration_states": [{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 98, "duration": 3.4160122871398926}]}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    \n    return sorted(list(set([num for num in collatz if num % 2 != 0])))", "is_solved": true, "iterations": 0, "prompt_tokens": 281, "completion_tokens": 85, "duration": 3.982318878173828, "iteration_states": [{"generated_code": "def get_odd_collatz(n):\n    collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    \n    return sorted(list(set([num for num in collatz if num % 2 != 0])))", "is_solved": true, "iteration": 0, "prompt_tokens": 281, "completion_tokens": 85, "duration": 3.982318878173828}]}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n        return True\n    except:\n        return False", "is_solved": true, "iterations": 0, "prompt_tokens": 313, "completion_tokens": 149, "duration": 4.932066202163696, "iteration_states": [{"generated_code": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n        return True\n    except:\n        return False", "is_solved": true, "iteration": 0, "prompt_tokens": 313, "completion_tokens": 149, "duration": 4.932066202163696}]}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        product *= num // abs(num) if num != 0 else 0\n        sum_magnitudes += abs(num)\n    return product * sum_magnitudes", "is_solved": true, "iterations": 0, "prompt_tokens": 172, "completion_tokens": 75, "duration": 3.701418399810791, "iteration_states": [{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        product *= num // abs(num) if num != 0 else 0\n        sum_magnitudes += abs(num)\n    return product * sum_magnitudes", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 75, "duration": 3.701418399810791}]}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(num) ** 2 for num in lst)", "is_solved": true, "iterations": 0, "prompt_tokens": 207, "completion_tokens": 28, "duration": 3.7298011779785156, "iteration_states": [{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(num) ** 2 for num in lst)", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 28, "duration": 3.7298011779785156}]}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    negative_integers = [num for num in lst if num < 0]\n    positive_integers = [num for num in lst if num > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)", "is_solved": true, "iterations": 0, "prompt_tokens": 188, "completion_tokens": 90, "duration": 4.1900529861450195, "iteration_states": [{"generated_code": "def largest_smallest_integers(lst):\n    negative_integers = [num for num in lst if num < 0]\n    positive_integers = [num for num in lst if num > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)", "is_solved": true, "iteration": 0, "prompt_tokens": 188, "completion_tokens": 90, "duration": 4.1900529861450195}]}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        fact = 1\n        for j in range(1, i+1):\n            fact *= j\n        result *= fact\n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 145, "completion_tokens": 60, "duration": 5.106764793395996, "iteration_states": [{"generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        fact = 1\n        for j in range(1, i+1):\n            fact *= j\n        result *= fact\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 60, "duration": 5.106764793395996}]}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if file_name.count(\".\") != 1:\n        return 'No'\n    file_parts = file_name.split(\".\")\n    if len(file_parts) != 2:\n        return 'No'\n    if not file_parts[0] or not file_parts[0][0].isalpha():\n        return 'No'\n    if len([c for c in file_parts[0] if c.isdigit()]) > 3:\n        return 'No'\n    if file_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "is_solved": true, "iterations": 0, "prompt_tokens": 264, "completion_tokens": 130, "duration": 2.550602436065674, "iteration_states": [{"generated_code": "def file_name_check(file_name):\n    if file_name.count(\".\") != 1:\n        return 'No'\n    file_parts = file_name.split(\".\")\n    if len(file_parts) != 2:\n        return 'No'\n    if not file_parts[0] or not file_parts[0][0].isalpha():\n        return 'No'\n    if len([c for c in file_parts[0] if c.isdigit()]) > 3:\n        return 'No'\n    if file_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 130, "duration": 2.550602436065674}]}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "is_solved": true, "iterations": 0, "prompt_tokens": 197, "completion_tokens": 94, "duration": 3.0800018310546875, "iteration_states": [{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "is_solved": true, "iteration": 0, "prompt_tokens": 197, "completion_tokens": 94, "duration": 3.0800018310546875}]}
{"task_id": "HumanEval/144", "generated_code": "from fractions import Fraction\n\ndef simplify(x, n):\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "is_solved": true, "iterations": 0, "prompt_tokens": 205, "completion_tokens": 34, "duration": 3.2925808429718018, "iteration_states": [{"generated_code": "from fractions import Fraction\n\ndef simplify(x, n):\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 34, "duration": 3.2925808429718018}]}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count", "is_solved": true, "iterations": 0, "prompt_tokens": 169, "completion_tokens": 81, "duration": 4.610205888748169, "iteration_states": [{"generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 81, "duration": 4.610205888748169}]}
{"task_id": "HumanEval/149", "generated_code": "def list_sort(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "is_solved": true, "iterations": 0, "prompt_tokens": 237, "completion_tokens": 39, "duration": 2.81819486618042, "iteration_states": [{"generated_code": "def list_sort(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 237, "completion_tokens": 39, "duration": 2.81819486618042}]}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "is_solved": true, "iterations": 0, "prompt_tokens": 136, "completion_tokens": 78, "duration": 4.968517303466797, "iteration_states": [{"generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 78, "duration": 4.968517303466797}]}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int))", "is_solved": true, "iterations": 0, "prompt_tokens": 187, "completion_tokens": 39, "duration": 0.860107421875, "iteration_states": [{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int))", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 39, "duration": 0.860107421875}]}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "is_solved": true, "iterations": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.6411662101745605, "iteration_states": [{"generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.6411662101745605}]}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def calc_strength(ext):\n        return sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\n    \n    max_strength = float('-inf')\n    strongest_ext = \"\"\n    \n    for ext in extensions:\n        strength = calc_strength(ext)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_ext = ext\n    \n    return f\"{class_name}.{strongest_ext}\"", "is_solved": true, "iterations": 0, "prompt_tokens": 327, "completion_tokens": 105, "duration": 1.6746180057525635, "iteration_states": [{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def calc_strength(ext):\n        return sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\n    \n    max_strength = float('-inf')\n    strongest_ext = \"\"\n    \n    for ext in extensions:\n        strength = calc_strength(ext)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_ext = ext\n    \n    return f\"{class_name}.{strongest_ext}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 105, "duration": 1.6746180057525635}]}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = len([i for i in str(abs(num)) if int(i) % 2 == 0])\n    odd_count = len([i for i in str(abs(num)) if int(i) % 2 != 0])\n    return (even_count, odd_count)", "is_solved": true, "iterations": 0, "prompt_tokens": 115, "completion_tokens": 65, "duration": 2.838606119155884, "iteration_states": [{"generated_code": "def even_odd_count(num):\n    even_count = len([i for i in str(abs(num)) if int(i) % 2 == 0])\n    odd_count = len([i for i in str(abs(num)) if int(i) % 2 != 0])\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 115, "completion_tokens": 65, "duration": 2.838606119155884}]}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    \n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    \n    return result.lower()", "is_solved": true, "iterations": 0, "prompt_tokens": 151, "completion_tokens": 143, "duration": 2.278186321258545, "iteration_states": [{"generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    \n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    \n    return result.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 143, "duration": 2.278186321258545}]}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False", "is_solved": true, "iterations": 0, "prompt_tokens": 158, "completion_tokens": 63, "duration": 1.2231793403625488, "iteration_states": [{"generated_code": "def right_angle_triangle(a, b, c):\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 63, "duration": 1.2231793403625488}]}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n    \n    max_unique_chars = 0\n    max_word = \"\"\n    \n    for word in words:\n        curr_unique_chars = unique_chars(word)\n        if curr_unique_chars > max_unique_chars or (curr_unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = curr_unique_chars\n            max_word = word\n    \n    return max_word", "is_solved": true, "iterations": 0, "prompt_tokens": 170, "completion_tokens": 95, "duration": 5.631035089492798, "iteration_states": [{"generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n    \n    max_unique_chars = 0\n    max_word = \"\"\n    \n    for word in words:\n        curr_unique_chars = unique_chars(word)\n        if curr_unique_chars > max_unique_chars or (curr_unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = curr_unique_chars\n            max_word = word\n    \n    return max_word", "is_solved": true, "iteration": 0, "prompt_tokens": 170, "completion_tokens": 95, "duration": 5.631035089492798}]}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    eaten = number + min(need, remaining)\n    left = max(remaining - need, 0)\n    return [eaten, left]", "is_solved": true, "iterations": 0, "prompt_tokens": 327, "completion_tokens": 43, "duration": 2.6561062335968018, "iteration_states": [{"generated_code": "def eat(number, need, remaining):\n    eaten = number + min(need, remaining)\n    left = max(remaining - need, 0)\n    return [eaten, left]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 43, "duration": 2.6561062335968018}]}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operators, operands):\n    expression = str(operands[0])\n    for i in range(len(operators)):\n        expression += operators[i] + str(operands[i + 1])\n    return eval(expression)", "is_solved": true, "iterations": 0, "prompt_tokens": 257, "completion_tokens": 51, "duration": 1.1593248844146729, "iteration_states": [{"generated_code": "def do_algebra(operators, operands):\n    expression = str(operands[0])\n    for i in range(len(operators)):\n        expression += operators[i] + str(operands[i + 1])\n    return eval(expression)", "is_solved": true, "iteration": 0, "prompt_tokens": 257, "completion_tokens": 51, "duration": 1.1593248844146729}]}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not has_letter:\n        return s[::-1]\n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 157, "completion_tokens": 81, "duration": 3.5644960403442383, "iteration_states": [{"generated_code": "def solve(s):\n    result = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not has_letter:\n        return s[::-1]\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 81, "duration": 3.5644960403442383}]}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iterations": 0, "prompt_tokens": 126, "completion_tokens": 36, "duration": 0.8799667358398438, "iteration_states": [{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 36, "duration": 0.8799667358398438}]}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n# Example\nn = 5\nprint(get_max_triples(n))", "is_solved": true, "iterations": 0, "prompt_tokens": 215, "completion_tokens": 119, "duration": 5.007686138153076, "iteration_states": [{"generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n# Example\nn = 5\nprint(get_max_triples(n))", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 119, "duration": 5.007686138153076}]}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    if k == 0:\n        return []\n    return sorted(arr)[-k:]", "is_solved": true, "iterations": 2, "prompt_tokens": 2856, "completion_tokens": 163, "duration": 6.6252570152282715, "iteration_states": [{"generated_code": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]", "is_solved": false, "iteration": 0, "prompt_tokens": 267, "completion_tokens": 20, "duration": 2.360170602798462}, {"generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "is_solved": false, "iteration": 1, "prompt_tokens": 1615, "completion_tokens": 101, "duration": 4.712955474853516}, {"generated_code": "def maximum(arr, k):\n    if k == 0:\n        return []\n    return sorted(arr)[-k:]", "is_solved": true, "iteration": 2, "prompt_tokens": 2856, "completion_tokens": 163, "duration": 6.6252570152282715}]}
{"task_id": "HumanEval/115", "generated_code": "import math\n\ndef max_fill(grid, capacity):\n    wells = [sum(row) for row in grid]\n    total_water = sum(wells)\n    buckets_needed = 0\n    for well in wells:\n        buckets_needed += math.ceil(well / capacity)\n    return buckets_needed", "is_solved": true, "iterations": 2, "prompt_tokens": 2718, "completion_tokens": 271, "duration": 8.23015832901001, "iteration_states": [{"generated_code": "def max_fill(grid, capacity):\n    wells = [sum(row) for row in grid]\n    total_water = sum(wells)\n    buckets_needed = math.ceil(total_water / capacity)\n    return buckets_needed", "is_solved": false, "iteration": 0, "prompt_tokens": 373, "completion_tokens": 47, "duration": 3.505402088165283}, {"generated_code": "import math\n\ndef max_fill(grid, capacity):\n    wells = [sum(row) for row in grid]\n    total_water = sum(wells)\n    buckets_needed = math.ceil(total_water / capacity)\n    return buckets_needed", "is_solved": false, "iteration": 1, "prompt_tokens": 1588, "completion_tokens": 146, "duration": 5.535395622253418}, {"generated_code": "import math\n\ndef max_fill(grid, capacity):\n    wells = [sum(row) for row in grid]\n    total_water = sum(wells)\n    buckets_needed = 0\n    for well in wells:\n        buckets_needed += math.ceil(well / capacity)\n    return buckets_needed", "is_solved": true, "iteration": 2, "prompt_tokens": 2718, "completion_tokens": 271, "duration": 8.23015832901001}]}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    prod = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            prod *= int(digit)\n            has_odd = True\n    return prod if has_odd else 0", "is_solved": true, "iterations": 2, "prompt_tokens": 1498, "completion_tokens": 274, "duration": 6.04761004447937, "iteration_states": [{"generated_code": "def digits(n):\n    prod = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            prod *= int(digit)\n    return prod if prod != 1 else 0", "is_solved": false, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 53, "duration": 1.1113629341125488}, {"generated_code": "def digits(n):\n    prod = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            prod *= int(digit)\n    return prod if prod != 1 else 1", "is_solved": false, "iteration": 1, "prompt_tokens": 811, "completion_tokens": 160, "duration": 3.6407806873321533}, {"generated_code": "def digits(n):\n    prod = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            prod *= int(digit)\n            has_odd = True\n    return prod if has_odd else 0", "is_solved": true, "iteration": 2, "prompt_tokens": 1498, "completion_tokens": 274, "duration": 6.04761004447937}]}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)", "is_solved": true, "iterations": 2, "prompt_tokens": 2033, "completion_tokens": 221, "duration": 6.797186374664307, "iteration_states": [{"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "is_solved": false, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 38, "duration": 1.2757461071014404}, {"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2))", "is_solved": false, "iteration": 1, "prompt_tokens": 1214, "completion_tokens": 142, "duration": 4.6749444007873535}, {"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)", "is_solved": true, "iteration": 2, "prompt_tokens": 2033, "completion_tokens": 221, "duration": 6.797186374664307}]}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": true, "iterations": 8, "prompt_tokens": 10937, "completion_tokens": 969, "duration": 22.497766494750977, "iteration_states": [{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 54, "duration": 1.426814079284668}, {"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 1, "prompt_tokens": 1558, "completion_tokens": 170, "duration": 4.006141901016235}, {"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 2, "prompt_tokens": 2892, "completion_tokens": 281, "duration": 6.645859956741333}, {"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 and (i+1) % 3 != 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 3, "prompt_tokens": 4260, "completion_tokens": 438, "duration": 9.72797417640686}, {"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 4, "prompt_tokens": 5632, "completion_tokens": 563, "duration": 12.418720245361328}, {"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 and (i+1) % 3 != 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 5, "prompt_tokens": 6982, "completion_tokens": 702, "duration": 15.493690490722656}, {"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 6, "prompt_tokens": 8339, "completion_tokens": 812, "duration": 17.962376594543457}, {"generated_code": "def sum_squares(lst):\n    return sum(x**2 for x in lst)", "is_solved": false, "iteration": 7, "prompt_tokens": 9670, "completion_tokens": 887, "duration": 20.311872720718384}, {"generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": true, "iteration": 8, "prompt_tokens": 10937, "completion_tokens": 969, "duration": 22.497766494750977}]}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if 9 < x < 100 or -99 < x < -9)", "is_solved": false, "iterations": 9, "prompt_tokens": 7863, "completion_tokens": 912, "duration": 26.039493322372437, "iteration_states": [{"generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num < 100)", "is_solved": false, "iteration": 0, "prompt_tokens": 178, "completion_tokens": 31, "duration": 2.967463731765747}, {"generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num < 100)", "is_solved": false, "iteration": 1, "prompt_tokens": 1033, "completion_tokens": 128, "duration": 5.515981674194336}, {"generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= abs(num) < 100)", "is_solved": false, "iteration": 2, "prompt_tokens": 1885, "completion_tokens": 224, "duration": 7.587920188903809}, {"generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr if 10 <= abs(num) < 100)", "is_solved": false, "iteration": 3, "prompt_tokens": 2739, "completion_tokens": 315, "duration": 9.848626136779785}, {"generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= abs(num) < 100)", "is_solved": false, "iteration": 4, "prompt_tokens": 3600, "completion_tokens": 422, "duration": 12.099931240081787}, {"generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr if 10 <= abs(num) < 100)", "is_solved": false, "iteration": 5, "prompt_tokens": 4460, "completion_tokens": 519, "duration": 14.430793523788452}, {"generated_code": "def add_elements(arr, k):\n    return sum(arr[:k])", "is_solved": false, "iteration": 6, "prompt_tokens": 5303, "completion_tokens": 593, "duration": 16.585521936416626}, {"generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if 9 < x < 100)", "is_solved": false, "iteration": 7, "prompt_tokens": 6091, "completion_tokens": 669, "duration": 18.457731008529663}, {"generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if 9 < x < 100 or 99 < x < 1000)", "is_solved": false, "iteration": 8, "prompt_tokens": 6947, "completion_tokens": 776, "duration": 21.460662841796875}, {"generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if 9 < x < 100 or -99 < x < -9)", "is_solved": false, "iteration": 9, "prompt_tokens": 7863, "completion_tokens": 912, "duration": 26.039493322372437}]}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt and (txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == \" \")) or (not txt)", "is_solved": false, "iterations": 9, "prompt_tokens": 8787, "completion_tokens": 1020, "duration": 28.42854642868042, "iteration_states": [{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    last_char = txt.strip()[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt.split()[-1]) == 1:\n        return True\n    return False", "is_solved": false, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 66, "duration": 5.334384918212891}, {"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    last_char = txt.strip()[-1]\n    if not last_char.isalpha() or last_char == ' ':\n        return False\n    return True", "is_solved": false, "iteration": 1, "prompt_tokens": 1163, "completion_tokens": 182, "duration": 7.978417158126831}, {"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    last_char = txt.strip()[-1]\n    if not last_char.isalpha() or last_char == ' ':\n        return False\n    if len(txt.strip().split()) > 1 and txt.strip().split()[-1] == last_char:\n        return False\n    return True", "is_solved": false, "iteration": 2, "prompt_tokens": 2162, "completion_tokens": 329, "duration": 11.481768131256104}, {"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt.strip():\n        return False\n    last_char = txt.strip()[-1]\n    if not last_char.isalpha():\n        return True\n    return False", "is_solved": false, "iteration": 3, "prompt_tokens": 3190, "completion_tokens": 425, "duration": 13.773534774780273}, {"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt.strip():\n        return False\n    last_char = txt.strip()[-1]\n    if last_char.isalpha() and (len(txt.split()) == 1 or txt.strip()[-2] == \" \"):\n        return True\n    return False", "is_solved": false, "iteration": 4, "prompt_tokens": 4155, "completion_tokens": 565, "duration": 17.085923671722412}, {"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt and txt[-1].isalpha() and (len(txt.split()) == 1 or txt[-2] == \" \"):\n        return True\n    return False", "is_solved": false, "iteration": 5, "prompt_tokens": 5162, "completion_tokens": 681, "duration": 19.759185552597046}, {"generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt and txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == \" \")", "is_solved": false, "iteration": 6, "prompt_tokens": 6093, "completion_tokens": 767, "duration": 22.21352219581604}, {"generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt and (txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == \" \"))", "is_solved": false, "iteration": 7, "prompt_tokens": 6981, "completion_tokens": 841, "duration": 24.16487717628479}, {"generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt and (txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == \" \"))", "is_solved": false, "iteration": 8, "prompt_tokens": 7877, "completion_tokens": 921, "duration": 25.92839503288269}, {"generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt and (txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == \" \")) or (not txt)", "is_solved": false, "iteration": 9, "prompt_tokens": 8787, "completion_tokens": 1020, "duration": 28.42854642868042}]}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "is_solved": false, "iterations": 9, "prompt_tokens": 10876, "completion_tokens": 963, "duration": 26.425803899765015, "iteration_states": [{"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))", "is_solved": false, "iteration": 0, "prompt_tokens": 165, "completion_tokens": 31, "duration": 2.5527098178863525}, {"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "is_solved": false, "iteration": 1, "prompt_tokens": 1370, "completion_tokens": 117, "duration": 4.834057807922363}, {"generated_code": "def order_by_points(nums):\n    def digit_sum(num):\n        if num < 0:\n            num = abs(num)\n        return sum(int(d) for d in str(num))\n\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))", "is_solved": false, "iteration": 2, "prompt_tokens": 2522, "completion_tokens": 226, "duration": 7.431948184967041}, {"generated_code": "def order_by_points(nums):\n    def digit_sum(num):\n        num = abs(num)\n        return sum(int(d) for d in str(num))\n\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))", "is_solved": false, "iteration": 3, "prompt_tokens": 3758, "completion_tokens": 364, "duration": 10.223664283752441}, {"generated_code": "def order_by_points(nums):\n    def digit_sum(num):\n        return sum(int(d) for d in str(abs(num)))\n\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))", "is_solved": false, "iteration": 4, "prompt_tokens": 4976, "completion_tokens": 493, "duration": 12.804659605026245}, {"generated_code": "def order_by_points(nums):\n    def digit_sum(num):\n        return sum(int(d) for d in str(abs(num)))\n\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))", "is_solved": false, "iteration": 5, "prompt_tokens": 6143, "completion_tokens": 581, "duration": 15.1612708568573}, {"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "is_solved": false, "iteration": 6, "prompt_tokens": 7332, "completion_tokens": 679, "duration": 17.499608993530273}, {"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(x)), nums.index(x)))", "is_solved": false, "iteration": 7, "prompt_tokens": 8506, "completion_tokens": 785, "duration": 20.500181436538696}, {"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "is_solved": false, "iteration": 8, "prompt_tokens": 9731, "completion_tokens": 885, "duration": 22.738962650299072}, {"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "is_solved": false, "iteration": 9, "prompt_tokens": 10876, "completion_tokens": 963, "duration": 26.425803899765015}]}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    start, end = min(a, b), max(a, b)\n    return [i for i in range(start, end+1) if i % 2 == 0]", "is_solved": false, "iterations": 9, "prompt_tokens": 7687, "completion_tokens": 1046, "duration": 28.037850856781006, "iteration_states": [{"generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "is_solved": false, "iteration": 0, "prompt_tokens": 154, "completion_tokens": 35, "duration": 3.812481641769409}, {"generated_code": "def generate_integers(a, b):\n    start, end = min(a, b), max(a, b)\n    return [i for i in range(start, end+1) if i % 2 == 0]", "is_solved": false, "iteration": 1, "prompt_tokens": 971, "completion_tokens": 153, "duration": 6.622304439544678}, {"generated_code": "def generate_integers(a, b):\n    start, end = min(a, b), max(a, b)\n    return [i for i in range(start, end+1)]", "is_solved": false, "iteration": 2, "prompt_tokens": 1831, "completion_tokens": 275, "duration": 9.32083511352539}, {"generated_code": "def generate_integers(a, b):\n    start, end = min(a, b), max(a, b)\n    return [i for i in range(start, end+1) if i % 2 == 0]", "is_solved": false, "iteration": 3, "prompt_tokens": 2642, "completion_tokens": 375, "duration": 11.773623943328857}, {"generated_code": "def generate_integers(a, b):\n    start, end = min(a, b), max(a, b)\n    return [i for i in range(start, end+1) if i % 2 == 0]", "is_solved": false, "iteration": 4, "prompt_tokens": 3501, "completion_tokens": 505, "duration": 14.816806316375732}, {"generated_code": "def generate_integers(a, b):\n    start, end = min(a, b), max(a, b)\n    return [i for i in range(start, end+1) if i % 2 == 0]", "is_solved": false, "iteration": 5, "prompt_tokens": 4332, "completion_tokens": 607, "duration": 17.35875129699707}, {"generated_code": "def generate_integers(a, b):\n    start, end = min(a, b), max(a, b)\n    return [i for i in range(start, end+1) if i % 2 == 0]", "is_solved": false, "iteration": 6, "prompt_tokens": 5178, "completion_tokens": 724, "duration": 19.951337814331055}, {"generated_code": "def generate_integers(a, b):\n    start, end = min(a, b), max(a, b)\n    return [i for i in range(start, end+1) if i % 2 == 0]", "is_solved": false, "iteration": 7, "prompt_tokens": 6000, "completion_tokens": 817, "duration": 22.06679892539978}, {"generated_code": "def generate_integers(a, b):\n    start, end = min(a, b), max(a, b)\n    return [i for i in range(start, end+1) if i % 2 == 0]", "is_solved": false, "iteration": 8, "prompt_tokens": 6840, "completion_tokens": 928, "duration": 24.978950023651123}, {"generated_code": "def generate_integers(a, b):\n    start, end = min(a, b), max(a, b)\n    return [i for i in range(start, end+1) if i % 2 == 0]", "is_solved": false, "iteration": 9, "prompt_tokens": 7687, "completion_tokens": 1046, "duration": 28.037850856781006}]}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1) if lst[i] != lst[i + 1])", "is_solved": false, "iterations": 9, "prompt_tokens": 11479, "completion_tokens": 1051, "duration": 28.678985357284546, "iteration_states": [{"generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1) if lst.count(lst[i]) == 1)", "is_solved": false, "iteration": 0, "prompt_tokens": 299, "completion_tokens": 43, "duration": 4.305203914642334}, {"generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))", "is_solved": false, "iteration": 1, "prompt_tokens": 1539, "completion_tokens": 134, "duration": 6.725667238235474}, {"generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)) and len(set(lst)) == len(lst)", "is_solved": false, "iteration": 2, "prompt_tokens": 2765, "completion_tokens": 240, "duration": 9.014096975326538}, {"generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)) and all(lst.count(i) <= 1 for i in lst)", "is_solved": false, "iteration": 3, "prompt_tokens": 4008, "completion_tokens": 360, "duration": 11.58826231956482}, {"generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)) and all(lst.count(i) <= 1 for i in lst) and all(lst.count(i) <= lst.count(i+1) for i in lst[:-1])", "is_solved": false, "iteration": 4, "prompt_tokens": 5283, "completion_tokens": 522, "duration": 15.07589840888977}, {"generated_code": "def is_sorted(lst):\n    return lst == sorted(set(lst)) and all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))", "is_solved": false, "iteration": 5, "prompt_tokens": 6576, "completion_tokens": 635, "duration": 17.931645393371582}, {"generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)) and len(lst) == len(set(lst))", "is_solved": false, "iteration": 6, "prompt_tokens": 7805, "completion_tokens": 740, "duration": 20.227210521697998}, {"generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)) and all(lst.count(num) <= 1 for num in lst)", "is_solved": false, "iteration": 7, "prompt_tokens": 9065, "completion_tokens": 877, "duration": 23.06450366973877}, {"generated_code": "def is_sorted(lst):\n    return lst == sorted(list(set(lst)))", "is_solved": false, "iteration": 8, "prompt_tokens": 10282, "completion_tokens": 932, "duration": 26.23202919960022}, {"generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1) if lst[i] != lst[i + 1])", "is_solved": false, "iteration": 9, "prompt_tokens": 11479, "completion_tokens": 1051, "duration": 28.678985357284546}]}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a + a)", "is_solved": false, "iterations": 9, "prompt_tokens": 7328, "completion_tokens": 968, "duration": 27.347546577453613, "iteration_states": [{"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a*2)", "is_solved": false, "iteration": 0, "prompt_tokens": 179, "completion_tokens": 29, "duration": 3.6121397018432617}, {"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a*2) or len(a) == len(b) and b in (a[::-1]*2)", "is_solved": false, "iteration": 1, "prompt_tokens": 976, "completion_tokens": 165, "duration": 6.802118539810181}, {"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a+a) or len(a) == len(b) and b in (a[::-1]+a[::-1])", "is_solved": false, "iteration": 2, "prompt_tokens": 1779, "completion_tokens": 272, "duration": 9.306798219680786}, {"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a+a)", "is_solved": false, "iteration": 3, "prompt_tokens": 2573, "completion_tokens": 348, "duration": 11.332870721817017}, {"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a + a) and b in (a * 2)", "is_solved": false, "iteration": 4, "prompt_tokens": 3355, "completion_tokens": 462, "duration": 14.162646770477295}, {"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a + a)", "is_solved": false, "iteration": 5, "prompt_tokens": 4133, "completion_tokens": 543, "duration": 16.140177011489868}, {"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a + a) or b in (a + a)[1:-1]", "is_solved": false, "iteration": 6, "prompt_tokens": 4904, "completion_tokens": 647, "duration": 18.58675742149353}, {"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a + a) or b in (a + a)[1:-1] or b[::-1] in (a + a) or b[::-1] in (a + a)[1:-1]", "is_solved": false, "iteration": 7, "prompt_tokens": 5702, "completion_tokens": 790, "duration": 21.45235848426819}, {"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a + a) or b in (a + a)[1:] or b[::-1] in (a + a) or b[::-1] in (a + a)[1:]", "is_solved": false, "iteration": 8, "prompt_tokens": 6505, "completion_tokens": 882, "duration": 25.476701259613037}, {"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a + a)", "is_solved": false, "iteration": 9, "prompt_tokens": 7328, "completion_tokens": 968, "duration": 27.347546577453613}]}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    def is_balanced(s):\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')' and stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n        return len(stack) == 0\n    \n    s1, s2 = lst\n    if (is_balanced(s1 + s2) or is_balanced(s2 + s1)):\n        return 'Yes'\n    else:\n        return 'No'", "is_solved": true, "iterations": 8, "prompt_tokens": 9441, "completion_tokens": 1273, "duration": 29.76229429244995, "iteration_states": [{"generated_code": "def match_parens(lst):\n    return 'Yes' if abs(lst[0].count('(') - lst[0].count(')')) <= 1 and abs(lst[1].count('(') - lst[1].count(')')) <= 1 else 'No'", "is_solved": false, "iteration": 0, "prompt_tokens": 218, "completion_tokens": 62, "duration": 3.538313865661621}, {"generated_code": "def match_parens(lst):\n    stack = []\n    \n    for s in lst[0] + lst[1]:\n        if s == '(':\n            stack.append(s)\n        elif s == ')' and stack and stack[-1] == '(':\n            stack.pop()\n        else:\n            return 'No'\n    \n    return 'Yes' if not stack else 'No'", "is_solved": false, "iteration": 1, "prompt_tokens": 1333, "completion_tokens": 198, "duration": 6.548079252243042}, {"generated_code": "def match_parens(lst):\n    left_count = lst[0].count('(')\n    right_count = lst[1].count(')')\n    \n    return 'Yes' if left_count == right_count else 'No'", "is_solved": false, "iteration": 2, "prompt_tokens": 2497, "completion_tokens": 350, "duration": 9.413340091705322}, {"generated_code": "def match_parens(lst):\n    def is_balanced(s):\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')' and stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n        return len(stack) == 0\n\n    return 'Yes' if is_balanced(lst[0] + lst[1]) else 'No'", "is_solved": false, "iteration": 3, "prompt_tokens": 3589, "completion_tokens": 505, "duration": 13.0187406539917}, {"generated_code": "def match_parens(lst):\n    def is_balanced(s):\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')' and stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n        return len(stack) == 0\n\n    return 'Yes' if is_balanced(lst[0]) and is_balanced(lst[1]) else 'No'", "is_solved": false, "iteration": 4, "prompt_tokens": 4729, "completion_tokens": 651, "duration": 16.179566860198975}, {"generated_code": "def match_parens(lst):\n    s = lst[0] + lst[1]\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')' and stack and stack[-1] == '(':\n            stack.pop()\n        else:\n            return 'No'\n    return 'Yes'", "is_solved": false, "iteration": 5, "prompt_tokens": 5927, "completion_tokens": 790, "duration": 19.81399369239807}, {"generated_code": "def match_parens(lst):\n    def is_balanced(s):\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')' and stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n        return len(stack) == 0\n    \n    return 'Yes' if is_balanced(lst[0]) or is_balanced(lst[1]) else 'No'", "is_solved": false, "iteration": 6, "prompt_tokens": 7039, "completion_tokens": 936, "duration": 22.740891456604004}, {"generated_code": "def match_parens(lst):\n    def is_balanced(s):\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')' and stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n        return len(stack) == 0\n    \n    return 'Yes' if is_balanced(lst[0]) and is_balanced(lst[1]) else 'No'", "is_solved": false, "iteration": 7, "prompt_tokens": 8243, "completion_tokens": 1092, "duration": 25.783024787902832}, {"generated_code": "def match_parens(lst):\n    def is_balanced(s):\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')' and stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n        return len(stack) == 0\n    \n    s1, s2 = lst\n    if (is_balanced(s1 + s2) or is_balanced(s2 + s1)):\n        return 'Yes'\n    else:\n        return 'No'", "is_solved": true, "iteration": 8, "prompt_tokens": 9441, "completion_tokens": 1273, "duration": 29.76229429244995}]}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    open_brackets = 0\n    close_brackets = 0\n    \n    for char in string:\n        if char == '[':\n            open_brackets += 1\n        elif char == ']' and open_brackets > close_brackets:\n            close_brackets += 1\n\n    return open_brackets > 0 and close_brackets > 0", "is_solved": false, "iterations": 9, "prompt_tokens": 9616, "completion_tokens": 1374, "duration": 35.345367670059204, "iteration_states": [{"generated_code": "def is_nested(string):\n    opening_brackets = []\n    \n    for char in string:\n        if char == '[':\n            opening_brackets.append(char)\n        elif char == ']':\n            if opening_brackets:\n                opening_brackets.pop()\n    \n    return len(opening_brackets) != 0\n\n# Test cases\nprint(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\nprint(is_nested('[[][]]'))\nprint(is_nested('[[]][['))", "is_solved": false, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 116, "duration": 6.233360767364502}, {"generated_code": "def is_nested(string):\n    opening_brackets = []\n    nested_found = False\n    \n    for char in string:\n        if char == '[':\n            opening_brackets.append(char)\n        elif char == ']':\n            if opening_brackets:\n                opening_brackets.pop()\n                if len(opening_brackets) < len(string) - string.index(']'):\n                    nested_found = True\n    \n    return nested_found\n\n# Test cases\nprint(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\nprint(is_nested('[[][]]'))\nprint(is_nested('[[]][['))", "is_solved": false, "iteration": 1, "prompt_tokens": 1325, "completion_tokens": 325, "duration": 10.133765459060669}, {"generated_code": "def is_nested(string):\n    opening_brackets = []\n    nested_found = False\n    \n    for char in string:\n        if char == '[':\n            opening_brackets.append(char)\n        elif char == ']':\n            if opening_brackets:\n                opening_brackets.pop()\n                if len(opening_brackets) > 0:\n                    nested_found = True\n    \n    return nested_found", "is_solved": false, "iteration": 2, "prompt_tokens": 2477, "completion_tokens": 466, "duration": 13.008723258972168}, {"generated_code": "def is_nested(string):\n    opening_brackets = []\n    nested_found = False\n    \n    for char in string:\n        if char == '[':\n            opening_brackets.append(char)\n        elif char == ']':\n            if opening_brackets:\n                opening_brackets.pop()\n                if len(opening_brackets) < 1:\n                    nested_found = True\n    \n    return nested_found", "is_solved": false, "iteration": 3, "prompt_tokens": 3482, "completion_tokens": 602, "duration": 16.104712963104248}, {"generated_code": "def is_nested(string):\n    opening_brackets = []\n    nested_found = False\n    \n    for char in string:\n        if char == '[':\n            opening_brackets.append(char)\n        elif char == ']':\n            if opening_brackets:\n                opening_brackets.pop()\n                nested_found = True\n        if len(opening_brackets) > 1:\n            nested_found = True\n    \n    return nested_found", "is_solved": false, "iteration": 4, "prompt_tokens": 4523, "completion_tokens": 750, "duration": 18.708982229232788}, {"generated_code": "def is_nested(string):\n    stack = []\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n    \n    return len(stack) < len(string) and len(stack) > 0", "is_solved": false, "iteration": 5, "prompt_tokens": 5597, "completion_tokens": 882, "duration": 21.641748428344727}, {"generated_code": "def is_nested(string):\n    stack = []\n    nested = False\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack and stack[-1] == '[':\n            stack.pop()\n            nested = True\n    \n    return nested", "is_solved": false, "iteration": 6, "prompt_tokens": 6604, "completion_tokens": 985, "duration": 24.418890953063965}, {"generated_code": "def is_nested(string):\n    stack = []\n    nested = False\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) > 1:\n                stack.pop()\n                nested = True\n            else:\n                stack = []\n    \n    return nested", "is_solved": false, "iteration": 7, "prompt_tokens": 7604, "completion_tokens": 1100, "duration": 26.805331468582153}, {"generated_code": "def is_nested(string):\n    stack = []\n    nested = False\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                nested = True\n                break\n    \n    return nested", "is_solved": false, "iteration": 8, "prompt_tokens": 8588, "completion_tokens": 1218, "duration": 29.573732614517212}, {"generated_code": "def is_nested(string):\n    open_brackets = 0\n    close_brackets = 0\n    \n    for char in string:\n        if char == '[':\n            open_brackets += 1\n        elif char == ']' and open_brackets > close_brackets:\n            close_brackets += 1\n\n    return open_brackets > 0 and close_brackets > 0", "is_solved": false, "iteration": 9, "prompt_tokens": 9616, "completion_tokens": 1374, "duration": 35.345367670059204}]}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n % 4 == 0 and n >= 8", "is_solved": false, "iterations": 9, "prompt_tokens": 7520, "completion_tokens": 1261, "duration": 34.39741516113281, "iteration_states": [{"generated_code": "def is_equal_to_sum_even(n):\n    count = 0\n    for i in range(2, n//2 + 1, 2):\n        if n - i in range(2, n, 2):\n            count += 1\n    return count == 4", "is_solved": false, "iteration": 0, "prompt_tokens": 127, "completion_tokens": 64, "duration": 5.258005857467651}, {"generated_code": "def is_equal_to_sum_even(n):\n    count = 0\n    for i in range(2, n//2 + 1, 2):\n        if (n - i) % 2 == 0 and (n - i) >= 2:\n            count += 1\n    return count == 4", "is_solved": false, "iteration": 1, "prompt_tokens": 959, "completion_tokens": 226, "duration": 8.410547256469727}, {"generated_code": "def is_equal_to_sum_even(n):\n    count = 0\n    for i in range(2, n//2 + 1, 2):\n        if (n - i) % 2 == 0 and (n - i) >= i:\n            count += 1\n    return count == 4", "is_solved": false, "iteration": 2, "prompt_tokens": 1794, "completion_tokens": 374, "duration": 11.430761098861694}, {"generated_code": "def is_equal_to_sum_even(n):\n    count = 0\n    for i in range(2, n//2 + 1, 2):\n        if (n - i) % 2 == 0 and (n - i) >= i:\n            count += 1\n    return count == 4", "is_solved": false, "iteration": 3, "prompt_tokens": 2602, "completion_tokens": 497, "duration": 14.306710243225098}, {"generated_code": "def is_equal_to_sum_even(n):\n    count = 0\n    for i in range(2, n//2 + 1, 2):\n        if (n - i) % 2 == 0 and (n - i) >= i:\n            count += 1\n    return count == 4 and count < n // 2", "is_solved": false, "iteration": 4, "prompt_tokens": 3425, "completion_tokens": 642, "duration": 17.04006028175354}, {"generated_code": "def is_equal_to_sum_even(n):\n    count = 0\n    for i in range(2, n//2 + 1, 2):\n        if (n - i) % 2 == 0 and (n - i) >= i:\n            count += 1\n    return count == 4", "is_solved": false, "iteration": 5, "prompt_tokens": 4245, "completion_tokens": 763, "duration": 19.452314853668213}, {"generated_code": "def is_equal_to_sum_even(n):\n    count = 0\n    for i in range(2, n//2 + 1, 2):\n        if n >= i * 4 and (n - i*4) % 2 == 0:\n            count += 1\n    return count == 4", "is_solved": false, "iteration": 6, "prompt_tokens": 5067, "completion_tokens": 901, "duration": 22.26497745513916}, {"generated_code": "def is_equal_to_sum_even(n):\n    count = 0\n    for i in range(1, n//2 + 1):\n        if i % 2 == 0 and (n - i) % 2 == 0:\n            count += 1\n    return count == 4", "is_solved": false, "iteration": 7, "prompt_tokens": 5898, "completion_tokens": 1032, "duration": 26.778197526931763}, {"generated_code": "def is_equal_to_sum_even(n):\n    count = 0\n    for i in range(1, n//2 + 1):\n        if i % 2 == 0:\n            count += 1\n    return count == 4", "is_solved": false, "iteration": 8, "prompt_tokens": 6738, "completion_tokens": 1178, "duration": 32.33214807510376}, {"generated_code": "def is_equal_to_sum_even(n):\n    return n % 4 == 0 and n >= 8", "is_solved": false, "iteration": 9, "prompt_tokens": 7520, "completion_tokens": 1261, "duration": 34.39741516113281}]}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    \n    count = sum(1 for i in range(len(txt)-1) if txt[i].islower() and txt[i+1].islower() and ord(txt[i]) % 2 == 1)\n    \n    return count if count > 0 else 0", "is_solved": false, "iterations": 9, "prompt_tokens": 8361, "completion_tokens": 1281, "duration": 31.976717948913574, "iteration_states": [{"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "is_solved": false, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 60, "duration": 3.0317656993865967}, {"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        words = []\n        current_word = ''\n        for char in txt:\n            if char.islower() and ord(char) % 2 != 0:\n                current_word += char\n            else:\n                if current_word:\n                    words.append(current_word)\n                    current_word = ''\n        if current_word:\n            words.append(current_word)\n        return words", "is_solved": false, "iteration": 1, "prompt_tokens": 1061, "completion_tokens": 223, "duration": 6.58051872253418}, {"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)\n        return count", "is_solved": false, "iteration": 2, "prompt_tokens": 2047, "completion_tokens": 345, "duration": 9.38701319694519}, {"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)\n        return count if count > 0 else 0", "is_solved": false, "iteration": 3, "prompt_tokens": 2911, "completion_tokens": 457, "duration": 11.690223455429077}, {"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)\n        return count if count > 0 else 0", "is_solved": false, "iteration": 4, "prompt_tokens": 3823, "completion_tokens": 601, "duration": 14.860733270645142}, {"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)\n        return count if count > 0 else 0", "is_solved": false, "iteration": 5, "prompt_tokens": 4709, "completion_tokens": 719, "duration": 17.37571120262146}, {"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)\n        return count if count > 0 else 0", "is_solved": false, "iteration": 6, "prompt_tokens": 5591, "completion_tokens": 833, "duration": 20.744430780410767}, {"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = sum(1 for i in range(len(txt)-1) if txt[i].islower() and txt[i+1].islower() and ord(txt[i]) % 2 != 0)\n        return count if count > 0 else 0", "is_solved": false, "iteration": 7, "prompt_tokens": 6482, "completion_tokens": 973, "duration": 23.505799293518066}, {"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = sum(1 for i in range(len(txt)-1) if txt[i].islower() and txt[i+1].islower() and ord(txt[i]) % 2 == 1)\n        return count if count > 0 else 0", "is_solved": false, "iteration": 8, "prompt_tokens": 7415, "completion_tokens": 1121, "duration": 28.91692852973938}, {"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    \n    count = sum(1 for i in range(len(txt)-1) if txt[i].islower() and txt[i+1].islower() and ord(txt[i]) % 2 == 1)\n    \n    return count if count > 0 else 0", "is_solved": false, "iteration": 9, "prompt_tokens": 8361, "completion_tokens": 1281, "duration": 31.976717948913574}]}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    result = []\n    consecutive_spaces = 0\n    for c in text:\n        if c == ' ':\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                if result and result[-1] != '-':\n                    result.append('-')\n            else:\n                result.append('_')\n        else:\n            result.append(c)\n            consecutive_spaces = 0\n    return ('_' if text[0] == ' ' else '') + ''.join(result).lstrip('_')", "is_solved": false, "iterations": 9, "prompt_tokens": 8147, "completion_tokens": 1503, "duration": 35.65960693359375, "iteration_states": [{"generated_code": "def fix_spaces(text):\n    return ''.join(['_' if c == ' ' else '-' if c == ' ' * 2 else c for c in text])\n\n# Test cases\nprint(fix_spaces(\"Example\"))  # \"Example\"\nprint(fix_spaces(\"Example 1\"))  # \"Example_1\"\nprint(fix_spaces(\" Example 2\"))  # \"_Example_2\"\nprint(fix_spaces(\" Example   3\"))  # \"_Example-3\"", "is_solved": false, "iteration": 0, "prompt_tokens": 156, "completion_tokens": 102, "duration": 5.568545341491699}, {"generated_code": "def fix_spaces(text):\n    result = []\n    consecutive_spaces = 0\n    for c in text:\n        if c == ' ':\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result.append('-')\n            else:\n                result.append('_')\n        else:\n            result.append(c)\n            consecutive_spaces = 0\n    return ''.join(result)", "is_solved": false, "iteration": 1, "prompt_tokens": 1048, "completion_tokens": 235, "duration": 8.316936016082764}, {"generated_code": "def fix_spaces(text):\n    result = []\n    consecutive_spaces = 0\n    for c in text:\n        if c == ' ':\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result.append('-')\n            else:\n                result.append('_')\n        else:\n            result.append(c)\n            consecutive_spaces = 0\n    return ''.join(result)", "is_solved": false, "iteration": 2, "prompt_tokens": 1902, "completion_tokens": 370, "duration": 11.398325681686401}, {"generated_code": "def fix_spaces(text):\n    result = []\n    consecutive_spaces = 0\n    for c in text:\n        if c == ' ':\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result.append('-')\n            else:\n                result.append('_')\n        else:\n            result.append(c)\n            consecutive_spaces = 0\n    return ''.join(result)", "is_solved": false, "iteration": 3, "prompt_tokens": 2778, "completion_tokens": 527, "duration": 14.737070798873901}, {"generated_code": "def fix_spaces(text):\n    result = []\n    consecutive_spaces = 0\n    for c in text:\n        if c == ' ':\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result.append('-')\n                consecutive_spaces = 0\n            else:\n                result.append('_')\n        else:\n            result.append(c)\n            consecutive_spaces = 0\n    return ''.join(result)", "is_solved": false, "iteration": 4, "prompt_tokens": 3639, "completion_tokens": 676, "duration": 17.685574054718018}, {"generated_code": "def fix_spaces(text):\n    result = []\n    consecutive_spaces = 0\n    for c in text:\n        if c == ' ':\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result.append('-')\n                consecutive_spaces = 0\n            else:\n                result.append('_')\n        else:\n            result.append(c)\n            consecutive_spaces = 0\n    return ('_' if text[0] == ' ' else '') + ''.join(result).lstrip('_')", "is_solved": false, "iteration": 5, "prompt_tokens": 4513, "completion_tokens": 841, "duration": 20.988615036010742}, {"generated_code": "def fix_spaces(text):\n    result = []\n    consecutive_spaces = 0\n    for c in text:\n        if c == ' ':\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result.append('-')\n                consecutive_spaces = 1\n            else:\n                result.append('_')\n        else:\n            result.append(c)\n            consecutive_spaces = 0\n    return ('_' if text[0] == ' ' else '') + ''.join(result).lstrip('_')", "is_solved": false, "iteration": 6, "prompt_tokens": 5408, "completion_tokens": 993, "duration": 23.86804175376892}, {"generated_code": "def fix_spaces(text):\n    result = []\n    consecutive_spaces = 0\n    for c in text:\n        if c == ' ':\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                if result[-1] != '-':\n                    result.append('-')\n            else:\n                result.append('_')\n        else:\n            result.append(c)\n            consecutive_spaces = 0\n    return ('_' if text[0] == ' ' else '') + ''.join(result).lstrip('_')", "is_solved": false, "iteration": 7, "prompt_tokens": 6326, "completion_tokens": 1170, "duration": 28.90693974494934}, {"generated_code": "def fix_spaces(text):\n    result = []\n    consecutive_spaces = 0\n    for c in text:\n        if c == ' ':\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                if result[-1] != '-':\n                    result.append('-')\n            else:\n                result.append('_')\n        else:\n            result.append(c)\n            consecutive_spaces = 0\n    return ('_' if text[0] == ' ' else '') + ''.join(result).lstrip('_')", "is_solved": false, "iteration": 8, "prompt_tokens": 7236, "completion_tokens": 1335, "duration": 32.299006938934326}, {"generated_code": "def fix_spaces(text):\n    result = []\n    consecutive_spaces = 0\n    for c in text:\n        if c == ' ':\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                if result and result[-1] != '-':\n                    result.append('-')\n            else:\n                result.append('_')\n        else:\n            result.append(c)\n            consecutive_spaces = 0\n    return ('_' if text[0] == ' ' else '') + ''.join(result).lstrip('_')", "is_solved": false, "iteration": 9, "prompt_tokens": 8147, "completion_tokens": 1503, "duration": 35.65960693359375}]}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    sequence = [1, 3]\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return sequence\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i // 2)\n        else:\n            sequence.append(sum(sequence[-3:]))\n    return [int(x) for x in sequence]", "is_solved": false, "iterations": 9, "prompt_tokens": 15740, "completion_tokens": 1615, "duration": 37.37479519844055, "iteration_states": [{"generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1]\n    else:\n        sequence = [0, 1, 1]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n        return sequence", "is_solved": false, "iteration": 0, "prompt_tokens": 285, "completion_tokens": 108, "duration": 6.019955396652222}, {"generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1, 3]\n    else:\n        sequence = [1, 3]\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                sequence.append(sequence[-1] + i // 2)\n            else:\n                sequence.append(sequence[-1] + sequence[-2] + sequence[-3])\n        return sequence", "is_solved": false, "iteration": 1, "prompt_tokens": 2023, "completion_tokens": 287, "duration": 9.70944333076477}, {"generated_code": "def tri(n):\n    sequence = []\n    for i in range(n + 1):\n        if i == 0:\n            sequence.append(0)\n        elif i == 1:\n            sequence.append(3)\n        elif i == 2:\n            sequence.append(1 + i // 2)\n        else:\n            sequence.append(sequence[-1] + sequence[-2] + sequence[-3])\n    return sequence", "is_solved": false, "iteration": 2, "prompt_tokens": 3728, "completion_tokens": 430, "duration": 12.622512102127075}, {"generated_code": "def tri(n):\n    sequence = []\n    for i in range(n + 1):\n        if i == 0:\n            sequence.append(0)\n        elif i == 1:\n            sequence.append(3)\n        elif i == 2:\n            sequence.append(1 + i // 2)\n        else:\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[-1] + sequence[-2] + sequence[-3])\n    return sequence", "is_solved": false, "iteration": 3, "prompt_tokens": 5429, "completion_tokens": 615, "duration": 16.09205460548401}, {"generated_code": "def tri(n):\n    sequence = []\n    for i in range(n + 1):\n        if i == 0:\n            sequence.append(0)\n        elif i == 1:\n            sequence.append(3)\n        elif i == 2:\n            sequence.append(1)\n        else:\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[-1] + sequence[-2] + sequence[-3])\n    return sequence", "is_solved": false, "iteration": 4, "prompt_tokens": 7169, "completion_tokens": 786, "duration": 19.849782943725586}, {"generated_code": "def tri(n):\n    sequence = []\n    for i in range(n + 1):\n        if i == 0:\n            sequence.append(0)\n        elif i == 1:\n            sequence.append(3)\n        elif i == 2:\n            sequence.append(1)\n        else:\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[-1] + sequence[-2] + sequence[-3])\n    return sequence", "is_solved": false, "iteration": 5, "prompt_tokens": 8891, "completion_tokens": 949, "duration": 23.004734992980957}, {"generated_code": "def tri(n):\n    sequence = []\n    for i in range(n + 1):\n        if i == 0:\n            sequence.append(0)\n        elif i == 1:\n            sequence.append(3)\n        elif i == 2:\n            sequence.append(1)\n        else:\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i - 3])\n    return sequence", "is_solved": false, "iteration": 6, "prompt_tokens": 10628, "completion_tokens": 1133, "duration": 26.424365758895874}, {"generated_code": "def tri(n):\n    sequence = [0, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i // 2)\n        else:\n            sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i - 3])\n    return sequence", "is_solved": false, "iteration": 7, "prompt_tokens": 12385, "completion_tokens": 1291, "duration": 30.835291862487793}, {"generated_code": "def tri(n):\n    sequence = [1, 3]\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return sequence\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i // 2)\n        else:\n            sequence.append(sum(sequence[-3:]))\n    return sequence", "is_solved": false, "iteration": 8, "prompt_tokens": 14062, "completion_tokens": 1446, "duration": 34.028552770614624}, {"generated_code": "def tri(n):\n    sequence = [1, 3]\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return sequence\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i // 2)\n        else:\n            sequence.append(sum(sequence[-3:]))\n    return [int(x) for x in sequence]", "is_solved": false, "iteration": 9, "prompt_tokens": 15740, "completion_tokens": 1615, "duration": 37.37479519844055}]}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    elif start_idx > end_idx:\n        return tuple(planets[end_idx+1:start_idx][::-1])\n    else:\n        return ()", "is_solved": false, "iterations": 9, "prompt_tokens": 10410, "completion_tokens": 1807, "duration": 37.46178364753723, "iteration_states": [{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    else:\n        return tuple(planets[end_idx+1:start_idx][::-1])", "is_solved": false, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 126, "duration": 2.1185858249664307}, {"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    else:\n        return tuple(planets[end_idx+1:start_idx][::-1])", "is_solved": false, "iteration": 1, "prompt_tokens": 1370, "completion_tokens": 299, "duration": 5.766290664672852}, {"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    else:\n        return tuple(planets[end_idx+1:start_idx][::-1])", "is_solved": false, "iteration": 2, "prompt_tokens": 2475, "completion_tokens": 468, "duration": 8.990135431289673}, {"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    else:\n        return tuple(planets[end_idx+1:start_idx][::-1])", "is_solved": false, "iteration": 3, "prompt_tokens": 3576, "completion_tokens": 633, "duration": 12.399848222732544}, {"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    elif start_idx > end_idx:\n        return tuple(planets[end_idx+1:start_idx][::-1])\n    else:\n        return ()", "is_solved": false, "iteration": 4, "prompt_tokens": 4707, "completion_tokens": 839, "duration": 16.144993782043457}, {"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    elif start_idx > end_idx:\n        return tuple(planets[end_idx+1:start_idx][::-1])\n    else:\n        return ()", "is_solved": false, "iteration": 5, "prompt_tokens": 5852, "completion_tokens": 1037, "duration": 19.645051956176758}, {"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    else:\n        return tuple(planets[end_idx+1:start_idx][::-1]) if start_idx > end_idx else ()", "is_solved": false, "iteration": 6, "prompt_tokens": 6977, "completion_tokens": 1212, "duration": 24.3499493598938}, {"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    else:\n        return tuple(planets[end_idx+1:start_idx][::-1]) if start_idx > end_idx else tuple(planets[end_idx+1:start_idx])", "is_solved": false, "iteration": 7, "prompt_tokens": 8134, "completion_tokens": 1434, "duration": 30.17769980430603}, {"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    else:\n        return tuple(planets[end_idx+1:start_idx][::-1]) if start_idx > end_idx else ()", "is_solved": false, "iteration": 8, "prompt_tokens": 9281, "completion_tokens": 1619, "duration": 33.9652419090271}, {"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    elif start_idx > end_idx:\n        return tuple(planets[end_idx+1:start_idx][::-1])\n    else:\n        return ()", "is_solved": false, "iteration": 9, "prompt_tokens": 10410, "completion_tokens": 1807, "duration": 37.46178364753723}]}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    violating_indices = []\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i+1]:\n            violating_indices.append(i)\n    \n    if len(violating_indices) == 0:\n        return -1\n    elif len(violating_indices) > 1:\n        return -1\n    else:\n        if arr[-1] >= arr[0]:\n            return -1\n        return violating_indices[0]", "is_solved": false, "iterations": 9, "prompt_tokens": 8058, "completion_tokens": 1634, "duration": 38.039804220199585, "iteration_states": [{"generated_code": "def can_arrange(arr):\n    index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            index = i-1\n            break\n    return index", "is_solved": false, "iteration": 0, "prompt_tokens": 153, "completion_tokens": 52, "duration": 5.050522565841675}, {"generated_code": "def can_arrange(arr):\n    count = 0\n    index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            count += 1\n            index = i-1\n            if count > 1:\n                return -1\n    if count == 0 or (count == 1 and arr[0] >= arr[-1]):\n        return len(arr) - 1\n    return index", "is_solved": false, "iteration": 1, "prompt_tokens": 950, "completion_tokens": 239, "duration": 11.65495228767395}, {"generated_code": "def can_arrange(arr):\n    sorted_arr = sorted(arr)\n    count = 0\n    index = -1\n    for i in range(len(arr)):\n        if arr[i] != sorted_arr[i]:\n            count += 1\n            index = i\n            if count > 1:\n                return -1\n    if count == 0 or (count == 1 and arr[0] >= arr[-1]):\n        return len(arr) - 1\n    return index", "is_solved": false, "iteration": 2, "prompt_tokens": 1821, "completion_tokens": 387, "duration": 14.36823058128357}, {"generated_code": "def can_arrange(arr):\n    count = 0\n    index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            count += 1\n            index = i\n            if count > 1:\n                return -1\n    if count == 0 or (count == 1 and arr[0] >= arr[-1]):\n        return len(arr) - 1\n    return index", "is_solved": false, "iteration": 3, "prompt_tokens": 2725, "completion_tokens": 563, "duration": 17.741403102874756}, {"generated_code": "def can_arrange(arr):\n    index = -1\n    count = 0\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            count += 1\n            index = i\n            if count > 1 or (i < len(arr) - 1 and arr[i+1] < arr[i-1]):\n                return -1\n    return index", "is_solved": false, "iteration": 4, "prompt_tokens": 3590, "completion_tokens": 716, "duration": 20.72029948234558}, {"generated_code": "def can_arrange(arr):\n    index = -1\n    count = 0\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            count += 1\n            index = i\n            if count > 1 or (i < len(arr) - 1 and arr[i+1] < arr[i-1]):\n                return -1\n    if count == 1 and arr[0] >= arr[-1]:\n        return -1\n    return index", "is_solved": false, "iteration": 5, "prompt_tokens": 4430, "completion_tokens": 895, "duration": 24.83335041999817}, {"generated_code": "def can_arrange(arr):\n    index = -1\n    count = 0\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            count += 1\n            index = i\n            if count > 1 or (i < len(arr) - 1 and arr[i+1] < arr[i-1]):\n                return -1\n    if count == 1 and arr[0] >= arr[-1]:\n        return -1\n    return index if count == 1 else -1", "is_solved": false, "iteration": 6, "prompt_tokens": 5301, "completion_tokens": 1071, "duration": 28.134215116500854}, {"generated_code": "def can_arrange(arr):\n    index = -1\n    count = 0\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i+1]:\n            count += 1\n            index = i\n            if count > 1 or (i < len(arr) - 2 and arr[i+2] < arr[i]):\n                return -1\n    if count == 1 and arr[-1] >= arr[0]:\n        return -1\n    return index if count == 1 else -1", "is_solved": false, "iteration": 7, "prompt_tokens": 6207, "completion_tokens": 1265, "duration": 31.57371687889099}, {"generated_code": "def can_arrange(arr):\n    violating_indices = []\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i+1]:\n            violating_indices.append(i)\n            if len(violating_indices) > 1 or (i < len(arr) - 2 and arr[i+2] < arr[i]):\n                return -1\n    if len(violating_indices) == 1 and arr[-1] >= arr[0]:\n        return -1\n    return violating_indices[0] if len(violating_indices) == 1 else -1", "is_solved": false, "iteration": 8, "prompt_tokens": 7123, "completion_tokens": 1458, "duration": 34.821776390075684}, {"generated_code": "def can_arrange(arr):\n    violating_indices = []\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i+1]:\n            violating_indices.append(i)\n    \n    if len(violating_indices) == 0:\n        return -1\n    elif len(violating_indices) > 1:\n        return -1\n    else:\n        if arr[-1] >= arr[0]:\n            return -1\n        return violating_indices[0]", "is_solved": false, "iteration": 9, "prompt_tokens": 8058, "completion_tokens": 1634, "duration": 38.039804220199585}]}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    def convert_to_float(x):\n        if isinstance(x, str):\n            x = x.replace(',', '.')\n        try:\n            return float(x)\n        except ValueError:\n            return None\n\n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n    \n    if a_float is not None and b_float is not None:\n        return a if a_float > b_float else b\n    elif a_float is not None:\n        return a\n    elif b_float is not None:\n        return b\n    \n    if isinstance(a, str) and isinstance(b, int):\n        return a if float(a) > b else None\n    elif isinstance(a, int) and isinstance(b, str):\n        return b if a > float(b) else None\n    \n    if isinstance(a, str) or isinstance(b, str):\n        return a if a > b else b\n    return None", "is_solved": false, "iterations": 9, "prompt_tokens": 8957, "completion_tokens": 1671, "duration": 37.5956654548645, "iteration_states": [{"generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a == b:\n            return None\n        return a if a > b else b\n    return a if type(a) == float else b", "is_solved": false, "iteration": 0, "prompt_tokens": 191, "completion_tokens": 52, "duration": 3.0268993377685547}, {"generated_code": "def compare_one(a, b):\n    if a == b:\n        return None\n    try:\n        if float(a) > float(b):\n            return a\n        return b\n    except ValueError:\n        return a if type(a) == str else b", "is_solved": false, "iteration": 1, "prompt_tokens": 1031, "completion_tokens": 151, "duration": 5.287789583206177}, {"generated_code": "def compare_one(a, b):\n    if a == b:\n        return None\n    \n    def convert_to_float(x):\n        if isinstance(x, str):\n            x = x.replace(',', '.')\n        return float(x)\n    \n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n    \n    if a_float > b_float:\n        return a\n    return b", "is_solved": false, "iteration": 2, "prompt_tokens": 1898, "completion_tokens": 282, "duration": 8.040931940078735}, {"generated_code": "def compare_one(a, b):\n    if a == b:\n        return None\n    \n    def convert_to_float(x):\n        if isinstance(x, str):\n            x = x.replace(',', '.')\n        try:\n            return float(x)\n        except ValueError:\n            return None\n\n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n    \n    if a_float is not None and b_float is not None:\n        if a_float > b_float:\n            return a\n        return b\n    \n    return b if a_float is None else a", "is_solved": false, "iteration": 3, "prompt_tokens": 2839, "completion_tokens": 480, "duration": 11.919810771942139}, {"generated_code": "def compare_one(a, b):\n    if type(a) != type(b):\n        return b if type(a) == str else a\n    \n    if a == b:\n        return None\n    \n    def convert_to_float(x):\n        if isinstance(x, str):\n            x = x.replace(',', '.')\n        try:\n            return float(x)\n        except ValueError:\n            return None\n\n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n    \n    if a_float is not None and b_float is not None:\n        if a_float > b_float:\n            return a\n        return b\n    \n    return b if a_float is None else a", "is_solved": false, "iteration": 4, "prompt_tokens": 3804, "completion_tokens": 653, "duration": 15.906627178192139}, {"generated_code": "def compare_one(a, b):\n    if type(a) != type(b):\n        if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n            return b if a < b else a\n        return b if isinstance(a, str) else a\n    \n    if a == b:\n        return None\n    \n    def convert_to_float(x):\n        if isinstance(x, str):\n            x = x.replace(',', '.')\n        try:\n            return float(x)\n        except ValueError:\n            return None\n\n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n    \n    if a_float is not None and b_float is not None:\n        if a_float > b_float:\n            return a\n        return b\n    \n    return b if a_float is None else a", "is_solved": false, "iteration": 5, "prompt_tokens": 4865, "completion_tokens": 887, "duration": 20.53434681892395}, {"generated_code": "def compare_one(a, b):\n    def convert_to_float(x):\n        if isinstance(x, str):\n            x = x.replace(',', '.')\n        try:\n            return float(x)\n        except ValueError:\n            return None\n\n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n    \n    if a_float is not None and b_float is not None:\n        return a if a_float > b_float else b\n    \n    return a if a != b else None", "is_solved": false, "iteration": 6, "prompt_tokens": 5944, "completion_tokens": 1026, "duration": 23.67145323753357}, {"generated_code": "def compare_one(a, b):\n    def convert_to_float(x):\n        if isinstance(x, str):\n            x = x.replace(',', '.')\n        try:\n            return float(x)\n        except ValueError:\n            return None\n\n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n    \n    if a_float is not None and b_float is not None:\n        return a if a_float > b_float else b\n    elif a_float is not None:\n        return a\n    elif b_float is not None:\n        return b\n    \n    return a if a != b else None", "is_solved": false, "iteration": 7, "prompt_tokens": 6903, "completion_tokens": 1211, "duration": 29.343920707702637}, {"generated_code": "def compare_one(a, b):\n    def convert_to_float(x):\n        if isinstance(x, str):\n            x = x.replace(',', '.')\n        try:\n            return float(x)\n        except ValueError:\n            return None\n\n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n    \n    if a_float is not None and b_float is not None:\n        return a if a_float > b_float else b\n    elif a_float is not None:\n        return a\n    elif b_float is not None:\n        return b\n    \n    if isinstance(a, str) or isinstance(b, str):\n        return a if a > b else b\n    return None", "is_solved": false, "iteration": 8, "prompt_tokens": 7913, "completion_tokens": 1416, "duration": 33.06972122192383}, {"generated_code": "def compare_one(a, b):\n    def convert_to_float(x):\n        if isinstance(x, str):\n            x = x.replace(',', '.')\n        try:\n            return float(x)\n        except ValueError:\n            return None\n\n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n    \n    if a_float is not None and b_float is not None:\n        return a if a_float > b_float else b\n    elif a_float is not None:\n        return a\n    elif b_float is not None:\n        return b\n    \n    if isinstance(a, str) and isinstance(b, int):\n        return a if float(a) > b else None\n    elif isinstance(a, int) and isinstance(b, str):\n        return b if a > float(b) else None\n    \n    if isinstance(a, str) or isinstance(b, str):\n        return a if a > b else b\n    return None", "is_solved": false, "iteration": 9, "prompt_tokens": 8957, "completion_tokens": 1671, "duration": 37.5956654548645}]}
{"task_id": "HumanEval/127", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    def length_of_intersection(interval1, interval2):\n        start1, end1 = interval1\n        start2, end2 = interval2\n\n        if start1 > end2 or start2 > end1:\n            return 0\n\n        intersection_start = max(start1, start2)\n        intersection_end = min(end1, end2)\n\n        return intersection_end - intersection_start + 1\n\n    length = length_of_intersection(interval1, interval2)\n\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iterations": 9, "prompt_tokens": 14104, "completion_tokens": 2167, "duration": 42.151482343673706, "iteration_states": [{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    length = intersection_end - intersection_start + 1\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 0, "prompt_tokens": 304, "completion_tokens": 159, "duration": 5.277536869049072}, {"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    length = intersection_end - intersection_start + 1\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 1, "prompt_tokens": 1808, "completion_tokens": 355, "duration": 9.332839012145996}, {"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    length = intersection_end - intersection_start + 1\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 2, "prompt_tokens": 3327, "completion_tokens": 566, "duration": 13.173202753067017}, {"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    length = intersection_end - intersection_start + 1\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 3, "prompt_tokens": 4849, "completion_tokens": 780, "duration": 16.65214967727661}, {"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    length = intersection_end - intersection_start + 1\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 4, "prompt_tokens": 6386, "completion_tokens": 1009, "duration": 21.432143449783325}, {"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    length = intersection_end - intersection_start + 1\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 5, "prompt_tokens": 7925, "completion_tokens": 1240, "duration": 26.18905019760132}, {"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    length = intersection_end - intersection_start + 1\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 6, "prompt_tokens": 9451, "completion_tokens": 1458, "duration": 30.32077383995056}, {"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    def length_of_intersection(interval1, interval2):\n        start1, end1 = interval1\n        start2, end2 = interval2\n\n        if start1 > end2 or start2 > end1:\n            return 0\n\n        intersection_start = max(start1, start2)\n        intersection_end = min(end1, end2)\n\n        return intersection_end - intersection_start + 1\n\n    length = length_of_intersection(interval1, interval2)\n\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 7, "prompt_tokens": 10971, "completion_tokens": 1690, "duration": 34.12955832481384}, {"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    def length_of_intersection(interval1, interval2):\n        start1, end1 = interval1\n        start2, end2 = interval2\n\n        if start1 > end2 or start2 > end1:\n            return 0\n\n        intersection_start = max(start1, start2)\n        intersection_end = min(end1, end2)\n\n        return intersection_end - intersection_start + 1\n\n    length = length_of_intersection(interval1, interval2)\n\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 8, "prompt_tokens": 12534, "completion_tokens": 1925, "duration": 38.0229754447937}, {"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    def length_of_intersection(interval1, interval2):\n        start1, end1 = interval1\n        start2, end2 = interval2\n\n        if start1 > end2 or start2 > end1:\n            return 0\n\n        intersection_start = max(start1, start2)\n        intersection_end = min(end1, end2)\n\n        return intersection_end - intersection_start + 1\n\n    length = length_of_intersection(interval1, interval2)\n\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 9, "prompt_tokens": 14104, "completion_tokens": 2167, "duration": 42.151482343673706}]}
