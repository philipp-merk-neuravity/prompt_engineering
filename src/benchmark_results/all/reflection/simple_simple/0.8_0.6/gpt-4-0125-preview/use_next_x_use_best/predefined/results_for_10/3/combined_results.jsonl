{"generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 67, "duration": 4.0209877490997314, "task_id": "HumanEval/0"}
{"generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    stack = []\n    result = []\n    current = \"\"\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current += char\n        elif char == ')':\n            stack.pop()\n            current += char\n            if not stack:  # If stack is empty, a group has ended\n                result.append(current)\n                current = \"\"\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 165, "completion_tokens": 118, "duration": 8.902730226516724, "task_id": "HumanEval/1"}
{"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": true, "iteration": 0, "prompt_tokens": 135, "completion_tokens": 21, "duration": 2.7102606296539307, "task_id": "HumanEval/2"}
{"generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 53, "duration": 3.8415157794952393, "task_id": "HumanEval/3"}
{"generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 49, "duration": 2.99957537651062, "task_id": "HumanEval/4"}
{"generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.extend([delimeter, number])\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 63, "duration": 4.371600151062012, "task_id": "HumanEval/5"}
{"generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    results = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        results.append(max_depth)\n    return results", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 103, "duration": 5.678426265716553, "task_id": "HumanEval/6"}
{"generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]", "is_solved": true, "iteration": 0, "prompt_tokens": 143, "completion_tokens": 104, "duration": 8.238842725753784, "task_id": "HumanEval/7"}
{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 78, "duration": 6.69270133972168, "task_id": "HumanEval/8"}
{"generated_code": "def make_palindrome(string: str) -> str:\n    if string == string[::-1]:\n        return string\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 70, "duration": 4.749827861785889, "task_id": "HumanEval/10"}
{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.15260910987854, "task_id": "HumanEval/11"}
{"generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 39, "duration": 2.8544228076934814, "task_id": "HumanEval/12"}
{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 39, "duration": 2.4595766067504883, "task_id": "HumanEval/13"}
{"generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 73, "duration": 3.6329903602600098, "task_id": "HumanEval/14"}
{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 31, "duration": 2.760759115219116, "task_id": "HumanEval/15"}
{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.3197572231292725, "task_id": "HumanEval/16"}
{"generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats", "is_solved": true, "iteration": 0, "prompt_tokens": 222, "completion_tokens": 83, "duration": 4.54159688949585, "task_id": "HumanEval/17"}
{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 72, "duration": 4.7304723262786865, "task_id": "HumanEval/18"}
{"generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n                'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 106, "duration": 5.555402755737305, "task_id": "HumanEval/19"}
{"generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i+1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair", "is_solved": true, "iteration": 0, "prompt_tokens": 216, "completion_tokens": 117, "duration": 5.754441499710083, "task_id": "HumanEval/20"}
{"generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(x - min_num) / range_num for x in numbers]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 104, "duration": 9.0089693069458, "task_id": "HumanEval/21"}
{"generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 103, "duration": 5.303599834442139, "task_id": "HumanEval/22"}
{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 2.649064302444458, "task_id": "HumanEval/23"}
{"generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 44, "duration": 3.682873249053955, "task_id": "HumanEval/24"}
{"generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 79, "duration": 4.361755609512329, "task_id": "HumanEval/25"}
{"generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    counts = {}\n    for number in numbers:\n        counts[number] = counts.get(number, 0) + 1\n    return [number for number in numbers if counts[number] == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 95, "duration": 7.0386962890625, "task_id": "HumanEval/26"}
{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 35, "duration": 2.9268834590911865, "task_id": "HumanEval/27"}
{"generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 61, "duration": 3.5149357318878174, "task_id": "HumanEval/28"}
{"generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that start with a given prefix.\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 60, "duration": 3.807779312133789, "task_id": "HumanEval/29"}
{"generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [x for x in l if x > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 35, "duration": 2.8653414249420166, "task_id": "HumanEval/30"}
{"generated_code": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 117, "duration": 5.848691701889038, "task_id": "HumanEval/31"}
{"generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    from scipy.optimize import root\n    def func(x):\n        return poly(xs, x)\n    \n    initial_guess = 0.0\n    sol = root(func, initial_guess)\n    if sol.success:\n        return sol.x[0]\n    else:\n        raise ValueError(\"Root finding did not converge\")", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 228, "duration": 10.703521966934204, "task_id": "HumanEval/32"}
{"generated_code": "def sort_third(l: list) -> list:\n    # Extract elements at indices divisible by 3\n    divisible_by_3 = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort the extracted elements\n    divisible_by_3_sorted = sorted(divisible_by_3)\n    # Replace elements in the original list with sorted ones at the correct positions\n    for i, value in enumerate(divisible_by_3_sorted):\n        l[i * 3] = value\n    return l", "is_solved": true, "iteration": 0, "prompt_tokens": 200, "completion_tokens": 116, "duration": 7.125142335891724, "task_id": "HumanEval/33"}
{"generated_code": "def unique(l: list):\n    return sorted(set(l))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 16, "duration": 1.729191780090332, "task_id": "HumanEval/34"}
{"generated_code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 85, "duration": 8.01661229133606, "task_id": "HumanEval/35"}
{"generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 60, "duration": 3.8900606632232666, "task_id": "HumanEval/36"}
{"generated_code": "def decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iteration": 0, "prompt_tokens": 208, "completion_tokens": 137, "duration": 9.78336787223816, "task_id": "HumanEval/38"}
{"generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib():\n        a, b = 0, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    count = 0\n    for fib_num in fib():\n        if fib_num > 1 and is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 146, "duration": 6.8159308433532715, "task_id": "HumanEval/39"}
{"generated_code": "def triples_sum_to_zero(l: list):\n    n = len(l)\n    l.sort()\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 108, "duration": 9.359532356262207, "task_id": "HumanEval/40"}
{"generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Given n, the number of cars driving left to right and the same number driving right to left,\n    this function calculates the number of collisions that occur.\n    \"\"\"\n    return n**2", "is_solved": true, "iteration": 0, "prompt_tokens": 201, "completion_tokens": 57, "duration": 4.631146669387817, "task_id": "HumanEval/41"}
{"generated_code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 118, "duration": 5.376549959182739, "task_id": "HumanEval/42"}
{"generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 42, "duration": 3.8720717430114746, "task_id": "HumanEval/43"}
{"generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    digits.reverse()\n    return ''.join(digits)", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 61, "duration": 4.068792104721069, "task_id": "HumanEval/44"}
{"generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return (a * h) / 2", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 55, "duration": 3.3317267894744873, "task_id": "HumanEval/45"}
{"generated_code": "def fib4(n: int) -> int:\n    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    if n == 3: return 0\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 119, "duration": 6.260672330856323, "task_id": "HumanEval/46"}
{"generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "is_solved": true, "iteration": 0, "prompt_tokens": 125, "completion_tokens": 61, "duration": 5.067075967788696, "task_id": "HumanEval/47"}
{"generated_code": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 36, "duration": 2.997685432434082, "task_id": "HumanEval/48"}
{"generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 44, "duration": 3.229511022567749, "task_id": "HumanEval/49"}
{"generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": true, "iteration": 0, "prompt_tokens": 140, "completion_tokens": 43, "duration": 3.1155734062194824, "task_id": "HumanEval/50"}
{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 31, "duration": 3.8341293334960938, "task_id": "HumanEval/51"}
{"generated_code": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 29, "duration": 2.3202648162841797, "task_id": "HumanEval/52"}
{"generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 60, "duration": 4.088814735412598, "task_id": "HumanEval/53"}
{"generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 31, "duration": 2.755746603012085, "task_id": "HumanEval/54"}
{"generated_code": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 79, "duration": 5.1637444496154785, "task_id": "HumanEval/55"}
{"generated_code": "def sort_even(l: list) -> list:\n    even_indices = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even_indices.sort()\n    return [even_indices.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 71, "duration": 4.339508295059204, "task_id": "HumanEval/37"}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count += 1\n        elif bracket == '>':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 71, "duration": 5.743376731872559, "task_id": "HumanEval/56"}
{"generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:  # Check if the list is empty\n        return []  # Return an empty list if the input list is empty\n    max_rolling = []\n    current_max = numbers[0]\n    for number in numbers:\n        if number > current_max:\n            current_max = number\n        max_rolling.append(current_max)\n    return max_rolling", "is_solved": true, "iteration": 1, "prompt_tokens": 964, "completion_tokens": 219, "duration": 11.935765504837036, "task_id": "HumanEval/9"}
{"generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 61, "duration": 4.09354829788208, "task_id": "HumanEval/57"}
{"generated_code": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(set(l1) & set(l2))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 39, "duration": 3.0942766666412354, "task_id": "HumanEval/58"}
{"generated_code": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime_factor = 1\n    i = 2\n    \n    while i <= n ** 0.5:\n        if n % i == 0 and is_prime(i):\n            prime_factor = i\n            while n % i == 0:\n                n //= i\n        i += 1\n    \n    if n > 2 and is_prime(n):\n        prime_factor = n\n\n    return prime_factor", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 174, "duration": 9.62759804725647, "task_id": "HumanEval/59"}
{"generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return n * (n + 1) // 2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 46, "duration": 3.125488042831421, "task_id": "HumanEval/60"}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for bracket in brackets:\n        if bracket == '(':\n            balance += 1\n        elif bracket == ')':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 71, "duration": 4.898189544677734, "task_id": "HumanEval/61"}
{"generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 28, "duration": 2.6573143005371094, "task_id": "HumanEval/62"}
{"generated_code": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            d = a + b + c\n            a, b, c = b, c, d\n        return c", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 108, "duration": 7.011068105697632, "task_id": "HumanEval/63"}
{"generated_code": "def vowels_count(s):\n    \"\"\"\n    Add more test cases.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s.endswith('y') or s.endswith('Y'):\n        count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 76, "duration": 4.908478260040283, "task_id": "HumanEval/64"}
{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    len_x = len(x_str)\n    if shift > len_x:\n        return x_str[::-1]\n    shift %= len_x\n    return x_str[-shift:] + x_str[:-shift]", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 59, "duration": 5.130709886550903, "task_id": "HumanEval/65"}
{"generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.162553071975708, "task_id": "HumanEval/66"}
{"generated_code": "def fruit_distribution(s, n):\n    numbers = [int(i) for i in s.split() if i.isdigit()]\n    return n - sum(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 35, "duration": 3.0522823333740234, "task_id": "HumanEval/67"}
{"generated_code": "def pluck(arr):\n    even_values = [(value, index) for index, value in enumerate(arr) if value % 2 == 0 and value >= 0]\n    if not even_values:\n        return []\n    return list(min(even_values))", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 57, "duration": 3.5284690856933594, "task_id": "HumanEval/68"}
{"generated_code": "def search(lst):\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    max_val = -1\n    for key, value in count_dict.items():\n        if key <= value and key > max_val:\n            max_val = key\n\n    return max_val", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 86, "duration": 6.029757261276245, "task_id": "HumanEval/69"}
{"generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 51, "duration": 4.173398017883301, "task_id": "HumanEval/70"}
{"generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    '''\n    # Check if the sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Calculate the area using Heron's formula\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    \n    return round(area, 2)", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 157, "duration": 9.120259046554565, "task_id": "HumanEval/71"}
{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.5521044731140137, "task_id": "HumanEval/72"}
{"generated_code": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 67, "duration": 8.294924974441528, "task_id": "HumanEval/73"}
{"generated_code": "def total_match(lst1, lst2):\n    if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2):\n        return lst1\n    else:\n        return lst2", "is_solved": true, "iteration": 0, "prompt_tokens": 243, "completion_tokens": 49, "duration": 3.180537700653076, "task_id": "HumanEval/74"}
{"generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 49, "duration": 3.2270283699035645, "task_id": "HumanEval/76"}
{"generated_code": "def iscube(a):\n    if a >= 0:\n        root = round(a ** (1/3))\n        return root**3 == a\n    else:\n        root = round(abs(a) ** (1/3))\n        return -root**3 == a", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 60, "duration": 3.163822889328003, "task_id": "HumanEval/77"}
{"generated_code": "def hex_key(num):\n    # Define the prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    # Count the number of prime hexadecimal digits in the input string\n    return sum(1 for digit in num if digit in prime_hex_digits)", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 70, "duration": 4.296364784240723, "task_id": "HumanEval/78"}
{"generated_code": "def decimal_to_binary(decimal):\n    binary_str = bin(decimal)[2:]  # convert to binary and remove the '0b' prefix\n    return f\"db{binary_str}db\"", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 44, "duration": 2.8562440872192383, "task_id": "HumanEval/79"}
{"generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 80, "duration": 9.004127025604248, "task_id": "HumanEval/80"}
{"generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for g in grades:\n        if g == 4.0: \n            letter_grades.append('A+')\n        elif g > 3.7: \n            letter_grades.append('A')\n        elif g > 3.3: \n            letter_grades.append('A-')\n        elif g > 3.0: \n            letter_grades.append('B+')\n        elif g > 2.7: \n            letter_grades.append('B')\n        elif g > 2.3: \n            letter_grades.append('B-')\n        elif g > 2.0: \n            letter_grades.append('C+')\n        elif g > 1.7: \n            letter_grades.append('C')\n        elif g > 1.3: \n            letter_grades.append('C-')\n        elif g > 1.0: \n            letter_grades.append('D+')\n        elif g > 0.7: \n            letter_grades.append('D')\n        elif g > 0.0: \n            letter_grades.append('D-')\n        else: \n            letter_grades.append('E')\n    return letter_grades", "is_solved": true, "iteration": 0, "prompt_tokens": 320, "completion_tokens": 265, "duration": 11.700199842453003, "task_id": "HumanEval/81"}
{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 69, "duration": 3.6344518661499023, "task_id": "HumanEval/82"}
{"generated_code": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_of_digits)[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 51, "duration": 3.8922150135040283, "task_id": "HumanEval/84"}
{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 105, "completion_tokens": 40, "duration": 2.75032114982605, "task_id": "HumanEval/85"}
{"generated_code": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 27, "duration": 2.151890754699707, "task_id": "HumanEval/86"}
{"generated_code": "def get_row(lst, x):\n    \"\"\"\n    Given a 2D list `lst` and an integer `x`, find all occurrences of `x` in `lst`,\n    and return a list of tuples representing their coordinates in the format (row, column).\n    The coordinates are sorted first by row in ascending order, then by column in descending order.\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 136, "duration": 7.588098526000977, "task_id": "HumanEval/87"}
{"generated_code": "def sort_array(array):\n    if not array or len(array) == 1:\n        return array.copy()\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "is_solved": true, "iteration": 0, "prompt_tokens": 253, "completion_tokens": 61, "duration": 4.852056980133057, "task_id": "HumanEval/88"}
{"generated_code": "def encrypt(s):\n    \"\"\"Encrypts the input string by shifting letters down by 4 places.\"\"\"\n    encrypted = ''\n    for char in s:\n        if 'a' <= char <= 'z':\n            encrypted += chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n        elif 'A' <= char <= 'Z':\n            encrypted += chr((ord(char) - ord('A') + 4) % 26 + ord('A'))\n        else:\n            encrypted += char\n    return encrypted", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 118, "duration": 6.16865086555481, "task_id": "HumanEval/89"}
{"generated_code": "def next_smallest(lst):\n    \"\"\"\n    Returns the 2nd smallest element of the list. Returns None if there is no such element.\n    \"\"\"\n    unique_sorted_lst = sorted(set(lst))\n    if len(unique_sorted_lst) < 2:\n        return None\n    else:\n        return unique_sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 70, "duration": 5.281777381896973, "task_id": "HumanEval/90"}
{"generated_code": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 56, "duration": 3.67219877243042, "task_id": "HumanEval/92"}
{"generated_code": "def largest_prime_sum(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    return sum([int(digit) for digit in str(max_prime)])", "is_solved": true, "iteration": 0, "prompt_tokens": 336, "completion_tokens": 109, "duration": 6.138820648193359, "task_id": "HumanEval/94"}
{"generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    lower_case = all(isinstance(key, str) and key.islower() for key in keys)\n    upper_case = all(isinstance(key, str) and key.isupper() for key in keys)\n    return lower_case or upper_case", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 74, "duration": 5.66085147857666, "task_id": "HumanEval/95"}
{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [i for i in range(2, n) if is_prime(i)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 86, "duration": 4.624057769775391, "task_id": "HumanEval/96"}
{"generated_code": "def multiply(a, b):\n    \"\"\"Returns the product of the unit digits of two integers.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 42, "duration": 2.7824454307556152, "task_id": "HumanEval/97"}
{"generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = 'AEIOU'\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 103, "duration": 5.227121353149414, "task_id": "HumanEval/98"}
{"generated_code": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    '''\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 92, "duration": 6.353636026382446, "task_id": "HumanEval/99"}
{"generated_code": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]", "is_solved": true, "iteration": 0, "prompt_tokens": 182, "completion_tokens": 25, "duration": 3.4358692169189453, "task_id": "HumanEval/100"}
{"generated_code": "def words_string(s):\n    \"\"\"\n    Split the string into words separated by commas or spaces and return an array of the words.\n    \"\"\"\n    import re\n    return re.findall(r'\\b\\w+\\b', s)", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 50, "duration": 6.107905387878418, "task_id": "HumanEval/101"}
{"generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x, y and returns the biggest even integer number that is in the range [x, y] inclusive. If there's no such number, then the function should return -1.\"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 89, "duration": 5.985353708267212, "task_id": "HumanEval/102"}
{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 43, "duration": 4.151994228363037, "task_id": "HumanEval/103"}
{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 37, "duration": 5.314167737960815, "task_id": "HumanEval/104"}
{"generated_code": "def by_length(arr):\n    num_to_word = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    return [num_to_word[num] for num in reversed_arr]", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 118, "duration": 7.696850776672363, "task_id": "HumanEval/105"}
{"generated_code": "def f(n):\n    \"\"\" Returns a list of size n, with factorial values for even indexes and sum of numbers for odd indexes. \"\"\"\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n        \n    def sum_numbers(x):\n        return sum(range(1, x+1))\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_numbers(i))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 127, "duration": 11.082646608352661, "task_id": "HumanEval/106"}
{"generated_code": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \"\"\"\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    \n    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 141, "duration": 9.035115480422974, "task_id": "HumanEval/107"}
{"generated_code": "def move_one_ball(arr):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[(i + 1) % n]:\n            count += 1\n    return count <= 1", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 58, "duration": 5.8650219440460205, "task_id": "HumanEval/109"}
{"generated_code": "def exchange(lst1, lst2):\n    \"\"\"\n    Determines if it is possible to exchange elements between two lists to make the first list all even numbers.\n    \"\"\"\n    # Count the number of even numbers needed for lst1 and available in lst2\n    needed_evens = sum(1 for x in lst1 if x % 2 != 0)\n    available_evens = sum(1 for x in lst2 if x % 2 == 0)\n    \n    # If there are enough even numbers in lst2 to replace the odd numbers in lst1, return \"YES\"\n    if needed_evens <= available_evens:\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": true, "iteration": 0, "prompt_tokens": 247, "completion_tokens": 147, "duration": 12.99392294883728, "task_id": "HumanEval/110"}
{"generated_code": "def histogram(test):\n    if not test:\n        return {}\n    words = test.split()\n    counts = {}\n    for word in words:\n        counts[word] = counts.get(word, 0) + 1\n    max_count = max(counts.values())\n    return {word: count for word, count in counts.items() if count == max_count}", "is_solved": true, "iteration": 0, "prompt_tokens": 201, "completion_tokens": 77, "duration": 6.195828199386597, "task_id": "HumanEval/111"}
{"generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 212, "completion_tokens": 39, "duration": 5.42903208732605, "task_id": "HumanEval/112"}
{"generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 223, "completion_tokens": 75, "duration": 6.297055006027222, "task_id": "HumanEval/113"}
{"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_factors_count(n):\n        count = 0\n        for i in range(2, n + 1):\n            if n % i == 0 and is_prime(i):\n                while n % i == 0:\n                    n //= i\n                    count += 1\n        return count\n\n    return prime_factors_count(a) == 3", "is_solved": true, "iteration": 1, "prompt_tokens": 1235, "completion_tokens": 407, "duration": 20.56457543373108, "task_id": "HumanEval/75"}
{"generated_code": "import re\n\ndef is_bored(S):\n    \"\"\"\n    Counts the number of boredoms in a given string.\n    \n    Parameters:\n    S (str): A string of words.\n    \n    Returns:\n    int: The number of boredoms.\n    \"\"\"\n    # Split the string into sentences\n    sentences = [sentence.strip() for sentence in re.split('[.?!]', S) if sentence]\n    # Count sentences that start with \"I \" or just \"I\" if it's the only word in the sentence\n    boredom_count = sum(sentence.startswith(\"I \") or sentence == \"I\" for sentence in sentences)\n    return boredom_count", "is_solved": true, "iteration": 1, "prompt_tokens": 1177, "completion_tokens": 302, "duration": 18.500348329544067, "task_id": "HumanEval/91"}
{"generated_code": "def count_nums(arr):\n    def sum_of_digits(num):\n        if num < 0:\n            return sum(int(digit) for digit in str(num)[1:]) - int(str(num)[1])\n        else:\n            return sum(int(digit) for digit in str(num))\n    \n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "is_solved": true, "iteration": 2, "prompt_tokens": 2405, "completion_tokens": 481, "duration": 26.775405406951904, "task_id": "HumanEval/108"}
{"generated_code": "def encode(message):\n    def shift_vowel(vowel):\n        vowels = 'aeiouAEIOU'\n        # Find the next vowel in the sequence, wrapping around if necessary, and shifting by 2 places.\n        shift_by = 2\n        if vowel.islower():\n            return chr(((ord(vowel) - ord('a') + shift_by) % 26) + ord('a'))\n        else:\n            return chr(((ord(vowel) - ord('A') + shift_by) % 26) + ord('A'))\n\n    def swap_case_and_encode(char):\n        if char.lower() in 'aeiou':\n            encoded_vowel = shift_vowel(char)\n            return encoded_vowel.swapcase()\n        else:\n            return char.swapcase()\n\n    return ''.join(swap_case_and_encode(c) for c in message)", "is_solved": true, "iteration": 2, "prompt_tokens": 2189, "completion_tokens": 676, "duration": 30.237282037734985, "task_id": "HumanEval/93"}
{"generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 2 * 9 ** (n - 1) - 8 ** (n - 1)", "is_solved": false, "iteration": 2, "prompt_tokens": 1744, "completion_tokens": 580, "duration": 27.630247592926025, "task_id": "HumanEval/83"}
{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 60, "duration": 6.806171894073486, "task_id": "HumanEval/114"}
{"generated_code": "def sort_array(arr):\n    \"\"\"\n    Sorts an array of non-negative integers based on the number of ones in their binary representation,\n    then by their decimal values if the number of ones is the same.\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 220, "completion_tokens": 67, "duration": 6.418631076812744, "task_id": "HumanEval/116"}
{"generated_code": "def select_words(s, n):\n    \"\"\"\n    Given a string s and a natural number n, this function returns a list of all words from string s that contain exactly n consonants.\n    \"\"\"\n    def consonant_count(word):\n        return sum(1 for char in word.lower() if char in \"bcdfghjklmnpqrstvwxyz\")\n    \n    return [word for word in s.split() if consonant_count(word) == n]", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 97, "duration": 8.439436435699463, "task_id": "HumanEval/117"}
{"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 40, "duration": 5.6258039474487305, "task_id": "HumanEval/121"}
{"generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 == 1:\n            odd_numbers.append(n)\n        n = 3*n + 1 if n % 2 else n // 2\n    odd_numbers.append(1)  # Adding 1 at the end, as it's always part of the sequence\n    return sorted(odd_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 281, "completion_tokens": 116, "duration": 8.040536403656006, "task_id": "HumanEval/123"}
{"generated_code": "def valid_date(date):\n    # Check if the date is in the correct format\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    month, day, year = parts\n    \n    # Check if year, month, and day are digits\n    if not (year.isdigit() and month.isdigit() and day.isdigit()):\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n    \n    # Check if the day is valid\n    if day < 1:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n    elif month in [4, 6, 9, 11] and day > 30:\n        return False\n    elif month == 2 and day > 29:\n        return False\n    \n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 313, "completion_tokens": 254, "duration": 15.975306272506714, "task_id": "HumanEval/124"}
{"generated_code": "def is_sorted(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if lst.count(lst[i]) > 2:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 299, "completion_tokens": 56, "duration": 6.425717115402222, "task_id": "HumanEval/126"}
{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        sign_product *= (1 if num > 0 else -1 if num < 0 else 0)\n        magnitude_sum += abs(num)\n    return magnitude_sum * sign_product", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 77, "duration": 6.130433082580566, "task_id": "HumanEval/128"}
{"generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            has_odd = True\n            product *= int(digit)\n    return product if has_odd else 0", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 63, "duration": 7.227850675582886, "task_id": "HumanEval/131"}
{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 27, "duration": 5.573691129684448, "task_id": "HumanEval/133"}
{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt or not txt.strip() or not txt[-1].isalpha():\n        return False\n    if txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == \" \"):\n        return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 70, "duration": 7.508548259735107, "task_id": "HumanEval/134"}
{"generated_code": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 153, "completion_tokens": 49, "duration": 6.526432991027832, "task_id": "HumanEval/135"}
{"generated_code": "def largest_smallest_integers(lst):\n    negative_integers = [x for x in lst if x < 0]\n    positive_integers = [x for x in lst if x > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)", "is_solved": true, "iteration": 0, "prompt_tokens": 188, "completion_tokens": 90, "duration": 8.789367914199829, "task_id": "HumanEval/136"}
{"generated_code": "def compare_one(a, b):\n    def convert(val):\n        if isinstance(val, str):\n            val = val.replace(',', '.')\n        return float(val)\n    \n    a_converted = convert(a)\n    b_converted = convert(b)\n    \n    if a_converted > b_converted:\n        return a\n    elif b_converted > a_converted:\n        return b\n    else:\n        return None", "is_solved": true, "iteration": 0, "prompt_tokens": 191, "completion_tokens": 89, "duration": 8.596368312835693, "task_id": "HumanEval/137"}
{"generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # Since the smallest sum of 4 positive even numbers is 2+2+2+2=8,\n    # any number less than 8 cannot be written as such a sum.\n    if n < 8:\n        return False\n    # For a number to be written as a sum of 4 even numbers, it must be even itself.\n    # Any even number greater than or equal to 8 can be represented as the sum\n    # of four even numbers (for example, 8 itself is 2+2+2+2, and for any even number\n    # greater than 8, we can adjust the sum by increasing the first addend).\n    return n % 2 == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 127, "completion_tokens": 185, "duration": 10.780973434448242, "task_id": "HumanEval/138"}
{"generated_code": "def special_factorial(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 69, "duration": 8.691449642181396, "task_id": "HumanEval/139"}
{"generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    import re\n    # Replace 3 or more spaces with '-'\n    text = re.sub(r' {3,}', '-', text)\n    # Replace remaining spaces (1 or 2) with '_'\n    text = text.replace(' ', '_')\n    return text", "is_solved": true, "iteration": 0, "prompt_tokens": 156, "completion_tokens": 107, "duration": 8.816003561019897, "task_id": "HumanEval/140"}
{"generated_code": "def file_name_check(file_name):\n    # Check if the file name has exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into name and extension\n    name, extension = file_name.split('.')\n    \n    # Check if the name part is not empty and starts with a letter\n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    # Check if the extension is valid\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Check if there are more than three digits in the file name\n    digits_count = sum(c.isdigit() for c in name)\n    if digits_count > 3:\n        return 'No'\n    \n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 171, "duration": 11.663620710372925, "task_id": "HumanEval/141"}
{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 46, "duration": 6.397021055221558, "task_id": "HumanEval/142"}
{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return ' '.join(word for word in sentence.split() if is_prime(len(word)))", "is_solved": true, "iteration": 0, "prompt_tokens": 197, "completion_tokens": 81, "duration": 8.922763109207153, "task_id": "HumanEval/143"}
{"generated_code": "def simplify(x, n):\n    def parse_fraction(fraction):\n        numerator, denominator = map(int, fraction.split('/'))\n        return numerator, denominator\n\n    x_numerator, x_denominator = parse_fraction(x)\n    n_numerator, n_denominator = parse_fraction(n)\n\n    result_numerator = x_numerator * n_numerator\n    result_denominator = x_denominator * n_denominator\n\n    # Check if result is a whole number\n    return result_numerator % result_denominator == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 110, "duration": 9.045788049697876, "task_id": "HumanEval/144"}
{"generated_code": "def specialFilter(nums):\n    def is_odd_and_greater_than_10(n):\n        if n <= 10:\n            return False\n        str_n = str(abs(n))\n        return int(str_n[0]) % 2 != 0 and int(str_n[-1]) % 2 != 0\n\n    return sum(is_odd_and_greater_than_10(num) for num in nums)", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 84, "duration": 8.241860628128052, "task_id": "HumanEval/146"}
{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start = min(planets.index(planet1), planets.index(planet2))\n    end = max(planets.index(planet1), planets.index(planet2))\n    \n    return tuple(planets[start+1:end])", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 112, "duration": 10.3786039352417, "task_id": "HumanEval/148"}
{"generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list first alphabetically, then by length\n    even_length_strings.sort()  # Alphabetical sort\n    even_length_strings.sort(key=len)  # Length sort\n    return even_length_strings", "is_solved": true, "iteration": 0, "prompt_tokens": 237, "completion_tokens": 85, "duration": 6.565547943115234, "task_id": "HumanEval/149"}
{"generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 61, "duration": 8.51151967048645, "task_id": "HumanEval/150"}
{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 40, "duration": 5.37906813621521, "task_id": "HumanEval/151"}
{"generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(guess, game)]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 35, "duration": 6.192361354827881, "task_id": "HumanEval/152"}
{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        return CAP - SM\n\n    strongest_extension = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_extension}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 78, "duration": 7.732594013214111, "task_id": "HumanEval/153"}
{"generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 115, "completion_tokens": 71, "duration": 10.428183317184448, "task_id": "HumanEval/155"}
{"generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 204, "duration": 11.66052770614624, "task_id": "HumanEval/156"}
{"generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 45, "duration": 7.329470634460449, "task_id": "HumanEval/157"}
{"generated_code": "def eat(number, need, remaining):\n    eaten = min(need, remaining)\n    total_eaten = number + eaten\n    remaining -= eaten\n    return [total_eaten, remaining]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 44, "duration": 7.473829746246338, "task_id": "HumanEval/159"}
{"generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for op, num in zip(operator, operand[1:]):\n        expression += f' {op} {num}'\n    return eval(expression)", "is_solved": true, "iteration": 0, "prompt_tokens": 257, "completion_tokens": 51, "duration": 8.592001676559448, "task_id": "HumanEval/160"}
{"generated_code": "def solve(s):\n    if all(not c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.lower() if c.isupper() else c.upper() if c.islower() else c for c in s)", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 58, "duration": 7.316079378128052, "task_id": "HumanEval/161"}
{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 99, "duration": 8.60674786567688, "task_id": "HumanEval/162"}
{"generated_code": "def get_max_triples(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # Generate the array\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n\n    # Iterate through all possible triples\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 134, "duration": 10.993800401687622, "task_id": "HumanEval/147"}
{"generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if len(str(abs(x))) <= 2)", "is_solved": true, "iteration": 1, "prompt_tokens": 1089, "completion_tokens": 185, "duration": 12.987523317337036, "task_id": "HumanEval/122"}
{"generated_code": "def match_parens(lst):\n    str1, str2 = lst\n\n    # Function to check if a string is good (balanced parentheses)\n    def is_good(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:  # char == ')'\n                balance -= 1\n                if balance < 0:\n                    return False\n        return balance == 0\n\n    # Check both possible concatenations\n    return 'Yes' if is_good(str1 + str2) or is_good(str2 + str1) else 'No'", "is_solved": true, "iteration": 1, "prompt_tokens": 1547, "completion_tokens": 379, "duration": 22.225061178207397, "task_id": "HumanEval/119"}
{"generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    start1, end1 = interval1\n    start2, end2 = interval2\n    start = max(start1, start2)\n    end = min(end1, end2)\n    if start > end:\n        return \"NO\"\n    length = end - start\n    return \"YES\" if is_prime(length) else \"NO\"", "is_solved": true, "iteration": 1, "prompt_tokens": 1582, "completion_tokens": 392, "duration": 22.741729497909546, "task_id": "HumanEval/127"}
{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "is_solved": true, "iteration": 1, "prompt_tokens": 1467, "completion_tokens": 366, "duration": 21.896504878997803, "task_id": "HumanEval/118"}
{"generated_code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    if k == 0:\n        return []\n    return sorted(arr)[-k:]", "is_solved": true, "iteration": 2, "prompt_tokens": 3076, "completion_tokens": 349, "duration": 24.155088186264038, "task_id": "HumanEval/120"}
{"generated_code": "def max_fill(grid, capacity):\n    import math\n    # Calculate the number of trips required for each well individually and sum them up\n    return sum(math.ceil(sum(row) / capacity) for row in grid)", "is_solved": true, "iteration": 2, "prompt_tokens": 2801, "completion_tokens": 362, "duration": 24.937851190567017, "task_id": "HumanEval/115"}
{"generated_code": "def find_max(words):\n    return min(sorted(words, key=lambda word: (-len(set(word)), word)))", "is_solved": false, "iteration": 2, "prompt_tokens": 2286, "completion_tokens": 312, "duration": 20.413722038269043, "task_id": "HumanEval/158"}
{"generated_code": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    extended_a = a + a\n    for i in range(len(b)):\n        rotated_b = b[i:] + b[:i]\n        if rotated_b in extended_a:\n            return True\n    return False", "is_solved": false, "iteration": 2, "prompt_tokens": 1934, "completion_tokens": 429, "duration": 28.905866384506226, "task_id": "HumanEval/154"}
{"generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    return [i for i in range(min(a, b), max(a, b) + 1) if i % 2 == 0]", "is_solved": false, "iteration": 2, "prompt_tokens": 2076, "completion_tokens": 465, "duration": 40.46464776992798, "task_id": "HumanEval/163"}
{"generated_code": "def split_words(txt):\n    # Check for whitespace\n    if ' ' in txt:\n        return txt.split()\n    # Check for commas\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        # Count lower-case odd order letters\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)", "is_solved": false, "iteration": 2, "prompt_tokens": 2161, "completion_tokens": 501, "duration": 29.08578848838806, "task_id": "HumanEval/125"}
{"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "is_solved": false, "iteration": 2, "prompt_tokens": 2602, "completion_tokens": 350, "duration": 21.064560413360596, "task_id": "HumanEval/145"}
{"generated_code": "from heapq import heappop, heappush\n\ndef minPath(grid, k):\n    N = len(grid)\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    min_heap = [(grid[0][0], 0, 0, [grid[0][0]])]  # Value, x, y, path\n    visited = set()\n\n    while min_heap:\n        value, x, y, path = heappop(min_heap)\n        if len(path) == k:\n            return path\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N and (nx, ny, len(path) + 1) not in visited:\n                visited.add((nx, ny, len(path) + 1))\n                new_path = path + [grid[nx][ny]]\n                heappush(min_heap, (grid[nx][ny], nx, ny, new_path))", "is_solved": false, "iteration": 2, "prompt_tokens": 5663, "completion_tokens": 772, "duration": 39.65563654899597, "task_id": "HumanEval/129"}
{"generated_code": "def is_nested(string):\n    stack = []\n    nested = False\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n                # Check for nested condition only if the stack is not empty after popping\n                if stack:\n                    nested = True\n            else:\n                # Early return if a closing bracket has no matching opening bracket\n                return False\n    # The string is valid if and only if the stack is empty and there was a nested bracket\n    return nested and not stack", "is_solved": false, "iteration": 2, "prompt_tokens": 2546, "completion_tokens": 622, "duration": 36.726524114608765, "task_id": "HumanEval/132"}
{"generated_code": "def tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    trib = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            trib.append(1 + i / 2)\n        else:\n            trib.append(trib[i - 1] + trib[i - 2] + trib[i - 1])\n    return trib", "is_solved": false, "iteration": 2, "prompt_tokens": 3921, "completion_tokens": 675, "duration": 33.4745614528656, "task_id": "HumanEval/130"}
{"generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 67, "duration": 4.0209877490997314, "task_id": "HumanEval/0"}
{"generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    stack = []\n    result = []\n    current = \"\"\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current += char\n        elif char == ')':\n            stack.pop()\n            current += char\n            if not stack:  # If stack is empty, a group has ended\n                result.append(current)\n                current = \"\"\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 165, "completion_tokens": 118, "duration": 8.902730226516724, "task_id": "HumanEval/1"}
{"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": true, "iteration": 0, "prompt_tokens": 135, "completion_tokens": 21, "duration": 2.7102606296539307, "task_id": "HumanEval/2"}
{"generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 53, "duration": 3.8415157794952393, "task_id": "HumanEval/3"}
{"generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 49, "duration": 2.99957537651062, "task_id": "HumanEval/4"}
{"generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.extend([delimeter, number])\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 63, "duration": 4.371600151062012, "task_id": "HumanEval/5"}
{"generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    results = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        results.append(max_depth)\n    return results", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 103, "duration": 5.678426265716553, "task_id": "HumanEval/6"}
{"generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]", "is_solved": true, "iteration": 0, "prompt_tokens": 143, "completion_tokens": 104, "duration": 8.238842725753784, "task_id": "HumanEval/7"}
{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 78, "duration": 6.69270133972168, "task_id": "HumanEval/8"}
{"generated_code": "def make_palindrome(string: str) -> str:\n    if string == string[::-1]:\n        return string\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 70, "duration": 4.749827861785889, "task_id": "HumanEval/10"}
{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.15260910987854, "task_id": "HumanEval/11"}
{"generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 39, "duration": 2.8544228076934814, "task_id": "HumanEval/12"}
{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 39, "duration": 2.4595766067504883, "task_id": "HumanEval/13"}
{"generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 73, "duration": 3.6329903602600098, "task_id": "HumanEval/14"}
{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 31, "duration": 2.760759115219116, "task_id": "HumanEval/15"}
{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.3197572231292725, "task_id": "HumanEval/16"}
{"generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats", "is_solved": true, "iteration": 0, "prompt_tokens": 222, "completion_tokens": 83, "duration": 4.54159688949585, "task_id": "HumanEval/17"}
{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 72, "duration": 4.7304723262786865, "task_id": "HumanEval/18"}
{"generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n                'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 106, "duration": 5.555402755737305, "task_id": "HumanEval/19"}
{"generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i+1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair", "is_solved": true, "iteration": 0, "prompt_tokens": 216, "completion_tokens": 117, "duration": 5.754441499710083, "task_id": "HumanEval/20"}
{"generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(x - min_num) / range_num for x in numbers]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 104, "duration": 9.0089693069458, "task_id": "HumanEval/21"}
{"generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 103, "duration": 5.303599834442139, "task_id": "HumanEval/22"}
{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 2.649064302444458, "task_id": "HumanEval/23"}
{"generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 44, "duration": 3.682873249053955, "task_id": "HumanEval/24"}
{"generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 79, "duration": 4.361755609512329, "task_id": "HumanEval/25"}
{"generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    counts = {}\n    for number in numbers:\n        counts[number] = counts.get(number, 0) + 1\n    return [number for number in numbers if counts[number] == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 95, "duration": 7.0386962890625, "task_id": "HumanEval/26"}
{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 35, "duration": 2.9268834590911865, "task_id": "HumanEval/27"}
{"generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 61, "duration": 3.5149357318878174, "task_id": "HumanEval/28"}
{"generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that start with a given prefix.\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 60, "duration": 3.807779312133789, "task_id": "HumanEval/29"}
{"generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [x for x in l if x > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 35, "duration": 2.8653414249420166, "task_id": "HumanEval/30"}
{"generated_code": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 117, "duration": 5.848691701889038, "task_id": "HumanEval/31"}
{"generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    from scipy.optimize import root\n    def func(x):\n        return poly(xs, x)\n    \n    initial_guess = 0.0\n    sol = root(func, initial_guess)\n    if sol.success:\n        return sol.x[0]\n    else:\n        raise ValueError(\"Root finding did not converge\")", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 228, "duration": 10.703521966934204, "task_id": "HumanEval/32"}
{"generated_code": "def sort_third(l: list) -> list:\n    # Extract elements at indices divisible by 3\n    divisible_by_3 = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort the extracted elements\n    divisible_by_3_sorted = sorted(divisible_by_3)\n    # Replace elements in the original list with sorted ones at the correct positions\n    for i, value in enumerate(divisible_by_3_sorted):\n        l[i * 3] = value\n    return l", "is_solved": true, "iteration": 0, "prompt_tokens": 200, "completion_tokens": 116, "duration": 7.125142335891724, "task_id": "HumanEval/33"}
{"generated_code": "def unique(l: list):\n    return sorted(set(l))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 16, "duration": 1.729191780090332, "task_id": "HumanEval/34"}
{"generated_code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 85, "duration": 8.01661229133606, "task_id": "HumanEval/35"}
{"generated_code": "def sort_even(l: list) -> list:\n    even_indices = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even_indices.sort()\n    return [even_indices.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 71, "duration": 4.339508295059204, "task_id": "HumanEval/37"}
{"generated_code": "def decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iteration": 0, "prompt_tokens": 208, "completion_tokens": 137, "duration": 9.78336787223816, "task_id": "HumanEval/38"}
{"generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib():\n        a, b = 0, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    count = 0\n    for fib_num in fib():\n        if fib_num > 1 and is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 146, "duration": 6.8159308433532715, "task_id": "HumanEval/39"}
{"generated_code": "def triples_sum_to_zero(l: list):\n    n = len(l)\n    l.sort()\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 108, "duration": 9.359532356262207, "task_id": "HumanEval/40"}
{"generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Given n, the number of cars driving left to right and the same number driving right to left,\n    this function calculates the number of collisions that occur.\n    \"\"\"\n    return n**2", "is_solved": true, "iteration": 0, "prompt_tokens": 201, "completion_tokens": 57, "duration": 4.631146669387817, "task_id": "HumanEval/41"}
{"generated_code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 118, "duration": 5.376549959182739, "task_id": "HumanEval/42"}
{"generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 42, "duration": 3.8720717430114746, "task_id": "HumanEval/43"}
{"generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    digits.reverse()\n    return ''.join(digits)", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 61, "duration": 4.068792104721069, "task_id": "HumanEval/44"}
{"generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return (a * h) / 2", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 55, "duration": 3.3317267894744873, "task_id": "HumanEval/45"}
{"generated_code": "def fib4(n: int) -> int:\n    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    if n == 3: return 0\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 119, "duration": 6.260672330856323, "task_id": "HumanEval/46"}
{"generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "is_solved": true, "iteration": 0, "prompt_tokens": 125, "completion_tokens": 61, "duration": 5.067075967788696, "task_id": "HumanEval/47"}
{"generated_code": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 36, "duration": 2.997685432434082, "task_id": "HumanEval/48"}
{"generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 44, "duration": 3.229511022567749, "task_id": "HumanEval/49"}
{"generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": true, "iteration": 0, "prompt_tokens": 140, "completion_tokens": 43, "duration": 3.1155734062194824, "task_id": "HumanEval/50"}
{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 31, "duration": 3.8341293334960938, "task_id": "HumanEval/51"}
{"generated_code": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 29, "duration": 2.3202648162841797, "task_id": "HumanEval/52"}
{"generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 60, "duration": 4.088814735412598, "task_id": "HumanEval/53"}
{"generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 31, "duration": 2.755746603012085, "task_id": "HumanEval/54"}
{"generated_code": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 79, "duration": 5.1637444496154785, "task_id": "HumanEval/55"}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count += 1\n        elif bracket == '>':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 71, "duration": 5.743376731872559, "task_id": "HumanEval/56"}
{"generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 60, "duration": 3.8900606632232666, "task_id": "HumanEval/36"}
{"generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n    max_rolling = []\n    current_max = numbers[0]\n    for number in numbers:\n        if number > current_max:\n            current_max = number\n        max_rolling.append(current_max)\n    return max_rolling", "is_solved": true, "iteration": 1, "prompt_tokens": 967, "completion_tokens": 200, "duration": 13.115596532821655, "task_id": "HumanEval/9"}
{"generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 61, "duration": 4.09354829788208, "task_id": "HumanEval/57"}
{"generated_code": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(set(l1) & set(l2))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 39, "duration": 3.0942766666412354, "task_id": "HumanEval/58"}
{"generated_code": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime_factor = 1\n    i = 2\n    \n    while i <= n ** 0.5:\n        if n % i == 0 and is_prime(i):\n            prime_factor = i\n            while n % i == 0:\n                n //= i\n        i += 1\n    \n    if n > 2 and is_prime(n):\n        prime_factor = n\n\n    return prime_factor", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 174, "duration": 9.62759804725647, "task_id": "HumanEval/59"}
{"generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return n * (n + 1) // 2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 46, "duration": 3.125488042831421, "task_id": "HumanEval/60"}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for bracket in brackets:\n        if bracket == '(':\n            balance += 1\n        elif bracket == ')':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 71, "duration": 4.898189544677734, "task_id": "HumanEval/61"}
{"generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 28, "duration": 2.6573143005371094, "task_id": "HumanEval/62"}
{"generated_code": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            d = a + b + c\n            a, b, c = b, c, d\n        return c", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 108, "duration": 7.011068105697632, "task_id": "HumanEval/63"}
{"generated_code": "def vowels_count(s):\n    \"\"\"\n    Add more test cases.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s.endswith('y') or s.endswith('Y'):\n        count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 76, "duration": 4.908478260040283, "task_id": "HumanEval/64"}
{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    len_x = len(x_str)\n    if shift > len_x:\n        return x_str[::-1]\n    shift %= len_x\n    return x_str[-shift:] + x_str[:-shift]", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 59, "duration": 5.130709886550903, "task_id": "HumanEval/65"}
{"generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.162553071975708, "task_id": "HumanEval/66"}
{"generated_code": "def fruit_distribution(s, n):\n    numbers = [int(i) for i in s.split() if i.isdigit()]\n    return n - sum(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 35, "duration": 3.0522823333740234, "task_id": "HumanEval/67"}
{"generated_code": "def pluck(arr):\n    even_values = [(value, index) for index, value in enumerate(arr) if value % 2 == 0 and value >= 0]\n    if not even_values:\n        return []\n    return list(min(even_values))", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 57, "duration": 3.5284690856933594, "task_id": "HumanEval/68"}
{"generated_code": "def search(lst):\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    max_val = -1\n    for key, value in count_dict.items():\n        if key <= value and key > max_val:\n            max_val = key\n\n    return max_val", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 86, "duration": 6.029757261276245, "task_id": "HumanEval/69"}
{"generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 51, "duration": 4.173398017883301, "task_id": "HumanEval/70"}
{"generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    '''\n    # Check if the sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Calculate the area using Heron's formula\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    \n    return round(area, 2)", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 157, "duration": 9.120259046554565, "task_id": "HumanEval/71"}
{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.5521044731140137, "task_id": "HumanEval/72"}
{"generated_code": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 67, "duration": 8.294924974441528, "task_id": "HumanEval/73"}
{"generated_code": "def total_match(lst1, lst2):\n    if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2):\n        return lst1\n    else:\n        return lst2", "is_solved": true, "iteration": 0, "prompt_tokens": 243, "completion_tokens": 49, "duration": 3.180537700653076, "task_id": "HumanEval/74"}
{"generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 49, "duration": 3.2270283699035645, "task_id": "HumanEval/76"}
{"generated_code": "def iscube(a):\n    if a >= 0:\n        root = round(a ** (1/3))\n        return root**3 == a\n    else:\n        root = round(abs(a) ** (1/3))\n        return -root**3 == a", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 60, "duration": 3.163822889328003, "task_id": "HumanEval/77"}
{"generated_code": "def hex_key(num):\n    # Define the prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    # Count the number of prime hexadecimal digits in the input string\n    return sum(1 for digit in num if digit in prime_hex_digits)", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 70, "duration": 4.296364784240723, "task_id": "HumanEval/78"}
{"generated_code": "def decimal_to_binary(decimal):\n    binary_str = bin(decimal)[2:]  # convert to binary and remove the '0b' prefix\n    return f\"db{binary_str}db\"", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 44, "duration": 2.8562440872192383, "task_id": "HumanEval/79"}
{"generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 80, "duration": 9.004127025604248, "task_id": "HumanEval/80"}
{"generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for g in grades:\n        if g == 4.0: \n            letter_grades.append('A+')\n        elif g > 3.7: \n            letter_grades.append('A')\n        elif g > 3.3: \n            letter_grades.append('A-')\n        elif g > 3.0: \n            letter_grades.append('B+')\n        elif g > 2.7: \n            letter_grades.append('B')\n        elif g > 2.3: \n            letter_grades.append('B-')\n        elif g > 2.0: \n            letter_grades.append('C+')\n        elif g > 1.7: \n            letter_grades.append('C')\n        elif g > 1.3: \n            letter_grades.append('C-')\n        elif g > 1.0: \n            letter_grades.append('D+')\n        elif g > 0.7: \n            letter_grades.append('D')\n        elif g > 0.0: \n            letter_grades.append('D-')\n        else: \n            letter_grades.append('E')\n    return letter_grades", "is_solved": true, "iteration": 0, "prompt_tokens": 320, "completion_tokens": 265, "duration": 11.700199842453003, "task_id": "HumanEval/81"}
{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 69, "duration": 3.6344518661499023, "task_id": "HumanEval/82"}
{"generated_code": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_of_digits)[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 51, "duration": 3.8922150135040283, "task_id": "HumanEval/84"}
{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 105, "completion_tokens": 40, "duration": 2.75032114982605, "task_id": "HumanEval/85"}
{"generated_code": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 27, "duration": 2.151890754699707, "task_id": "HumanEval/86"}
{"generated_code": "def get_row(lst, x):\n    \"\"\"\n    Given a 2D list `lst` and an integer `x`, find all occurrences of `x` in `lst`,\n    and return a list of tuples representing their coordinates in the format (row, column).\n    The coordinates are sorted first by row in ascending order, then by column in descending order.\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 136, "duration": 7.588098526000977, "task_id": "HumanEval/87"}
{"generated_code": "def sort_array(array):\n    if not array or len(array) == 1:\n        return array.copy()\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "is_solved": true, "iteration": 0, "prompt_tokens": 253, "completion_tokens": 61, "duration": 4.852056980133057, "task_id": "HumanEval/88"}
{"generated_code": "def encrypt(s):\n    \"\"\"Encrypts the input string by shifting letters down by 4 places.\"\"\"\n    encrypted = ''\n    for char in s:\n        if 'a' <= char <= 'z':\n            encrypted += chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n        elif 'A' <= char <= 'Z':\n            encrypted += chr((ord(char) - ord('A') + 4) % 26 + ord('A'))\n        else:\n            encrypted += char\n    return encrypted", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 118, "duration": 6.16865086555481, "task_id": "HumanEval/89"}
{"generated_code": "def next_smallest(lst):\n    \"\"\"\n    Returns the 2nd smallest element of the list. Returns None if there is no such element.\n    \"\"\"\n    unique_sorted_lst = sorted(set(lst))\n    if len(unique_sorted_lst) < 2:\n        return None\n    else:\n        return unique_sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 70, "duration": 5.281777381896973, "task_id": "HumanEval/90"}
{"generated_code": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 56, "duration": 3.67219877243042, "task_id": "HumanEval/92"}
{"generated_code": "def largest_prime_sum(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    return sum([int(digit) for digit in str(max_prime)])", "is_solved": true, "iteration": 0, "prompt_tokens": 336, "completion_tokens": 109, "duration": 6.138820648193359, "task_id": "HumanEval/94"}
{"generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    lower_case = all(isinstance(key, str) and key.islower() for key in keys)\n    upper_case = all(isinstance(key, str) and key.isupper() for key in keys)\n    return lower_case or upper_case", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 74, "duration": 5.66085147857666, "task_id": "HumanEval/95"}
{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [i for i in range(2, n) if is_prime(i)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 86, "duration": 4.624057769775391, "task_id": "HumanEval/96"}
{"generated_code": "def multiply(a, b):\n    \"\"\"Returns the product of the unit digits of two integers.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 42, "duration": 2.7824454307556152, "task_id": "HumanEval/97"}
{"generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = 'AEIOU'\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 103, "duration": 5.227121353149414, "task_id": "HumanEval/98"}
{"generated_code": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    '''\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 92, "duration": 6.353636026382446, "task_id": "HumanEval/99"}
{"generated_code": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]", "is_solved": true, "iteration": 0, "prompt_tokens": 182, "completion_tokens": 25, "duration": 3.4358692169189453, "task_id": "HumanEval/100"}
{"generated_code": "def words_string(s):\n    \"\"\"\n    Split the string into words separated by commas or spaces and return an array of the words.\n    \"\"\"\n    import re\n    return re.findall(r'\\b\\w+\\b', s)", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 50, "duration": 6.107905387878418, "task_id": "HumanEval/101"}
{"generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x, y and returns the biggest even integer number that is in the range [x, y] inclusive. If there's no such number, then the function should return -1.\"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 89, "duration": 5.985353708267212, "task_id": "HumanEval/102"}
{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 43, "duration": 4.151994228363037, "task_id": "HumanEval/103"}
{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 37, "duration": 5.314167737960815, "task_id": "HumanEval/104"}
{"generated_code": "def by_length(arr):\n    num_to_word = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    return [num_to_word[num] for num in reversed_arr]", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 118, "duration": 7.696850776672363, "task_id": "HumanEval/105"}
{"generated_code": "def f(n):\n    \"\"\" Returns a list of size n, with factorial values for even indexes and sum of numbers for odd indexes. \"\"\"\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n        \n    def sum_numbers(x):\n        return sum(range(1, x+1))\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_numbers(i))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 127, "duration": 11.082646608352661, "task_id": "HumanEval/106"}
{"generated_code": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \"\"\"\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    \n    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 141, "duration": 9.035115480422974, "task_id": "HumanEval/107"}
{"generated_code": "def move_one_ball(arr):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[(i + 1) % n]:\n            count += 1\n    return count <= 1", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 58, "duration": 5.8650219440460205, "task_id": "HumanEval/109"}
{"generated_code": "def exchange(lst1, lst2):\n    \"\"\"\n    Determines if it is possible to exchange elements between two lists to make the first list all even numbers.\n    \"\"\"\n    # Count the number of even numbers needed for lst1 and available in lst2\n    needed_evens = sum(1 for x in lst1 if x % 2 != 0)\n    available_evens = sum(1 for x in lst2 if x % 2 == 0)\n    \n    # If there are enough even numbers in lst2 to replace the odd numbers in lst1, return \"YES\"\n    if needed_evens <= available_evens:\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": true, "iteration": 0, "prompt_tokens": 247, "completion_tokens": 147, "duration": 12.99392294883728, "task_id": "HumanEval/110"}
{"generated_code": "def histogram(test):\n    if not test:\n        return {}\n    words = test.split()\n    counts = {}\n    for word in words:\n        counts[word] = counts.get(word, 0) + 1\n    max_count = max(counts.values())\n    return {word: count for word, count in counts.items() if count == max_count}", "is_solved": true, "iteration": 0, "prompt_tokens": 201, "completion_tokens": 77, "duration": 6.195828199386597, "task_id": "HumanEval/111"}
{"generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 212, "completion_tokens": 39, "duration": 5.42903208732605, "task_id": "HumanEval/112"}
{"generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 223, "completion_tokens": 75, "duration": 6.297055006027222, "task_id": "HumanEval/113"}
{"generated_code": "import re\n\ndef is_bored(S):\n    \"\"\"\n    Counts the number of boredoms in a given string.\n    \n    Parameters:\n    S (str): A string of words.\n    \n    Returns:\n    int: The number of boredoms.\n    \"\"\"\n    # Split the string into sentences\n    sentences = [sentence.strip() for sentence in re.split('[.?!]', S) if sentence]\n    # Count sentences that start with \"I \" or just \"I\" if it's the only word in the sentence\n    boredom_count = sum(sentence.startswith(\"I \") or sentence == \"I\" for sentence in sentences)\n    return boredom_count", "is_solved": true, "iteration": 1, "prompt_tokens": 1183, "completion_tokens": 308, "duration": 14.332013368606567, "task_id": "HumanEval/91"}
{"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if a < 2:\n        return False\n\n    prime_factors_count = 0\n    for i in range(2, a + 1):\n        if a % i == 0 and is_prime(i):\n            while a % i == 0:\n                a //= i\n                prime_factors_count += 1\n                if prime_factors_count > 3:\n                    return False\n\n    return prime_factors_count == 3", "is_solved": true, "iteration": 1, "prompt_tokens": 1268, "completion_tokens": 455, "duration": 24.4114727973938, "task_id": "HumanEval/75"}
{"generated_code": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    \"\"\"\n    def sum_of_digits(num):\n        if num == 0:\n            return 0\n        elif num > 0:\n            return sum(int(digit) for digit in str(num))\n        else:\n            digits = [int(digit) for digit in str(num)[1:]]\n            digits[0] *= -1\n            return sum(digits)\n    \n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "is_solved": true, "iteration": 2, "prompt_tokens": 2394, "completion_tokens": 529, "duration": 27.53084444999695, "task_id": "HumanEval/108"}
{"generated_code": "def encode(message):\n    def shift_vowel(c):\n        # Mapping vowels to their replacements\n        vowel_map = {\n            'a': 'c', 'A': 'C',\n            'e': 'g', 'E': 'G',\n            'i': 'k', 'I': 'K',\n            'o': 'q', 'O': 'Q',\n            'u': 's', 'U': 'S'\n        }\n        return vowel_map.get(c, c)\n\n    # Swapping case for all letters and replacing vowels as per the mapping\n    return ''.join(shift_vowel(c).swapcase() if c.isalpha() else c for c in message)", "is_solved": false, "iteration": 2, "prompt_tokens": 2207, "completion_tokens": 597, "duration": 31.23151397705078, "task_id": "HumanEval/93"}
{"generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        # Numbers that start with 1: 10^(n-1)\n        # Numbers that end with 1: 9 * 10^(n-2) for each of the n-1 positions\n        # Since we are counting numbers that end with 1 in every position\n        # but we must subtract the overcount for the case when n = 2, as we've counted '11' twice\n        starts_with_1 = 10 ** (n - 1)\n        ends_with_1 = 9 * (10 ** (n - 2))\n        # Adjust for overcounting '11' when n = 2\n        if n == 2:\n            ends_with_1 -= 1\n        return starts_with_1 + ends_with_1", "is_solved": false, "iteration": 2, "prompt_tokens": 1836, "completion_tokens": 710, "duration": 36.10373854637146, "task_id": "HumanEval/83"}
{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 60, "duration": 6.806171894073486, "task_id": "HumanEval/114"}
{"generated_code": "def sort_array(arr):\n    \"\"\"\n    Sorts an array of non-negative integers based on the number of ones in their binary representation,\n    then by their decimal values if the number of ones is the same.\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 220, "completion_tokens": 67, "duration": 6.418631076812744, "task_id": "HumanEval/116"}
{"generated_code": "def select_words(s, n):\n    \"\"\"\n    Given a string s and a natural number n, this function returns a list of all words from string s that contain exactly n consonants.\n    \"\"\"\n    def consonant_count(word):\n        return sum(1 for char in word.lower() if char in \"bcdfghjklmnpqrstvwxyz\")\n    \n    return [word for word in s.split() if consonant_count(word) == n]", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 97, "duration": 8.439436435699463, "task_id": "HumanEval/117"}
{"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 40, "duration": 5.6258039474487305, "task_id": "HumanEval/121"}
{"generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 == 1:\n            odd_numbers.append(n)\n        n = 3*n + 1 if n % 2 else n // 2\n    odd_numbers.append(1)  # Adding 1 at the end, as it's always part of the sequence\n    return sorted(odd_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 281, "completion_tokens": 116, "duration": 8.040536403656006, "task_id": "HumanEval/123"}
{"generated_code": "def valid_date(date):\n    # Check if the date is in the correct format\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    month, day, year = parts\n    \n    # Check if year, month, and day are digits\n    if not (year.isdigit() and month.isdigit() and day.isdigit()):\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n    \n    # Check if the day is valid\n    if day < 1:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n    elif month in [4, 6, 9, 11] and day > 30:\n        return False\n    elif month == 2 and day > 29:\n        return False\n    \n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 313, "completion_tokens": 254, "duration": 15.975306272506714, "task_id": "HumanEval/124"}
{"generated_code": "def is_sorted(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if lst.count(lst[i]) > 2:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 299, "completion_tokens": 56, "duration": 6.425717115402222, "task_id": "HumanEval/126"}
{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        sign_product *= (1 if num > 0 else -1 if num < 0 else 0)\n        magnitude_sum += abs(num)\n    return magnitude_sum * sign_product", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 77, "duration": 6.130433082580566, "task_id": "HumanEval/128"}
{"generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            has_odd = True\n            product *= int(digit)\n    return product if has_odd else 0", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 63, "duration": 7.227850675582886, "task_id": "HumanEval/131"}
{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 27, "duration": 5.573691129684448, "task_id": "HumanEval/133"}
{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt or not txt.strip() or not txt[-1].isalpha():\n        return False\n    if txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == \" \"):\n        return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 70, "duration": 7.508548259735107, "task_id": "HumanEval/134"}
{"generated_code": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 153, "completion_tokens": 49, "duration": 6.526432991027832, "task_id": "HumanEval/135"}
{"generated_code": "def largest_smallest_integers(lst):\n    negative_integers = [x for x in lst if x < 0]\n    positive_integers = [x for x in lst if x > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)", "is_solved": true, "iteration": 0, "prompt_tokens": 188, "completion_tokens": 90, "duration": 8.789367914199829, "task_id": "HumanEval/136"}
{"generated_code": "def compare_one(a, b):\n    def convert(val):\n        if isinstance(val, str):\n            val = val.replace(',', '.')\n        return float(val)\n    \n    a_converted = convert(a)\n    b_converted = convert(b)\n    \n    if a_converted > b_converted:\n        return a\n    elif b_converted > a_converted:\n        return b\n    else:\n        return None", "is_solved": true, "iteration": 0, "prompt_tokens": 191, "completion_tokens": 89, "duration": 8.596368312835693, "task_id": "HumanEval/137"}
{"generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # Since the smallest sum of 4 positive even numbers is 2+2+2+2=8,\n    # any number less than 8 cannot be written as such a sum.\n    if n < 8:\n        return False\n    # For a number to be written as a sum of 4 even numbers, it must be even itself.\n    # Any even number greater than or equal to 8 can be represented as the sum\n    # of four even numbers (for example, 8 itself is 2+2+2+2, and for any even number\n    # greater than 8, we can adjust the sum by increasing the first addend).\n    return n % 2 == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 127, "completion_tokens": 185, "duration": 10.780973434448242, "task_id": "HumanEval/138"}
{"generated_code": "def special_factorial(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 69, "duration": 8.691449642181396, "task_id": "HumanEval/139"}
{"generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    import re\n    # Replace 3 or more spaces with '-'\n    text = re.sub(r' {3,}', '-', text)\n    # Replace remaining spaces (1 or 2) with '_'\n    text = text.replace(' ', '_')\n    return text", "is_solved": true, "iteration": 0, "prompt_tokens": 156, "completion_tokens": 107, "duration": 8.816003561019897, "task_id": "HumanEval/140"}
{"generated_code": "def file_name_check(file_name):\n    # Check if the file name has exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into name and extension\n    name, extension = file_name.split('.')\n    \n    # Check if the name part is not empty and starts with a letter\n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    # Check if the extension is valid\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Check if there are more than three digits in the file name\n    digits_count = sum(c.isdigit() for c in name)\n    if digits_count > 3:\n        return 'No'\n    \n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 171, "duration": 11.663620710372925, "task_id": "HumanEval/141"}
{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 46, "duration": 6.397021055221558, "task_id": "HumanEval/142"}
{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return ' '.join(word for word in sentence.split() if is_prime(len(word)))", "is_solved": true, "iteration": 0, "prompt_tokens": 197, "completion_tokens": 81, "duration": 8.922763109207153, "task_id": "HumanEval/143"}
{"generated_code": "def simplify(x, n):\n    def parse_fraction(fraction):\n        numerator, denominator = map(int, fraction.split('/'))\n        return numerator, denominator\n\n    x_numerator, x_denominator = parse_fraction(x)\n    n_numerator, n_denominator = parse_fraction(n)\n\n    result_numerator = x_numerator * n_numerator\n    result_denominator = x_denominator * n_denominator\n\n    # Check if result is a whole number\n    return result_numerator % result_denominator == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 110, "duration": 9.045788049697876, "task_id": "HumanEval/144"}
{"generated_code": "def specialFilter(nums):\n    def is_odd_and_greater_than_10(n):\n        if n <= 10:\n            return False\n        str_n = str(abs(n))\n        return int(str_n[0]) % 2 != 0 and int(str_n[-1]) % 2 != 0\n\n    return sum(is_odd_and_greater_than_10(num) for num in nums)", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 84, "duration": 8.241860628128052, "task_id": "HumanEval/146"}
{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start = min(planets.index(planet1), planets.index(planet2))\n    end = max(planets.index(planet1), planets.index(planet2))\n    \n    return tuple(planets[start+1:end])", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 112, "duration": 10.3786039352417, "task_id": "HumanEval/148"}
{"generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list first alphabetically, then by length\n    even_length_strings.sort()  # Alphabetical sort\n    even_length_strings.sort(key=len)  # Length sort\n    return even_length_strings", "is_solved": true, "iteration": 0, "prompt_tokens": 237, "completion_tokens": 85, "duration": 6.565547943115234, "task_id": "HumanEval/149"}
{"generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 61, "duration": 8.51151967048645, "task_id": "HumanEval/150"}
{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 40, "duration": 5.37906813621521, "task_id": "HumanEval/151"}
{"generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(guess, game)]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 35, "duration": 6.192361354827881, "task_id": "HumanEval/152"}
{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        return CAP - SM\n\n    strongest_extension = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_extension}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 78, "duration": 7.732594013214111, "task_id": "HumanEval/153"}
{"generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 115, "completion_tokens": 71, "duration": 10.428183317184448, "task_id": "HumanEval/155"}
{"generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 204, "duration": 11.66052770614624, "task_id": "HumanEval/156"}
{"generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 45, "duration": 7.329470634460449, "task_id": "HumanEval/157"}
{"generated_code": "def eat(number, need, remaining):\n    eaten = min(need, remaining)\n    total_eaten = number + eaten\n    remaining -= eaten\n    return [total_eaten, remaining]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 44, "duration": 7.473829746246338, "task_id": "HumanEval/159"}
{"generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for op, num in zip(operator, operand[1:]):\n        expression += f' {op} {num}'\n    return eval(expression)", "is_solved": true, "iteration": 0, "prompt_tokens": 257, "completion_tokens": 51, "duration": 8.592001676559448, "task_id": "HumanEval/160"}
{"generated_code": "def solve(s):\n    if all(not c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.lower() if c.isupper() else c.upper() if c.islower() else c for c in s)", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 58, "duration": 7.316079378128052, "task_id": "HumanEval/161"}
{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 99, "duration": 8.60674786567688, "task_id": "HumanEval/162"}
{"generated_code": "def get_max_triples(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # Generate the array\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n\n    # Iterate through all possible triples\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 134, "duration": 10.993800401687622, "task_id": "HumanEval/147"}
{"generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if -100 <= x <= 99)", "is_solved": true, "iteration": 1, "prompt_tokens": 1100, "completion_tokens": 195, "duration": 14.147692680358887, "task_id": "HumanEval/122"}
{"generated_code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr, sorted in ascending order.\n    \"\"\"\n    return sorted(sorted(arr, reverse=True)[:k])", "is_solved": true, "iteration": 1, "prompt_tokens": 1709, "completion_tokens": 204, "duration": 17.037321090698242, "task_id": "HumanEval/120"}
{"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        # Correctly count lowercase odd-order letters (a, c, e, ...)\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 1)", "is_solved": true, "iteration": 1, "prompt_tokens": 1143, "completion_tokens": 254, "duration": 23.53458547592163, "task_id": "HumanEval/125"}
{"generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    start1, end1 = interval1\n    start2, end2 = interval2\n    start = max(start1, start2)\n    end = min(end1, end2)\n    if start > end:\n        return \"NO\"\n    length = end - start\n    return \"YES\" if is_prime(length) else \"NO\"", "is_solved": true, "iteration": 1, "prompt_tokens": 1599, "completion_tokens": 409, "duration": 24.39200448989868, "task_id": "HumanEval/127"}
{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    closest_vowel = \"\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            closest_vowel = word[i]\n            break  # Stop at the first vowel found that meets the condition\n    return closest_vowel", "is_solved": true, "iteration": 2, "prompt_tokens": 2549, "completion_tokens": 557, "duration": 32.576178789138794, "task_id": "HumanEval/118"}
{"generated_code": "def max_fill(grid, capacity):\n    total_water_units = sum(sum(row) for row in grid)\n    return -(-total_water_units // capacity)", "is_solved": false, "iteration": 2, "prompt_tokens": 2742, "completion_tokens": 349, "duration": 22.888141632080078, "task_id": "HumanEval/115"}
{"generated_code": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    extended_a = a + a\n    for i in range(len(b)):\n        rotated_b = b[i:] + b[:i]\n        if rotated_b in extended_a:\n            return True\n    return False", "is_solved": false, "iteration": 2, "prompt_tokens": 1932, "completion_tokens": 404, "duration": 24.761698007583618, "task_id": "HumanEval/154"}
{"generated_code": "def match_parens(lst):\n    str1, str2 = lst\n    \n    def is_good(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return True\n    \n    # Check if either concatenation order results in a good string\n    return 'Yes' if is_good(str1 + str2) or is_good(str2 + str1) else 'No'", "is_solved": false, "iteration": 2, "prompt_tokens": 2852, "completion_tokens": 808, "duration": 42.670604944229126, "task_id": "HumanEval/119"}
{"generated_code": "def find_max(words):\n    return max(words, key=lambda word: (len(set(word)), -words.index(word)), default=\"\")", "is_solved": false, "iteration": 2, "prompt_tokens": 2263, "completion_tokens": 303, "duration": 24.597227811813354, "task_id": "HumanEval/158"}
{"generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    def is_all_even_digits(num):\n        return all(int(digit) % 2 == 0 for digit in str(num))\n    \n    return [i for i in range(min(a, b), max(a, b) + 1) if is_all_even_digits(i)]", "is_solved": false, "iteration": 2, "prompt_tokens": 1977, "completion_tokens": 400, "duration": 26.91884970664978, "task_id": "HumanEval/163"}
{"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "is_solved": false, "iteration": 2, "prompt_tokens": 2661, "completion_tokens": 386, "duration": 27.741071939468384, "task_id": "HumanEval/145"}
{"generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return False if stack else any(c1 + c2 == '[]' for c1, c2 in zip(string, string[1:]))", "is_solved": false, "iteration": 2, "prompt_tokens": 2540, "completion_tokens": 553, "duration": 35.37111973762512, "task_id": "HumanEval/132"}
{"generated_code": "from heapq import heappop, heappush\n\ndef minPath(grid, k):\n    N = len(grid)\n    moves = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    visited = set()\n    pq = []\n\n    for i in range(N):\n        for j in range(N):\n            heappush(pq, (grid[i][j], 1, i, j, [grid[i][j]]))\n\n    while pq:\n        val, length, x, y, path = heappop(pq)\n        if (x, y, length) in visited:\n            continue\n        visited.add((x, y, length))\n\n        if length == k:\n            return path\n\n        for dx, dy in moves:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                newPath = path + [grid[nx][ny]]\n                heappush(pq, (newPath[0], length + 1, nx, ny, newPath))", "is_solved": false, "iteration": 2, "prompt_tokens": 5741, "completion_tokens": 835, "duration": 43.98089098930359, "task_id": "HumanEval/129"}
{"generated_code": "def tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    trib = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            trib.append(1 + i / 2)\n        else:\n            trib.append(trib[i - 1] + trib[i - 2] + trib[i - 1])\n    return trib", "is_solved": false, "iteration": 2, "prompt_tokens": 3881, "completion_tokens": 652, "duration": 33.06157875061035, "task_id": "HumanEval/130"}
{"generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 67, "duration": 4.0209877490997314, "task_id": "HumanEval/0"}
{"generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    stack = []\n    result = []\n    current = \"\"\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current += char\n        elif char == ')':\n            stack.pop()\n            current += char\n            if not stack:  # If stack is empty, a group has ended\n                result.append(current)\n                current = \"\"\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 165, "completion_tokens": 118, "duration": 8.902730226516724, "task_id": "HumanEval/1"}
{"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": true, "iteration": 0, "prompt_tokens": 135, "completion_tokens": 21, "duration": 2.7102606296539307, "task_id": "HumanEval/2"}
{"generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 53, "duration": 3.8415157794952393, "task_id": "HumanEval/3"}
{"generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 49, "duration": 2.99957537651062, "task_id": "HumanEval/4"}
{"generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.extend([delimeter, number])\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 63, "duration": 4.371600151062012, "task_id": "HumanEval/5"}
{"generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    results = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        results.append(max_depth)\n    return results", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 103, "duration": 5.678426265716553, "task_id": "HumanEval/6"}
{"generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]", "is_solved": true, "iteration": 0, "prompt_tokens": 143, "completion_tokens": 104, "duration": 8.238842725753784, "task_id": "HumanEval/7"}
{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 78, "duration": 6.69270133972168, "task_id": "HumanEval/8"}
{"generated_code": "def make_palindrome(string: str) -> str:\n    if string == string[::-1]:\n        return string\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 70, "duration": 4.749827861785889, "task_id": "HumanEval/10"}
{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.15260910987854, "task_id": "HumanEval/11"}
{"generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 39, "duration": 2.8544228076934814, "task_id": "HumanEval/12"}
{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 39, "duration": 2.4595766067504883, "task_id": "HumanEval/13"}
{"generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 73, "duration": 3.6329903602600098, "task_id": "HumanEval/14"}
{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 31, "duration": 2.760759115219116, "task_id": "HumanEval/15"}
{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.3197572231292725, "task_id": "HumanEval/16"}
{"generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats", "is_solved": true, "iteration": 0, "prompt_tokens": 222, "completion_tokens": 83, "duration": 4.54159688949585, "task_id": "HumanEval/17"}
{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 72, "duration": 4.7304723262786865, "task_id": "HumanEval/18"}
{"generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n                'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 106, "duration": 5.555402755737305, "task_id": "HumanEval/19"}
{"generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i+1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair", "is_solved": true, "iteration": 0, "prompt_tokens": 216, "completion_tokens": 117, "duration": 5.754441499710083, "task_id": "HumanEval/20"}
{"generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(x - min_num) / range_num for x in numbers]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 104, "duration": 9.0089693069458, "task_id": "HumanEval/21"}
{"generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 103, "duration": 5.303599834442139, "task_id": "HumanEval/22"}
{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 2.649064302444458, "task_id": "HumanEval/23"}
{"generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 44, "duration": 3.682873249053955, "task_id": "HumanEval/24"}
{"generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 79, "duration": 4.361755609512329, "task_id": "HumanEval/25"}
{"generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    counts = {}\n    for number in numbers:\n        counts[number] = counts.get(number, 0) + 1\n    return [number for number in numbers if counts[number] == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 95, "duration": 7.0386962890625, "task_id": "HumanEval/26"}
{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 35, "duration": 2.9268834590911865, "task_id": "HumanEval/27"}
{"generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 61, "duration": 3.5149357318878174, "task_id": "HumanEval/28"}
{"generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that start with a given prefix.\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 60, "duration": 3.807779312133789, "task_id": "HumanEval/29"}
{"generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [x for x in l if x > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 35, "duration": 2.8653414249420166, "task_id": "HumanEval/30"}
{"generated_code": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 117, "duration": 5.848691701889038, "task_id": "HumanEval/31"}
{"generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    from scipy.optimize import root\n    def func(x):\n        return poly(xs, x)\n    \n    initial_guess = 0.0\n    sol = root(func, initial_guess)\n    if sol.success:\n        return sol.x[0]\n    else:\n        raise ValueError(\"Root finding did not converge\")", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 228, "duration": 10.703521966934204, "task_id": "HumanEval/32"}
{"generated_code": "def sort_third(l: list) -> list:\n    # Extract elements at indices divisible by 3\n    divisible_by_3 = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort the extracted elements\n    divisible_by_3_sorted = sorted(divisible_by_3)\n    # Replace elements in the original list with sorted ones at the correct positions\n    for i, value in enumerate(divisible_by_3_sorted):\n        l[i * 3] = value\n    return l", "is_solved": true, "iteration": 0, "prompt_tokens": 200, "completion_tokens": 116, "duration": 7.125142335891724, "task_id": "HumanEval/33"}
{"generated_code": "def unique(l: list):\n    return sorted(set(l))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 16, "duration": 1.729191780090332, "task_id": "HumanEval/34"}
{"generated_code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 85, "duration": 8.01661229133606, "task_id": "HumanEval/35"}
{"generated_code": "def sort_even(l: list) -> list:\n    even_indices = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even_indices.sort()\n    return [even_indices.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 71, "duration": 4.339508295059204, "task_id": "HumanEval/37"}
{"generated_code": "def decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iteration": 0, "prompt_tokens": 208, "completion_tokens": 137, "duration": 9.78336787223816, "task_id": "HumanEval/38"}
{"generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib():\n        a, b = 0, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    count = 0\n    for fib_num in fib():\n        if fib_num > 1 and is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 146, "duration": 6.8159308433532715, "task_id": "HumanEval/39"}
{"generated_code": "def triples_sum_to_zero(l: list):\n    n = len(l)\n    l.sort()\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 108, "duration": 9.359532356262207, "task_id": "HumanEval/40"}
{"generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Given n, the number of cars driving left to right and the same number driving right to left,\n    this function calculates the number of collisions that occur.\n    \"\"\"\n    return n**2", "is_solved": true, "iteration": 0, "prompt_tokens": 201, "completion_tokens": 57, "duration": 4.631146669387817, "task_id": "HumanEval/41"}
{"generated_code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 118, "duration": 5.376549959182739, "task_id": "HumanEval/42"}
{"generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 42, "duration": 3.8720717430114746, "task_id": "HumanEval/43"}
{"generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    digits.reverse()\n    return ''.join(digits)", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 61, "duration": 4.068792104721069, "task_id": "HumanEval/44"}
{"generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return (a * h) / 2", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 55, "duration": 3.3317267894744873, "task_id": "HumanEval/45"}
{"generated_code": "def fib4(n: int) -> int:\n    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    if n == 3: return 0\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 119, "duration": 6.260672330856323, "task_id": "HumanEval/46"}
{"generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "is_solved": true, "iteration": 0, "prompt_tokens": 125, "completion_tokens": 61, "duration": 5.067075967788696, "task_id": "HumanEval/47"}
{"generated_code": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 36, "duration": 2.997685432434082, "task_id": "HumanEval/48"}
{"generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 44, "duration": 3.229511022567749, "task_id": "HumanEval/49"}
{"generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": true, "iteration": 0, "prompt_tokens": 140, "completion_tokens": 43, "duration": 3.1155734062194824, "task_id": "HumanEval/50"}
{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 31, "duration": 3.8341293334960938, "task_id": "HumanEval/51"}
{"generated_code": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 29, "duration": 2.3202648162841797, "task_id": "HumanEval/52"}
{"generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 60, "duration": 4.088814735412598, "task_id": "HumanEval/53"}
{"generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 31, "duration": 2.755746603012085, "task_id": "HumanEval/54"}
{"generated_code": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 79, "duration": 5.1637444496154785, "task_id": "HumanEval/55"}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count += 1\n        elif bracket == '>':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 71, "duration": 5.743376731872559, "task_id": "HumanEval/56"}
{"generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 60, "duration": 3.8900606632232666, "task_id": "HumanEval/36"}
{"generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:  # Check if the list is empty\n        return []\n    max_rolling = []\n    current_max = numbers[0]\n    for number in numbers:\n        if number > current_max:\n            current_max = number\n        max_rolling.append(current_max)\n    return max_rolling", "is_solved": true, "iteration": 1, "prompt_tokens": 979, "completion_tokens": 220, "duration": 11.382595777511597, "task_id": "HumanEval/9"}
{"generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 61, "duration": 4.09354829788208, "task_id": "HumanEval/57"}
{"generated_code": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(set(l1) & set(l2))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 39, "duration": 3.0942766666412354, "task_id": "HumanEval/58"}
{"generated_code": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime_factor = 1\n    i = 2\n    \n    while i <= n ** 0.5:\n        if n % i == 0 and is_prime(i):\n            prime_factor = i\n            while n % i == 0:\n                n //= i\n        i += 1\n    \n    if n > 2 and is_prime(n):\n        prime_factor = n\n\n    return prime_factor", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 174, "duration": 9.62759804725647, "task_id": "HumanEval/59"}
{"generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return n * (n + 1) // 2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 46, "duration": 3.125488042831421, "task_id": "HumanEval/60"}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for bracket in brackets:\n        if bracket == '(':\n            balance += 1\n        elif bracket == ')':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 71, "duration": 4.898189544677734, "task_id": "HumanEval/61"}
{"generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 28, "duration": 2.6573143005371094, "task_id": "HumanEval/62"}
{"generated_code": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            d = a + b + c\n            a, b, c = b, c, d\n        return c", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 108, "duration": 7.011068105697632, "task_id": "HumanEval/63"}
{"generated_code": "def vowels_count(s):\n    \"\"\"\n    Add more test cases.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s.endswith('y') or s.endswith('Y'):\n        count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 76, "duration": 4.908478260040283, "task_id": "HumanEval/64"}
{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    len_x = len(x_str)\n    if shift > len_x:\n        return x_str[::-1]\n    shift %= len_x\n    return x_str[-shift:] + x_str[:-shift]", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 59, "duration": 5.130709886550903, "task_id": "HumanEval/65"}
{"generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.162553071975708, "task_id": "HumanEval/66"}
{"generated_code": "def fruit_distribution(s, n):\n    numbers = [int(i) for i in s.split() if i.isdigit()]\n    return n - sum(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 35, "duration": 3.0522823333740234, "task_id": "HumanEval/67"}
{"generated_code": "def pluck(arr):\n    even_values = [(value, index) for index, value in enumerate(arr) if value % 2 == 0 and value >= 0]\n    if not even_values:\n        return []\n    return list(min(even_values))", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 57, "duration": 3.5284690856933594, "task_id": "HumanEval/68"}
{"generated_code": "def search(lst):\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    max_val = -1\n    for key, value in count_dict.items():\n        if key <= value and key > max_val:\n            max_val = key\n\n    return max_val", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 86, "duration": 6.029757261276245, "task_id": "HumanEval/69"}
{"generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 51, "duration": 4.173398017883301, "task_id": "HumanEval/70"}
{"generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    '''\n    # Check if the sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Calculate the area using Heron's formula\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    \n    return round(area, 2)", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 157, "duration": 9.120259046554565, "task_id": "HumanEval/71"}
{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.5521044731140137, "task_id": "HumanEval/72"}
{"generated_code": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 67, "duration": 8.294924974441528, "task_id": "HumanEval/73"}
{"generated_code": "def total_match(lst1, lst2):\n    if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2):\n        return lst1\n    else:\n        return lst2", "is_solved": true, "iteration": 0, "prompt_tokens": 243, "completion_tokens": 49, "duration": 3.180537700653076, "task_id": "HumanEval/74"}
{"generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 49, "duration": 3.2270283699035645, "task_id": "HumanEval/76"}
{"generated_code": "def iscube(a):\n    if a >= 0:\n        root = round(a ** (1/3))\n        return root**3 == a\n    else:\n        root = round(abs(a) ** (1/3))\n        return -root**3 == a", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 60, "duration": 3.163822889328003, "task_id": "HumanEval/77"}
{"generated_code": "def hex_key(num):\n    # Define the prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    # Count the number of prime hexadecimal digits in the input string\n    return sum(1 for digit in num if digit in prime_hex_digits)", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 70, "duration": 4.296364784240723, "task_id": "HumanEval/78"}
{"generated_code": "def decimal_to_binary(decimal):\n    binary_str = bin(decimal)[2:]  # convert to binary and remove the '0b' prefix\n    return f\"db{binary_str}db\"", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 44, "duration": 2.8562440872192383, "task_id": "HumanEval/79"}
{"generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 80, "duration": 9.004127025604248, "task_id": "HumanEval/80"}
{"generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for g in grades:\n        if g == 4.0: \n            letter_grades.append('A+')\n        elif g > 3.7: \n            letter_grades.append('A')\n        elif g > 3.3: \n            letter_grades.append('A-')\n        elif g > 3.0: \n            letter_grades.append('B+')\n        elif g > 2.7: \n            letter_grades.append('B')\n        elif g > 2.3: \n            letter_grades.append('B-')\n        elif g > 2.0: \n            letter_grades.append('C+')\n        elif g > 1.7: \n            letter_grades.append('C')\n        elif g > 1.3: \n            letter_grades.append('C-')\n        elif g > 1.0: \n            letter_grades.append('D+')\n        elif g > 0.7: \n            letter_grades.append('D')\n        elif g > 0.0: \n            letter_grades.append('D-')\n        else: \n            letter_grades.append('E')\n    return letter_grades", "is_solved": true, "iteration": 0, "prompt_tokens": 320, "completion_tokens": 265, "duration": 11.700199842453003, "task_id": "HumanEval/81"}
{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 69, "duration": 3.6344518661499023, "task_id": "HumanEval/82"}
{"generated_code": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_of_digits)[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 51, "duration": 3.8922150135040283, "task_id": "HumanEval/84"}
{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 105, "completion_tokens": 40, "duration": 2.75032114982605, "task_id": "HumanEval/85"}
{"generated_code": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 27, "duration": 2.151890754699707, "task_id": "HumanEval/86"}
{"generated_code": "def get_row(lst, x):\n    \"\"\"\n    Given a 2D list `lst` and an integer `x`, find all occurrences of `x` in `lst`,\n    and return a list of tuples representing their coordinates in the format (row, column).\n    The coordinates are sorted first by row in ascending order, then by column in descending order.\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 136, "duration": 7.588098526000977, "task_id": "HumanEval/87"}
{"generated_code": "def sort_array(array):\n    if not array or len(array) == 1:\n        return array.copy()\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "is_solved": true, "iteration": 0, "prompt_tokens": 253, "completion_tokens": 61, "duration": 4.852056980133057, "task_id": "HumanEval/88"}
{"generated_code": "def encrypt(s):\n    \"\"\"Encrypts the input string by shifting letters down by 4 places.\"\"\"\n    encrypted = ''\n    for char in s:\n        if 'a' <= char <= 'z':\n            encrypted += chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n        elif 'A' <= char <= 'Z':\n            encrypted += chr((ord(char) - ord('A') + 4) % 26 + ord('A'))\n        else:\n            encrypted += char\n    return encrypted", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 118, "duration": 6.16865086555481, "task_id": "HumanEval/89"}
{"generated_code": "def next_smallest(lst):\n    \"\"\"\n    Returns the 2nd smallest element of the list. Returns None if there is no such element.\n    \"\"\"\n    unique_sorted_lst = sorted(set(lst))\n    if len(unique_sorted_lst) < 2:\n        return None\n    else:\n        return unique_sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 70, "duration": 5.281777381896973, "task_id": "HumanEval/90"}
{"generated_code": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 56, "duration": 3.67219877243042, "task_id": "HumanEval/92"}
{"generated_code": "def largest_prime_sum(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    return sum([int(digit) for digit in str(max_prime)])", "is_solved": true, "iteration": 0, "prompt_tokens": 336, "completion_tokens": 109, "duration": 6.138820648193359, "task_id": "HumanEval/94"}
{"generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    lower_case = all(isinstance(key, str) and key.islower() for key in keys)\n    upper_case = all(isinstance(key, str) and key.isupper() for key in keys)\n    return lower_case or upper_case", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 74, "duration": 5.66085147857666, "task_id": "HumanEval/95"}
{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [i for i in range(2, n) if is_prime(i)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 86, "duration": 4.624057769775391, "task_id": "HumanEval/96"}
{"generated_code": "def multiply(a, b):\n    \"\"\"Returns the product of the unit digits of two integers.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 42, "duration": 2.7824454307556152, "task_id": "HumanEval/97"}
{"generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = 'AEIOU'\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 103, "duration": 5.227121353149414, "task_id": "HumanEval/98"}
{"generated_code": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    '''\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 92, "duration": 6.353636026382446, "task_id": "HumanEval/99"}
{"generated_code": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]", "is_solved": true, "iteration": 0, "prompt_tokens": 182, "completion_tokens": 25, "duration": 3.4358692169189453, "task_id": "HumanEval/100"}
{"generated_code": "def words_string(s):\n    \"\"\"\n    Split the string into words separated by commas or spaces and return an array of the words.\n    \"\"\"\n    import re\n    return re.findall(r'\\b\\w+\\b', s)", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 50, "duration": 6.107905387878418, "task_id": "HumanEval/101"}
{"generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x, y and returns the biggest even integer number that is in the range [x, y] inclusive. If there's no such number, then the function should return -1.\"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 89, "duration": 5.985353708267212, "task_id": "HumanEval/102"}
{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 43, "duration": 4.151994228363037, "task_id": "HumanEval/103"}
{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 37, "duration": 5.314167737960815, "task_id": "HumanEval/104"}
{"generated_code": "def by_length(arr):\n    num_to_word = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    return [num_to_word[num] for num in reversed_arr]", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 118, "duration": 7.696850776672363, "task_id": "HumanEval/105"}
{"generated_code": "def f(n):\n    \"\"\" Returns a list of size n, with factorial values for even indexes and sum of numbers for odd indexes. \"\"\"\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n        \n    def sum_numbers(x):\n        return sum(range(1, x+1))\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_numbers(i))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 127, "duration": 11.082646608352661, "task_id": "HumanEval/106"}
{"generated_code": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \"\"\"\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    \n    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 141, "duration": 9.035115480422974, "task_id": "HumanEval/107"}
{"generated_code": "def move_one_ball(arr):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[(i + 1) % n]:\n            count += 1\n    return count <= 1", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 58, "duration": 5.8650219440460205, "task_id": "HumanEval/109"}
{"generated_code": "def exchange(lst1, lst2):\n    \"\"\"\n    Determines if it is possible to exchange elements between two lists to make the first list all even numbers.\n    \"\"\"\n    # Count the number of even numbers needed for lst1 and available in lst2\n    needed_evens = sum(1 for x in lst1 if x % 2 != 0)\n    available_evens = sum(1 for x in lst2 if x % 2 == 0)\n    \n    # If there are enough even numbers in lst2 to replace the odd numbers in lst1, return \"YES\"\n    if needed_evens <= available_evens:\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": true, "iteration": 0, "prompt_tokens": 247, "completion_tokens": 147, "duration": 12.99392294883728, "task_id": "HumanEval/110"}
{"generated_code": "def histogram(test):\n    if not test:\n        return {}\n    words = test.split()\n    counts = {}\n    for word in words:\n        counts[word] = counts.get(word, 0) + 1\n    max_count = max(counts.values())\n    return {word: count for word, count in counts.items() if count == max_count}", "is_solved": true, "iteration": 0, "prompt_tokens": 201, "completion_tokens": 77, "duration": 6.195828199386597, "task_id": "HumanEval/111"}
{"generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 212, "completion_tokens": 39, "duration": 5.42903208732605, "task_id": "HumanEval/112"}
{"generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 223, "completion_tokens": 75, "duration": 6.297055006027222, "task_id": "HumanEval/113"}
{"generated_code": "import re\n\ndef is_bored(S):\n    \"\"\"\n    Counts the number of boredoms in a given string.\n    \n    Parameters:\n    S (str): A string of words.\n    \n    Returns:\n    int: The number of boredoms.\n    \"\"\"\n    # Split the string into sentences\n    sentences = [sentence.strip() for sentence in re.split('[.?!]', S) if sentence]\n    # Count sentences that start with \"I \"\n    boredom_count = sum(sentence.startswith(\"I \") for sentence in sentences)\n    return boredom_count", "is_solved": true, "iteration": 1, "prompt_tokens": 1201, "completion_tokens": 305, "duration": 15.508552074432373, "task_id": "HumanEval/91"}
{"generated_code": "def encode(message):\n    def shift_vowel(c):\n        vowels = 'aeiouAEIOU'\n        shift = 2\n        if c in vowels:\n            if c.islower():\n                return chr(((ord(c) - ord('a') + shift) % 26) + ord('a'))\n            else:\n                return chr(((ord(c) - ord('A') + shift) % 26) + ord('A'))\n        return c\n\n    return ''.join(shift_vowel(c) if c.isalpha() else c for c in message).swapcase()", "is_solved": true, "iteration": 1, "prompt_tokens": 1069, "completion_tokens": 266, "duration": 17.647820711135864, "task_id": "HumanEval/93"}
{"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_factors = 0\n    for i in range(2, a + 1):\n        if a % i == 0 and is_prime(i):\n            count = 0\n            while a % i == 0:\n                a //= i\n                count += 1\n            prime_factors += count\n        if a == 1:  # No need to continue if we've factored everything out\n            break\n\n    return prime_factors == 3", "is_solved": true, "iteration": 1, "prompt_tokens": 1258, "completion_tokens": 453, "duration": 25.373043298721313, "task_id": "HumanEval/75"}
{"generated_code": "def count_nums(arr):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n    \n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "is_solved": false, "iteration": 2, "prompt_tokens": 2290, "completion_tokens": 317, "duration": 18.733057737350464, "task_id": "HumanEval/108"}
{"generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 2 * 9 ** (n - 1) - 8 ** (n - 1)", "is_solved": false, "iteration": 2, "prompt_tokens": 1847, "completion_tokens": 709, "duration": 35.69927501678467, "task_id": "HumanEval/83"}
{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 60, "duration": 6.806171894073486, "task_id": "HumanEval/114"}
{"generated_code": "def sort_array(arr):\n    \"\"\"\n    Sorts an array of non-negative integers based on the number of ones in their binary representation,\n    then by their decimal values if the number of ones is the same.\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 220, "completion_tokens": 67, "duration": 6.418631076812744, "task_id": "HumanEval/116"}
{"generated_code": "def select_words(s, n):\n    \"\"\"\n    Given a string s and a natural number n, this function returns a list of all words from string s that contain exactly n consonants.\n    \"\"\"\n    def consonant_count(word):\n        return sum(1 for char in word.lower() if char in \"bcdfghjklmnpqrstvwxyz\")\n    \n    return [word for word in s.split() if consonant_count(word) == n]", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 97, "duration": 8.439436435699463, "task_id": "HumanEval/117"}
{"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 40, "duration": 5.6258039474487305, "task_id": "HumanEval/121"}
{"generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 == 1:\n            odd_numbers.append(n)\n        n = 3*n + 1 if n % 2 else n // 2\n    odd_numbers.append(1)  # Adding 1 at the end, as it's always part of the sequence\n    return sorted(odd_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 281, "completion_tokens": 116, "duration": 8.040536403656006, "task_id": "HumanEval/123"}
{"generated_code": "def valid_date(date):\n    # Check if the date is in the correct format\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    month, day, year = parts\n    \n    # Check if year, month, and day are digits\n    if not (year.isdigit() and month.isdigit() and day.isdigit()):\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n    \n    # Check if the day is valid\n    if day < 1:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n    elif month in [4, 6, 9, 11] and day > 30:\n        return False\n    elif month == 2 and day > 29:\n        return False\n    \n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 313, "completion_tokens": 254, "duration": 15.975306272506714, "task_id": "HumanEval/124"}
{"generated_code": "def is_sorted(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if lst.count(lst[i]) > 2:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 299, "completion_tokens": 56, "duration": 6.425717115402222, "task_id": "HumanEval/126"}
{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        sign_product *= (1 if num > 0 else -1 if num < 0 else 0)\n        magnitude_sum += abs(num)\n    return magnitude_sum * sign_product", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 77, "duration": 6.130433082580566, "task_id": "HumanEval/128"}
{"generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            has_odd = True\n            product *= int(digit)\n    return product if has_odd else 0", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 63, "duration": 7.227850675582886, "task_id": "HumanEval/131"}
{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 27, "duration": 5.573691129684448, "task_id": "HumanEval/133"}
{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt or not txt.strip() or not txt[-1].isalpha():\n        return False\n    if txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == \" \"):\n        return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 70, "duration": 7.508548259735107, "task_id": "HumanEval/134"}
{"generated_code": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 153, "completion_tokens": 49, "duration": 6.526432991027832, "task_id": "HumanEval/135"}
{"generated_code": "def largest_smallest_integers(lst):\n    negative_integers = [x for x in lst if x < 0]\n    positive_integers = [x for x in lst if x > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)", "is_solved": true, "iteration": 0, "prompt_tokens": 188, "completion_tokens": 90, "duration": 8.789367914199829, "task_id": "HumanEval/136"}
{"generated_code": "def compare_one(a, b):\n    def convert(val):\n        if isinstance(val, str):\n            val = val.replace(',', '.')\n        return float(val)\n    \n    a_converted = convert(a)\n    b_converted = convert(b)\n    \n    if a_converted > b_converted:\n        return a\n    elif b_converted > a_converted:\n        return b\n    else:\n        return None", "is_solved": true, "iteration": 0, "prompt_tokens": 191, "completion_tokens": 89, "duration": 8.596368312835693, "task_id": "HumanEval/137"}
{"generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # Since the smallest sum of 4 positive even numbers is 2+2+2+2=8,\n    # any number less than 8 cannot be written as such a sum.\n    if n < 8:\n        return False\n    # For a number to be written as a sum of 4 even numbers, it must be even itself.\n    # Any even number greater than or equal to 8 can be represented as the sum\n    # of four even numbers (for example, 8 itself is 2+2+2+2, and for any even number\n    # greater than 8, we can adjust the sum by increasing the first addend).\n    return n % 2 == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 127, "completion_tokens": 185, "duration": 10.780973434448242, "task_id": "HumanEval/138"}
{"generated_code": "def special_factorial(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 69, "duration": 8.691449642181396, "task_id": "HumanEval/139"}
{"generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    import re\n    # Replace 3 or more spaces with '-'\n    text = re.sub(r' {3,}', '-', text)\n    # Replace remaining spaces (1 or 2) with '_'\n    text = text.replace(' ', '_')\n    return text", "is_solved": true, "iteration": 0, "prompt_tokens": 156, "completion_tokens": 107, "duration": 8.816003561019897, "task_id": "HumanEval/140"}
{"generated_code": "def file_name_check(file_name):\n    # Check if the file name has exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into name and extension\n    name, extension = file_name.split('.')\n    \n    # Check if the name part is not empty and starts with a letter\n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    # Check if the extension is valid\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Check if there are more than three digits in the file name\n    digits_count = sum(c.isdigit() for c in name)\n    if digits_count > 3:\n        return 'No'\n    \n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 171, "duration": 11.663620710372925, "task_id": "HumanEval/141"}
{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 46, "duration": 6.397021055221558, "task_id": "HumanEval/142"}
{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return ' '.join(word for word in sentence.split() if is_prime(len(word)))", "is_solved": true, "iteration": 0, "prompt_tokens": 197, "completion_tokens": 81, "duration": 8.922763109207153, "task_id": "HumanEval/143"}
{"generated_code": "def simplify(x, n):\n    def parse_fraction(fraction):\n        numerator, denominator = map(int, fraction.split('/'))\n        return numerator, denominator\n\n    x_numerator, x_denominator = parse_fraction(x)\n    n_numerator, n_denominator = parse_fraction(n)\n\n    result_numerator = x_numerator * n_numerator\n    result_denominator = x_denominator * n_denominator\n\n    # Check if result is a whole number\n    return result_numerator % result_denominator == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 110, "duration": 9.045788049697876, "task_id": "HumanEval/144"}
{"generated_code": "def specialFilter(nums):\n    def is_odd_and_greater_than_10(n):\n        if n <= 10:\n            return False\n        str_n = str(abs(n))\n        return int(str_n[0]) % 2 != 0 and int(str_n[-1]) % 2 != 0\n\n    return sum(is_odd_and_greater_than_10(num) for num in nums)", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 84, "duration": 8.241860628128052, "task_id": "HumanEval/146"}
{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start = min(planets.index(planet1), planets.index(planet2))\n    end = max(planets.index(planet1), planets.index(planet2))\n    \n    return tuple(planets[start+1:end])", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 112, "duration": 10.3786039352417, "task_id": "HumanEval/148"}
{"generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list first alphabetically, then by length\n    even_length_strings.sort()  # Alphabetical sort\n    even_length_strings.sort(key=len)  # Length sort\n    return even_length_strings", "is_solved": true, "iteration": 0, "prompt_tokens": 237, "completion_tokens": 85, "duration": 6.565547943115234, "task_id": "HumanEval/149"}
{"generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 61, "duration": 8.51151967048645, "task_id": "HumanEval/150"}
{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 40, "duration": 5.37906813621521, "task_id": "HumanEval/151"}
{"generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(guess, game)]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 35, "duration": 6.192361354827881, "task_id": "HumanEval/152"}
{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        return CAP - SM\n\n    strongest_extension = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_extension}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 78, "duration": 7.732594013214111, "task_id": "HumanEval/153"}
{"generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 115, "completion_tokens": 71, "duration": 10.428183317184448, "task_id": "HumanEval/155"}
{"generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 204, "duration": 11.66052770614624, "task_id": "HumanEval/156"}
{"generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 45, "duration": 7.329470634460449, "task_id": "HumanEval/157"}
{"generated_code": "def eat(number, need, remaining):\n    eaten = min(need, remaining)\n    total_eaten = number + eaten\n    remaining -= eaten\n    return [total_eaten, remaining]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 44, "duration": 7.473829746246338, "task_id": "HumanEval/159"}
{"generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for op, num in zip(operator, operand[1:]):\n        expression += f' {op} {num}'\n    return eval(expression)", "is_solved": true, "iteration": 0, "prompt_tokens": 257, "completion_tokens": 51, "duration": 8.592001676559448, "task_id": "HumanEval/160"}
{"generated_code": "def solve(s):\n    if all(not c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.lower() if c.isupper() else c.upper() if c.islower() else c for c in s)", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 58, "duration": 7.316079378128052, "task_id": "HumanEval/161"}
{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 99, "duration": 8.60674786567688, "task_id": "HumanEval/162"}
{"generated_code": "def get_max_triples(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # Generate the array\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n\n    # Iterate through all possible triples\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 134, "duration": 10.993800401687622, "task_id": "HumanEval/147"}
{"generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if len(str(abs(x))) <= 2)", "is_solved": true, "iteration": 1, "prompt_tokens": 1059, "completion_tokens": 155, "duration": 11.884357213973999, "task_id": "HumanEval/122"}
{"generated_code": "def find_max(words):\n    return min(sorted([word for word in words if len(set(word)) == max(len(set(word)) for word in words)], key=lambda x: (-len(set(x)), x)))", "is_solved": true, "iteration": 1, "prompt_tokens": 1202, "completion_tokens": 173, "duration": 13.869006872177124, "task_id": "HumanEval/158"}
{"generated_code": "def match_parens(lst):\n    str1, str2 = lst\n    # Function to check if a string is balanced\n    def is_balanced(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n    \n    # Check both possible concatenations\n    return 'Yes' if is_balanced(str1 + str2) or is_balanced(str2 + str1) else 'No'", "is_solved": true, "iteration": 1, "prompt_tokens": 1540, "completion_tokens": 366, "duration": 19.287877559661865, "task_id": "HumanEval/119"}
{"generated_code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr, sorted in ascending order.\n    \"\"\"\n    return sorted(sorted(arr, reverse=True)[:k])", "is_solved": true, "iteration": 1, "prompt_tokens": 1686, "completion_tokens": 181, "duration": 16.811134815216064, "task_id": "HumanEval/120"}
{"generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    start1, end1 = interval1\n    start2, end2 = interval2\n    start = max(start1, start2)\n    end = min(end1, end2)\n    if start > end:\n        return \"NO\"\n    length = end - start\n    return \"YES\" if is_prime(length) else \"NO\"", "is_solved": true, "iteration": 1, "prompt_tokens": 1572, "completion_tokens": 382, "duration": 20.572210788726807, "task_id": "HumanEval/127"}
{"generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    even_digits = {2, 4, 6, 8}\n    result = []\n\n    for i in range(min(a, b), max(a, b) + 1):\n        if i in even_digits:\n            result.append(i)\n\n    return result", "is_solved": true, "iteration": 1, "prompt_tokens": 1087, "completion_tokens": 278, "duration": 20.73615598678589, "task_id": "HumanEval/163"}
{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):  # Adjust the range to prevent out of range errors\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "is_solved": true, "iteration": 1, "prompt_tokens": 1409, "completion_tokens": 320, "duration": 19.015769720077515, "task_id": "HumanEval/118"}
{"generated_code": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    extended_a = a + a\n    # Generate all rotations of b\n    rotations_of_b = [b[i:] + b[:i] for i in range(len(b))]\n    # Check if any rotation of b is a substring of the original a, not extended_a\n    return any(rotation in a for rotation in rotations_of_b)", "is_solved": true, "iteration": 2, "prompt_tokens": 1976, "completion_tokens": 492, "duration": 25.43090057373047, "task_id": "HumanEval/154"}
{"generated_code": "def max_fill(grid, capacity):\n    import math\n    total_water_units = sum(sum(row) for row in grid)\n    return math.ceil(total_water_units / capacity)", "is_solved": false, "iteration": 2, "prompt_tokens": 2730, "completion_tokens": 298, "duration": 19.615521907806396, "task_id": "HumanEval/115"}
{"generated_code": "from heapq import heappush, heappop\n\ndef minPath(grid, k):\n    N = len(grid)\n    # Create a dictionary to map each value to its coordinates for quick access\n    value_to_position = {grid[i][j]: (i, j) for i in range(N) for j in range(N)}\n    # Start with the smallest value which is always 1 in this problem\n    start_val = 1\n    # Define movements: right, left, down, up\n    moves = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    # Initialize a priority queue with a tuple containing the current path (as a list of values), and the current position (x, y)\n    heap = [([start_val], value_to_position[start_val])]\n    \n    while heap:\n        path, (x, y) = heappop(heap)\n        # If the path length equals k, return the path\n        if len(path) == k:\n            return path\n        # If not, explore all possible next steps\n        for dx, dy in moves:\n            nx, ny = x + dx, y + dy\n            # Ensure the new position is within the grid bounds\n            if 0 <= nx < N and 0 <= ny < N:\n                # Create a new path including the new position's value\n                newPath = path + [grid[nx][ny]]\n                # Push the new path and position onto the heap\n                heappush(heap, (newPath, (nx, ny)))\n    # If no path of length k is found, which shouldn't happen given the problem constraints, return an empty list\n    return []", "is_solved": true, "iteration": 1, "prompt_tokens": 3225, "completion_tokens": 735, "duration": 46.92066264152527, "task_id": "HumanEval/129"}
{"generated_code": "def split_words(txt):\n    # Check for whitespace\n    if ' ' in txt:\n        return txt.split()\n    # Check for commas\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        # Count lower-case odd order letters\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)", "is_solved": false, "iteration": 2, "prompt_tokens": 2219, "completion_tokens": 556, "duration": 42.60533308982849, "task_id": "HumanEval/125"}
{"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "is_solved": false, "iteration": 2, "prompt_tokens": 2623, "completion_tokens": 356, "duration": 23.33915090560913, "task_id": "HumanEval/145"}
{"generated_code": "def is_nested(string):\n    stack = []\n    nested = False  # Track if any nested brackets are found\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n                # If stack is not empty after popping, it means the current ']' closes a nested bracket\n                if stack:\n                    nested = True\n            else:\n                # Unmatched ']' found, not a valid sequence\n                return False\n    # The string is valid if the stack is empty (all brackets matched) and at least one nested bracket was found\n    return nested and not stack", "is_solved": false, "iteration": 2, "prompt_tokens": 2648, "completion_tokens": 695, "duration": 41.49520444869995, "task_id": "HumanEval/132"}
{"generated_code": "def tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    trib = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            trib.append(1 + i / 2)\n        else:\n            trib.append(trib[i - 1] + trib[i - 2] + trib[i - 1])\n    return trib", "is_solved": false, "iteration": 2, "prompt_tokens": 3866, "completion_tokens": 596, "duration": 28.753854036331177, "task_id": "HumanEval/130"}
{"generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 67, "duration": 4.0209877490997314, "task_id": "HumanEval/0"}
{"generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    stack = []\n    result = []\n    current = \"\"\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current += char\n        elif char == ')':\n            stack.pop()\n            current += char\n            if not stack:  # If stack is empty, a group has ended\n                result.append(current)\n                current = \"\"\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 165, "completion_tokens": 118, "duration": 8.902730226516724, "task_id": "HumanEval/1"}
{"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": true, "iteration": 0, "prompt_tokens": 135, "completion_tokens": 21, "duration": 2.7102606296539307, "task_id": "HumanEval/2"}
{"generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 53, "duration": 3.8415157794952393, "task_id": "HumanEval/3"}
{"generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 49, "duration": 2.99957537651062, "task_id": "HumanEval/4"}
{"generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.extend([delimeter, number])\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 63, "duration": 4.371600151062012, "task_id": "HumanEval/5"}
{"generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    results = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        results.append(max_depth)\n    return results", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 103, "duration": 5.678426265716553, "task_id": "HumanEval/6"}
{"generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]", "is_solved": true, "iteration": 0, "prompt_tokens": 143, "completion_tokens": 104, "duration": 8.238842725753784, "task_id": "HumanEval/7"}
{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 78, "duration": 6.69270133972168, "task_id": "HumanEval/8"}
{"generated_code": "def make_palindrome(string: str) -> str:\n    if string == string[::-1]:\n        return string\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 70, "duration": 4.749827861785889, "task_id": "HumanEval/10"}
{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.15260910987854, "task_id": "HumanEval/11"}
{"generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 39, "duration": 2.8544228076934814, "task_id": "HumanEval/12"}
{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 39, "duration": 2.4595766067504883, "task_id": "HumanEval/13"}
{"generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 73, "duration": 3.6329903602600098, "task_id": "HumanEval/14"}
{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 31, "duration": 2.760759115219116, "task_id": "HumanEval/15"}
{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.3197572231292725, "task_id": "HumanEval/16"}
{"generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats", "is_solved": true, "iteration": 0, "prompt_tokens": 222, "completion_tokens": 83, "duration": 4.54159688949585, "task_id": "HumanEval/17"}
{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 72, "duration": 4.7304723262786865, "task_id": "HumanEval/18"}
{"generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n                'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 106, "duration": 5.555402755737305, "task_id": "HumanEval/19"}
{"generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i+1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair", "is_solved": true, "iteration": 0, "prompt_tokens": 216, "completion_tokens": 117, "duration": 5.754441499710083, "task_id": "HumanEval/20"}
{"generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(x - min_num) / range_num for x in numbers]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 104, "duration": 9.0089693069458, "task_id": "HumanEval/21"}
{"generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 103, "duration": 5.303599834442139, "task_id": "HumanEval/22"}
{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 2.649064302444458, "task_id": "HumanEval/23"}
{"generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 44, "duration": 3.682873249053955, "task_id": "HumanEval/24"}
{"generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 79, "duration": 4.361755609512329, "task_id": "HumanEval/25"}
{"generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    counts = {}\n    for number in numbers:\n        counts[number] = counts.get(number, 0) + 1\n    return [number for number in numbers if counts[number] == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 95, "duration": 7.0386962890625, "task_id": "HumanEval/26"}
{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 35, "duration": 2.9268834590911865, "task_id": "HumanEval/27"}
{"generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 61, "duration": 3.5149357318878174, "task_id": "HumanEval/28"}
{"generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that start with a given prefix.\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 60, "duration": 3.807779312133789, "task_id": "HumanEval/29"}
{"generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [x for x in l if x > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 35, "duration": 2.8653414249420166, "task_id": "HumanEval/30"}
{"generated_code": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 117, "duration": 5.848691701889038, "task_id": "HumanEval/31"}
{"generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    from scipy.optimize import root\n    def func(x):\n        return poly(xs, x)\n    \n    initial_guess = 0.0\n    sol = root(func, initial_guess)\n    if sol.success:\n        return sol.x[0]\n    else:\n        raise ValueError(\"Root finding did not converge\")", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 228, "duration": 10.703521966934204, "task_id": "HumanEval/32"}
{"generated_code": "def sort_third(l: list) -> list:\n    # Extract elements at indices divisible by 3\n    divisible_by_3 = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort the extracted elements\n    divisible_by_3_sorted = sorted(divisible_by_3)\n    # Replace elements in the original list with sorted ones at the correct positions\n    for i, value in enumerate(divisible_by_3_sorted):\n        l[i * 3] = value\n    return l", "is_solved": true, "iteration": 0, "prompt_tokens": 200, "completion_tokens": 116, "duration": 7.125142335891724, "task_id": "HumanEval/33"}
{"generated_code": "def unique(l: list):\n    return sorted(set(l))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 16, "duration": 1.729191780090332, "task_id": "HumanEval/34"}
{"generated_code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 85, "duration": 8.01661229133606, "task_id": "HumanEval/35"}
{"generated_code": "def sort_even(l: list) -> list:\n    even_indices = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even_indices.sort()\n    return [even_indices.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 71, "duration": 4.339508295059204, "task_id": "HumanEval/37"}
{"generated_code": "def decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iteration": 0, "prompt_tokens": 208, "completion_tokens": 137, "duration": 9.78336787223816, "task_id": "HumanEval/38"}
{"generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib():\n        a, b = 0, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    count = 0\n    for fib_num in fib():\n        if fib_num > 1 and is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 146, "duration": 6.8159308433532715, "task_id": "HumanEval/39"}
{"generated_code": "def triples_sum_to_zero(l: list):\n    n = len(l)\n    l.sort()\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 108, "duration": 9.359532356262207, "task_id": "HumanEval/40"}
{"generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Given n, the number of cars driving left to right and the same number driving right to left,\n    this function calculates the number of collisions that occur.\n    \"\"\"\n    return n**2", "is_solved": true, "iteration": 0, "prompt_tokens": 201, "completion_tokens": 57, "duration": 4.631146669387817, "task_id": "HumanEval/41"}
{"generated_code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 118, "duration": 5.376549959182739, "task_id": "HumanEval/42"}
{"generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 42, "duration": 3.8720717430114746, "task_id": "HumanEval/43"}
{"generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    digits.reverse()\n    return ''.join(digits)", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 61, "duration": 4.068792104721069, "task_id": "HumanEval/44"}
{"generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return (a * h) / 2", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 55, "duration": 3.3317267894744873, "task_id": "HumanEval/45"}
{"generated_code": "def fib4(n: int) -> int:\n    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    if n == 3: return 0\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 119, "duration": 6.260672330856323, "task_id": "HumanEval/46"}
{"generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "is_solved": true, "iteration": 0, "prompt_tokens": 125, "completion_tokens": 61, "duration": 5.067075967788696, "task_id": "HumanEval/47"}
{"generated_code": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 36, "duration": 2.997685432434082, "task_id": "HumanEval/48"}
{"generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 44, "duration": 3.229511022567749, "task_id": "HumanEval/49"}
{"generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": true, "iteration": 0, "prompt_tokens": 140, "completion_tokens": 43, "duration": 3.1155734062194824, "task_id": "HumanEval/50"}
{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 31, "duration": 3.8341293334960938, "task_id": "HumanEval/51"}
{"generated_code": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 29, "duration": 2.3202648162841797, "task_id": "HumanEval/52"}
{"generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 60, "duration": 4.088814735412598, "task_id": "HumanEval/53"}
{"generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 31, "duration": 2.755746603012085, "task_id": "HumanEval/54"}
{"generated_code": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 79, "duration": 5.1637444496154785, "task_id": "HumanEval/55"}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count += 1\n        elif bracket == '>':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 71, "duration": 5.743376731872559, "task_id": "HumanEval/56"}
{"generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 60, "duration": 3.8900606632232666, "task_id": "HumanEval/36"}
{"generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n    max_rolling = []\n    current_max = numbers[0]\n    for number in numbers:\n        if number > current_max:\n            current_max = number\n        max_rolling.append(current_max)\n    return max_rolling", "is_solved": true, "iteration": 1, "prompt_tokens": 959, "completion_tokens": 192, "duration": 10.075038433074951, "task_id": "HumanEval/9"}
{"generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 61, "duration": 4.09354829788208, "task_id": "HumanEval/57"}
{"generated_code": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(set(l1) & set(l2))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 39, "duration": 3.0942766666412354, "task_id": "HumanEval/58"}
{"generated_code": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime_factor = 1\n    i = 2\n    \n    while i <= n ** 0.5:\n        if n % i == 0 and is_prime(i):\n            prime_factor = i\n            while n % i == 0:\n                n //= i\n        i += 1\n    \n    if n > 2 and is_prime(n):\n        prime_factor = n\n\n    return prime_factor", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 174, "duration": 9.62759804725647, "task_id": "HumanEval/59"}
{"generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return n * (n + 1) // 2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 46, "duration": 3.125488042831421, "task_id": "HumanEval/60"}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for bracket in brackets:\n        if bracket == '(':\n            balance += 1\n        elif bracket == ')':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 71, "duration": 4.898189544677734, "task_id": "HumanEval/61"}
{"generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 28, "duration": 2.6573143005371094, "task_id": "HumanEval/62"}
{"generated_code": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            d = a + b + c\n            a, b, c = b, c, d\n        return c", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 108, "duration": 7.011068105697632, "task_id": "HumanEval/63"}
{"generated_code": "def vowels_count(s):\n    \"\"\"\n    Add more test cases.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s.endswith('y') or s.endswith('Y'):\n        count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 76, "duration": 4.908478260040283, "task_id": "HumanEval/64"}
{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    len_x = len(x_str)\n    if shift > len_x:\n        return x_str[::-1]\n    shift %= len_x\n    return x_str[-shift:] + x_str[:-shift]", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 59, "duration": 5.130709886550903, "task_id": "HumanEval/65"}
{"generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.162553071975708, "task_id": "HumanEval/66"}
{"generated_code": "def fruit_distribution(s, n):\n    numbers = [int(i) for i in s.split() if i.isdigit()]\n    return n - sum(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 35, "duration": 3.0522823333740234, "task_id": "HumanEval/67"}
{"generated_code": "def pluck(arr):\n    even_values = [(value, index) for index, value in enumerate(arr) if value % 2 == 0 and value >= 0]\n    if not even_values:\n        return []\n    return list(min(even_values))", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 57, "duration": 3.5284690856933594, "task_id": "HumanEval/68"}
{"generated_code": "def search(lst):\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    max_val = -1\n    for key, value in count_dict.items():\n        if key <= value and key > max_val:\n            max_val = key\n\n    return max_val", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 86, "duration": 6.029757261276245, "task_id": "HumanEval/69"}
{"generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 51, "duration": 4.173398017883301, "task_id": "HumanEval/70"}
{"generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    '''\n    # Check if the sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Calculate the area using Heron's formula\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    \n    return round(area, 2)", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 157, "duration": 9.120259046554565, "task_id": "HumanEval/71"}
{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.5521044731140137, "task_id": "HumanEval/72"}
{"generated_code": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 67, "duration": 8.294924974441528, "task_id": "HumanEval/73"}
{"generated_code": "def total_match(lst1, lst2):\n    if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2):\n        return lst1\n    else:\n        return lst2", "is_solved": true, "iteration": 0, "prompt_tokens": 243, "completion_tokens": 49, "duration": 3.180537700653076, "task_id": "HumanEval/74"}
{"generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 49, "duration": 3.2270283699035645, "task_id": "HumanEval/76"}
{"generated_code": "def iscube(a):\n    if a >= 0:\n        root = round(a ** (1/3))\n        return root**3 == a\n    else:\n        root = round(abs(a) ** (1/3))\n        return -root**3 == a", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 60, "duration": 3.163822889328003, "task_id": "HumanEval/77"}
{"generated_code": "def hex_key(num):\n    # Define the prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    # Count the number of prime hexadecimal digits in the input string\n    return sum(1 for digit in num if digit in prime_hex_digits)", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 70, "duration": 4.296364784240723, "task_id": "HumanEval/78"}
{"generated_code": "def decimal_to_binary(decimal):\n    binary_str = bin(decimal)[2:]  # convert to binary and remove the '0b' prefix\n    return f\"db{binary_str}db\"", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 44, "duration": 2.8562440872192383, "task_id": "HumanEval/79"}
{"generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 80, "duration": 9.004127025604248, "task_id": "HumanEval/80"}
{"generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for g in grades:\n        if g == 4.0: \n            letter_grades.append('A+')\n        elif g > 3.7: \n            letter_grades.append('A')\n        elif g > 3.3: \n            letter_grades.append('A-')\n        elif g > 3.0: \n            letter_grades.append('B+')\n        elif g > 2.7: \n            letter_grades.append('B')\n        elif g > 2.3: \n            letter_grades.append('B-')\n        elif g > 2.0: \n            letter_grades.append('C+')\n        elif g > 1.7: \n            letter_grades.append('C')\n        elif g > 1.3: \n            letter_grades.append('C-')\n        elif g > 1.0: \n            letter_grades.append('D+')\n        elif g > 0.7: \n            letter_grades.append('D')\n        elif g > 0.0: \n            letter_grades.append('D-')\n        else: \n            letter_grades.append('E')\n    return letter_grades", "is_solved": true, "iteration": 0, "prompt_tokens": 320, "completion_tokens": 265, "duration": 11.700199842453003, "task_id": "HumanEval/81"}
{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 69, "duration": 3.6344518661499023, "task_id": "HumanEval/82"}
{"generated_code": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_of_digits)[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 51, "duration": 3.8922150135040283, "task_id": "HumanEval/84"}
{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 105, "completion_tokens": 40, "duration": 2.75032114982605, "task_id": "HumanEval/85"}
{"generated_code": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 27, "duration": 2.151890754699707, "task_id": "HumanEval/86"}
{"generated_code": "def get_row(lst, x):\n    \"\"\"\n    Given a 2D list `lst` and an integer `x`, find all occurrences of `x` in `lst`,\n    and return a list of tuples representing their coordinates in the format (row, column).\n    The coordinates are sorted first by row in ascending order, then by column in descending order.\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 136, "duration": 7.588098526000977, "task_id": "HumanEval/87"}
{"generated_code": "def sort_array(array):\n    if not array or len(array) == 1:\n        return array.copy()\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "is_solved": true, "iteration": 0, "prompt_tokens": 253, "completion_tokens": 61, "duration": 4.852056980133057, "task_id": "HumanEval/88"}
{"generated_code": "def encrypt(s):\n    \"\"\"Encrypts the input string by shifting letters down by 4 places.\"\"\"\n    encrypted = ''\n    for char in s:\n        if 'a' <= char <= 'z':\n            encrypted += chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n        elif 'A' <= char <= 'Z':\n            encrypted += chr((ord(char) - ord('A') + 4) % 26 + ord('A'))\n        else:\n            encrypted += char\n    return encrypted", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 118, "duration": 6.16865086555481, "task_id": "HumanEval/89"}
{"generated_code": "def next_smallest(lst):\n    \"\"\"\n    Returns the 2nd smallest element of the list. Returns None if there is no such element.\n    \"\"\"\n    unique_sorted_lst = sorted(set(lst))\n    if len(unique_sorted_lst) < 2:\n        return None\n    else:\n        return unique_sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 70, "duration": 5.281777381896973, "task_id": "HumanEval/90"}
{"generated_code": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 56, "duration": 3.67219877243042, "task_id": "HumanEval/92"}
{"generated_code": "def largest_prime_sum(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    return sum([int(digit) for digit in str(max_prime)])", "is_solved": true, "iteration": 0, "prompt_tokens": 336, "completion_tokens": 109, "duration": 6.138820648193359, "task_id": "HumanEval/94"}
{"generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    lower_case = all(isinstance(key, str) and key.islower() for key in keys)\n    upper_case = all(isinstance(key, str) and key.isupper() for key in keys)\n    return lower_case or upper_case", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 74, "duration": 5.66085147857666, "task_id": "HumanEval/95"}
{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [i for i in range(2, n) if is_prime(i)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 86, "duration": 4.624057769775391, "task_id": "HumanEval/96"}
{"generated_code": "def multiply(a, b):\n    \"\"\"Returns the product of the unit digits of two integers.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 42, "duration": 2.7824454307556152, "task_id": "HumanEval/97"}
{"generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = 'AEIOU'\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 103, "duration": 5.227121353149414, "task_id": "HumanEval/98"}
{"generated_code": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    '''\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 92, "duration": 6.353636026382446, "task_id": "HumanEval/99"}
{"generated_code": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]", "is_solved": true, "iteration": 0, "prompt_tokens": 182, "completion_tokens": 25, "duration": 3.4358692169189453, "task_id": "HumanEval/100"}
{"generated_code": "def words_string(s):\n    \"\"\"\n    Split the string into words separated by commas or spaces and return an array of the words.\n    \"\"\"\n    import re\n    return re.findall(r'\\b\\w+\\b', s)", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 50, "duration": 6.107905387878418, "task_id": "HumanEval/101"}
{"generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x, y and returns the biggest even integer number that is in the range [x, y] inclusive. If there's no such number, then the function should return -1.\"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 89, "duration": 5.985353708267212, "task_id": "HumanEval/102"}
{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 43, "duration": 4.151994228363037, "task_id": "HumanEval/103"}
{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 37, "duration": 5.314167737960815, "task_id": "HumanEval/104"}
{"generated_code": "def by_length(arr):\n    num_to_word = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    return [num_to_word[num] for num in reversed_arr]", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 118, "duration": 7.696850776672363, "task_id": "HumanEval/105"}
{"generated_code": "def f(n):\n    \"\"\" Returns a list of size n, with factorial values for even indexes and sum of numbers for odd indexes. \"\"\"\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n        \n    def sum_numbers(x):\n        return sum(range(1, x+1))\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_numbers(i))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 127, "duration": 11.082646608352661, "task_id": "HumanEval/106"}
{"generated_code": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \"\"\"\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    \n    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 141, "duration": 9.035115480422974, "task_id": "HumanEval/107"}
{"generated_code": "def move_one_ball(arr):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[(i + 1) % n]:\n            count += 1\n    return count <= 1", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 58, "duration": 5.8650219440460205, "task_id": "HumanEval/109"}
{"generated_code": "def exchange(lst1, lst2):\n    \"\"\"\n    Determines if it is possible to exchange elements between two lists to make the first list all even numbers.\n    \"\"\"\n    # Count the number of even numbers needed for lst1 and available in lst2\n    needed_evens = sum(1 for x in lst1 if x % 2 != 0)\n    available_evens = sum(1 for x in lst2 if x % 2 == 0)\n    \n    # If there are enough even numbers in lst2 to replace the odd numbers in lst1, return \"YES\"\n    if needed_evens <= available_evens:\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": true, "iteration": 0, "prompt_tokens": 247, "completion_tokens": 147, "duration": 12.99392294883728, "task_id": "HumanEval/110"}
{"generated_code": "def histogram(test):\n    if not test:\n        return {}\n    words = test.split()\n    counts = {}\n    for word in words:\n        counts[word] = counts.get(word, 0) + 1\n    max_count = max(counts.values())\n    return {word: count for word, count in counts.items() if count == max_count}", "is_solved": true, "iteration": 0, "prompt_tokens": 201, "completion_tokens": 77, "duration": 6.195828199386597, "task_id": "HumanEval/111"}
{"generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 212, "completion_tokens": 39, "duration": 5.42903208732605, "task_id": "HumanEval/112"}
{"generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 223, "completion_tokens": 75, "duration": 6.297055006027222, "task_id": "HumanEval/113"}
{"generated_code": "import re\n\ndef is_bored(S):\n    \"\"\"\n    Counts the number of boredoms in a given string.\n    \n    Parameters:\n    S (str): A string of words.\n    \n    Returns:\n    int: The number of boredoms.\n    \"\"\"\n    # Split the string into sentences\n    sentences = [sentence.strip() for sentence in re.split('[.?!]', S) if sentence]\n    # Count sentences that start with \"I \"\n    boredom_count = sum(sentence.startswith(\"I \") for sentence in sentences)\n    return boredom_count", "is_solved": true, "iteration": 1, "prompt_tokens": 1179, "completion_tokens": 283, "duration": 12.045984983444214, "task_id": "HumanEval/91"}
{"generated_code": "def count_nums(arr):\n    def sum_of_digits(num):\n        if num >= 0:\n            return sum(int(digit) for digit in str(num))\n        else:\n            # Correctly handle negative numbers by summing the digits as if they were positive\n            return -int(str(num)[1]) + sum(int(digit) for digit in str(num)[2:])\n    \n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "is_solved": true, "iteration": 1, "prompt_tokens": 1320, "completion_tokens": 264, "duration": 16.779531002044678, "task_id": "HumanEval/108"}
{"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_factors = 0\n    for i in range(2, a + 1):\n        if a % i == 0 and is_prime(i):\n            while a % i == 0:\n                a = a // i\n                prime_factors += 1\n        if prime_factors > 3:\n            break\n    \n    return prime_factors == 3", "is_solved": true, "iteration": 1, "prompt_tokens": 1249, "completion_tokens": 422, "duration": 22.478158235549927, "task_id": "HumanEval/75"}
{"generated_code": "def encode(message):\n    vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    return ''.join(vowels[c] if c in vowels else c.swapcase() for c in message)", "is_solved": false, "iteration": 2, "prompt_tokens": 2374, "completion_tokens": 766, "duration": 36.47417759895325, "task_id": "HumanEval/93"}
{"generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 2 * 9 ** (n - 1) - 8 ** (n - 1)", "is_solved": false, "iteration": 2, "prompt_tokens": 1841, "completion_tokens": 688, "duration": 37.67361664772034, "task_id": "HumanEval/83"}
{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 60, "duration": 6.806171894073486, "task_id": "HumanEval/114"}
{"generated_code": "def sort_array(arr):\n    \"\"\"\n    Sorts an array of non-negative integers based on the number of ones in their binary representation,\n    then by their decimal values if the number of ones is the same.\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 220, "completion_tokens": 67, "duration": 6.418631076812744, "task_id": "HumanEval/116"}
{"generated_code": "def select_words(s, n):\n    \"\"\"\n    Given a string s and a natural number n, this function returns a list of all words from string s that contain exactly n consonants.\n    \"\"\"\n    def consonant_count(word):\n        return sum(1 for char in word.lower() if char in \"bcdfghjklmnpqrstvwxyz\")\n    \n    return [word for word in s.split() if consonant_count(word) == n]", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 97, "duration": 8.439436435699463, "task_id": "HumanEval/117"}
{"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 40, "duration": 5.6258039474487305, "task_id": "HumanEval/121"}
{"generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 == 1:\n            odd_numbers.append(n)\n        n = 3*n + 1 if n % 2 else n // 2\n    odd_numbers.append(1)  # Adding 1 at the end, as it's always part of the sequence\n    return sorted(odd_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 281, "completion_tokens": 116, "duration": 8.040536403656006, "task_id": "HumanEval/123"}
{"generated_code": "def valid_date(date):\n    # Check if the date is in the correct format\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    month, day, year = parts\n    \n    # Check if year, month, and day are digits\n    if not (year.isdigit() and month.isdigit() and day.isdigit()):\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n    \n    # Check if the day is valid\n    if day < 1:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n    elif month in [4, 6, 9, 11] and day > 30:\n        return False\n    elif month == 2 and day > 29:\n        return False\n    \n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 313, "completion_tokens": 254, "duration": 15.975306272506714, "task_id": "HumanEval/124"}
{"generated_code": "def is_sorted(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if lst.count(lst[i]) > 2:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 299, "completion_tokens": 56, "duration": 6.425717115402222, "task_id": "HumanEval/126"}
{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        sign_product *= (1 if num > 0 else -1 if num < 0 else 0)\n        magnitude_sum += abs(num)\n    return magnitude_sum * sign_product", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 77, "duration": 6.130433082580566, "task_id": "HumanEval/128"}
{"generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            has_odd = True\n            product *= int(digit)\n    return product if has_odd else 0", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 63, "duration": 7.227850675582886, "task_id": "HumanEval/131"}
{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 27, "duration": 5.573691129684448, "task_id": "HumanEval/133"}
{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt or not txt.strip() or not txt[-1].isalpha():\n        return False\n    if txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == \" \"):\n        return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 70, "duration": 7.508548259735107, "task_id": "HumanEval/134"}
{"generated_code": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 153, "completion_tokens": 49, "duration": 6.526432991027832, "task_id": "HumanEval/135"}
{"generated_code": "def largest_smallest_integers(lst):\n    negative_integers = [x for x in lst if x < 0]\n    positive_integers = [x for x in lst if x > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)", "is_solved": true, "iteration": 0, "prompt_tokens": 188, "completion_tokens": 90, "duration": 8.789367914199829, "task_id": "HumanEval/136"}
{"generated_code": "def compare_one(a, b):\n    def convert(val):\n        if isinstance(val, str):\n            val = val.replace(',', '.')\n        return float(val)\n    \n    a_converted = convert(a)\n    b_converted = convert(b)\n    \n    if a_converted > b_converted:\n        return a\n    elif b_converted > a_converted:\n        return b\n    else:\n        return None", "is_solved": true, "iteration": 0, "prompt_tokens": 191, "completion_tokens": 89, "duration": 8.596368312835693, "task_id": "HumanEval/137"}
{"generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # Since the smallest sum of 4 positive even numbers is 2+2+2+2=8,\n    # any number less than 8 cannot be written as such a sum.\n    if n < 8:\n        return False\n    # For a number to be written as a sum of 4 even numbers, it must be even itself.\n    # Any even number greater than or equal to 8 can be represented as the sum\n    # of four even numbers (for example, 8 itself is 2+2+2+2, and for any even number\n    # greater than 8, we can adjust the sum by increasing the first addend).\n    return n % 2 == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 127, "completion_tokens": 185, "duration": 10.780973434448242, "task_id": "HumanEval/138"}
{"generated_code": "def special_factorial(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 69, "duration": 8.691449642181396, "task_id": "HumanEval/139"}
{"generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    import re\n    # Replace 3 or more spaces with '-'\n    text = re.sub(r' {3,}', '-', text)\n    # Replace remaining spaces (1 or 2) with '_'\n    text = text.replace(' ', '_')\n    return text", "is_solved": true, "iteration": 0, "prompt_tokens": 156, "completion_tokens": 107, "duration": 8.816003561019897, "task_id": "HumanEval/140"}
{"generated_code": "def file_name_check(file_name):\n    # Check if the file name has exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into name and extension\n    name, extension = file_name.split('.')\n    \n    # Check if the name part is not empty and starts with a letter\n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    # Check if the extension is valid\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Check if there are more than three digits in the file name\n    digits_count = sum(c.isdigit() for c in name)\n    if digits_count > 3:\n        return 'No'\n    \n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 171, "duration": 11.663620710372925, "task_id": "HumanEval/141"}
{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 46, "duration": 6.397021055221558, "task_id": "HumanEval/142"}
{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return ' '.join(word for word in sentence.split() if is_prime(len(word)))", "is_solved": true, "iteration": 0, "prompt_tokens": 197, "completion_tokens": 81, "duration": 8.922763109207153, "task_id": "HumanEval/143"}
{"generated_code": "def simplify(x, n):\n    def parse_fraction(fraction):\n        numerator, denominator = map(int, fraction.split('/'))\n        return numerator, denominator\n\n    x_numerator, x_denominator = parse_fraction(x)\n    n_numerator, n_denominator = parse_fraction(n)\n\n    result_numerator = x_numerator * n_numerator\n    result_denominator = x_denominator * n_denominator\n\n    # Check if result is a whole number\n    return result_numerator % result_denominator == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 110, "duration": 9.045788049697876, "task_id": "HumanEval/144"}
{"generated_code": "def specialFilter(nums):\n    def is_odd_and_greater_than_10(n):\n        if n <= 10:\n            return False\n        str_n = str(abs(n))\n        return int(str_n[0]) % 2 != 0 and int(str_n[-1]) % 2 != 0\n\n    return sum(is_odd_and_greater_than_10(num) for num in nums)", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 84, "duration": 8.241860628128052, "task_id": "HumanEval/146"}
{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start = min(planets.index(planet1), planets.index(planet2))\n    end = max(planets.index(planet1), planets.index(planet2))\n    \n    return tuple(planets[start+1:end])", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 112, "duration": 10.3786039352417, "task_id": "HumanEval/148"}
{"generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list first alphabetically, then by length\n    even_length_strings.sort()  # Alphabetical sort\n    even_length_strings.sort(key=len)  # Length sort\n    return even_length_strings", "is_solved": true, "iteration": 0, "prompt_tokens": 237, "completion_tokens": 85, "duration": 6.565547943115234, "task_id": "HumanEval/149"}
{"generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 61, "duration": 8.51151967048645, "task_id": "HumanEval/150"}
{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 40, "duration": 5.37906813621521, "task_id": "HumanEval/151"}
{"generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(guess, game)]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 35, "duration": 6.192361354827881, "task_id": "HumanEval/152"}
{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        return CAP - SM\n\n    strongest_extension = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_extension}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 78, "duration": 7.732594013214111, "task_id": "HumanEval/153"}
{"generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 115, "completion_tokens": 71, "duration": 10.428183317184448, "task_id": "HumanEval/155"}
{"generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 204, "duration": 11.66052770614624, "task_id": "HumanEval/156"}
{"generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 45, "duration": 7.329470634460449, "task_id": "HumanEval/157"}
{"generated_code": "def eat(number, need, remaining):\n    eaten = min(need, remaining)\n    total_eaten = number + eaten\n    remaining -= eaten\n    return [total_eaten, remaining]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 44, "duration": 7.473829746246338, "task_id": "HumanEval/159"}
{"generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for op, num in zip(operator, operand[1:]):\n        expression += f' {op} {num}'\n    return eval(expression)", "is_solved": true, "iteration": 0, "prompt_tokens": 257, "completion_tokens": 51, "duration": 8.592001676559448, "task_id": "HumanEval/160"}
{"generated_code": "def solve(s):\n    if all(not c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.lower() if c.isupper() else c.upper() if c.islower() else c for c in s)", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 58, "duration": 7.316079378128052, "task_id": "HumanEval/161"}
{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 99, "duration": 8.60674786567688, "task_id": "HumanEval/162"}
{"generated_code": "def get_max_triples(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # Generate the array\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n\n    # Iterate through all possible triples\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 134, "duration": 10.993800401687622, "task_id": "HumanEval/147"}
{"generated_code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    return sorted(sorted(arr, reverse=True)[:k])", "is_solved": true, "iteration": 1, "prompt_tokens": 1676, "completion_tokens": 166, "duration": 13.10579252243042, "task_id": "HumanEval/120"}
{"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return [word.strip() for word in txt.split(',')]\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 1)", "is_solved": true, "iteration": 1, "prompt_tokens": 1168, "completion_tokens": 270, "duration": 18.718003749847412, "task_id": "HumanEval/125"}
{"generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        \"\"\"Check if a number is prime.\"\"\"\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    start1, end1 = interval1\n    start2, end2 = interval2\n    start = max(start1, start2)\n    end = min(end1, end2)\n    if start > end:\n        return \"NO\"\n    length = end - start\n    return \"YES\" if is_prime(length) else \"NO\"", "is_solved": true, "iteration": 1, "prompt_tokens": 1583, "completion_tokens": 402, "duration": 21.211548328399658, "task_id": "HumanEval/127"}
{"generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if len(str(abs(x))) <= 2)", "is_solved": true, "iteration": 1, "prompt_tokens": 1063, "completion_tokens": 159, "duration": 17.24721360206604, "task_id": "HumanEval/122"}
{"generated_code": "def match_parens(lst):\n    str1, str2 = lst\n\n    # Function to check if a string can be balanced or not\n    def is_balanced(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return True\n\n    # Check both possible concatenations\n    concat1 = str1 + str2\n    concat2 = str2 + str1\n\n    # Both strings must be individually capable of being balanced\n    # and the concatenation must not result in a negative balance at any point\n    if is_balanced(concat1) or is_balanced(concat2):\n        # Check if the overall balance of the concatenated strings is 0\n        overall_balance = concat1.count('(') - concat1.count(')')\n        if overall_balance == 0:\n            return 'Yes'\n    return 'No'", "is_solved": true, "iteration": 1, "prompt_tokens": 1547, "completion_tokens": 456, "duration": 24.100048065185547, "task_id": "HumanEval/119"}
{"generated_code": "def find_max(words):\n    return min(sorted(words, key=lambda word: (-len(set(word)), word)))", "is_solved": false, "iteration": 2, "prompt_tokens": 2276, "completion_tokens": 302, "duration": 26.5842764377594, "task_id": "HumanEval/158"}
{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    # Reverse iterate over the word to find the closest vowel from the right\n    for i in range(len(word) - 1, -1, -1):\n        # Check if the current character is a vowel\n        if word[i] in vowels:\n            # Ensure it's not the first or last character, and it's surrounded by consonants\n            if i != 0 and i != len(word) - 1 and word[i-1] not in vowels and word[i+1] not in vowels:\n                return word[i]\n    return \"\"", "is_solved": true, "iteration": 2, "prompt_tokens": 2603, "completion_tokens": 623, "duration": 36.88878917694092, "task_id": "HumanEval/118"}
{"generated_code": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    extended_a = a + a\n    for i in range(len(b)):\n        rotated_b = b[i:] + b[:i]\n        if rotated_b in extended_a:\n            return True\n    return False", "is_solved": false, "iteration": 2, "prompt_tokens": 1962, "completion_tokens": 436, "duration": 24.183857202529907, "task_id": "HumanEval/154"}
{"generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    even_digits = [0, 2, 4, 6, 8]\n    result = []\n\n    for i in range(min(a, b), max(a, b) + 1):\n        if all(int(digit) in even_digits for digit in str(i)):\n            result.append(i)\n\n    return result", "is_solved": false, "iteration": 2, "prompt_tokens": 2082, "completion_tokens": 506, "duration": 31.444748401641846, "task_id": "HumanEval/163"}
{"generated_code": "def max_fill(grid, capacity):\n    import math\n    total_water_units = sum(sum(row) for row in grid)\n    return math.ceil(total_water_units / capacity)", "is_solved": false, "iteration": 2, "prompt_tokens": 2723, "completion_tokens": 304, "duration": 18.9475839138031, "task_id": "HumanEval/115"}
{"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "is_solved": false, "iteration": 2, "prompt_tokens": 2633, "completion_tokens": 368, "duration": 24.192497968673706, "task_id": "HumanEval/145"}
{"generated_code": "def is_nested(string):\n    stack = []\n    nested_found = False  # Flag to indicate if a nested bracket has been found\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n                nested_found = True  # Mark that a nested bracket sequence was found\n            else:\n                # If a closing bracket is found without a matching opening bracket\n                return False\n    # Return True only if nested brackets were found and the stack is empty (all brackets matched)\n    return nested_found and not stack", "is_solved": false, "iteration": 2, "prompt_tokens": 2666, "completion_tokens": 671, "duration": 45.191226959228516, "task_id": "HumanEval/132"}
{"generated_code": "def tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    trib = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            trib.append(1 + i / 2)\n        else:\n            trib.append(trib[i - 1] + trib[i - 2] + trib[i - 1])\n    return trib", "is_solved": false, "iteration": 2, "prompt_tokens": 3922, "completion_tokens": 652, "duration": 51.8080620765686, "task_id": "HumanEval/130"}
{"generated_code": "from heapq import heappush, heappop\n\ndef minPath(grid, k):\n    N = len(grid)\n    moves = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    heap = [(grid[i][j], i, j, [grid[i][j]]) for i in range(N) for j in range(N)]\n    best = {}\n\n    while heap:\n        cost, x, y, path = heappop(heap)\n        if (x, y, len(path)) in best and best[(x, y, len(path))] <= path:\n            continue\n        best[(x, y, len(path))] = path\n        if len(path) == k:\n            return path\n        for dx, dy in moves:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                newPath = path + [grid[nx][ny]]\n                heappush(heap, (cost + grid[nx][ny], nx, ny, newPath))", "is_solved": false, "iteration": 2, "prompt_tokens": 6195, "completion_tokens": 1103, "duration": 50.61113429069519, "task_id": "HumanEval/129"}
{"generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 67, "duration": 4.0209877490997314, "task_id": "HumanEval/0"}
{"generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    stack = []\n    result = []\n    current = \"\"\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current += char\n        elif char == ')':\n            stack.pop()\n            current += char\n            if not stack:  # If stack is empty, a group has ended\n                result.append(current)\n                current = \"\"\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 165, "completion_tokens": 118, "duration": 8.902730226516724, "task_id": "HumanEval/1"}
{"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": true, "iteration": 0, "prompt_tokens": 135, "completion_tokens": 21, "duration": 2.7102606296539307, "task_id": "HumanEval/2"}
{"generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 53, "duration": 3.8415157794952393, "task_id": "HumanEval/3"}
{"generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 49, "duration": 2.99957537651062, "task_id": "HumanEval/4"}
{"generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.extend([delimeter, number])\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 63, "duration": 4.371600151062012, "task_id": "HumanEval/5"}
{"generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    results = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        results.append(max_depth)\n    return results", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 103, "duration": 5.678426265716553, "task_id": "HumanEval/6"}
{"generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]", "is_solved": true, "iteration": 0, "prompt_tokens": 143, "completion_tokens": 104, "duration": 8.238842725753784, "task_id": "HumanEval/7"}
{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 78, "duration": 6.69270133972168, "task_id": "HumanEval/8"}
{"generated_code": "def make_palindrome(string: str) -> str:\n    if string == string[::-1]:\n        return string\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 70, "duration": 4.749827861785889, "task_id": "HumanEval/10"}
{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.15260910987854, "task_id": "HumanEval/11"}
{"generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 39, "duration": 2.8544228076934814, "task_id": "HumanEval/12"}
{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 39, "duration": 2.4595766067504883, "task_id": "HumanEval/13"}
{"generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 73, "duration": 3.6329903602600098, "task_id": "HumanEval/14"}
{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 31, "duration": 2.760759115219116, "task_id": "HumanEval/15"}
{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.3197572231292725, "task_id": "HumanEval/16"}
{"generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats", "is_solved": true, "iteration": 0, "prompt_tokens": 222, "completion_tokens": 83, "duration": 4.54159688949585, "task_id": "HumanEval/17"}
{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 72, "duration": 4.7304723262786865, "task_id": "HumanEval/18"}
{"generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n                'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 106, "duration": 5.555402755737305, "task_id": "HumanEval/19"}
{"generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i+1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair", "is_solved": true, "iteration": 0, "prompt_tokens": 216, "completion_tokens": 117, "duration": 5.754441499710083, "task_id": "HumanEval/20"}
{"generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(x - min_num) / range_num for x in numbers]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 104, "duration": 9.0089693069458, "task_id": "HumanEval/21"}
{"generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 103, "duration": 5.303599834442139, "task_id": "HumanEval/22"}
{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 2.649064302444458, "task_id": "HumanEval/23"}
{"generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 44, "duration": 3.682873249053955, "task_id": "HumanEval/24"}
{"generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 79, "duration": 4.361755609512329, "task_id": "HumanEval/25"}
{"generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    counts = {}\n    for number in numbers:\n        counts[number] = counts.get(number, 0) + 1\n    return [number for number in numbers if counts[number] == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 95, "duration": 7.0386962890625, "task_id": "HumanEval/26"}
{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 35, "duration": 2.9268834590911865, "task_id": "HumanEval/27"}
{"generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 61, "duration": 3.5149357318878174, "task_id": "HumanEval/28"}
{"generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that start with a given prefix.\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 60, "duration": 3.807779312133789, "task_id": "HumanEval/29"}
{"generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [x for x in l if x > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 35, "duration": 2.8653414249420166, "task_id": "HumanEval/30"}
{"generated_code": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 117, "duration": 5.848691701889038, "task_id": "HumanEval/31"}
{"generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    from scipy.optimize import root\n    def func(x):\n        return poly(xs, x)\n    \n    initial_guess = 0.0\n    sol = root(func, initial_guess)\n    if sol.success:\n        return sol.x[0]\n    else:\n        raise ValueError(\"Root finding did not converge\")", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 228, "duration": 10.703521966934204, "task_id": "HumanEval/32"}
{"generated_code": "def sort_third(l: list) -> list:\n    # Extract elements at indices divisible by 3\n    divisible_by_3 = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort the extracted elements\n    divisible_by_3_sorted = sorted(divisible_by_3)\n    # Replace elements in the original list with sorted ones at the correct positions\n    for i, value in enumerate(divisible_by_3_sorted):\n        l[i * 3] = value\n    return l", "is_solved": true, "iteration": 0, "prompt_tokens": 200, "completion_tokens": 116, "duration": 7.125142335891724, "task_id": "HumanEval/33"}
{"generated_code": "def unique(l: list):\n    return sorted(set(l))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 16, "duration": 1.729191780090332, "task_id": "HumanEval/34"}
{"generated_code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 85, "duration": 8.01661229133606, "task_id": "HumanEval/35"}
{"generated_code": "def sort_even(l: list) -> list:\n    even_indices = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even_indices.sort()\n    return [even_indices.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 71, "duration": 4.339508295059204, "task_id": "HumanEval/37"}
{"generated_code": "def decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iteration": 0, "prompt_tokens": 208, "completion_tokens": 137, "duration": 9.78336787223816, "task_id": "HumanEval/38"}
{"generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib():\n        a, b = 0, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    count = 0\n    for fib_num in fib():\n        if fib_num > 1 and is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 146, "duration": 6.8159308433532715, "task_id": "HumanEval/39"}
{"generated_code": "def triples_sum_to_zero(l: list):\n    n = len(l)\n    l.sort()\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 108, "duration": 9.359532356262207, "task_id": "HumanEval/40"}
{"generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Given n, the number of cars driving left to right and the same number driving right to left,\n    this function calculates the number of collisions that occur.\n    \"\"\"\n    return n**2", "is_solved": true, "iteration": 0, "prompt_tokens": 201, "completion_tokens": 57, "duration": 4.631146669387817, "task_id": "HumanEval/41"}
{"generated_code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 118, "duration": 5.376549959182739, "task_id": "HumanEval/42"}
{"generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 42, "duration": 3.8720717430114746, "task_id": "HumanEval/43"}
{"generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    digits.reverse()\n    return ''.join(digits)", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 61, "duration": 4.068792104721069, "task_id": "HumanEval/44"}
{"generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return (a * h) / 2", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 55, "duration": 3.3317267894744873, "task_id": "HumanEval/45"}
{"generated_code": "def fib4(n: int) -> int:\n    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    if n == 3: return 0\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 119, "duration": 6.260672330856323, "task_id": "HumanEval/46"}
{"generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "is_solved": true, "iteration": 0, "prompt_tokens": 125, "completion_tokens": 61, "duration": 5.067075967788696, "task_id": "HumanEval/47"}
{"generated_code": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 36, "duration": 2.997685432434082, "task_id": "HumanEval/48"}
{"generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 44, "duration": 3.229511022567749, "task_id": "HumanEval/49"}
{"generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": true, "iteration": 0, "prompt_tokens": 140, "completion_tokens": 43, "duration": 3.1155734062194824, "task_id": "HumanEval/50"}
{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 31, "duration": 3.8341293334960938, "task_id": "HumanEval/51"}
{"generated_code": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 29, "duration": 2.3202648162841797, "task_id": "HumanEval/52"}
{"generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 60, "duration": 4.088814735412598, "task_id": "HumanEval/53"}
{"generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 31, "duration": 2.755746603012085, "task_id": "HumanEval/54"}
{"generated_code": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 79, "duration": 5.1637444496154785, "task_id": "HumanEval/55"}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count += 1\n        elif bracket == '>':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 71, "duration": 5.743376731872559, "task_id": "HumanEval/56"}
{"generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 60, "duration": 3.8900606632232666, "task_id": "HumanEval/36"}
{"generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:  # Check if the list is empty\n        return []\n    max_rolling = []\n    current_max = numbers[0]\n    for number in numbers:\n        if number > current_max:\n            current_max = number\n        max_rolling.append(current_max)\n    return max_rolling", "is_solved": true, "iteration": 1, "prompt_tokens": 973, "completion_tokens": 215, "duration": 11.5243501663208, "task_id": "HumanEval/9"}
{"generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 61, "duration": 4.09354829788208, "task_id": "HumanEval/57"}
{"generated_code": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(set(l1) & set(l2))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 39, "duration": 3.0942766666412354, "task_id": "HumanEval/58"}
{"generated_code": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime_factor = 1\n    i = 2\n    \n    while i <= n ** 0.5:\n        if n % i == 0 and is_prime(i):\n            prime_factor = i\n            while n % i == 0:\n                n //= i\n        i += 1\n    \n    if n > 2 and is_prime(n):\n        prime_factor = n\n\n    return prime_factor", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 174, "duration": 9.62759804725647, "task_id": "HumanEval/59"}
{"generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return n * (n + 1) // 2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 46, "duration": 3.125488042831421, "task_id": "HumanEval/60"}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for bracket in brackets:\n        if bracket == '(':\n            balance += 1\n        elif bracket == ')':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 71, "duration": 4.898189544677734, "task_id": "HumanEval/61"}
{"generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 28, "duration": 2.6573143005371094, "task_id": "HumanEval/62"}
{"generated_code": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            d = a + b + c\n            a, b, c = b, c, d\n        return c", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 108, "duration": 7.011068105697632, "task_id": "HumanEval/63"}
{"generated_code": "def vowels_count(s):\n    \"\"\"\n    Add more test cases.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s.endswith('y') or s.endswith('Y'):\n        count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 76, "duration": 4.908478260040283, "task_id": "HumanEval/64"}
{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    len_x = len(x_str)\n    if shift > len_x:\n        return x_str[::-1]\n    shift %= len_x\n    return x_str[-shift:] + x_str[:-shift]", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 59, "duration": 5.130709886550903, "task_id": "HumanEval/65"}
{"generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.162553071975708, "task_id": "HumanEval/66"}
{"generated_code": "def fruit_distribution(s, n):\n    numbers = [int(i) for i in s.split() if i.isdigit()]\n    return n - sum(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 35, "duration": 3.0522823333740234, "task_id": "HumanEval/67"}
{"generated_code": "def pluck(arr):\n    even_values = [(value, index) for index, value in enumerate(arr) if value % 2 == 0 and value >= 0]\n    if not even_values:\n        return []\n    return list(min(even_values))", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 57, "duration": 3.5284690856933594, "task_id": "HumanEval/68"}
{"generated_code": "def search(lst):\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    max_val = -1\n    for key, value in count_dict.items():\n        if key <= value and key > max_val:\n            max_val = key\n\n    return max_val", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 86, "duration": 6.029757261276245, "task_id": "HumanEval/69"}
{"generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 51, "duration": 4.173398017883301, "task_id": "HumanEval/70"}
{"generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    '''\n    # Check if the sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Calculate the area using Heron's formula\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    \n    return round(area, 2)", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 157, "duration": 9.120259046554565, "task_id": "HumanEval/71"}
{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.5521044731140137, "task_id": "HumanEval/72"}
{"generated_code": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 67, "duration": 8.294924974441528, "task_id": "HumanEval/73"}
{"generated_code": "def total_match(lst1, lst2):\n    if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2):\n        return lst1\n    else:\n        return lst2", "is_solved": true, "iteration": 0, "prompt_tokens": 243, "completion_tokens": 49, "duration": 3.180537700653076, "task_id": "HumanEval/74"}
{"generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 49, "duration": 3.2270283699035645, "task_id": "HumanEval/76"}
{"generated_code": "def iscube(a):\n    if a >= 0:\n        root = round(a ** (1/3))\n        return root**3 == a\n    else:\n        root = round(abs(a) ** (1/3))\n        return -root**3 == a", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 60, "duration": 3.163822889328003, "task_id": "HumanEval/77"}
{"generated_code": "def hex_key(num):\n    # Define the prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    # Count the number of prime hexadecimal digits in the input string\n    return sum(1 for digit in num if digit in prime_hex_digits)", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 70, "duration": 4.296364784240723, "task_id": "HumanEval/78"}
{"generated_code": "def decimal_to_binary(decimal):\n    binary_str = bin(decimal)[2:]  # convert to binary and remove the '0b' prefix\n    return f\"db{binary_str}db\"", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 44, "duration": 2.8562440872192383, "task_id": "HumanEval/79"}
{"generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 80, "duration": 9.004127025604248, "task_id": "HumanEval/80"}
{"generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for g in grades:\n        if g == 4.0: \n            letter_grades.append('A+')\n        elif g > 3.7: \n            letter_grades.append('A')\n        elif g > 3.3: \n            letter_grades.append('A-')\n        elif g > 3.0: \n            letter_grades.append('B+')\n        elif g > 2.7: \n            letter_grades.append('B')\n        elif g > 2.3: \n            letter_grades.append('B-')\n        elif g > 2.0: \n            letter_grades.append('C+')\n        elif g > 1.7: \n            letter_grades.append('C')\n        elif g > 1.3: \n            letter_grades.append('C-')\n        elif g > 1.0: \n            letter_grades.append('D+')\n        elif g > 0.7: \n            letter_grades.append('D')\n        elif g > 0.0: \n            letter_grades.append('D-')\n        else: \n            letter_grades.append('E')\n    return letter_grades", "is_solved": true, "iteration": 0, "prompt_tokens": 320, "completion_tokens": 265, "duration": 11.700199842453003, "task_id": "HumanEval/81"}
{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 69, "duration": 3.6344518661499023, "task_id": "HumanEval/82"}
{"generated_code": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_of_digits)[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 51, "duration": 3.8922150135040283, "task_id": "HumanEval/84"}
{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 105, "completion_tokens": 40, "duration": 2.75032114982605, "task_id": "HumanEval/85"}
{"generated_code": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 27, "duration": 2.151890754699707, "task_id": "HumanEval/86"}
{"generated_code": "def get_row(lst, x):\n    \"\"\"\n    Given a 2D list `lst` and an integer `x`, find all occurrences of `x` in `lst`,\n    and return a list of tuples representing their coordinates in the format (row, column).\n    The coordinates are sorted first by row in ascending order, then by column in descending order.\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 136, "duration": 7.588098526000977, "task_id": "HumanEval/87"}
{"generated_code": "def sort_array(array):\n    if not array or len(array) == 1:\n        return array.copy()\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "is_solved": true, "iteration": 0, "prompt_tokens": 253, "completion_tokens": 61, "duration": 4.852056980133057, "task_id": "HumanEval/88"}
{"generated_code": "def encrypt(s):\n    \"\"\"Encrypts the input string by shifting letters down by 4 places.\"\"\"\n    encrypted = ''\n    for char in s:\n        if 'a' <= char <= 'z':\n            encrypted += chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n        elif 'A' <= char <= 'Z':\n            encrypted += chr((ord(char) - ord('A') + 4) % 26 + ord('A'))\n        else:\n            encrypted += char\n    return encrypted", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 118, "duration": 6.16865086555481, "task_id": "HumanEval/89"}
{"generated_code": "def next_smallest(lst):\n    \"\"\"\n    Returns the 2nd smallest element of the list. Returns None if there is no such element.\n    \"\"\"\n    unique_sorted_lst = sorted(set(lst))\n    if len(unique_sorted_lst) < 2:\n        return None\n    else:\n        return unique_sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 70, "duration": 5.281777381896973, "task_id": "HumanEval/90"}
{"generated_code": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 56, "duration": 3.67219877243042, "task_id": "HumanEval/92"}
{"generated_code": "def largest_prime_sum(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    return sum([int(digit) for digit in str(max_prime)])", "is_solved": true, "iteration": 0, "prompt_tokens": 336, "completion_tokens": 109, "duration": 6.138820648193359, "task_id": "HumanEval/94"}
{"generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    lower_case = all(isinstance(key, str) and key.islower() for key in keys)\n    upper_case = all(isinstance(key, str) and key.isupper() for key in keys)\n    return lower_case or upper_case", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 74, "duration": 5.66085147857666, "task_id": "HumanEval/95"}
{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [i for i in range(2, n) if is_prime(i)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 86, "duration": 4.624057769775391, "task_id": "HumanEval/96"}
{"generated_code": "def multiply(a, b):\n    \"\"\"Returns the product of the unit digits of two integers.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 42, "duration": 2.7824454307556152, "task_id": "HumanEval/97"}
{"generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = 'AEIOU'\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 103, "duration": 5.227121353149414, "task_id": "HumanEval/98"}
{"generated_code": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    '''\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 92, "duration": 6.353636026382446, "task_id": "HumanEval/99"}
{"generated_code": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]", "is_solved": true, "iteration": 0, "prompt_tokens": 182, "completion_tokens": 25, "duration": 3.4358692169189453, "task_id": "HumanEval/100"}
{"generated_code": "def words_string(s):\n    \"\"\"\n    Split the string into words separated by commas or spaces and return an array of the words.\n    \"\"\"\n    import re\n    return re.findall(r'\\b\\w+\\b', s)", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 50, "duration": 6.107905387878418, "task_id": "HumanEval/101"}
{"generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x, y and returns the biggest even integer number that is in the range [x, y] inclusive. If there's no such number, then the function should return -1.\"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 89, "duration": 5.985353708267212, "task_id": "HumanEval/102"}
{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 43, "duration": 4.151994228363037, "task_id": "HumanEval/103"}
{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 37, "duration": 5.314167737960815, "task_id": "HumanEval/104"}
{"generated_code": "def by_length(arr):\n    num_to_word = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    return [num_to_word[num] for num in reversed_arr]", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 118, "duration": 7.696850776672363, "task_id": "HumanEval/105"}
{"generated_code": "def f(n):\n    \"\"\" Returns a list of size n, with factorial values for even indexes and sum of numbers for odd indexes. \"\"\"\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n        \n    def sum_numbers(x):\n        return sum(range(1, x+1))\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_numbers(i))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 127, "duration": 11.082646608352661, "task_id": "HumanEval/106"}
{"generated_code": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \"\"\"\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    \n    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 141, "duration": 9.035115480422974, "task_id": "HumanEval/107"}
{"generated_code": "def move_one_ball(arr):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[(i + 1) % n]:\n            count += 1\n    return count <= 1", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 58, "duration": 5.8650219440460205, "task_id": "HumanEval/109"}
{"generated_code": "def exchange(lst1, lst2):\n    \"\"\"\n    Determines if it is possible to exchange elements between two lists to make the first list all even numbers.\n    \"\"\"\n    # Count the number of even numbers needed for lst1 and available in lst2\n    needed_evens = sum(1 for x in lst1 if x % 2 != 0)\n    available_evens = sum(1 for x in lst2 if x % 2 == 0)\n    \n    # If there are enough even numbers in lst2 to replace the odd numbers in lst1, return \"YES\"\n    if needed_evens <= available_evens:\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": true, "iteration": 0, "prompt_tokens": 247, "completion_tokens": 147, "duration": 12.99392294883728, "task_id": "HumanEval/110"}
{"generated_code": "def histogram(test):\n    if not test:\n        return {}\n    words = test.split()\n    counts = {}\n    for word in words:\n        counts[word] = counts.get(word, 0) + 1\n    max_count = max(counts.values())\n    return {word: count for word, count in counts.items() if count == max_count}", "is_solved": true, "iteration": 0, "prompt_tokens": 201, "completion_tokens": 77, "duration": 6.195828199386597, "task_id": "HumanEval/111"}
{"generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 212, "completion_tokens": 39, "duration": 5.42903208732605, "task_id": "HumanEval/112"}
{"generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 223, "completion_tokens": 75, "duration": 6.297055006027222, "task_id": "HumanEval/113"}
{"generated_code": "def count_nums(arr):\n    def sum_of_digits(num):\n        if num >= 0:\n            return sum(int(digit) for digit in str(num))\n        else:\n            # Handle negative number by skipping the '-' sign and subtracting twice the first digit to account for its negativity\n            return -2 * int(str(num)[1]) + sum(int(digit) for digit in str(num)[1:])\n    \n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "is_solved": true, "iteration": 1, "prompt_tokens": 1306, "completion_tokens": 257, "duration": 15.770691394805908, "task_id": "HumanEval/108"}
{"generated_code": "import re\n\ndef is_bored(S):\n    \"\"\"\n    Counts the number of boredoms in a given string.\n    \n    Parameters:\n    S (str): A string of words.\n    \n    Returns:\n    int: The number of boredoms.\n    \"\"\"\n    # Split the string into sentences\n    sentences = [sentence.strip() for sentence in re.split('[.?!]', S) if sentence]\n    # Count sentences that start with \"I \"\n    boredom_count = sum(sentence.startswith(\"I \") for sentence in sentences)\n    return boredom_count", "is_solved": true, "iteration": 1, "prompt_tokens": 1184, "completion_tokens": 288, "duration": 15.158827781677246, "task_id": "HumanEval/91"}
{"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            for j in range(i+1, a): # start from i+1 to avoid repeating the same factor\n                if a % (i*j) == 0 and is_prime(j):\n                    k = a // (i*j)\n                    if is_prime(k) and k != i and k != j:\n                        return True\n    return False", "is_solved": false, "iteration": 2, "prompt_tokens": 2323, "completion_tokens": 695, "duration": 53.01027584075928, "task_id": "HumanEval/75"}
{"generated_code": "def encode(message):\n    vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    return ''.join(vowels[c] if c in vowels else c.swapcase() for c in message)", "is_solved": false, "iteration": 2, "prompt_tokens": 2127, "completion_tokens": 518, "duration": 28.570369243621826, "task_id": "HumanEval/93"}
{"generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 2 * 9 ** (n - 1) - 8 ** (n - 1)", "is_solved": false, "iteration": 2, "prompt_tokens": 1801, "completion_tokens": 646, "duration": 33.039615869522095, "task_id": "HumanEval/83"}
{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 60, "duration": 6.806171894073486, "task_id": "HumanEval/114"}
{"generated_code": "def sort_array(arr):\n    \"\"\"\n    Sorts an array of non-negative integers based on the number of ones in their binary representation,\n    then by their decimal values if the number of ones is the same.\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 220, "completion_tokens": 67, "duration": 6.418631076812744, "task_id": "HumanEval/116"}
{"generated_code": "def select_words(s, n):\n    \"\"\"\n    Given a string s and a natural number n, this function returns a list of all words from string s that contain exactly n consonants.\n    \"\"\"\n    def consonant_count(word):\n        return sum(1 for char in word.lower() if char in \"bcdfghjklmnpqrstvwxyz\")\n    \n    return [word for word in s.split() if consonant_count(word) == n]", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 97, "duration": 8.439436435699463, "task_id": "HumanEval/117"}
{"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 40, "duration": 5.6258039474487305, "task_id": "HumanEval/121"}
{"generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 == 1:\n            odd_numbers.append(n)\n        n = 3*n + 1 if n % 2 else n // 2\n    odd_numbers.append(1)  # Adding 1 at the end, as it's always part of the sequence\n    return sorted(odd_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 281, "completion_tokens": 116, "duration": 8.040536403656006, "task_id": "HumanEval/123"}
{"generated_code": "def valid_date(date):\n    # Check if the date is in the correct format\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    month, day, year = parts\n    \n    # Check if year, month, and day are digits\n    if not (year.isdigit() and month.isdigit() and day.isdigit()):\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n    \n    # Check if the day is valid\n    if day < 1:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n    elif month in [4, 6, 9, 11] and day > 30:\n        return False\n    elif month == 2 and day > 29:\n        return False\n    \n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 313, "completion_tokens": 254, "duration": 15.975306272506714, "task_id": "HumanEval/124"}
{"generated_code": "def is_sorted(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if lst.count(lst[i]) > 2:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 299, "completion_tokens": 56, "duration": 6.425717115402222, "task_id": "HumanEval/126"}
{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        sign_product *= (1 if num > 0 else -1 if num < 0 else 0)\n        magnitude_sum += abs(num)\n    return magnitude_sum * sign_product", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 77, "duration": 6.130433082580566, "task_id": "HumanEval/128"}
{"generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            has_odd = True\n            product *= int(digit)\n    return product if has_odd else 0", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 63, "duration": 7.227850675582886, "task_id": "HumanEval/131"}
{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 27, "duration": 5.573691129684448, "task_id": "HumanEval/133"}
{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt or not txt.strip() or not txt[-1].isalpha():\n        return False\n    if txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == \" \"):\n        return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 70, "duration": 7.508548259735107, "task_id": "HumanEval/134"}
{"generated_code": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 153, "completion_tokens": 49, "duration": 6.526432991027832, "task_id": "HumanEval/135"}
{"generated_code": "def largest_smallest_integers(lst):\n    negative_integers = [x for x in lst if x < 0]\n    positive_integers = [x for x in lst if x > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)", "is_solved": true, "iteration": 0, "prompt_tokens": 188, "completion_tokens": 90, "duration": 8.789367914199829, "task_id": "HumanEval/136"}
{"generated_code": "def compare_one(a, b):\n    def convert(val):\n        if isinstance(val, str):\n            val = val.replace(',', '.')\n        return float(val)\n    \n    a_converted = convert(a)\n    b_converted = convert(b)\n    \n    if a_converted > b_converted:\n        return a\n    elif b_converted > a_converted:\n        return b\n    else:\n        return None", "is_solved": true, "iteration": 0, "prompt_tokens": 191, "completion_tokens": 89, "duration": 8.596368312835693, "task_id": "HumanEval/137"}
{"generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # Since the smallest sum of 4 positive even numbers is 2+2+2+2=8,\n    # any number less than 8 cannot be written as such a sum.\n    if n < 8:\n        return False\n    # For a number to be written as a sum of 4 even numbers, it must be even itself.\n    # Any even number greater than or equal to 8 can be represented as the sum\n    # of four even numbers (for example, 8 itself is 2+2+2+2, and for any even number\n    # greater than 8, we can adjust the sum by increasing the first addend).\n    return n % 2 == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 127, "completion_tokens": 185, "duration": 10.780973434448242, "task_id": "HumanEval/138"}
{"generated_code": "def special_factorial(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 69, "duration": 8.691449642181396, "task_id": "HumanEval/139"}
{"generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    import re\n    # Replace 3 or more spaces with '-'\n    text = re.sub(r' {3,}', '-', text)\n    # Replace remaining spaces (1 or 2) with '_'\n    text = text.replace(' ', '_')\n    return text", "is_solved": true, "iteration": 0, "prompt_tokens": 156, "completion_tokens": 107, "duration": 8.816003561019897, "task_id": "HumanEval/140"}
{"generated_code": "def file_name_check(file_name):\n    # Check if the file name has exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into name and extension\n    name, extension = file_name.split('.')\n    \n    # Check if the name part is not empty and starts with a letter\n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    # Check if the extension is valid\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Check if there are more than three digits in the file name\n    digits_count = sum(c.isdigit() for c in name)\n    if digits_count > 3:\n        return 'No'\n    \n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 171, "duration": 11.663620710372925, "task_id": "HumanEval/141"}
{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 46, "duration": 6.397021055221558, "task_id": "HumanEval/142"}
{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return ' '.join(word for word in sentence.split() if is_prime(len(word)))", "is_solved": true, "iteration": 0, "prompt_tokens": 197, "completion_tokens": 81, "duration": 8.922763109207153, "task_id": "HumanEval/143"}
{"generated_code": "def simplify(x, n):\n    def parse_fraction(fraction):\n        numerator, denominator = map(int, fraction.split('/'))\n        return numerator, denominator\n\n    x_numerator, x_denominator = parse_fraction(x)\n    n_numerator, n_denominator = parse_fraction(n)\n\n    result_numerator = x_numerator * n_numerator\n    result_denominator = x_denominator * n_denominator\n\n    # Check if result is a whole number\n    return result_numerator % result_denominator == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 110, "duration": 9.045788049697876, "task_id": "HumanEval/144"}
{"generated_code": "def specialFilter(nums):\n    def is_odd_and_greater_than_10(n):\n        if n <= 10:\n            return False\n        str_n = str(abs(n))\n        return int(str_n[0]) % 2 != 0 and int(str_n[-1]) % 2 != 0\n\n    return sum(is_odd_and_greater_than_10(num) for num in nums)", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 84, "duration": 8.241860628128052, "task_id": "HumanEval/146"}
{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start = min(planets.index(planet1), planets.index(planet2))\n    end = max(planets.index(planet1), planets.index(planet2))\n    \n    return tuple(planets[start+1:end])", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 112, "duration": 10.3786039352417, "task_id": "HumanEval/148"}
{"generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list first alphabetically, then by length\n    even_length_strings.sort()  # Alphabetical sort\n    even_length_strings.sort(key=len)  # Length sort\n    return even_length_strings", "is_solved": true, "iteration": 0, "prompt_tokens": 237, "completion_tokens": 85, "duration": 6.565547943115234, "task_id": "HumanEval/149"}
{"generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 61, "duration": 8.51151967048645, "task_id": "HumanEval/150"}
{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 40, "duration": 5.37906813621521, "task_id": "HumanEval/151"}
{"generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(guess, game)]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 35, "duration": 6.192361354827881, "task_id": "HumanEval/152"}
{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        return CAP - SM\n\n    strongest_extension = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_extension}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 78, "duration": 7.732594013214111, "task_id": "HumanEval/153"}
{"generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 115, "completion_tokens": 71, "duration": 10.428183317184448, "task_id": "HumanEval/155"}
{"generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 204, "duration": 11.66052770614624, "task_id": "HumanEval/156"}
{"generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 45, "duration": 7.329470634460449, "task_id": "HumanEval/157"}
{"generated_code": "def eat(number, need, remaining):\n    eaten = min(need, remaining)\n    total_eaten = number + eaten\n    remaining -= eaten\n    return [total_eaten, remaining]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 44, "duration": 7.473829746246338, "task_id": "HumanEval/159"}
{"generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for op, num in zip(operator, operand[1:]):\n        expression += f' {op} {num}'\n    return eval(expression)", "is_solved": true, "iteration": 0, "prompt_tokens": 257, "completion_tokens": 51, "duration": 8.592001676559448, "task_id": "HumanEval/160"}
{"generated_code": "def solve(s):\n    if all(not c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.lower() if c.isupper() else c.upper() if c.islower() else c for c in s)", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 58, "duration": 7.316079378128052, "task_id": "HumanEval/161"}
{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 99, "duration": 8.60674786567688, "task_id": "HumanEval/162"}
{"generated_code": "def get_max_triples(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # Generate the array\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n\n    # Iterate through all possible triples\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 134, "duration": 10.993800401687622, "task_id": "HumanEval/147"}
{"generated_code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr, sorted in ascending order.\n    \"\"\"\n    return sorted(sorted(arr, reverse=True)[:k])", "is_solved": true, "iteration": 1, "prompt_tokens": 1688, "completion_tokens": 183, "duration": 13.146950721740723, "task_id": "HumanEval/120"}
{"generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if -99 <= x <= 99)", "is_solved": true, "iteration": 1, "prompt_tokens": 1111, "completion_tokens": 206, "duration": 13.51933741569519, "task_id": "HumanEval/122"}
{"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        # Corrected to count lower-case odd order letters (e.g., 'b', 'd', 'f', etc.)\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 1)", "is_solved": true, "iteration": 1, "prompt_tokens": 1176, "completion_tokens": 296, "duration": 20.657724142074585, "task_id": "HumanEval/125"}
{"generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    start1, end1 = interval1\n    start2, end2 = interval2\n    start = max(start1, start2)\n    end = min(end1, end2)\n    if start > end:\n        return \"NO\"\n    # Adjusting the calculation of length to not include the end point for prime check\n    length = end - start\n    return \"YES\" if is_prime(length) else \"NO\"", "is_solved": true, "iteration": 1, "prompt_tokens": 1599, "completion_tokens": 427, "duration": 21.969365119934082, "task_id": "HumanEval/127"}
{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):  # Adjusted range to avoid IndexError\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "is_solved": true, "iteration": 1, "prompt_tokens": 1393, "completion_tokens": 301, "duration": 19.230902433395386, "task_id": "HumanEval/118"}
{"generated_code": "def match_parens(lst):\n    str1, str2 = lst\n    # Try concatenating the strings in both possible orders\n    for option in [str1 + str2, str2 + str1]:\n        balance = 0\n        for char in option:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            # If at any point the balance is negative, the parentheses are not balanced\n            if balance < 0:\n                break\n        # If the balance is 0 after processing the entire string, it is balanced\n        if balance == 0:\n            return 'Yes'\n    return 'No'", "is_solved": true, "iteration": 1, "prompt_tokens": 1618, "completion_tokens": 462, "duration": 24.61002230644226, "task_id": "HumanEval/119"}
{"generated_code": "def find_max(words):\n    return min([word for word in words if len(set(word)) == max(len(set(word)) for word in words)], key=lambda x: (len(set(x)), x))", "is_solved": true, "iteration": 2, "prompt_tokens": 2285, "completion_tokens": 340, "duration": 24.222450256347656, "task_id": "HumanEval/158"}
{"generated_code": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    for i in range(len(b)):\n        rotated_b = b[i:] + b[:i]\n        if rotated_b in a:\n            return True\n    return False", "is_solved": true, "iteration": 2, "prompt_tokens": 1973, "completion_tokens": 456, "duration": 25.68453621864319, "task_id": "HumanEval/154"}
{"generated_code": "def minPath(grid, k):\n    N = len(grid)\n    position_value = {(i, j): grid[i][j] for i in range(N) for j in range(N)}\n    value_position = {v: k for k, v in position_value.items()}\n\n    # Find the position of the smallest value (1) in the grid\n    start_position = value_position[1]\n\n    # Initialize the path with the start value\n    path = [1]\n\n    # Since we can revisit cells, we find the pattern to minimize the path\n    # and repeat it to fill the length k\n    if k > 1:\n        # Find the smallest neighbor of the start position to determine the repeating pattern\n        min_neighbor_value = float('inf')\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nx, ny = start_position[0] + dx, start_position[1] + dy\n            if 0 <= nx < N and 0 <= ny < N and grid[nx][ny] < min_neighbor_value:\n                min_neighbor_value = grid[nx][ny]\n\n        # The path alternates between 1 and its smallest neighbor to ensure it is lexicographically smallest\n        for _ in range(1, k):\n            path.append(min_neighbor_value)\n            if len(path) < k:  # If we haven't reached the required length, add 1 again\n                path.append(1)\n\n    return path[:k]", "is_solved": true, "iteration": 1, "prompt_tokens": 3222, "completion_tokens": 698, "duration": 32.851672887802124, "task_id": "HumanEval/129"}
{"generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    return [i for i in range(min(a, b), max(a, b) + 1) if i % 2 == 0]", "is_solved": false, "iteration": 2, "prompt_tokens": 2024, "completion_tokens": 443, "duration": 27.90731930732727, "task_id": "HumanEval/163"}
{"generated_code": "def max_fill(grid, capacity):\n    import math\n    total_water_units = sum(sum(row) for row in grid)\n    return math.ceil(total_water_units / capacity)", "is_solved": false, "iteration": 2, "prompt_tokens": 2719, "completion_tokens": 312, "duration": 18.350645303726196, "task_id": "HumanEval/115"}
{"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "is_solved": false, "iteration": 2, "prompt_tokens": 2593, "completion_tokens": 328, "duration": 19.802674293518066, "task_id": "HumanEval/145"}
{"generated_code": "def is_nested(string):\n    stack = []\n    nested = False  # Track if any bracket is nested\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:  # Only pop if there's an opening bracket available\n                stack.pop()\n                nested = True\n            else:\n                return False  # Unmatched closing bracket\n    return nested and not stack  # True if nested and all brackets are matched", "is_solved": false, "iteration": 2, "prompt_tokens": 2586, "completion_tokens": 606, "duration": 40.02328109741211, "task_id": "HumanEval/132"}
{"generated_code": "def tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    trib = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            trib.append(1 + i / 2)\n        else:\n            trib.append(trib[i - 1] + trib[i - 2] + trib[i - 1])\n    return trib", "is_solved": false, "iteration": 2, "prompt_tokens": 3838, "completion_tokens": 574, "duration": 41.20477890968323, "task_id": "HumanEval/130"}
