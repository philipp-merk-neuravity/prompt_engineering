{"generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 61, "duration": 3.7889280319213867, "task_id": "HumanEval/0", "result": "passed", "passed": true}
{"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": true, "iteration": 0, "prompt_tokens": 135, "completion_tokens": 21, "duration": 3.3748176097869873, "task_id": "HumanEval/2", "result": "passed", "passed": true}
{"generated_code": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 48, "duration": 49.579845666885376, "task_id": "HumanEval/3", "result": "passed", "passed": true}
{"generated_code": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 44, "duration": 3.6765074729919434, "task_id": "HumanEval/4", "result": "passed", "passed": true}
{"generated_code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 60, "duration": 4.007699728012085, "task_id": "HumanEval/5", "result": "passed", "passed": true}
{"generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 94, "duration": 4.523579835891724, "task_id": "HumanEval/6", "result": "passed", "passed": true}
{"generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "is_solved": true, "iteration": 0, "prompt_tokens": 143, "completion_tokens": 35, "duration": 3.4425792694091797, "task_id": "HumanEval/7", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        total_sum = sum(numbers)\n        total_product = 1\n        for num in numbers:\n            total_product *= num\n        return total_sum, total_product", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 75, "duration": 4.375110387802124, "task_id": "HumanEval/8", "result": "passed", "passed": true}
{"generated_code": "def rolling_max(numbers: List[int]) -> List[int]:\n    max_numbers = []\n    max_num = float('-inf')\n    for num in numbers:\n        max_num = max(max_num, num)\n        max_numbers.append(max_num)\n    return max_numbers", "is_solved": true, "iteration": 0, "prompt_tokens": 150, "completion_tokens": 57, "duration": 3.7959132194519043, "task_id": "HumanEval/9", "result": "passed", "passed": true}
{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.5920822620391846, "task_id": "HumanEval/11", "result": "passed", "passed": true}
{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 39, "duration": 3.631875514984131, "task_id": "HumanEval/13", "result": "passed", "passed": true}
{"generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 32, "duration": 3.5267109870910645, "task_id": "HumanEval/14", "result": "passed", "passed": true}
{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 28, "duration": 3.3324170112609863, "task_id": "HumanEval/15", "result": "passed", "passed": true}
{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 3.1436092853546143, "task_id": "HumanEval/16", "result": "passed", "passed": true}
{"generated_code": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    return [durations[note] for note in notes]\n\nparse_music('o o| .| o| o| .| .| .| .| o o')", "is_solved": true, "iteration": 0, "prompt_tokens": 222, "completion_tokens": 82, "duration": 4.5098161697387695, "task_id": "HumanEval/17", "result": "passed", "passed": true}
{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 74, "duration": 4.2200727462768555, "task_id": "HumanEval/18", "result": "passed", "passed": true}
{"generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_dict[x])\n    return ' '.join(sorted_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 102, "duration": 4.697938442230225, "task_id": "HumanEval/19", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = ()\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 216, "completion_tokens": 96, "duration": 4.488142251968384, "task_id": "HumanEval/20", "result": "passed", "passed": true}
{"generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 53, "duration": 3.7702200412750244, "task_id": "HumanEval/21", "result": "passed", "passed": true}
{"generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 31, "duration": 3.5470941066741943, "task_id": "HumanEval/22", "result": "passed", "passed": true}
{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 3.0233676433563232, "task_id": "HumanEval/23", "result": "passed", "passed": true}
{"generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 43, "duration": 3.513399124145508, "task_id": "HumanEval/24", "result": "passed", "passed": true}
{"generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_len = max(len(s) for s in strings)\n    return next(s for s in strings if len(s) == max_len)", "is_solved": true, "iteration": 1, "prompt_tokens": 938, "completion_tokens": 151, "duration": 7.650464296340942, "task_id": "HumanEval/12", "result": "passed", "passed": true}
{"generated_code": "def make_palindrome(string: str) -> str:\n    def is_palindrome(s):\n        return s == s[::-1]\n\n    if not string:\n        return ''\n\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:len(string)-i][::-1]", "is_solved": true, "iteration": 3, "prompt_tokens": 2733, "completion_tokens": 406, "duration": 14.499025821685791, "task_id": "HumanEval/10", "result": "passed", "passed": true}
{"generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_group = \"\"\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append('(')\n        elif char == ')':\n            stack.pop()\n        current_group += char\n        if not stack:\n            result.append(current_group.replace(\" \", \"\"))\n            current_group = \"\"\n    return result", "is_solved": false, "iteration": 5, "prompt_tokens": 4794, "completion_tokens": 713, "duration": 22.86513352394104, "task_id": "HumanEval/1", "result": "failed: ", "passed": false}
{"generated_code": "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 65, "duration": 3.7573485374450684, "task_id": "HumanEval/25", "result": "passed", "passed": true}
{"generated_code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 33, "duration": 3.290222644805908, "task_id": "HumanEval/26", "result": "passed", "passed": true}
{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 36, "duration": 3.3436784744262695, "task_id": "HumanEval/27", "result": "passed", "passed": true}
{"generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 20, "duration": 2.9848461151123047, "task_id": "HumanEval/28", "result": "passed", "passed": true}
{"generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 34, "duration": 3.402144432067871, "task_id": "HumanEval/29", "result": "passed", "passed": true}
{"generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 25, "duration": 1.0710422992706299, "task_id": "HumanEval/30", "result": "passed", "passed": true}
{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 56, "duration": 3.964221477508545, "task_id": "HumanEval/31", "result": "passed", "passed": true}
{"generated_code": "def find_zero(xs: list):\n    return -xs[0] / xs[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 23, "duration": 3.072744369506836, "task_id": "HumanEval/32", "result": "failed: name 'poly' is not defined", "passed": false}
{"generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 17, "duration": 3.101635456085205, "task_id": "HumanEval/34", "result": "passed", "passed": true}
{"generated_code": "def max_element(l: list):\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 16, "duration": 2.888660430908203, "task_id": "HumanEval/35", "result": "passed", "passed": true}
{"generated_code": "def sort_even(l: list):\n    return [sorted(l[::2])[i//2] if i % 2 == 0 else l[i] for i in range(len(l))]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 43, "duration": 3.5214340686798096, "task_id": "HumanEval/37", "result": "passed", "passed": true}
{"generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iteration": 0, "prompt_tokens": 208, "completion_tokens": 162, "duration": 5.722168922424316, "task_id": "HumanEval/38", "result": "passed", "passed": true}
{"generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n):\n                a, b = b, a + b\n            return b\n\n    count = 0\n    i = 1\n    while count < n:\n        i += 1\n        if is_prime(fibonacci(i)):\n            count += 1\n\n    return fibonacci(i)", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 178, "duration": 8.617135047912598, "task_id": "HumanEval/39", "result": "passed", "passed": true}
{"generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 70, "duration": 4.308423757553101, "task_id": "HumanEval/40", "result": "passed", "passed": true}
{"generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 23, "duration": 4.702202320098877, "task_id": "HumanEval/42", "result": "passed", "passed": true}
{"generated_code": "def pairs_sum_to_zero(l):\n    return any(-x in l for x in l if x != 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 28, "duration": 5.8232152462005615, "task_id": "HumanEval/43", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 22, "duration": 2.7677125930786133, "task_id": "HumanEval/45", "result": "passed", "passed": true}
{"generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n    \n    return d", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 119, "duration": 6.019763231277466, "task_id": "HumanEval/46", "result": "passed", "passed": true}
{"generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "is_solved": true, "iteration": 0, "prompt_tokens": 125, "completion_tokens": 61, "duration": 1.629913091659546, "task_id": "HumanEval/47", "result": "passed", "passed": true}
{"generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 20, "duration": 4.280380725860596, "task_id": "HumanEval/48", "result": "passed", "passed": true}
{"generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 25, "duration": 4.343328475952148, "task_id": "HumanEval/49", "result": "passed", "passed": true}
{"generated_code": "def car_race_collision(n: int):\n    return n * n", "is_solved": true, "iteration": 1, "prompt_tokens": 1043, "completion_tokens": 86, "duration": 8.58785629272461, "task_id": "HumanEval/41", "result": "passed", "passed": true}
{"generated_code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    \n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n        \n    return ''.join(digits[::-1])", "is_solved": true, "iteration": 1, "prompt_tokens": 996, "completion_tokens": 142, "duration": 8.896555185317993, "task_id": "HumanEval/44", "result": "passed", "passed": true}
{"generated_code": "def sort_third(l: list):\n    return [l[i] for i in range(len(l)) if i % 3 != 0] + sorted([l[i] for i in range(len(l)) if i % 3 == 0])\n\n# Test cases\nprint(sort_third([1, 2, 3]))\nprint(sort_third([5, 6, 3, 4, 8, 9, 2]))", "is_solved": false, "iteration": 5, "prompt_tokens": 7140, "completion_tokens": 613, "duration": 23.00413966178894, "task_id": "HumanEval/33", "result": "failed: ", "passed": false}
{"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if '7' in str(i) and (i % 11 == 0 or i % 13 == 0):\n            count += 1\n    return count", "is_solved": false, "iteration": 5, "prompt_tokens": 4651, "completion_tokens": 646, "duration": 25.662603855133057, "task_id": "HumanEval/36", "result": "failed: ", "passed": false}
{"generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": true, "iteration": 0, "prompt_tokens": 140, "completion_tokens": 82, "duration": 4.167835235595703, "task_id": "HumanEval/50", "result": "passed", "passed": true}
{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 31, "duration": 5.49226450920105, "task_id": "HumanEval/51", "result": "passed", "passed": true}
{"generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 26, "duration": 5.450874328613281, "task_id": "HumanEval/52", "result": "passed", "passed": true}
{"generated_code": "def add(x: int, y: int):\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 20, "duration": 1.7860267162322998, "task_id": "HumanEval/53", "result": "passed", "passed": true}
{"generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 38, "duration": 4.537459373474121, "task_id": "HumanEval/55", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 64, "duration": 1.595395803451538, "task_id": "HumanEval/56", "result": "passed", "passed": true}
{"generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 58, "duration": 6.372962713241577, "task_id": "HumanEval/57", "result": "passed", "passed": true}
{"generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 29, "duration": 5.793344020843506, "task_id": "HumanEval/58", "result": "passed", "passed": true}
{"generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 50, "duration": 6.514908790588379, "task_id": "HumanEval/59", "result": "passed", "passed": true}
{"generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 22, "duration": 5.250669479370117, "task_id": "HumanEval/60", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 67, "duration": 6.117987394332886, "task_id": "HumanEval/61", "result": "passed", "passed": true}
{"generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]\n\n# Test cases\nprint(derivative([3, 1, 2, 4, 5]))  # Output: [1, 4, 12, 20]\nprint(derivative([1, 2, 3]))  # Output: [2, 6]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 89, "duration": 5.635868549346924, "task_id": "HumanEval/62", "result": "passed", "passed": true}
{"generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    if s[-1].lower() == 'y':\n        return sum(1 for char in s[:-1] if char.lower() in vowels) + 1\n    else:\n        return sum(1 for char in s if char.lower() in vowels)", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 70, "duration": 6.279200553894043, "task_id": "HumanEval/64", "result": "passed", "passed": true}
{"generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 1.2910349369049072, "task_id": "HumanEval/66", "result": "passed", "passed": true}
{"generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 37, "duration": 5.683075189590454, "task_id": "HumanEval/67", "result": "passed", "passed": true}
{"generated_code": "def pluck(arr):\n    even_values = [(value, index) for index, value in enumerate(arr) if value % 2 == 0]\n    if not even_values:\n        return []\n    min_even_value = min(even_values, key=lambda x: (x[0], x[1]))\n    return [min_even_value[0], min_even_value[1]]", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 82, "duration": 5.2497780323028564, "task_id": "HumanEval/68", "result": "passed", "passed": true}
{"generated_code": "def search(lst):\n    for num in sorted(set(lst), reverse=True):\n        if lst.count(num) >= num:\n            return num\n    return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 37, "duration": 5.657253980636597, "task_id": "HumanEval/69", "result": "passed", "passed": true}
{"generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 44, "duration": 4.340230464935303, "task_id": "HumanEval/70", "result": "passed", "passed": true}
{"generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 72, "duration": 2.085747480392456, "task_id": "HumanEval/63", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 92, "duration": 2.073251247406006, "task_id": "HumanEval/71", "result": "passed", "passed": true}
{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 5.156278610229492, "task_id": "HumanEval/72", "result": "passed", "passed": true}
{"generated_code": "def smallest_change(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-1-i]:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 52, "duration": 1.6135008335113525, "task_id": "HumanEval/73", "result": "passed", "passed": true}
{"generated_code": "def total_match(lst1, lst2):\n    return lst1 if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2) else lst2", "is_solved": true, "iteration": 0, "prompt_tokens": 243, "completion_tokens": 43, "duration": 4.563444375991821, "task_id": "HumanEval/74", "result": "passed", "passed": true}
{"generated_code": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)", "is_solved": true, "iteration": 5, "prompt_tokens": 4407, "completion_tokens": 318, "duration": 17.829841136932373, "task_id": "HumanEval/54", "result": "passed", "passed": true}
{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift] if shift <= len(x_str) // 2 else x_str[::-1]", "is_solved": false, "iteration": 5, "prompt_tokens": 3994, "completion_tokens": 685, "duration": 21.965407371520996, "task_id": "HumanEval/65", "result": "failed: ", "passed": false}
{"generated_code": "def hex_key(num):\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = sum(1 for digit in num if digit in primes)\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 49, "duration": 3.148556709289551, "task_id": "HumanEval/78", "result": "passed", "passed": true}
{"generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 29, "duration": 4.2002599239349365, "task_id": "HumanEval/79", "result": "passed", "passed": true}
{"generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 76, "duration": 2.430246591567993, "task_id": "HumanEval/80", "result": "passed", "passed": true}
{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 69, "duration": 5.953183889389038, "task_id": "HumanEval/82", "result": "passed", "passed": true}
{"generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 21, "duration": 3.9268581867218018, "task_id": "HumanEval/84", "result": "passed", "passed": true}
{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 105, "completion_tokens": 38, "duration": 4.256866216659546, "task_id": "HumanEval/85", "result": "passed", "passed": true}
{"generated_code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(word)) for word in s.split()])", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 26, "duration": 4.099725961685181, "task_id": "HumanEval/86", "result": "passed", "passed": true}
{"generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 68, "duration": 2.980239152908325, "task_id": "HumanEval/87", "result": "passed", "passed": true}
{"generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 52, "duration": 4.335091829299927, "task_id": "HumanEval/90", "result": "passed", "passed": true}
{"generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 54, "duration": 4.2294628620147705, "task_id": "HumanEval/92", "result": "passed", "passed": true}
{"generated_code": "def largest_prime_sum(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    prime_numbers = [num for num in lst if is_prime(num)]\n    largest_prime = max(prime_numbers)\n    return sum_of_digits(largest_prime)", "is_solved": true, "iteration": 0, "prompt_tokens": 336, "completion_tokens": 116, "duration": 4.039272308349609, "task_id": "HumanEval/94", "result": "failed: name 'skjkasdkd' is not defined", "passed": false}
{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 86, "duration": 4.878050327301025, "task_id": "HumanEval/96", "result": "passed", "passed": true}
{"generated_code": "def multiply(a, b):\n    return int(str(abs(a))[-1]) * int(str(abs(b))[-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 29, "duration": 3.914466619491577, "task_id": "HumanEval/97", "result": "passed", "passed": true}
{"generated_code": "def count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in 'AEIOU')", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 38, "duration": 3.995293378829956, "task_id": "HumanEval/98", "result": "passed", "passed": true}
{"generated_code": "def closest_integer(value):\n    value = float(value)\n    if value < 0:\n        return int(value - 0.5)\n    else:\n        return int(value + 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 45, "duration": 4.453214406967163, "task_id": "HumanEval/99", "result": "passed", "passed": true}
{"generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or x == n ** int(x ** (1/n)))", "is_solved": true, "iteration": 1, "prompt_tokens": 1138, "completion_tokens": 109, "duration": 7.488384246826172, "task_id": "HumanEval/76", "result": "passed", "passed": true}
{"generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    return all(isinstance(key, str) and key.islower() for key in keys) or all(isinstance(key, str) and key.isupper() for key in keys)", "is_solved": true, "iteration": 1, "prompt_tokens": 1288, "completion_tokens": 171, "duration": 8.728456258773804, "task_id": "HumanEval/95", "result": "passed", "passed": true}
{"generated_code": "def sort_array(array):\n    if not array:\n        return []\n    \n    sorted_array = array.copy()\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        return sorted(sorted_array, reverse=True)\n    else:\n        return sorted(sorted_array)", "is_solved": true, "iteration": 1, "prompt_tokens": 1466, "completion_tokens": 180, "duration": 10.428321838378906, "task_id": "HumanEval/88", "result": "passed", "passed": true}
{"generated_code": "def starts_one_ends(n):\n    if n == 1:\n        return 1\n    return 2 * 9 * 10**(n-2)", "is_solved": true, "iteration": 3, "prompt_tokens": 2089, "completion_tokens": 225, "duration": 12.796434879302979, "task_id": "HumanEval/83", "result": "passed", "passed": true}
{"generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = (ord(char) - ord('a') + 2 * 2) % 26\n            if char.islower():\n                result += chr(shift + ord('a'))\n            else:\n                result += chr(shift + ord('A'))\n        else:\n            result += char\n    return result", "is_solved": true, "iteration": 3, "prompt_tokens": 3378, "completion_tokens": 523, "duration": 17.42870545387268, "task_id": "HumanEval/89", "result": "passed", "passed": true}
{"generated_code": "def iscube(a):\n    return a >= 0 and round(a**(1/3))**3 == a", "is_solved": false, "iteration": 5, "prompt_tokens": 3755, "completion_tokens": 293, "duration": 16.04483437538147, "task_id": "HumanEval/77", "result": "failed: Third test error: False", "passed": false}
{"generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        else:\n            result.append('D-' if gpa > 0.0 else 'E')  # Corrected the condition to handle GPA value of 0.0\n    return result", "is_solved": true, "iteration": 4, "prompt_tokens": 6155, "completion_tokens": 1431, "duration": 33.741334199905396, "task_id": "HumanEval/81", "result": "passed", "passed": true}
{"generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences if sentence]\n    \n    count = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if 'I' in words:\n            count += 1\n    \n    return count", "is_solved": false, "iteration": 5, "prompt_tokens": 4352, "completion_tokens": 564, "duration": 22.145427465438843, "task_id": "HumanEval/91", "result": "failed: Test 6", "passed": false}
{"generated_code": "def encode(message):\n    encoded_message = ''\n    vowels = 'aeiouAEIOU'\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr((ord(char) + 2 - ord('a') if char.islower() else ord('A')) % 26 + ord('A'))\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message", "is_solved": false, "iteration": 5, "prompt_tokens": 4630, "completion_tokens": 728, "duration": 23.01977229118347, "task_id": "HumanEval/93", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"generated_code": "from itertools import combinations\n\ndef is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_factors = [i for i in range(2, a) if is_prime(i) and a % i == 0]\n    for comb in combinations(prime_factors, 3):\n        if a == comb[0] * comb[1] * comb[2]:\n            return True\n    return False", "is_solved": false, "iteration": 5, "prompt_tokens": 5082, "completion_tokens": 967, "duration": 30.12507390975952, "task_id": "HumanEval/75", "result": "failed: ", "passed": false}
{"generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(\",\", \" \").split()]", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 25, "duration": 1.0746467113494873, "task_id": "HumanEval/101", "result": "passed", "passed": true}
{"generated_code": "def choose_num(x, y):\n    max_even = -1\n    for num in range(x, y+1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 55, "duration": 3.2499303817749023, "task_id": "HumanEval/102", "result": "passed", "passed": true}
{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 40, "duration": 2.996777057647705, "task_id": "HumanEval/103", "result": "passed", "passed": true}
{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 33, "duration": 4.210830211639404, "task_id": "HumanEval/104", "result": "passed", "passed": true}
{"generated_code": "def by_length(arr):\n    digits = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [x for x in arr if 1 <= x <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    result = [digits[x] for x in reversed_arr]\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 119, "duration": 3.765507936477661, "task_id": "HumanEval/105", "result": "passed", "passed": true}
{"generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 82, "duration": 2.168910264968872, "task_id": "HumanEval/106", "result": "passed", "passed": true}
{"generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 99, "duration": 2.3434085845947266, "task_id": "HumanEval/107", "result": "passed", "passed": true}
{"generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    n = len(arr)\n    for i in range(n):\n        if sorted_arr == arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 67, "duration": 1.888298511505127, "task_id": "HumanEval/109", "result": "passed", "passed": true}
{"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(x % 2 == 1 for x in lst1) <= sum(x % 2 == 0 for x in lst2) else \"NO\"", "is_solved": true, "iteration": 0, "prompt_tokens": 247, "completion_tokens": 51, "duration": 1.6188201904296875, "task_id": "HumanEval/110", "result": "passed", "passed": true}
{"generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 212, "completion_tokens": 39, "duration": 1.6968176364898682, "task_id": "HumanEval/112", "result": "passed", "passed": true}
{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 60, "duration": 6.022474765777588, "task_id": "HumanEval/114", "result": "passed", "passed": true}
{"generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 220, "completion_tokens": 28, "duration": 1.244821310043335, "task_id": "HumanEval/116", "result": "passed", "passed": true}
{"generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for letter in word if letter.lower() not in 'aeiou')\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 62, "duration": 2.7944095134735107, "task_id": "HumanEval/117", "result": "passed", "passed": true}
{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 98, "duration": 6.123220443725586, "task_id": "HumanEval/118", "result": "passed", "passed": true}
{"generated_code": "def get_odd_collatz(n):\n    collatz_seq = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_seq.append(n)\n    \n    return sorted([num for num in collatz_seq if num % 2 != 0])", "is_solved": true, "iteration": 0, "prompt_tokens": 281, "completion_tokens": 86, "duration": 5.043258190155029, "task_id": "HumanEval/123", "result": "passed", "passed": true}
{"generated_code": "def valid_date(date):\n    if len(date) != 10:\n        return False\n    month, day, year = date.split('-')\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    month, day, year = int(month), int(day), int(year)\n    if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    else:\n        return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 313, "completion_tokens": 192, "duration": 5.403190851211548, "task_id": "HumanEval/124", "result": "passed", "passed": true}
{"generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:] if k > 0 else []", "is_solved": true, "iteration": 1, "prompt_tokens": 1642, "completion_tokens": 80, "duration": 4.282585620880127, "task_id": "HumanEval/120", "result": "passed", "passed": true}
{"generated_code": "def histogram(test):\n    letters = test.split()\n    if not letters:\n        return {}\n    \n    letter_count = {}\n    for letter in letters:\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n            \n    max_count = max(letter_count.values())\n    return {letter: count for letter, count in letter_count.items() if count == max_count}", "is_solved": true, "iteration": 1, "prompt_tokens": 1388, "completion_tokens": 246, "duration": 8.051458835601807, "task_id": "HumanEval/111", "result": "passed", "passed": true}
{"generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if len(str(x)) <= 2)", "is_solved": true, "iteration": 4, "prompt_tokens": 3702, "completion_tokens": 317, "duration": 14.427190065383911, "task_id": "HumanEval/122", "result": "passed", "passed": true}
{"generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 2)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones", "is_solved": true, "iteration": 3, "prompt_tokens": 3273, "completion_tokens": 436, "duration": 13.04747462272644, "task_id": "HumanEval/100", "result": "passed", "passed": true}
{"generated_code": "def solution(lst):\n    return sum(num for i, num in enumerate(lst) if i % 2 == 0 and num % 2 != 0)", "is_solved": true, "iteration": 4, "prompt_tokens": 4153, "completion_tokens": 363, "duration": 16.06210494041443, "task_id": "HumanEval/121", "result": "passed", "passed": true}
{"generated_code": "import math\n\ndef max_fill(grid, capacity):\n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)", "is_solved": false, "iteration": 5, "prompt_tokens": 5977, "completion_tokens": 419, "duration": 19.02999496459961, "task_id": "HumanEval/115", "result": "failed: Error", "passed": false}
{"generated_code": "def count_nums(arr):\n    return sum(sum(int(d) for d in str(abs(num)) if d.isdigit()) > 0 for num in arr)", "is_solved": false, "iteration": 5, "prompt_tokens": 4718, "completion_tokens": 366, "duration": 16.858007431030273, "task_id": "HumanEval/108", "result": "failed: ", "passed": false}
{"generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(int(digit) % 2 != 0 for digit in string), sum(int(digit) % 2 != 0 for digit in string), i+1, i+1) for i, string in enumerate(lst)]", "is_solved": false, "iteration": 5, "prompt_tokens": 5604, "completion_tokens": 582, "duration": 20.339743852615356, "task_id": "HumanEval/113", "result": "failed: Test 1", "passed": false}
{"generated_code": "def match_parens(lst):\n    count = 0\n    open_parens = []\n    for s in lst:\n        for c in s:\n            if c == '(':\n                open_parens.append(c)\n            else:\n                if open_parens:\n                    open_parens.pop()\n                else:\n                    return 'No'\n    return 'Yes' if not open_parens else 'No'", "is_solved": false, "iteration": 5, "prompt_tokens": 5672, "completion_tokens": 634, "duration": 19.2155442237854, "task_id": "HumanEval/119", "result": "failed: ", "passed": false}
{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 26, "duration": 2.2351036071777344, "task_id": "HumanEval/133", "result": "passed", "passed": true}
{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt == \"\":\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and (len(txt) == 1 or txt[-2] == \" \"):\n        return True\n    else:\n        return False", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 66, "duration": 1.883793830871582, "task_id": "HumanEval/134", "result": "passed", "passed": true}
{"generated_code": "def largest_smallest_integers(lst):\n    neg_integers = [num for num in lst if num < 0]\n    pos_integers = [num for num in lst if num > 0]\n    \n    largest_neg = max(neg_integers) if neg_integers else None\n    smallest_pos = min(pos_integers) if pos_integers else None\n    \n    return (largest_neg, smallest_pos)", "is_solved": true, "iteration": 0, "prompt_tokens": 188, "completion_tokens": 90, "duration": 3.454267978668213, "task_id": "HumanEval/136", "result": "passed", "passed": true}
{"generated_code": "def is_equal_to_sum_even(n):\n    return n % 2 == 0 and n >= 8", "is_solved": true, "iteration": 0, "prompt_tokens": 127, "completion_tokens": 27, "duration": 2.1825339794158936, "task_id": "HumanEval/138", "result": "passed", "passed": true}
{"generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        factorial = 1\n        for j in range(1, i+1):\n            factorial *= j\n        result *= factorial\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 60, "duration": 5.583819150924683, "task_id": "HumanEval/139", "result": "passed", "passed": true}
{"generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 98, "duration": 3.6051621437072754, "task_id": "HumanEval/141", "result": "passed", "passed": true}
{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 46, "duration": 2.6627280712127686, "task_id": "HumanEval/142", "result": "passed", "passed": true}
{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "is_solved": true, "iteration": 0, "prompt_tokens": 197, "completion_tokens": 95, "duration": 5.373974323272705, "task_id": "HumanEval/143", "result": "passed", "passed": true}
{"generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return (x_num * n_num) % (x_den * n_den) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 59, "duration": 2.6001389026641846, "task_id": "HumanEval/144", "result": "passed", "passed": true}
{"generated_code": "def specialFilter(nums):\n    return sum(1 for num in nums if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9'])", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 67, "duration": 5.582629919052124, "task_id": "HumanEval/146", "result": "passed", "passed": true}
{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2)\n    if start_index > end_index:\n        start_index, end_index = end_index, start_index\n    return tuple(planets[start_index+1:end_index])", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 118, "duration": 3.777313470840454, "task_id": "HumanEval/148", "result": "passed", "passed": true}
{"generated_code": "def list_sort(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 237, "completion_tokens": 39, "duration": 2.606926202774048, "task_id": "HumanEval/149", "result": "failed: name 'sorted_list_sum' is not defined", "passed": false}
{"generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n+1):\n        a_i = i * i - i + 1\n        for j in range(i+1, n+1):\n            a_j = j * j - j + 1\n            for k in range(j+1, n+1):\n                a_k = k * k - k + 1\n                if (a_i + a_j + a_k) % 3 == 0:\n                    count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 123, "duration": 4.436676263809204, "task_id": "HumanEval/147", "result": "passed", "passed": true}
{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    for num in arr:\n        if num == 0:\n            return 0\n        product *= 1 if num / abs(num) > 0 else -1\n    return sum(abs(num) for num in arr) * product", "is_solved": true, "iteration": 1, "prompt_tokens": 1264, "completion_tokens": 199, "duration": 6.312618255615234, "task_id": "HumanEval/128", "result": "passed", "passed": true}
{"generated_code": "def digits(n):\n    return eval('*'.join(str(int(d)) for d in str(n) if int(d) % 2)) if any(int(d) % 2 for d in str(n)) else 0", "is_solved": true, "iteration": 2, "prompt_tokens": 1763, "completion_tokens": 267, "duration": 9.843128442764282, "task_id": "HumanEval/131", "result": "passed", "passed": true}
{"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(x).lstrip('-')), nums.index(x)))", "is_solved": false, "iteration": 5, "prompt_tokens": 5719, "completion_tokens": 349, "duration": 14.456022262573242, "task_id": "HumanEval/145", "result": "failed: ", "passed": false}
{"generated_code": "def fix_spaces(text):\n    result = \"\"\n    count = 0\n    for char in text:\n        if char == \" \":\n            count += 1\n            if count > 2:\n                result = result[:-1] + \"-\"\n        else:\n            count = 0\n        if char != \" \":\n            result += char\n        else:\n            result += \"_\"\n    return result", "is_solved": false, "iteration": 5, "prompt_tokens": 4552, "completion_tokens": 684, "duration": 19.866212844848633, "task_id": "HumanEval/140", "result": "failed: This prints if this assert fails 4 (good for debugging!)", "passed": false}
{"generated_code": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i-1\n    return max_index", "is_solved": false, "iteration": 5, "prompt_tokens": 4157, "completion_tokens": 516, "duration": 21.394453525543213, "task_id": "HumanEval/135", "result": "failed: ", "passed": false}
{"generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) and len(lst) == len(set(lst))", "is_solved": false, "iteration": 5, "prompt_tokens": 6260, "completion_tokens": 403, "duration": 19.95978832244873, "task_id": "HumanEval/126", "result": "failed: This prints if this assert fails 7 (good for debugging!)", "passed": false}
{"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)", "is_solved": false, "iteration": 5, "prompt_tokens": 4604, "completion_tokens": 484, "duration": 18.51308035850525, "task_id": "HumanEval/125", "result": "failed: ", "passed": false}
{"generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack and stack[-1] == '[':\n            stack.pop()\n        else:\n            return False\n    return len(stack) < 2", "is_solved": false, "iteration": 5, "prompt_tokens": 5394, "completion_tokens": 701, "duration": 22.387670516967773, "task_id": "HumanEval/132", "result": "failed: ", "passed": false}
{"generated_code": "def compare_one(a, b):\n    types = [int, float, str]\n    if type(a) in types and type(b) in types:\n        if type(a) == type(b):\n            return a if a > b else b if b > a else None\n        elif type(a) == str and type(b) != str:\n            return b\n        elif type(b) == str and type(a) != str:\n            return a\n        elif type(a) in [int, float] and type(b) in [int, float]:\n            return a if a > b else b if b > a else None\n    return a if type(a) in [int, float] else b", "is_solved": false, "iteration": 5, "prompt_tokens": 5147, "completion_tokens": 912, "duration": 27.500593185424805, "task_id": "HumanEval/137", "result": "failed: ", "passed": false}
{"generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1, 3]\n    else:\n        tribonacci = [0, 1, 3]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tribonacci.append(1 + i // 2)\n            else:\n                tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3])\n        return tribonacci", "is_solved": false, "iteration": 5, "prompt_tokens": 8401, "completion_tokens": 911, "duration": 24.71323800086975, "task_id": "HumanEval/130", "result": "failed: ", "passed": false}
{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    intersection_length = intersection_end - intersection_start + 1\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 5, "prompt_tokens": 7504, "completion_tokens": 1162, "duration": 30.961878299713135, "task_id": "HumanEval/127", "result": "failed: ", "passed": false}
{"generated_code": "def minPath(grid, k):\n    n = len(grid)\n    m = len(grid[0])\n    visited = [[False for _ in range(m)] for _ in range(n)]\n    \n    def dfs(i, j, path):\n        if i < 0 or i >= n or j < 0 or j >= m or visited[i][j]:\n            return\n        path.append(grid[i][j])\n        visited[i][j] = True\n        if len(path) == k:\n            return path\n        res = []\n        for x, y in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:\n            res.append(dfs(x, y, path.copy()))\n        visited[i][j] = False\n        return min(filter(None, res))\n    \n    for i in range(n):\n        for j in range(m):\n            path = dfs(i, j, [])\n            if path:\n                return path", "is_solved": false, "iteration": 5, "prompt_tokens": 14281, "completion_tokens": 1937, "duration": 42.22347617149353, "task_id": "HumanEval/129", "result": "failed: ", "passed": false}
{"generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 78, "duration": 2.0863029956817627, "task_id": "HumanEval/150", "result": "passed", "passed": true}
{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0 and isinstance(x, int))", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 39, "duration": 4.964281320571899, "task_id": "HumanEval/151", "result": "passed", "passed": true}
{"generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 39, "duration": 2.242448329925537, "task_id": "HumanEval/152", "result": "passed", "passed": true}
{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        return sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n    \n    strongest = max(extensions, key=lambda x: strength(x))\n    return f\"{class_name}.{strongest}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 71, "duration": 3.0529162883758545, "task_id": "HumanEval/153", "result": "passed", "passed": true}
{"generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',\n        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 142, "duration": 3.109078884124756, "task_id": "HumanEval/156", "result": "passed", "passed": true}
{"generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 52, "duration": 1.781921625137329, "task_id": "HumanEval/157", "result": "passed", "passed": true}
{"generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    remaining_after_meals = max(0, remaining - need)\n    return [total_eaten, remaining_after_meals]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 51, "duration": 5.194386959075928, "task_id": "HumanEval/159", "result": "passed", "passed": true}
{"generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += operator[i] + str(operand[i+1])\n    return eval(expression)", "is_solved": true, "iteration": 0, "prompt_tokens": 257, "completion_tokens": 48, "duration": 4.242655515670776, "task_id": "HumanEval/160", "result": "passed", "passed": true}
{"generated_code": "def solve(s):\n    return s.swapcase() if any(c.isalpha() for c in s) else s[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 30, "duration": 2.5408999919891357, "task_id": "HumanEval/161", "result": "passed", "passed": true}
{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 33, "duration": 2.378025531768799, "task_id": "HumanEval/162", "result": "passed", "passed": true}
{"generated_code": "def even_odd_count(num):\n    even_count = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 == 0])\n    odd_count = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 != 0])\n    return (even_count, odd_count)", "is_solved": true, "iteration": 1, "prompt_tokens": 1177, "completion_tokens": 192, "duration": 5.055009603500366, "task_id": "HumanEval/155", "result": "passed", "passed": true}
{"generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "is_solved": false, "iteration": 5, "prompt_tokens": 4293, "completion_tokens": 442, "duration": 18.76861310005188, "task_id": "HumanEval/163", "result": "failed: Test 1", "passed": false}
{"generated_code": "def find_max(words):\n    return max(sorted(words), key=lambda x: (-len(set(x)), x))", "is_solved": false, "iteration": 5, "prompt_tokens": 5197, "completion_tokens": 343, "duration": 19.685861587524414, "task_id": "HumanEval/158", "result": "failed: t1", "passed": false}
{"generated_code": "def cycpattern_check(a, b):\n    return any(b in a[i:] + a[:i] for i in range(len(a))) or a == b\n\n# Test cases\nprint(cycpattern_check(\"abcd\", \"abd\"))  # False\nprint(cycpattern_check(\"hello\", \"ell\"))  # True\nprint(cycpattern_check(\"whassup\", \"psus\"))  # False\nprint(cycpattern_check(\"abab\", \"baa\"))  # True\nprint(cycpattern_check(\"efef\", \"eeff\"))  # False\nprint(cycpattern_check(\"himenss\", \"simen\"))  # True", "is_solved": false, "iteration": 5, "prompt_tokens": 5072, "completion_tokens": 949, "duration": 25.297871112823486, "task_id": "HumanEval/154", "result": "failed: test #3", "passed": false}
{"generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 61, "duration": 3.7889280319213867, "task_id": "HumanEval/0", "result": "passed", "passed": true}
{"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": true, "iteration": 0, "prompt_tokens": 135, "completion_tokens": 21, "duration": 3.3748176097869873, "task_id": "HumanEval/2", "result": "passed", "passed": true}
{"generated_code": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 48, "duration": 49.579845666885376, "task_id": "HumanEval/3", "result": "passed", "passed": true}
{"generated_code": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 44, "duration": 3.6765074729919434, "task_id": "HumanEval/4", "result": "passed", "passed": true}
{"generated_code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 60, "duration": 4.007699728012085, "task_id": "HumanEval/5", "result": "passed", "passed": true}
{"generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 94, "duration": 4.523579835891724, "task_id": "HumanEval/6", "result": "passed", "passed": true}
{"generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "is_solved": true, "iteration": 0, "prompt_tokens": 143, "completion_tokens": 35, "duration": 3.4425792694091797, "task_id": "HumanEval/7", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        total_sum = sum(numbers)\n        total_product = 1\n        for num in numbers:\n            total_product *= num\n        return total_sum, total_product", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 75, "duration": 4.375110387802124, "task_id": "HumanEval/8", "result": "passed", "passed": true}
{"generated_code": "def rolling_max(numbers: List[int]) -> List[int]:\n    max_numbers = []\n    max_num = float('-inf')\n    for num in numbers:\n        max_num = max(max_num, num)\n        max_numbers.append(max_num)\n    return max_numbers", "is_solved": true, "iteration": 0, "prompt_tokens": 150, "completion_tokens": 57, "duration": 3.7959132194519043, "task_id": "HumanEval/9", "result": "passed", "passed": true}
{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.5920822620391846, "task_id": "HumanEval/11", "result": "passed", "passed": true}
{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 39, "duration": 3.631875514984131, "task_id": "HumanEval/13", "result": "passed", "passed": true}
{"generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 32, "duration": 3.5267109870910645, "task_id": "HumanEval/14", "result": "passed", "passed": true}
{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 28, "duration": 3.3324170112609863, "task_id": "HumanEval/15", "result": "passed", "passed": true}
{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 3.1436092853546143, "task_id": "HumanEval/16", "result": "passed", "passed": true}
{"generated_code": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    return [durations[note] for note in notes]\n\nparse_music('o o| .| o| o| .| .| .| .| o o')", "is_solved": true, "iteration": 0, "prompt_tokens": 222, "completion_tokens": 82, "duration": 4.5098161697387695, "task_id": "HumanEval/17", "result": "passed", "passed": true}
{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 74, "duration": 4.2200727462768555, "task_id": "HumanEval/18", "result": "passed", "passed": true}
{"generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_dict[x])\n    return ' '.join(sorted_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 102, "duration": 4.697938442230225, "task_id": "HumanEval/19", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = ()\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 216, "completion_tokens": 96, "duration": 4.488142251968384, "task_id": "HumanEval/20", "result": "passed", "passed": true}
{"generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 53, "duration": 3.7702200412750244, "task_id": "HumanEval/21", "result": "passed", "passed": true}
{"generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 31, "duration": 3.5470941066741943, "task_id": "HumanEval/22", "result": "passed", "passed": true}
{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 3.0233676433563232, "task_id": "HumanEval/23", "result": "passed", "passed": true}
{"generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 43, "duration": 3.513399124145508, "task_id": "HumanEval/24", "result": "passed", "passed": true}
{"generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_length = max(len(s) for s in strings)\n    return next(s for s in strings if len(s) == max_length)", "is_solved": true, "iteration": 1, "prompt_tokens": 922, "completion_tokens": 135, "duration": 6.548927545547485, "task_id": "HumanEval/12", "result": "passed", "passed": true}
{"generated_code": "def make_palindrome(string: str) -> str:\n    def is_palindrome(s):\n        return s == s[::-1]\n    \n    if not string:\n        return ''\n    \n    if is_palindrome(string):\n        return string\n    \n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i-1][::-1]", "is_solved": false, "iteration": 5, "prompt_tokens": 4445, "completion_tokens": 678, "duration": 21.92716360092163, "task_id": "HumanEval/10", "result": "failed: ", "passed": false}
{"generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_group = \"\"\n    for char in paren_string:\n        if char in \"()\":\n            current_group += char\n        elif current_group:\n            result.append(current_group)\n            current_group = \"\"\n    if current_group:\n        result.append(current_group)\n    return result", "is_solved": false, "iteration": 5, "prompt_tokens": 4973, "completion_tokens": 694, "duration": 22.571606636047363, "task_id": "HumanEval/1", "result": "failed: ", "passed": false}
{"generated_code": "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 65, "duration": 3.7573485374450684, "task_id": "HumanEval/25", "result": "passed", "passed": true}
{"generated_code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 33, "duration": 3.290222644805908, "task_id": "HumanEval/26", "result": "passed", "passed": true}
{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 36, "duration": 3.3436784744262695, "task_id": "HumanEval/27", "result": "passed", "passed": true}
{"generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 20, "duration": 2.9848461151123047, "task_id": "HumanEval/28", "result": "passed", "passed": true}
{"generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 34, "duration": 3.402144432067871, "task_id": "HumanEval/29", "result": "passed", "passed": true}
{"generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 25, "duration": 1.0710422992706299, "task_id": "HumanEval/30", "result": "passed", "passed": true}
{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 56, "duration": 3.964221477508545, "task_id": "HumanEval/31", "result": "passed", "passed": true}
{"generated_code": "def find_zero(xs: list):\n    return -xs[0] / xs[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 23, "duration": 3.072744369506836, "task_id": "HumanEval/32", "result": "failed: name 'poly' is not defined", "passed": false}
{"generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 17, "duration": 3.101635456085205, "task_id": "HumanEval/34", "result": "passed", "passed": true}
{"generated_code": "def max_element(l: list):\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 16, "duration": 2.888660430908203, "task_id": "HumanEval/35", "result": "passed", "passed": true}
{"generated_code": "def sort_even(l: list):\n    return [sorted(l[::2])[i//2] if i % 2 == 0 else l[i] for i in range(len(l))]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 43, "duration": 3.5214340686798096, "task_id": "HumanEval/37", "result": "passed", "passed": true}
{"generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iteration": 0, "prompt_tokens": 208, "completion_tokens": 162, "duration": 5.722168922424316, "task_id": "HumanEval/38", "result": "passed", "passed": true}
{"generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n):\n                a, b = b, a + b\n            return b\n\n    count = 0\n    i = 1\n    while count < n:\n        i += 1\n        if is_prime(fibonacci(i)):\n            count += 1\n\n    return fibonacci(i)", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 178, "duration": 8.617135047912598, "task_id": "HumanEval/39", "result": "passed", "passed": true}
{"generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 70, "duration": 4.308423757553101, "task_id": "HumanEval/40", "result": "passed", "passed": true}
{"generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 23, "duration": 4.702202320098877, "task_id": "HumanEval/42", "result": "passed", "passed": true}
{"generated_code": "def pairs_sum_to_zero(l):\n    return any(-x in l for x in l if x != 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 28, "duration": 5.8232152462005615, "task_id": "HumanEval/43", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 22, "duration": 2.7677125930786133, "task_id": "HumanEval/45", "result": "passed", "passed": true}
{"generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n    \n    return d", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 119, "duration": 6.019763231277466, "task_id": "HumanEval/46", "result": "passed", "passed": true}
{"generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "is_solved": true, "iteration": 0, "prompt_tokens": 125, "completion_tokens": 61, "duration": 1.629913091659546, "task_id": "HumanEval/47", "result": "passed", "passed": true}
{"generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 20, "duration": 4.280380725860596, "task_id": "HumanEval/48", "result": "passed", "passed": true}
{"generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 25, "duration": 4.343328475952148, "task_id": "HumanEval/49", "result": "passed", "passed": true}
{"generated_code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "is_solved": true, "iteration": 1, "prompt_tokens": 1000, "completion_tokens": 145, "duration": 8.69681167602539, "task_id": "HumanEval/44", "result": "passed", "passed": true}
{"generated_code": "def car_race_collision(n: int):\n    return n**2", "is_solved": true, "iteration": 2, "prompt_tokens": 1730, "completion_tokens": 139, "duration": 10.636403799057007, "task_id": "HumanEval/41", "result": "passed", "passed": true}
{"generated_code": "def fizz_buzz(n: int):\n    return sum(1 for i in range(n) if ((i % 11 == 0 or i % 13 == 0) and '7' in str(i)) or (i % 11 == 0 and i % 13 == 0))", "is_solved": false, "iteration": 5, "prompt_tokens": 4578, "completion_tokens": 561, "duration": 22.66802477836609, "task_id": "HumanEval/36", "result": "failed: ", "passed": false}
{"generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": true, "iteration": 0, "prompt_tokens": 140, "completion_tokens": 82, "duration": 4.167835235595703, "task_id": "HumanEval/50", "result": "passed", "passed": true}
{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 31, "duration": 5.49226450920105, "task_id": "HumanEval/51", "result": "passed", "passed": true}
{"generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 26, "duration": 5.450874328613281, "task_id": "HumanEval/52", "result": "passed", "passed": true}
{"generated_code": "def add(x: int, y: int):\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 20, "duration": 1.7860267162322998, "task_id": "HumanEval/53", "result": "passed", "passed": true}
{"generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 38, "duration": 4.537459373474121, "task_id": "HumanEval/55", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 64, "duration": 1.595395803451538, "task_id": "HumanEval/56", "result": "passed", "passed": true}
{"generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 58, "duration": 6.372962713241577, "task_id": "HumanEval/57", "result": "passed", "passed": true}
{"generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 29, "duration": 5.793344020843506, "task_id": "HumanEval/58", "result": "passed", "passed": true}
{"generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 50, "duration": 6.514908790588379, "task_id": "HumanEval/59", "result": "passed", "passed": true}
{"generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 22, "duration": 5.250669479370117, "task_id": "HumanEval/60", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 67, "duration": 6.117987394332886, "task_id": "HumanEval/61", "result": "passed", "passed": true}
{"generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]\n\n# Test cases\nprint(derivative([3, 1, 2, 4, 5]))  # Output: [1, 4, 12, 20]\nprint(derivative([1, 2, 3]))  # Output: [2, 6]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 89, "duration": 5.635868549346924, "task_id": "HumanEval/62", "result": "passed", "passed": true}
{"generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 72, "duration": 2.085747480392456, "task_id": "HumanEval/63", "result": "passed", "passed": true}
{"generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    if s[-1].lower() == 'y':\n        return sum(1 for char in s[:-1] if char.lower() in vowels) + 1\n    else:\n        return sum(1 for char in s if char.lower() in vowels)", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 70, "duration": 6.279200553894043, "task_id": "HumanEval/64", "result": "passed", "passed": true}
{"generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 1.2910349369049072, "task_id": "HumanEval/66", "result": "passed", "passed": true}
{"generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 37, "duration": 5.683075189590454, "task_id": "HumanEval/67", "result": "passed", "passed": true}
{"generated_code": "def pluck(arr):\n    even_values = [(value, index) for index, value in enumerate(arr) if value % 2 == 0]\n    if not even_values:\n        return []\n    min_even_value = min(even_values, key=lambda x: (x[0], x[1]))\n    return [min_even_value[0], min_even_value[1]]", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 82, "duration": 5.2497780323028564, "task_id": "HumanEval/68", "result": "passed", "passed": true}
{"generated_code": "def search(lst):\n    for num in sorted(set(lst), reverse=True):\n        if lst.count(num) >= num:\n            return num\n    return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 37, "duration": 5.657253980636597, "task_id": "HumanEval/69", "result": "passed", "passed": true}
{"generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 44, "duration": 4.340230464935303, "task_id": "HumanEval/70", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 92, "duration": 2.073251247406006, "task_id": "HumanEval/71", "result": "passed", "passed": true}
{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 5.156278610229492, "task_id": "HumanEval/72", "result": "passed", "passed": true}
{"generated_code": "def smallest_change(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-1-i]:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 52, "duration": 1.6135008335113525, "task_id": "HumanEval/73", "result": "passed", "passed": true}
{"generated_code": "from collections import Counter\n\ndef same_chars(s0: str, s1: str):\n    return Counter(s0) == Counter(s1)", "is_solved": false, "iteration": 5, "prompt_tokens": 4435, "completion_tokens": 440, "duration": 18.518670797348022, "task_id": "HumanEval/54", "result": "failed: ", "passed": false}
{"generated_code": "def sort_third(l: list):\n    return [sorted(l[i:i+3]) if i % 3 == 0 and i+3 <= len(l) else l[i] for i in range(len(l))]", "is_solved": false, "iteration": 5, "prompt_tokens": 6814, "completion_tokens": 490, "duration": 21.029149293899536, "task_id": "HumanEval/33", "result": "failed: ", "passed": false}
{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift] if shift <= len(x_str) else x_str[::-1]", "is_solved": false, "iteration": 5, "prompt_tokens": 3934, "completion_tokens": 587, "duration": 18.290936708450317, "task_id": "HumanEval/65", "result": "failed: ", "passed": false}
{"generated_code": "def total_match(lst1, lst2):\n    return lst1 if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2) else lst2", "is_solved": true, "iteration": 0, "prompt_tokens": 243, "completion_tokens": 43, "duration": 4.563444375991821, "task_id": "HumanEval/74", "result": "passed", "passed": true}
{"generated_code": "def hex_key(num):\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = sum(1 for digit in num if digit in primes)\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 49, "duration": 3.148556709289551, "task_id": "HumanEval/78", "result": "passed", "passed": true}
{"generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 29, "duration": 4.2002599239349365, "task_id": "HumanEval/79", "result": "passed", "passed": true}
{"generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 76, "duration": 2.430246591567993, "task_id": "HumanEval/80", "result": "passed", "passed": true}
{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 69, "duration": 5.953183889389038, "task_id": "HumanEval/82", "result": "passed", "passed": true}
{"generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 21, "duration": 3.9268581867218018, "task_id": "HumanEval/84", "result": "passed", "passed": true}
{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 105, "completion_tokens": 38, "duration": 4.256866216659546, "task_id": "HumanEval/85", "result": "passed", "passed": true}
{"generated_code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(word)) for word in s.split()])", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 26, "duration": 4.099725961685181, "task_id": "HumanEval/86", "result": "passed", "passed": true}
{"generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 68, "duration": 2.980239152908325, "task_id": "HumanEval/87", "result": "passed", "passed": true}
{"generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 52, "duration": 4.335091829299927, "task_id": "HumanEval/90", "result": "passed", "passed": true}
{"generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 54, "duration": 4.2294628620147705, "task_id": "HumanEval/92", "result": "passed", "passed": true}
{"generated_code": "def largest_prime_sum(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    prime_numbers = [num for num in lst if is_prime(num)]\n    largest_prime = max(prime_numbers)\n    return sum_of_digits(largest_prime)", "is_solved": true, "iteration": 0, "prompt_tokens": 336, "completion_tokens": 116, "duration": 4.039272308349609, "task_id": "HumanEval/94", "result": "failed: name 'skjkasdkd' is not defined", "passed": false}
{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 86, "duration": 4.878050327301025, "task_id": "HumanEval/96", "result": "passed", "passed": true}
{"generated_code": "def multiply(a, b):\n    return int(str(abs(a))[-1]) * int(str(abs(b))[-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 29, "duration": 3.914466619491577, "task_id": "HumanEval/97", "result": "passed", "passed": true}
{"generated_code": "def count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in 'AEIOU')", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 38, "duration": 3.995293378829956, "task_id": "HumanEval/98", "result": "passed", "passed": true}
{"generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or x == n ** int(x ** (1/n)))", "is_solved": true, "iteration": 1, "prompt_tokens": 1152, "completion_tokens": 123, "duration": 7.387583017349243, "task_id": "HumanEval/76", "result": "passed", "passed": true}
{"generated_code": "def sort_array(array):\n    if not array:\n        return []\n    \n    sorted_array = array.copy()\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        return sorted(sorted_array, reverse=True)\n    else:\n        return sorted(sorted_array)", "is_solved": true, "iteration": 1, "prompt_tokens": 1465, "completion_tokens": 179, "duration": 8.347017288208008, "task_id": "HumanEval/88", "result": "passed", "passed": true}
{"generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = (ord(char) - ord('a') + 4) % 26\n            if char.islower():\n                result += chr(shift + ord('a'))\n            else:\n                result += chr(shift + ord('A'))\n        else:\n            result += char\n    return result", "is_solved": true, "iteration": 1, "prompt_tokens": 1373, "completion_tokens": 256, "duration": 10.88638186454773, "task_id": "HumanEval/89", "result": "passed", "passed": true}
{"generated_code": "def iscube(a):\n    return (round(abs(a)**(1/3))**3 == abs(a))", "is_solved": true, "iteration": 2, "prompt_tokens": 1829, "completion_tokens": 208, "duration": 11.951208114624023, "task_id": "HumanEval/77", "result": "passed", "passed": true}
{"generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    return all(isinstance(key, str) and key.islower() for key in keys) or all(isinstance(key, str) and key.isupper() for key in keys)", "is_solved": true, "iteration": 2, "prompt_tokens": 2302, "completion_tokens": 247, "duration": 11.010768175125122, "task_id": "HumanEval/95", "result": "passed", "passed": true}
{"generated_code": "import re\n\ndef is_bored(S):\n    sentences = re.split('[.!?]', S)\n    sentences = [sentence.strip() for sentence in sentences if sentence]\n    \n    count = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0] == 'I':\n            count += 1\n    \n    return count", "is_solved": true, "iteration": 2, "prompt_tokens": 2051, "completion_tokens": 346, "duration": 11.926523447036743, "task_id": "HumanEval/91", "result": "passed", "passed": true}
{"generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa > 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result", "is_solved": true, "iteration": 1, "prompt_tokens": 1953, "completion_tokens": 579, "duration": 16.986058712005615, "task_id": "HumanEval/81", "result": "passed", "passed": true}
{"generated_code": "def starts_one_ends(n):\n    count = 9 * 10**(n-1) - 8**n\n    return count", "is_solved": false, "iteration": 5, "prompt_tokens": 3501, "completion_tokens": 399, "duration": 19.013472318649292, "task_id": "HumanEval/83", "result": "failed: ", "passed": false}
{"generated_code": "def encode(message):\n    encoded_message = ''\n    vowels = 'aeiouAEIOU'\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr((ord(char) + 2 - ord('a')) % 26 + ord('A'))\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message", "is_solved": false, "iteration": 5, "prompt_tokens": 4585, "completion_tokens": 722, "duration": 22.11250638961792, "task_id": "HumanEval/93", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_factors = set()\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            prime_factors.add(i)\n    \n    return len(prime_factors) == 3", "is_solved": false, "iteration": 5, "prompt_tokens": 4948, "completion_tokens": 912, "duration": 27.857397079467773, "task_id": "HumanEval/75", "result": "failed: ", "passed": false}
{"generated_code": "def closest_integer(value):\n    value = float(value)\n    if value < 0:\n        return int(value - 0.5)\n    else:\n        return int(value + 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 45, "duration": 4.453214406967163, "task_id": "HumanEval/99", "result": "passed", "passed": true}
{"generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(\",\", \" \").split()]", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 25, "duration": 1.0746467113494873, "task_id": "HumanEval/101", "result": "passed", "passed": true}
{"generated_code": "def choose_num(x, y):\n    max_even = -1\n    for num in range(x, y+1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 55, "duration": 3.2499303817749023, "task_id": "HumanEval/102", "result": "passed", "passed": true}
{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 40, "duration": 2.996777057647705, "task_id": "HumanEval/103", "result": "passed", "passed": true}
{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 33, "duration": 4.210830211639404, "task_id": "HumanEval/104", "result": "passed", "passed": true}
{"generated_code": "def by_length(arr):\n    digits = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [x for x in arr if 1 <= x <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    result = [digits[x] for x in reversed_arr]\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 119, "duration": 3.765507936477661, "task_id": "HumanEval/105", "result": "passed", "passed": true}
{"generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 82, "duration": 2.168910264968872, "task_id": "HumanEval/106", "result": "passed", "passed": true}
{"generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 99, "duration": 2.3434085845947266, "task_id": "HumanEval/107", "result": "passed", "passed": true}
{"generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    n = len(arr)\n    for i in range(n):\n        if sorted_arr == arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 67, "duration": 1.888298511505127, "task_id": "HumanEval/109", "result": "passed", "passed": true}
{"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(x % 2 == 1 for x in lst1) <= sum(x % 2 == 0 for x in lst2) else \"NO\"", "is_solved": true, "iteration": 0, "prompt_tokens": 247, "completion_tokens": 51, "duration": 1.6188201904296875, "task_id": "HumanEval/110", "result": "passed", "passed": true}
{"generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 212, "completion_tokens": 39, "duration": 1.6968176364898682, "task_id": "HumanEval/112", "result": "passed", "passed": true}
{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 60, "duration": 6.022474765777588, "task_id": "HumanEval/114", "result": "passed", "passed": true}
{"generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 220, "completion_tokens": 28, "duration": 1.244821310043335, "task_id": "HumanEval/116", "result": "passed", "passed": true}
{"generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for letter in word if letter.lower() not in 'aeiou')\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 62, "duration": 2.7944095134735107, "task_id": "HumanEval/117", "result": "passed", "passed": true}
{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 98, "duration": 6.123220443725586, "task_id": "HumanEval/118", "result": "passed", "passed": true}
{"generated_code": "def get_odd_collatz(n):\n    collatz_seq = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_seq.append(n)\n    \n    return sorted([num for num in collatz_seq if num % 2 != 0])", "is_solved": true, "iteration": 0, "prompt_tokens": 281, "completion_tokens": 86, "duration": 5.043258190155029, "task_id": "HumanEval/123", "result": "passed", "passed": true}
{"generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:] if k > 0 else []", "is_solved": true, "iteration": 1, "prompt_tokens": 1650, "completion_tokens": 88, "duration": 4.108864068984985, "task_id": "HumanEval/120", "result": "passed", "passed": true}
{"generated_code": "def solution(lst):\n    return sum(num for i, num in enumerate(lst) if i % 2 == 0 and num % 2 != 0)", "is_solved": true, "iteration": 1, "prompt_tokens": 1130, "completion_tokens": 140, "duration": 5.191486835479736, "task_id": "HumanEval/121", "result": "passed", "passed": true}
{"generated_code": "def histogram(test):\n    letters = test.split()\n    letter_count = {}\n    for letter in letters:\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n    if not letter_count:\n        return {}\n    max_count = max(letter_count.values())\n    return {letter: count for letter, count in letter_count.items() if count == max_count}", "is_solved": true, "iteration": 1, "prompt_tokens": 1371, "completion_tokens": 229, "duration": 8.152562856674194, "task_id": "HumanEval/111", "result": "passed", "passed": true}
{"generated_code": "import math\n\ndef max_fill(grid, capacity):\n    total_water = sum(math.ceil(row / capacity) for row in map(sum, grid))\n    return total_water", "is_solved": true, "iteration": 5, "prompt_tokens": 6057, "completion_tokens": 447, "duration": 18.866983652114868, "task_id": "HumanEval/115", "result": "passed", "passed": true}
{"generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 2)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones", "is_solved": true, "iteration": 5, "prompt_tokens": 5044, "completion_tokens": 640, "duration": 21.902761936187744, "task_id": "HumanEval/100", "result": "passed", "passed": true}
{"generated_code": "def add_elements(arr, k):\n    return sum(arr[:k])", "is_solved": false, "iteration": 5, "prompt_tokens": 4321, "completion_tokens": 331, "duration": 16.42795467376709, "task_id": "HumanEval/122", "result": "failed: ", "passed": false}
{"generated_code": "def count_nums(arr):\n    return sum(sum(int(d) for d in str(abs(num))) > 0 for num in arr if num != 0)", "is_solved": false, "iteration": 5, "prompt_tokens": 4799, "completion_tokens": 420, "duration": 16.92253565788269, "task_id": "HumanEval/108", "result": "failed: ", "passed": false}
{"generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(int(digit) % 2 != 0 for digit in string), sum(int(digit) % 2 != 0 for digit in string), i+1, i+1) for i, string in enumerate(lst)]", "is_solved": false, "iteration": 5, "prompt_tokens": 5561, "completion_tokens": 561, "duration": 19.274121046066284, "task_id": "HumanEval/113", "result": "failed: Test 1", "passed": false}
{"generated_code": "def match_parens(lst):\n    count = 0\n    for s in lst:\n        for char in s:\n            count += 1 if char == '(' else -1\n            if count < 0:\n                return 'No'\n    return 'Yes' if count == 0 else 'No'", "is_solved": false, "iteration": 5, "prompt_tokens": 6033, "completion_tokens": 626, "duration": 20.352622509002686, "task_id": "HumanEval/119", "result": "failed: ", "passed": false}
{"generated_code": "def valid_date(date):\n    if len(date) != 10:\n        return False\n    month, day, year = date.split('-')\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    month, day, year = int(month), int(day), int(year)\n    if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    else:\n        return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 313, "completion_tokens": 192, "duration": 5.403190851211548, "task_id": "HumanEval/124", "result": "passed", "passed": true}
{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 26, "duration": 2.2351036071777344, "task_id": "HumanEval/133", "result": "passed", "passed": true}
{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt == \"\":\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and (len(txt) == 1 or txt[-2] == \" \"):\n        return True\n    else:\n        return False", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 66, "duration": 1.883793830871582, "task_id": "HumanEval/134", "result": "passed", "passed": true}
{"generated_code": "def largest_smallest_integers(lst):\n    neg_integers = [num for num in lst if num < 0]\n    pos_integers = [num for num in lst if num > 0]\n    \n    largest_neg = max(neg_integers) if neg_integers else None\n    smallest_pos = min(pos_integers) if pos_integers else None\n    \n    return (largest_neg, smallest_pos)", "is_solved": true, "iteration": 0, "prompt_tokens": 188, "completion_tokens": 90, "duration": 3.454267978668213, "task_id": "HumanEval/136", "result": "passed", "passed": true}
{"generated_code": "def is_equal_to_sum_even(n):\n    return n % 2 == 0 and n >= 8", "is_solved": true, "iteration": 0, "prompt_tokens": 127, "completion_tokens": 27, "duration": 2.1825339794158936, "task_id": "HumanEval/138", "result": "passed", "passed": true}
{"generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        factorial = 1\n        for j in range(1, i+1):\n            factorial *= j\n        result *= factorial\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 60, "duration": 5.583819150924683, "task_id": "HumanEval/139", "result": "passed", "passed": true}
{"generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 98, "duration": 3.6051621437072754, "task_id": "HumanEval/141", "result": "passed", "passed": true}
{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 46, "duration": 2.6627280712127686, "task_id": "HumanEval/142", "result": "passed", "passed": true}
{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "is_solved": true, "iteration": 0, "prompt_tokens": 197, "completion_tokens": 95, "duration": 5.373974323272705, "task_id": "HumanEval/143", "result": "passed", "passed": true}
{"generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return (x_num * n_num) % (x_den * n_den) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 59, "duration": 2.6001389026641846, "task_id": "HumanEval/144", "result": "passed", "passed": true}
{"generated_code": "def specialFilter(nums):\n    return sum(1 for num in nums if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9'])", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 67, "duration": 5.582629919052124, "task_id": "HumanEval/146", "result": "passed", "passed": true}
{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2)\n    if start_index > end_index:\n        start_index, end_index = end_index, start_index\n    return tuple(planets[start_index+1:end_index])", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 118, "duration": 3.777313470840454, "task_id": "HumanEval/148", "result": "passed", "passed": true}
{"generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n+1):\n        a_i = i * i - i + 1\n        for j in range(i+1, n+1):\n            a_j = j * j - j + 1\n            for k in range(j+1, n+1):\n                a_k = k * k - k + 1\n                if (a_i + a_j + a_k) % 3 == 0:\n                    count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 123, "duration": 4.436676263809204, "task_id": "HumanEval/147", "result": "passed", "passed": true}
{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    product = 1\n    contains_zero = False\n    for num in arr:\n        if num == 0:\n            contains_zero = True\n        else:\n            product *= num / abs(num)\n    \n    if contains_zero:\n        return 0\n    return sum(abs(num) for num in arr) * product", "is_solved": true, "iteration": 1, "prompt_tokens": 1243, "completion_tokens": 189, "duration": 5.551953554153442, "task_id": "HumanEval/128", "result": "passed", "passed": true}
{"generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd = True\n    return product if has_odd else 0", "is_solved": true, "iteration": 1, "prompt_tokens": 969, "completion_tokens": 198, "duration": 7.572909832000732, "task_id": "HumanEval/131", "result": "passed", "passed": true}
{"generated_code": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i-1\n    return max_index", "is_solved": false, "iteration": 5, "prompt_tokens": 4159, "completion_tokens": 491, "duration": 20.704801082611084, "task_id": "HumanEval/135", "result": "failed: ", "passed": false}
{"generated_code": "def is_sorted(lst):\n    return lst == sorted(set(lst)) and lst == sorted(lst)", "is_solved": false, "iteration": 5, "prompt_tokens": 6157, "completion_tokens": 342, "duration": 17.265307426452637, "task_id": "HumanEval/126", "result": "failed: This prints if this assert fails 7 (good for debugging!)", "passed": false}
{"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))) if x >= 0 else -sum(int(d) for d in str(abs(x))), nums.index(x)))", "is_solved": false, "iteration": 5, "prompt_tokens": 6331, "completion_tokens": 484, "duration": 15.120423555374146, "task_id": "HumanEval/145", "result": "failed: ", "passed": false}
{"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)", "is_solved": false, "iteration": 5, "prompt_tokens": 4642, "completion_tokens": 639, "duration": 20.736239671707153, "task_id": "HumanEval/125", "result": "failed: ", "passed": false}
{"generated_code": "def is_nested(string):\n    if not string:\n        return False\n    \n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack and stack[-1] == '[':\n            stack.pop()\n        else:\n            return False\n    return len(stack) < 2", "is_solved": false, "iteration": 5, "prompt_tokens": 5314, "completion_tokens": 649, "duration": 21.032286643981934, "task_id": "HumanEval/132", "result": "failed: ", "passed": false}
{"generated_code": "def fix_spaces(text):\n    result = \"\"\n    count = 0\n    for char in text:\n        if char == \" \":\n            count += 1\n            if count > 2:\n                result = result[:-1] + \"-\"\n        else:\n            count = 0\n        if char != \" \":\n            result += char\n        else:\n            result += \"_\"\n    return result", "is_solved": false, "iteration": 5, "prompt_tokens": 4501, "completion_tokens": 653, "duration": 18.809352159500122, "task_id": "HumanEval/140", "result": "failed: This prints if this assert fails 4 (good for debugging!)", "passed": false}
{"generated_code": "def compare_one(a, b):\n    if a == b:\n        return None\n    \n    if type(a) == type(b):\n        return max(a, b)\n    \n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        return max(a, b)\n    \n    if isinstance(a, str) and isinstance(b, str):\n        return b if ',' in b else a\n    \n    return max(a, b, key=lambda x: float(x.replace(',', '.')) if isinstance(x, str) else x)", "is_solved": false, "iteration": 5, "prompt_tokens": 5079, "completion_tokens": 821, "duration": 24.15841817855835, "task_id": "HumanEval/137", "result": "failed: ", "passed": false}
{"generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1, 3]\n    else:\n        tribonacci = [0, 1, 3]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tribonacci.append(1 + i // 2)\n            else:\n                tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3])\n        return tribonacci", "is_solved": false, "iteration": 5, "prompt_tokens": 8357, "completion_tokens": 886, "duration": 23.28677201271057, "task_id": "HumanEval/130", "result": "failed: ", "passed": false}
{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    intersection_length = intersection_end - intersection_start + 1\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 5, "prompt_tokens": 7488, "completion_tokens": 1136, "duration": 29.350576639175415, "task_id": "HumanEval/127", "result": "failed: ", "passed": false}
{"generated_code": "def minPath(grid, k):\n    n = len(grid)\n    m = len(grid[0])\n    visited = [[False for _ in range(m)] for _ in range(n)]\n    \n    def dfs(i, j, path):\n        if i < 0 or i >= n or j < 0 or j >= m or visited[i][j]:\n            return\n        path.append(grid[i][j])\n        visited[i][j] = True\n        if len(path) == k:\n            return path\n        res = []\n        for x, y in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:\n            res.append(dfs(x, y, path.copy()))\n        visited[i][j] = False\n        return min(filter(None, res))\n    \n    for i in range(n):\n        for j in range(m):\n            path = dfs(i, j, [])\n            if path:\n                return path", "is_solved": false, "iteration": 5, "prompt_tokens": 14265, "completion_tokens": 1944, "duration": 40.78646397590637, "task_id": "HumanEval/129", "result": "failed: ", "passed": false}
{"generated_code": "def list_sort(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 237, "completion_tokens": 39, "duration": 2.606926202774048, "task_id": "HumanEval/149", "result": "failed: name 'sorted_list_sum' is not defined", "passed": false}
{"generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 78, "duration": 2.0863029956817627, "task_id": "HumanEval/150", "result": "passed", "passed": true}
{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0 and isinstance(x, int))", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 39, "duration": 4.964281320571899, "task_id": "HumanEval/151", "result": "passed", "passed": true}
{"generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 39, "duration": 2.242448329925537, "task_id": "HumanEval/152", "result": "passed", "passed": true}
{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        return sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n    \n    strongest = max(extensions, key=lambda x: strength(x))\n    return f\"{class_name}.{strongest}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 71, "duration": 3.0529162883758545, "task_id": "HumanEval/153", "result": "passed", "passed": true}
{"generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',\n        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 142, "duration": 3.109078884124756, "task_id": "HumanEval/156", "result": "passed", "passed": true}
{"generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 52, "duration": 1.781921625137329, "task_id": "HumanEval/157", "result": "passed", "passed": true}
{"generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    remaining_after_meals = max(0, remaining - need)\n    return [total_eaten, remaining_after_meals]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 51, "duration": 5.194386959075928, "task_id": "HumanEval/159", "result": "passed", "passed": true}
{"generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += operator[i] + str(operand[i+1])\n    return eval(expression)", "is_solved": true, "iteration": 0, "prompt_tokens": 257, "completion_tokens": 48, "duration": 4.242655515670776, "task_id": "HumanEval/160", "result": "passed", "passed": true}
{"generated_code": "def solve(s):\n    return s.swapcase() if any(c.isalpha() for c in s) else s[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 30, "duration": 2.5408999919891357, "task_id": "HumanEval/161", "result": "passed", "passed": true}
{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 33, "duration": 2.378025531768799, "task_id": "HumanEval/162", "result": "passed", "passed": true}
{"generated_code": "def even_odd_count(num):\n    num_str = str(abs(num))\n    even_count = len([int(digit) for digit in num_str if int(digit) % 2 == 0])\n    odd_count = len([int(digit) for digit in num_str if int(digit) % 2 != 0])\n    return (even_count, odd_count)", "is_solved": true, "iteration": 1, "prompt_tokens": 1187, "completion_tokens": 206, "duration": 6.0578742027282715, "task_id": "HumanEval/155", "result": "passed", "passed": true}
{"generated_code": "def find_max(words):\n    return min(sorted(words, key=lambda x: (-len(set(x)), x)))", "is_solved": false, "iteration": 5, "prompt_tokens": 5103, "completion_tokens": 317, "duration": 17.71931791305542, "task_id": "HumanEval/158", "result": "failed: t1", "passed": false}
{"generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "is_solved": false, "iteration": 5, "prompt_tokens": 4291, "completion_tokens": 474, "duration": 19.865291357040405, "task_id": "HumanEval/163", "result": "failed: Test 1", "passed": false}
{"generated_code": "def cycpattern_check(a, b):\n    return any(b in a[i:] + a[:i] for i in range(len(a))) or any(b in a[i:] + a[:i] for i in range(1, len(a)))\n\n# Test cases\nprint(cycpattern_check(\"abcd\", \"abd\"))  # False\nprint(cycpattern_check(\"hello\", \"ell\"))  # True\nprint(cycpattern_check(\"whassup\", \"psus\"))  # False\nprint(cycpattern_check(\"abab\", \"baa\"))  # True\nprint(cycpattern_check(\"efef\", \"eeff\"))  # False\nprint(cycpattern_check(\"himenss\", \"simen\"))  # True", "is_solved": false, "iteration": 5, "prompt_tokens": 5111, "completion_tokens": 1012, "duration": 24.113641023635864, "task_id": "HumanEval/154", "result": "failed: test #3", "passed": false}
{"generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 61, "duration": 3.7889280319213867, "task_id": "HumanEval/0", "result": "passed", "passed": true}
{"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": true, "iteration": 0, "prompt_tokens": 135, "completion_tokens": 21, "duration": 3.3748176097869873, "task_id": "HumanEval/2", "result": "passed", "passed": true}
{"generated_code": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 48, "duration": 49.579845666885376, "task_id": "HumanEval/3", "result": "passed", "passed": true}
{"generated_code": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 44, "duration": 3.6765074729919434, "task_id": "HumanEval/4", "result": "passed", "passed": true}
{"generated_code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 60, "duration": 4.007699728012085, "task_id": "HumanEval/5", "result": "passed", "passed": true}
{"generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 94, "duration": 4.523579835891724, "task_id": "HumanEval/6", "result": "passed", "passed": true}
{"generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "is_solved": true, "iteration": 0, "prompt_tokens": 143, "completion_tokens": 35, "duration": 3.4425792694091797, "task_id": "HumanEval/7", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        total_sum = sum(numbers)\n        total_product = 1\n        for num in numbers:\n            total_product *= num\n        return total_sum, total_product", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 75, "duration": 4.375110387802124, "task_id": "HumanEval/8", "result": "passed", "passed": true}
{"generated_code": "def rolling_max(numbers: List[int]) -> List[int]:\n    max_numbers = []\n    max_num = float('-inf')\n    for num in numbers:\n        max_num = max(max_num, num)\n        max_numbers.append(max_num)\n    return max_numbers", "is_solved": true, "iteration": 0, "prompt_tokens": 150, "completion_tokens": 57, "duration": 3.7959132194519043, "task_id": "HumanEval/9", "result": "passed", "passed": true}
{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.5920822620391846, "task_id": "HumanEval/11", "result": "passed", "passed": true}
{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 39, "duration": 3.631875514984131, "task_id": "HumanEval/13", "result": "passed", "passed": true}
{"generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 32, "duration": 3.5267109870910645, "task_id": "HumanEval/14", "result": "passed", "passed": true}
{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 28, "duration": 3.3324170112609863, "task_id": "HumanEval/15", "result": "passed", "passed": true}
{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 3.1436092853546143, "task_id": "HumanEval/16", "result": "passed", "passed": true}
{"generated_code": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    return [durations[note] for note in notes]\n\nparse_music('o o| .| o| o| .| .| .| .| o o')", "is_solved": true, "iteration": 0, "prompt_tokens": 222, "completion_tokens": 82, "duration": 4.5098161697387695, "task_id": "HumanEval/17", "result": "passed", "passed": true}
{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 74, "duration": 4.2200727462768555, "task_id": "HumanEval/18", "result": "passed", "passed": true}
{"generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_dict[x])\n    return ' '.join(sorted_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 102, "duration": 4.697938442230225, "task_id": "HumanEval/19", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = ()\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 216, "completion_tokens": 96, "duration": 4.488142251968384, "task_id": "HumanEval/20", "result": "passed", "passed": true}
{"generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 53, "duration": 3.7702200412750244, "task_id": "HumanEval/21", "result": "passed", "passed": true}
{"generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 31, "duration": 3.5470941066741943, "task_id": "HumanEval/22", "result": "passed", "passed": true}
{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 3.0233676433563232, "task_id": "HumanEval/23", "result": "passed", "passed": true}
{"generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 43, "duration": 3.513399124145508, "task_id": "HumanEval/24", "result": "passed", "passed": true}
{"generated_code": "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 65, "duration": 3.7573485374450684, "task_id": "HumanEval/25", "result": "passed", "passed": true}
{"generated_code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 33, "duration": 3.290222644805908, "task_id": "HumanEval/26", "result": "passed", "passed": true}
{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 36, "duration": 3.3436784744262695, "task_id": "HumanEval/27", "result": "passed", "passed": true}
{"generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 20, "duration": 2.9848461151123047, "task_id": "HumanEval/28", "result": "passed", "passed": true}
{"generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 34, "duration": 3.402144432067871, "task_id": "HumanEval/29", "result": "passed", "passed": true}
{"generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 25, "duration": 1.0710422992706299, "task_id": "HumanEval/30", "result": "passed", "passed": true}
{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 56, "duration": 3.964221477508545, "task_id": "HumanEval/31", "result": "passed", "passed": true}
{"generated_code": "def find_zero(xs: list):\n    return -xs[0] / xs[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 23, "duration": 3.072744369506836, "task_id": "HumanEval/32", "result": "failed: name 'poly' is not defined", "passed": false}
{"generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 17, "duration": 3.101635456085205, "task_id": "HumanEval/34", "result": "passed", "passed": true}
{"generated_code": "def max_element(l: list):\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 16, "duration": 2.888660430908203, "task_id": "HumanEval/35", "result": "passed", "passed": true}
{"generated_code": "def sort_even(l: list):\n    return [sorted(l[::2])[i//2] if i % 2 == 0 else l[i] for i in range(len(l))]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 43, "duration": 3.5214340686798096, "task_id": "HumanEval/37", "result": "passed", "passed": true}
{"generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iteration": 0, "prompt_tokens": 208, "completion_tokens": 162, "duration": 5.722168922424316, "task_id": "HumanEval/38", "result": "passed", "passed": true}
{"generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n):\n                a, b = b, a + b\n            return b\n\n    count = 0\n    i = 1\n    while count < n:\n        i += 1\n        if is_prime(fibonacci(i)):\n            count += 1\n\n    return fibonacci(i)", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 178, "duration": 8.617135047912598, "task_id": "HumanEval/39", "result": "passed", "passed": true}
{"generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 70, "duration": 4.308423757553101, "task_id": "HumanEval/40", "result": "passed", "passed": true}
{"generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 23, "duration": 4.702202320098877, "task_id": "HumanEval/42", "result": "passed", "passed": true}
{"generated_code": "def pairs_sum_to_zero(l):\n    return any(-x in l for x in l if x != 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 28, "duration": 5.8232152462005615, "task_id": "HumanEval/43", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 22, "duration": 2.7677125930786133, "task_id": "HumanEval/45", "result": "passed", "passed": true}
{"generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n    \n    return d", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 119, "duration": 6.019763231277466, "task_id": "HumanEval/46", "result": "passed", "passed": true}
{"generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "is_solved": true, "iteration": 0, "prompt_tokens": 125, "completion_tokens": 61, "duration": 1.629913091659546, "task_id": "HumanEval/47", "result": "passed", "passed": true}
{"generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 20, "duration": 4.280380725860596, "task_id": "HumanEval/48", "result": "passed", "passed": true}
{"generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 25, "duration": 4.343328475952148, "task_id": "HumanEval/49", "result": "passed", "passed": true}
{"generated_code": "def change_base(x: int, base: int):\n    digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    if x < base:\n        return digits[x]\n    else:\n        return change_base(x // base, base) + digits[x % base]", "is_solved": true, "iteration": 1, "prompt_tokens": 998, "completion_tokens": 142, "duration": 9.065916299819946, "task_id": "HumanEval/44", "result": "passed", "passed": true}
{"generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_length = max(len(string) for string in strings)\n    return next(string for string in strings if len(string) == max_length)", "is_solved": true, "iteration": 1, "prompt_tokens": 927, "completion_tokens": 140, "duration": 7.349746465682983, "task_id": "HumanEval/12", "result": "passed", "passed": true}
{"generated_code": "def car_race_collision(n: int):\n    return n**2", "is_solved": true, "iteration": 4, "prompt_tokens": 3213, "completion_tokens": 240, "duration": 15.340315103530884, "task_id": "HumanEval/41", "result": "passed", "passed": true}
{"generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": true, "iteration": 0, "prompt_tokens": 140, "completion_tokens": 82, "duration": 4.167835235595703, "task_id": "HumanEval/50", "result": "passed", "passed": true}
{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 31, "duration": 5.49226450920105, "task_id": "HumanEval/51", "result": "passed", "passed": true}
{"generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 26, "duration": 5.450874328613281, "task_id": "HumanEval/52", "result": "passed", "passed": true}
{"generated_code": "def add(x: int, y: int):\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 20, "duration": 1.7860267162322998, "task_id": "HumanEval/53", "result": "passed", "passed": true}
{"generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 38, "duration": 4.537459373474121, "task_id": "HumanEval/55", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 64, "duration": 1.595395803451538, "task_id": "HumanEval/56", "result": "passed", "passed": true}
{"generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 58, "duration": 6.372962713241577, "task_id": "HumanEval/57", "result": "passed", "passed": true}
{"generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 29, "duration": 5.793344020843506, "task_id": "HumanEval/58", "result": "passed", "passed": true}
{"generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 50, "duration": 6.514908790588379, "task_id": "HumanEval/59", "result": "passed", "passed": true}
{"generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 22, "duration": 5.250669479370117, "task_id": "HumanEval/60", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 67, "duration": 6.117987394332886, "task_id": "HumanEval/61", "result": "passed", "passed": true}
{"generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]\n\n# Test cases\nprint(derivative([3, 1, 2, 4, 5]))  # Output: [1, 4, 12, 20]\nprint(derivative([1, 2, 3]))  # Output: [2, 6]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 89, "duration": 5.635868549346924, "task_id": "HumanEval/62", "result": "passed", "passed": true}
{"generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 72, "duration": 2.085747480392456, "task_id": "HumanEval/63", "result": "passed", "passed": true}
{"generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    if s[-1].lower() == 'y':\n        return sum(1 for char in s[:-1] if char.lower() in vowels) + 1\n    else:\n        return sum(1 for char in s if char.lower() in vowels)", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 70, "duration": 6.279200553894043, "task_id": "HumanEval/64", "result": "passed", "passed": true}
{"generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 1.2910349369049072, "task_id": "HumanEval/66", "result": "passed", "passed": true}
{"generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 37, "duration": 5.683075189590454, "task_id": "HumanEval/67", "result": "passed", "passed": true}
{"generated_code": "def pluck(arr):\n    even_values = [(value, index) for index, value in enumerate(arr) if value % 2 == 0]\n    if not even_values:\n        return []\n    min_even_value = min(even_values, key=lambda x: (x[0], x[1]))\n    return [min_even_value[0], min_even_value[1]]", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 82, "duration": 5.2497780323028564, "task_id": "HumanEval/68", "result": "passed", "passed": true}
{"generated_code": "def search(lst):\n    for num in sorted(set(lst), reverse=True):\n        if lst.count(num) >= num:\n            return num\n    return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 37, "duration": 5.657253980636597, "task_id": "HumanEval/69", "result": "passed", "passed": true}
{"generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 44, "duration": 4.340230464935303, "task_id": "HumanEval/70", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 92, "duration": 2.073251247406006, "task_id": "HumanEval/71", "result": "passed", "passed": true}
{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 5.156278610229492, "task_id": "HumanEval/72", "result": "passed", "passed": true}
{"generated_code": "def smallest_change(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-1-i]:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 52, "duration": 1.6135008335113525, "task_id": "HumanEval/73", "result": "passed", "passed": true}
{"generated_code": "def total_match(lst1, lst2):\n    return lst1 if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2) else lst2", "is_solved": true, "iteration": 0, "prompt_tokens": 243, "completion_tokens": 43, "duration": 4.563444375991821, "task_id": "HumanEval/74", "result": "passed", "passed": true}
{"generated_code": "def hex_key(num):\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = sum(1 for digit in num if digit in primes)\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 49, "duration": 3.148556709289551, "task_id": "HumanEval/78", "result": "passed", "passed": true}
{"generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 29, "duration": 4.2002599239349365, "task_id": "HumanEval/79", "result": "passed", "passed": true}
{"generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 76, "duration": 2.430246591567993, "task_id": "HumanEval/80", "result": "passed", "passed": true}
{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 69, "duration": 5.953183889389038, "task_id": "HumanEval/82", "result": "passed", "passed": true}
{"generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 21, "duration": 3.9268581867218018, "task_id": "HumanEval/84", "result": "passed", "passed": true}
{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 105, "completion_tokens": 38, "duration": 4.256866216659546, "task_id": "HumanEval/85", "result": "passed", "passed": true}
{"generated_code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(word)) for word in s.split()])", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 26, "duration": 4.099725961685181, "task_id": "HumanEval/86", "result": "passed", "passed": true}
{"generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 68, "duration": 2.980239152908325, "task_id": "HumanEval/87", "result": "passed", "passed": true}
{"generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 52, "duration": 4.335091829299927, "task_id": "HumanEval/90", "result": "passed", "passed": true}
{"generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 54, "duration": 4.2294628620147705, "task_id": "HumanEval/92", "result": "passed", "passed": true}
{"generated_code": "def largest_prime_sum(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    prime_numbers = [num for num in lst if is_prime(num)]\n    largest_prime = max(prime_numbers)\n    return sum_of_digits(largest_prime)", "is_solved": true, "iteration": 0, "prompt_tokens": 336, "completion_tokens": 116, "duration": 4.039272308349609, "task_id": "HumanEval/94", "result": "failed: name 'skjkasdkd' is not defined", "passed": false}
{"generated_code": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)", "is_solved": true, "iteration": 1, "prompt_tokens": 1141, "completion_tokens": 108, "duration": 9.334072351455688, "task_id": "HumanEval/54", "result": "passed", "passed": true}
{"generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = ord(char) + 2 * 2\n            if char.islower():\n                result += chr((shift - ord('a')) % 26 + ord('a'))\n            else:\n                result += chr((shift - ord('A')) % 26 + ord('A'))\n        else:\n            result += char\n    return result", "is_solved": true, "iteration": 1, "prompt_tokens": 1361, "completion_tokens": 255, "duration": 10.193081140518188, "task_id": "HumanEval/89", "result": "passed", "passed": true}
{"generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or x == n ** int(x ** (1/n)))", "is_solved": true, "iteration": 1, "prompt_tokens": 1171, "completion_tokens": 142, "duration": 8.753745555877686, "task_id": "HumanEval/76", "result": "passed", "passed": true}
{"generated_code": "def sort_array(array):\n    if not array:\n        return array\n    \n    sorted_array = array.copy()\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        return sorted(sorted_array, reverse=True)\n    else:\n        return sorted(sorted_array)", "is_solved": true, "iteration": 1, "prompt_tokens": 1458, "completion_tokens": 172, "duration": 8.582252502441406, "task_id": "HumanEval/88", "result": "passed", "passed": true}
{"generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences if sentence]\n    \n    count = 0\n    for sentence in sentences:\n        if sentence.startswith('I '):  # Check for 'I ' instead of 'I'\n            count += 1\n    \n    return count", "is_solved": true, "iteration": 1, "prompt_tokens": 1092, "completion_tokens": 202, "duration": 9.556822776794434, "task_id": "HumanEval/91", "result": "passed", "passed": true}
{"generated_code": "def starts_one_ends(n):\n    if n == 1:\n        return 1\n    count = 2 * 9 * 10**(n-2)\n    return count", "is_solved": true, "iteration": 2, "prompt_tokens": 1630, "completion_tokens": 249, "duration": 12.978273868560791, "task_id": "HumanEval/83", "result": "passed", "passed": true}
{"generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_group = \"\"\n    open_braces = 0\n    for char in paren_string:\n        if char == '(':\n            open_braces += 1\n        current_group += char\n        if char == ')' and open_braces > 0:\n            open_braces -= 1\n            if open_braces == 0:\n                result.append(current_group.replace(\" \", \"\"))\n                current_group = \"\"\n    return result", "is_solved": true, "iteration": 2, "prompt_tokens": 2232, "completion_tokens": 354, "duration": 13.237479209899902, "task_id": "HumanEval/1", "result": "passed", "passed": true}
{"generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    return all(isinstance(key, str) and (key.islower() or key.isupper()) for key in keys) and len(set(key.islower() for key in keys)) == 1", "is_solved": true, "iteration": 4, "prompt_tokens": 4417, "completion_tokens": 496, "duration": 18.75165367126465, "task_id": "HumanEval/95", "result": "passed", "passed": true}
{"generated_code": "def iscube(a):\n    return (a >= 0) and (round(a**(1/3))**3 == a)", "is_solved": false, "iteration": 5, "prompt_tokens": 3793, "completion_tokens": 310, "duration": 18.06441903114319, "task_id": "HumanEval/77", "result": "failed: Third test error: False", "passed": false}
{"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 and i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "is_solved": false, "iteration": 5, "prompt_tokens": 4582, "completion_tokens": 544, "duration": 25.517485857009888, "task_id": "HumanEval/36", "result": "failed: ", "passed": false}
{"generated_code": "def sort_third(l: list):\n    return [sorted(l[i:i+3]) if i % 3 == 0 and i+2 < len(l) else l[i] for i in range(len(l))]", "is_solved": false, "iteration": 5, "prompt_tokens": 7454, "completion_tokens": 605, "duration": 27.22055220603943, "task_id": "HumanEval/33", "result": "failed: ", "passed": false}
{"generated_code": "def make_palindrome(string: str) -> str:\n    def is_palindrome(s):\n        return s == s[::-1]\n    \n    if not string:\n        return ''\n    \n    if is_palindrome(string):\n        return string\n    \n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i-1][::-1]", "is_solved": false, "iteration": 5, "prompt_tokens": 4419, "completion_tokens": 656, "duration": 23.11875057220459, "task_id": "HumanEval/10", "result": "failed: ", "passed": false}
{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "is_solved": false, "iteration": 5, "prompt_tokens": 4135, "completion_tokens": 704, "duration": 22.22350811958313, "task_id": "HumanEval/65", "result": "failed: ", "passed": false}
{"generated_code": "def encode(message):\n    encoded_message = ''\n    vowels = 'aeiouAEIOU'\n    for char in message:\n        if not char.isalpha():\n            encoded_message += char\n        else:\n            new_char = char.swapcase()\n            if char.lower() in vowels:\n                new_char = chr((ord(char) + 2 - ord('a')) % 26 + ord('A'))\n            encoded_message += new_char\n    return encoded_message", "is_solved": false, "iteration": 5, "prompt_tokens": 4618, "completion_tokens": 755, "duration": 24.60453510284424, "task_id": "HumanEval/93", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            count += 1\n    return count == 3", "is_solved": false, "iteration": 5, "prompt_tokens": 4889, "completion_tokens": 901, "duration": 27.736916065216064, "task_id": "HumanEval/75", "result": "failed: ", "passed": false}
{"generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa >= 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result", "is_solved": false, "iteration": 5, "prompt_tokens": 7118, "completion_tokens": 1587, "duration": 36.50959539413452, "task_id": "HumanEval/81", "result": "failed: ", "passed": false}
{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 86, "duration": 4.878050327301025, "task_id": "HumanEval/96", "result": "passed", "passed": true}
{"generated_code": "def multiply(a, b):\n    return int(str(abs(a))[-1]) * int(str(abs(b))[-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 29, "duration": 3.914466619491577, "task_id": "HumanEval/97", "result": "passed", "passed": true}
{"generated_code": "def count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in 'AEIOU')", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 38, "duration": 3.995293378829956, "task_id": "HumanEval/98", "result": "passed", "passed": true}
{"generated_code": "def closest_integer(value):\n    value = float(value)\n    if value < 0:\n        return int(value - 0.5)\n    else:\n        return int(value + 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 45, "duration": 4.453214406967163, "task_id": "HumanEval/99", "result": "passed", "passed": true}
{"generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(\",\", \" \").split()]", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 25, "duration": 1.0746467113494873, "task_id": "HumanEval/101", "result": "passed", "passed": true}
{"generated_code": "def choose_num(x, y):\n    max_even = -1\n    for num in range(x, y+1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 55, "duration": 3.2499303817749023, "task_id": "HumanEval/102", "result": "passed", "passed": true}
{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 40, "duration": 2.996777057647705, "task_id": "HumanEval/103", "result": "passed", "passed": true}
{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 33, "duration": 4.210830211639404, "task_id": "HumanEval/104", "result": "passed", "passed": true}
{"generated_code": "def by_length(arr):\n    digits = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [x for x in arr if 1 <= x <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    result = [digits[x] for x in reversed_arr]\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 119, "duration": 3.765507936477661, "task_id": "HumanEval/105", "result": "passed", "passed": true}
{"generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 82, "duration": 2.168910264968872, "task_id": "HumanEval/106", "result": "passed", "passed": true}
{"generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 99, "duration": 2.3434085845947266, "task_id": "HumanEval/107", "result": "passed", "passed": true}
{"generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    n = len(arr)\n    for i in range(n):\n        if sorted_arr == arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 67, "duration": 1.888298511505127, "task_id": "HumanEval/109", "result": "passed", "passed": true}
{"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(x % 2 == 1 for x in lst1) <= sum(x % 2 == 0 for x in lst2) else \"NO\"", "is_solved": true, "iteration": 0, "prompt_tokens": 247, "completion_tokens": 51, "duration": 1.6188201904296875, "task_id": "HumanEval/110", "result": "passed", "passed": true}
{"generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 212, "completion_tokens": 39, "duration": 1.6968176364898682, "task_id": "HumanEval/112", "result": "passed", "passed": true}
{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 60, "duration": 6.022474765777588, "task_id": "HumanEval/114", "result": "passed", "passed": true}
{"generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 220, "completion_tokens": 28, "duration": 1.244821310043335, "task_id": "HumanEval/116", "result": "passed", "passed": true}
{"generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for letter in word if letter.lower() not in 'aeiou')\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 62, "duration": 2.7944095134735107, "task_id": "HumanEval/117", "result": "passed", "passed": true}
{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 98, "duration": 6.123220443725586, "task_id": "HumanEval/118", "result": "passed", "passed": true}
{"generated_code": "def get_odd_collatz(n):\n    collatz_seq = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_seq.append(n)\n    \n    return sorted([num for num in collatz_seq if num % 2 != 0])", "is_solved": true, "iteration": 0, "prompt_tokens": 281, "completion_tokens": 86, "duration": 5.043258190155029, "task_id": "HumanEval/123", "result": "passed", "passed": true}
{"generated_code": "def valid_date(date):\n    if len(date) != 10:\n        return False\n    month, day, year = date.split('-')\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    month, day, year = int(month), int(day), int(year)\n    if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    else:\n        return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 313, "completion_tokens": 192, "duration": 5.403190851211548, "task_id": "HumanEval/124", "result": "passed", "passed": true}
{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 26, "duration": 2.2351036071777344, "task_id": "HumanEval/133", "result": "passed", "passed": true}
{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt == \"\":\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and (len(txt) == 1 or txt[-2] == \" \"):\n        return True\n    else:\n        return False", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 66, "duration": 1.883793830871582, "task_id": "HumanEval/134", "result": "passed", "passed": true}
{"generated_code": "def largest_smallest_integers(lst):\n    neg_integers = [num for num in lst if num < 0]\n    pos_integers = [num for num in lst if num > 0]\n    \n    largest_neg = max(neg_integers) if neg_integers else None\n    smallest_pos = min(pos_integers) if pos_integers else None\n    \n    return (largest_neg, smallest_pos)", "is_solved": true, "iteration": 0, "prompt_tokens": 188, "completion_tokens": 90, "duration": 3.454267978668213, "task_id": "HumanEval/136", "result": "passed", "passed": true}
{"generated_code": "def is_equal_to_sum_even(n):\n    return n % 2 == 0 and n >= 8", "is_solved": true, "iteration": 0, "prompt_tokens": 127, "completion_tokens": 27, "duration": 2.1825339794158936, "task_id": "HumanEval/138", "result": "passed", "passed": true}
{"generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        factorial = 1\n        for j in range(1, i+1):\n            factorial *= j\n        result *= factorial\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 60, "duration": 5.583819150924683, "task_id": "HumanEval/139", "result": "passed", "passed": true}
{"generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 98, "duration": 3.6051621437072754, "task_id": "HumanEval/141", "result": "passed", "passed": true}
{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 46, "duration": 2.6627280712127686, "task_id": "HumanEval/142", "result": "passed", "passed": true}
{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "is_solved": true, "iteration": 0, "prompt_tokens": 197, "completion_tokens": 95, "duration": 5.373974323272705, "task_id": "HumanEval/143", "result": "passed", "passed": true}
{"generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return (x_num * n_num) % (x_den * n_den) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 59, "duration": 2.6001389026641846, "task_id": "HumanEval/144", "result": "passed", "passed": true}
{"generated_code": "def maximum(arr, k):\n    if k == 0:\n        return []\n    return sorted(arr)[-k:]", "is_solved": true, "iteration": 1, "prompt_tokens": 1649, "completion_tokens": 90, "duration": 5.388626337051392, "task_id": "HumanEval/120", "result": "passed", "passed": true}
{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    for num in arr:\n        if num != 0:\n            product *= num / abs(num)\n        else:\n            product = 0\n            break\n    return sum(abs(num) for num in arr) * product", "is_solved": true, "iteration": 1, "prompt_tokens": 1246, "completion_tokens": 178, "duration": 5.7761149406433105, "task_id": "HumanEval/128", "result": "passed", "passed": true}
{"generated_code": "def digits(n: int) -> int:\n    product = 1\n    has_odd_digit = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd_digit = True\n    return product if has_odd_digit else 0", "is_solved": true, "iteration": 1, "prompt_tokens": 953, "completion_tokens": 190, "duration": 8.194440841674805, "task_id": "HumanEval/131", "result": "passed", "passed": true}
{"generated_code": "def histogram(test):\n    letters = test.split()\n    letter_count = {}\n    for letter in letters:\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n    if not letter_count:\n        return {}\n    max_count = max(letter_count.values())\n    return {letter: count for letter, count in letter_count.items() if count == max_count}", "is_solved": true, "iteration": 1, "prompt_tokens": 1373, "completion_tokens": 231, "duration": 8.338436841964722, "task_id": "HumanEval/111", "result": "passed", "passed": true}
{"generated_code": "def solution(lst):\n    return sum(num for i, num in enumerate(lst) if i % 2 == 0 and num % 2 != 0)", "is_solved": true, "iteration": 2, "prompt_tokens": 2073, "completion_tokens": 211, "duration": 8.681145429611206, "task_id": "HumanEval/121", "result": "passed", "passed": true}
{"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(x).replace('-', '')), nums.index(x)))", "is_solved": false, "iteration": 5, "prompt_tokens": 5810, "completion_tokens": 392, "duration": 15.598533868789673, "task_id": "HumanEval/145", "result": "failed: ", "passed": false}
{"generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if 0 < x < 100)", "is_solved": false, "iteration": 5, "prompt_tokens": 4413, "completion_tokens": 376, "duration": 20.344816207885742, "task_id": "HumanEval/122", "result": "failed: ", "passed": false}
{"generated_code": "def count_nums(arr):\n    return sum(sum(int(d) for d in str(abs(num)) if d != '-') > 0 for num in arr)", "is_solved": false, "iteration": 5, "prompt_tokens": 4704, "completion_tokens": 357, "duration": 18.60330557823181, "task_id": "HumanEval/108", "result": "failed: ", "passed": false}
{"generated_code": "import math\n\ndef max_fill(grid, capacity):\n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)", "is_solved": false, "iteration": 5, "prompt_tokens": 6037, "completion_tokens": 490, "duration": 22.42832851409912, "task_id": "HumanEval/115", "result": "failed: Error", "passed": false}
{"generated_code": "def is_sorted(lst):\n    return lst == sorted(set(lst)) and len(lst) == len(set(lst))", "is_solved": false, "iteration": 5, "prompt_tokens": 6316, "completion_tokens": 446, "duration": 22.627291917800903, "task_id": "HumanEval/126", "result": "failed: This prints if this assert fails 7 (good for debugging!)", "passed": false}
{"generated_code": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i-1\n    return max_index", "is_solved": false, "iteration": 5, "prompt_tokens": 4167, "completion_tokens": 525, "duration": 23.255053520202637, "task_id": "HumanEval/135", "result": "failed: ", "passed": false}
{"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return [word for word in txt.split() if word.islower() and all(ord(char) % 2 == 1 for char in word)]\n\n# Improved implementation\ndef split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for word in txt.split() if all(ord(char) % 2 == 1 for char in word))", "is_solved": false, "iteration": 5, "prompt_tokens": 5305, "completion_tokens": 656, "duration": 24.006946325302124, "task_id": "HumanEval/125", "result": "failed: ", "passed": false}
{"generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 2)\n        else:\n            stones.append(stones[-1] + 1)\n    return stones", "is_solved": false, "iteration": 5, "prompt_tokens": 4789, "completion_tokens": 622, "duration": 23.79448390007019, "task_id": "HumanEval/100", "result": "failed: Test 3", "passed": false}
{"generated_code": "def match_parens(lst):\n    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            else:\n                if not stack or stack.pop() != '(':\n                    return 'No'\n    if not stack:\n        return 'Yes'\n    else:\n        return 'No'", "is_solved": false, "iteration": 5, "prompt_tokens": 5674, "completion_tokens": 697, "duration": 22.62675142288208, "task_id": "HumanEval/119", "result": "failed: ", "passed": false}
{"generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(int(digit) % 2 != 0 for digit in string), sum(int(digit) % 2 != 0 for digit in string), i+1, i+1) for i, string in enumerate(lst)]", "is_solved": false, "iteration": 5, "prompt_tokens": 5581, "completion_tokens": 611, "duration": 26.17907738685608, "task_id": "HumanEval/113", "result": "failed: Test 1", "passed": false}
{"generated_code": "def fix_spaces(text):\n    result = \"\"\n    count = 0\n    for char in text:\n        if char == \" \":\n            count += 1\n            if count == 3:\n                result = result[:-2] + \"-\"  # Replace the last two characters with a hyphen\n            elif count > 3:\n                result = result[:-1]  # Remove the last underscore\n                continue\n        else:\n            count = 0\n        result += char if char != \" \" else \"_\"\n    return result", "is_solved": false, "iteration": 5, "prompt_tokens": 4681, "completion_tokens": 729, "duration": 26.519456386566162, "task_id": "HumanEval/140", "result": "failed: This prints if this assert fails 4 (good for debugging!)", "passed": false}
{"generated_code": "def is_nested(string):\n    open_count = 0\n    close_count = 0\n\n    for char in string:\n        if char == '[':\n            open_count += 1\n        elif char == ']':\n            close_count += 1\n\n    return open_count > 0 and close_count > 0\n\n# Test cases\nprint(is_nested('[[]]')) # \u279e True\nprint(is_nested('[]]]]]]][[[[[]')) # \u279e False\nprint(is_nested('[][]')) # \u279e False\nprint(is_nested('[]')) # \u279e False\nprint(is_nested('[[][]]')) # \u279e True\nprint(is_nested('[[]][[')) # \u279e True", "is_solved": false, "iteration": 5, "prompt_tokens": 5901, "completion_tokens": 993, "duration": 33.52754259109497, "task_id": "HumanEval/132", "result": "failed: ", "passed": false}
{"generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1, 3]\n    else:\n        tribonacci = [0, 1, 3]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tribonacci.append(1 + i // 2)\n            else:\n                tribonacci.append(tribonacci[-1] + tribonacci[-2] + tribonacci[-3])\n        return tribonacci", "is_solved": false, "iteration": 5, "prompt_tokens": 8301, "completion_tokens": 871, "duration": 28.94993305206299, "task_id": "HumanEval/130", "result": "failed: ", "passed": false}
{"generated_code": "def compare_one(a, b):\n    if isinstance(a, str) and isinstance(b, (int, float)):\n        return None\n    elif isinstance(a, (int, float)) and isinstance(b, str):\n        return b\n    elif type(a) == type(b):\n        return max(a, b) if a != b else None\n    else:\n        return a if ',' in str(a) else b", "is_solved": true, "iteration": 2, "prompt_tokens": 2363, "completion_tokens": 391, "duration": 65.87314748764038, "task_id": "HumanEval/137", "result": "passed", "passed": true}
{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    intersection_length = intersection_end - intersection_start + 1\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 5, "prompt_tokens": 7438, "completion_tokens": 1114, "duration": 32.883646726608276, "task_id": "HumanEval/127", "result": "failed: ", "passed": false}
{"generated_code": "def minPath(grid, k):\n    n = len(grid)\n    m = len(grid[0])\n    min_path = []\n    \n    def dfs(i, j, path):\n        if len(path) == k:\n            nonlocal min_path\n            if not min_path:\n                min_path = path.copy()\n            elif path < min_path:\n                min_path = path.copy()\n            return\n        path.append(grid[i][j])\n        for x, y in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:\n            if 0 <= x < n and 0 <= y < m:\n                dfs(x, y, path)\n        path.pop()\n    \n    for i in range(n):\n        for j in range(m):\n            dfs(i, j, [])\n    \n    return min_path", "is_solved": true, "iteration": 2, "prompt_tokens": 6239, "completion_tokens": 777, "duration": 18.77282428741455, "task_id": "HumanEval/129", "result": "timed out", "passed": false}
{"generated_code": "def specialFilter(nums):\n    return sum(1 for num in nums if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9'])", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 67, "duration": 5.582629919052124, "task_id": "HumanEval/146", "result": "passed", "passed": true}
{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2)\n    if start_index > end_index:\n        start_index, end_index = end_index, start_index\n    return tuple(planets[start_index+1:end_index])", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 118, "duration": 3.777313470840454, "task_id": "HumanEval/148", "result": "passed", "passed": true}
{"generated_code": "def list_sort(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 237, "completion_tokens": 39, "duration": 2.606926202774048, "task_id": "HumanEval/149", "result": "failed: name 'sorted_list_sum' is not defined", "passed": false}
{"generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 78, "duration": 2.0863029956817627, "task_id": "HumanEval/150", "result": "passed", "passed": true}
{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0 and isinstance(x, int))", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 39, "duration": 4.964281320571899, "task_id": "HumanEval/151", "result": "passed", "passed": true}
{"generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 39, "duration": 2.242448329925537, "task_id": "HumanEval/152", "result": "passed", "passed": true}
{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        return sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n    \n    strongest = max(extensions, key=lambda x: strength(x))\n    return f\"{class_name}.{strongest}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 71, "duration": 3.0529162883758545, "task_id": "HumanEval/153", "result": "passed", "passed": true}
{"generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',\n        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 142, "duration": 3.109078884124756, "task_id": "HumanEval/156", "result": "passed", "passed": true}
{"generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 52, "duration": 1.781921625137329, "task_id": "HumanEval/157", "result": "passed", "passed": true}
{"generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    remaining_after_meals = max(0, remaining - need)\n    return [total_eaten, remaining_after_meals]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 51, "duration": 5.194386959075928, "task_id": "HumanEval/159", "result": "passed", "passed": true}
{"generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += operator[i] + str(operand[i+1])\n    return eval(expression)", "is_solved": true, "iteration": 0, "prompt_tokens": 257, "completion_tokens": 48, "duration": 4.242655515670776, "task_id": "HumanEval/160", "result": "passed", "passed": true}
{"generated_code": "def solve(s):\n    return s.swapcase() if any(c.isalpha() for c in s) else s[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 30, "duration": 2.5408999919891357, "task_id": "HumanEval/161", "result": "passed", "passed": true}
{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 33, "duration": 2.378025531768799, "task_id": "HumanEval/162", "result": "passed", "passed": true}
{"generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n+1):\n        a_i = i * i - i + 1\n        for j in range(i+1, n+1):\n            a_j = j * j - j + 1\n            for k in range(j+1, n+1):\n                a_k = k * k - k + 1\n                if (a_i + a_j + a_k) % 3 == 0:\n                    count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 123, "duration": 4.436676263809204, "task_id": "HumanEval/147", "result": "passed", "passed": true}
{"generated_code": "def even_odd_count(num):\n    even_count = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 == 0])\n    odd_count = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 != 0])\n    return (even_count, odd_count)", "is_solved": true, "iteration": 1, "prompt_tokens": 1190, "completion_tokens": 205, "duration": 6.025880813598633, "task_id": "HumanEval/155", "result": "passed", "passed": true}
{"generated_code": "def find_max(words):\n    return max(sorted(words, key=lambda x: (-len(set(x)), x)), key=len)", "is_solved": true, "iteration": 3, "prompt_tokens": 3610, "completion_tokens": 291, "duration": 14.685489177703857, "task_id": "HumanEval/158", "result": "passed", "passed": true}
{"generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "is_solved": false, "iteration": 5, "prompt_tokens": 4333, "completion_tokens": 506, "duration": 21.33327555656433, "task_id": "HumanEval/163", "result": "failed: Test 1", "passed": false}
{"generated_code": "def cycpattern_check(a, b):\n    return any(b in a[i:] + a[:i] for i in range(len(a))) or b in a\n\n# Test cases\nprint(cycpattern_check(\"abcd\", \"abd\"))  # False\nprint(cycpattern_check(\"hello\", \"ell\"))  # True\nprint(cycpattern_check(\"whassup\", \"psus\"))  # False\nprint(cycpattern_check(\"abab\", \"baa\"))  # True\nprint(cycpattern_check(\"efef\", \"eeff\"))  # False\nprint(cycpattern_check(\"himenss\", \"simen\"))  # True", "is_solved": false, "iteration": 5, "prompt_tokens": 5107, "completion_tokens": 745, "duration": 24.496139764785767, "task_id": "HumanEval/154", "result": "failed: test #3", "passed": false}
{"generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 61, "duration": 3.7889280319213867, "task_id": "HumanEval/0", "result": "passed", "passed": true}
{"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": true, "iteration": 0, "prompt_tokens": 135, "completion_tokens": 21, "duration": 3.3748176097869873, "task_id": "HumanEval/2", "result": "passed", "passed": true}
{"generated_code": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 48, "duration": 49.579845666885376, "task_id": "HumanEval/3", "result": "passed", "passed": true}
{"generated_code": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 44, "duration": 3.6765074729919434, "task_id": "HumanEval/4", "result": "passed", "passed": true}
{"generated_code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 60, "duration": 4.007699728012085, "task_id": "HumanEval/5", "result": "passed", "passed": true}
{"generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 94, "duration": 4.523579835891724, "task_id": "HumanEval/6", "result": "passed", "passed": true}
{"generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "is_solved": true, "iteration": 0, "prompt_tokens": 143, "completion_tokens": 35, "duration": 3.4425792694091797, "task_id": "HumanEval/7", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        total_sum = sum(numbers)\n        total_product = 1\n        for num in numbers:\n            total_product *= num\n        return total_sum, total_product", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 75, "duration": 4.375110387802124, "task_id": "HumanEval/8", "result": "passed", "passed": true}
{"generated_code": "def rolling_max(numbers: List[int]) -> List[int]:\n    max_numbers = []\n    max_num = float('-inf')\n    for num in numbers:\n        max_num = max(max_num, num)\n        max_numbers.append(max_num)\n    return max_numbers", "is_solved": true, "iteration": 0, "prompt_tokens": 150, "completion_tokens": 57, "duration": 3.7959132194519043, "task_id": "HumanEval/9", "result": "passed", "passed": true}
{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.5920822620391846, "task_id": "HumanEval/11", "result": "passed", "passed": true}
{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 39, "duration": 3.631875514984131, "task_id": "HumanEval/13", "result": "passed", "passed": true}
{"generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 32, "duration": 3.5267109870910645, "task_id": "HumanEval/14", "result": "passed", "passed": true}
{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 28, "duration": 3.3324170112609863, "task_id": "HumanEval/15", "result": "passed", "passed": true}
{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 3.1436092853546143, "task_id": "HumanEval/16", "result": "passed", "passed": true}
{"generated_code": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    return [durations[note] for note in notes]\n\nparse_music('o o| .| o| o| .| .| .| .| o o')", "is_solved": true, "iteration": 0, "prompt_tokens": 222, "completion_tokens": 82, "duration": 4.5098161697387695, "task_id": "HumanEval/17", "result": "passed", "passed": true}
{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 74, "duration": 4.2200727462768555, "task_id": "HumanEval/18", "result": "passed", "passed": true}
{"generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_dict[x])\n    return ' '.join(sorted_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 102, "duration": 4.697938442230225, "task_id": "HumanEval/19", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = ()\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 216, "completion_tokens": 96, "duration": 4.488142251968384, "task_id": "HumanEval/20", "result": "passed", "passed": true}
{"generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 53, "duration": 3.7702200412750244, "task_id": "HumanEval/21", "result": "passed", "passed": true}
{"generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 31, "duration": 3.5470941066741943, "task_id": "HumanEval/22", "result": "passed", "passed": true}
{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 3.0233676433563232, "task_id": "HumanEval/23", "result": "passed", "passed": true}
{"generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 43, "duration": 3.513399124145508, "task_id": "HumanEval/24", "result": "passed", "passed": true}
{"generated_code": "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 65, "duration": 3.7573485374450684, "task_id": "HumanEval/25", "result": "passed", "passed": true}
{"generated_code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 33, "duration": 3.290222644805908, "task_id": "HumanEval/26", "result": "passed", "passed": true}
{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 36, "duration": 3.3436784744262695, "task_id": "HumanEval/27", "result": "passed", "passed": true}
{"generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 20, "duration": 2.9848461151123047, "task_id": "HumanEval/28", "result": "passed", "passed": true}
{"generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 34, "duration": 3.402144432067871, "task_id": "HumanEval/29", "result": "passed", "passed": true}
{"generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 25, "duration": 1.0710422992706299, "task_id": "HumanEval/30", "result": "passed", "passed": true}
{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 56, "duration": 3.964221477508545, "task_id": "HumanEval/31", "result": "passed", "passed": true}
{"generated_code": "def find_zero(xs: list):\n    return -xs[0] / xs[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 23, "duration": 3.072744369506836, "task_id": "HumanEval/32", "result": "failed: name 'poly' is not defined", "passed": false}
{"generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 17, "duration": 3.101635456085205, "task_id": "HumanEval/34", "result": "passed", "passed": true}
{"generated_code": "def max_element(l: list):\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 16, "duration": 2.888660430908203, "task_id": "HumanEval/35", "result": "passed", "passed": true}
{"generated_code": "def sort_even(l: list):\n    return [sorted(l[::2])[i//2] if i % 2 == 0 else l[i] for i in range(len(l))]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 43, "duration": 3.5214340686798096, "task_id": "HumanEval/37", "result": "passed", "passed": true}
{"generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iteration": 0, "prompt_tokens": 208, "completion_tokens": 162, "duration": 5.722168922424316, "task_id": "HumanEval/38", "result": "passed", "passed": true}
{"generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n):\n                a, b = b, a + b\n            return b\n\n    count = 0\n    i = 1\n    while count < n:\n        i += 1\n        if is_prime(fibonacci(i)):\n            count += 1\n\n    return fibonacci(i)", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 178, "duration": 8.617135047912598, "task_id": "HumanEval/39", "result": "passed", "passed": true}
{"generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 70, "duration": 4.308423757553101, "task_id": "HumanEval/40", "result": "passed", "passed": true}
{"generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 23, "duration": 4.702202320098877, "task_id": "HumanEval/42", "result": "passed", "passed": true}
{"generated_code": "def pairs_sum_to_zero(l):\n    return any(-x in l for x in l if x != 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 28, "duration": 5.8232152462005615, "task_id": "HumanEval/43", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 22, "duration": 2.7677125930786133, "task_id": "HumanEval/45", "result": "passed", "passed": true}
{"generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n    \n    return d", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 119, "duration": 6.019763231277466, "task_id": "HumanEval/46", "result": "passed", "passed": true}
{"generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "is_solved": true, "iteration": 0, "prompt_tokens": 125, "completion_tokens": 61, "duration": 1.629913091659546, "task_id": "HumanEval/47", "result": "passed", "passed": true}
{"generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 20, "duration": 4.280380725860596, "task_id": "HumanEval/48", "result": "passed", "passed": true}
{"generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 25, "duration": 4.343328475952148, "task_id": "HumanEval/49", "result": "passed", "passed": true}
{"generated_code": "def change_base(x: int, base: int):\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)", "is_solved": true, "iteration": 1, "prompt_tokens": 1018, "completion_tokens": 152, "duration": 9.697048902511597, "task_id": "HumanEval/44", "result": "passed", "passed": true}
{"generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_len = max(len(s) for s in strings)\n    return next(s for s in strings if len(s) == max_len)", "is_solved": true, "iteration": 1, "prompt_tokens": 938, "completion_tokens": 151, "duration": 8.390814065933228, "task_id": "HumanEval/12", "result": "passed", "passed": true}
{"generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    count = 0\n    current_group = \"\"\n    for char in paren_string:\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n        current_group += char\n        if count == 0:\n            result.append(current_group.replace(\" \", \"\"))\n            current_group = \"\"\n    return [group for group in result if group != '']", "is_solved": true, "iteration": 1, "prompt_tokens": 1225, "completion_tokens": 241, "duration": 9.289002656936646, "task_id": "HumanEval/1", "result": "passed", "passed": true}
{"generated_code": "def car_race_collision(n: int):\n    return n * (n - 1)", "is_solved": false, "iteration": 5, "prompt_tokens": 4110, "completion_tokens": 360, "duration": 21.17624831199646, "task_id": "HumanEval/41", "result": "failed: ", "passed": false}
{"generated_code": "def fizz_buzz(n: int):\n    return sum(1 for i in range(n) if (i % 11 == 0 or i % 13 == 0) and '7' in str(i))", "is_solved": false, "iteration": 5, "prompt_tokens": 4371, "completion_tokens": 569, "duration": 25.7840633392334, "task_id": "HumanEval/36", "result": "failed: ", "passed": false}
{"generated_code": "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n\n    def is_palindrome(s):\n        return s == s[::-1]\n    \n    if is_palindrome(string):\n        return string\n    \n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i-1][::-1]", "is_solved": false, "iteration": 5, "prompt_tokens": 4461, "completion_tokens": 657, "duration": 22.61658525466919, "task_id": "HumanEval/10", "result": "failed: ", "passed": false}
{"generated_code": "def sort_third(l: list):\n    return [value for index, value in sorted(enumerate(l), key=lambda x: x[0] // 3 if x[0] % 3 == 0 else x[0])]\n\n# Test cases\nprint(sort_third([1, 2, 3]))\nprint(sort_third([5, 6, 3, 4, 8, 9, 2]))", "is_solved": false, "iteration": 5, "prompt_tokens": 7782, "completion_tokens": 803, "duration": 26.303903818130493, "task_id": "HumanEval/33", "result": "failed: ", "passed": false}
{"generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": true, "iteration": 0, "prompt_tokens": 140, "completion_tokens": 82, "duration": 4.167835235595703, "task_id": "HumanEval/50", "result": "passed", "passed": true}
{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 31, "duration": 5.49226450920105, "task_id": "HumanEval/51", "result": "passed", "passed": true}
{"generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 26, "duration": 5.450874328613281, "task_id": "HumanEval/52", "result": "passed", "passed": true}
{"generated_code": "def add(x: int, y: int):\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 20, "duration": 1.7860267162322998, "task_id": "HumanEval/53", "result": "passed", "passed": true}
{"generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 38, "duration": 4.537459373474121, "task_id": "HumanEval/55", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 64, "duration": 1.595395803451538, "task_id": "HumanEval/56", "result": "passed", "passed": true}
{"generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 58, "duration": 6.372962713241577, "task_id": "HumanEval/57", "result": "passed", "passed": true}
{"generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 29, "duration": 5.793344020843506, "task_id": "HumanEval/58", "result": "passed", "passed": true}
{"generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 50, "duration": 6.514908790588379, "task_id": "HumanEval/59", "result": "passed", "passed": true}
{"generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 22, "duration": 5.250669479370117, "task_id": "HumanEval/60", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 67, "duration": 6.117987394332886, "task_id": "HumanEval/61", "result": "passed", "passed": true}
{"generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]\n\n# Test cases\nprint(derivative([3, 1, 2, 4, 5]))  # Output: [1, 4, 12, 20]\nprint(derivative([1, 2, 3]))  # Output: [2, 6]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 89, "duration": 5.635868549346924, "task_id": "HumanEval/62", "result": "passed", "passed": true}
{"generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 72, "duration": 2.085747480392456, "task_id": "HumanEval/63", "result": "passed", "passed": true}
{"generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    if s[-1].lower() == 'y':\n        return sum(1 for char in s[:-1] if char.lower() in vowels) + 1\n    else:\n        return sum(1 for char in s if char.lower() in vowels)", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 70, "duration": 6.279200553894043, "task_id": "HumanEval/64", "result": "passed", "passed": true}
{"generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 1.2910349369049072, "task_id": "HumanEval/66", "result": "passed", "passed": true}
{"generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 37, "duration": 5.683075189590454, "task_id": "HumanEval/67", "result": "passed", "passed": true}
{"generated_code": "def pluck(arr):\n    even_values = [(value, index) for index, value in enumerate(arr) if value % 2 == 0]\n    if not even_values:\n        return []\n    min_even_value = min(even_values, key=lambda x: (x[0], x[1]))\n    return [min_even_value[0], min_even_value[1]]", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 82, "duration": 5.2497780323028564, "task_id": "HumanEval/68", "result": "passed", "passed": true}
{"generated_code": "def search(lst):\n    for num in sorted(set(lst), reverse=True):\n        if lst.count(num) >= num:\n            return num\n    return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 37, "duration": 5.657253980636597, "task_id": "HumanEval/69", "result": "passed", "passed": true}
{"generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 44, "duration": 4.340230464935303, "task_id": "HumanEval/70", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 92, "duration": 2.073251247406006, "task_id": "HumanEval/71", "result": "passed", "passed": true}
{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 5.156278610229492, "task_id": "HumanEval/72", "result": "passed", "passed": true}
{"generated_code": "def smallest_change(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-1-i]:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 52, "duration": 1.6135008335113525, "task_id": "HumanEval/73", "result": "passed", "passed": true}
{"generated_code": "def total_match(lst1, lst2):\n    return lst1 if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2) else lst2", "is_solved": true, "iteration": 0, "prompt_tokens": 243, "completion_tokens": 43, "duration": 4.563444375991821, "task_id": "HumanEval/74", "result": "passed", "passed": true}
{"generated_code": "def hex_key(num):\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = sum(1 for digit in num if digit in primes)\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 49, "duration": 3.148556709289551, "task_id": "HumanEval/78", "result": "passed", "passed": true}
{"generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 29, "duration": 4.2002599239349365, "task_id": "HumanEval/79", "result": "passed", "passed": true}
{"generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 76, "duration": 2.430246591567993, "task_id": "HumanEval/80", "result": "passed", "passed": true}
{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 69, "duration": 5.953183889389038, "task_id": "HumanEval/82", "result": "passed", "passed": true}
{"generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 21, "duration": 3.9268581867218018, "task_id": "HumanEval/84", "result": "passed", "passed": true}
{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 105, "completion_tokens": 38, "duration": 4.256866216659546, "task_id": "HumanEval/85", "result": "passed", "passed": true}
{"generated_code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(word)) for word in s.split()])", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 26, "duration": 4.099725961685181, "task_id": "HumanEval/86", "result": "passed", "passed": true}
{"generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 68, "duration": 2.980239152908325, "task_id": "HumanEval/87", "result": "passed", "passed": true}
{"generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 52, "duration": 4.335091829299927, "task_id": "HumanEval/90", "result": "passed", "passed": true}
{"generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 54, "duration": 4.2294628620147705, "task_id": "HumanEval/92", "result": "passed", "passed": true}
{"generated_code": "def largest_prime_sum(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    prime_numbers = [num for num in lst if is_prime(num)]\n    largest_prime = max(prime_numbers)\n    return sum_of_digits(largest_prime)", "is_solved": true, "iteration": 0, "prompt_tokens": 336, "completion_tokens": 116, "duration": 4.039272308349609, "task_id": "HumanEval/94", "result": "failed: name 'skjkasdkd' is not defined", "passed": false}
{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 86, "duration": 4.878050327301025, "task_id": "HumanEval/96", "result": "passed", "passed": true}
{"generated_code": "def multiply(a, b):\n    return int(str(abs(a))[-1]) * int(str(abs(b))[-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 29, "duration": 3.914466619491577, "task_id": "HumanEval/97", "result": "passed", "passed": true}
{"generated_code": "def count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in 'AEIOU')", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 38, "duration": 3.995293378829956, "task_id": "HumanEval/98", "result": "passed", "passed": true}
{"generated_code": "def closest_integer(value):\n    value = float(value)\n    if value < 0:\n        return int(value - 0.5)\n    else:\n        return int(value + 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 45, "duration": 4.453214406967163, "task_id": "HumanEval/99", "result": "passed", "passed": true}
{"generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    return all(isinstance(key, str) and key.islower() for key in keys) or all(isinstance(key, str) and key.isupper() for key in keys)", "is_solved": true, "iteration": 1, "prompt_tokens": 1277, "completion_tokens": 160, "duration": 7.923287630081177, "task_id": "HumanEval/95", "result": "passed", "passed": true}
{"generated_code": "def sort_array(array):\n    sorted_array = array.copy()\n    if not sorted_array:\n        return []\n    \n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        return sorted(sorted_array, reverse=True)\n    else:\n        return sorted(sorted_array)", "is_solved": true, "iteration": 1, "prompt_tokens": 1459, "completion_tokens": 174, "duration": 8.744863271713257, "task_id": "HumanEval/88", "result": "passed", "passed": true}
{"generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or x == n ** int(x ** (1/n)))", "is_solved": true, "iteration": 1, "prompt_tokens": 1215, "completion_tokens": 186, "duration": 9.388835191726685, "task_id": "HumanEval/76", "result": "passed", "passed": true}
{"generated_code": "def iscube(a):\n    return (a == 0) or (abs(a) > 0 and round(abs(a) ** (1/3)) ** 3 == abs(a))", "is_solved": true, "iteration": 4, "prompt_tokens": 3231, "completion_tokens": 309, "duration": 16.435810804367065, "task_id": "HumanEval/77", "result": "passed", "passed": true}
{"generated_code": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)", "is_solved": true, "iteration": 5, "prompt_tokens": 4400, "completion_tokens": 326, "duration": 18.256160259246826, "task_id": "HumanEval/54", "result": "passed", "passed": true}
{"generated_code": "def starts_one_ends(n):\n    count = 9 * 10**(n-1) + 10**(n-1) - 10**(n-2)\n    return count", "is_solved": false, "iteration": 5, "prompt_tokens": 3588, "completion_tokens": 579, "duration": 22.51800298690796, "task_id": "HumanEval/83", "result": "failed: ", "passed": false}
{"generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = (ord(char) - ord('a') + 2) * 2\n            if char.islower():\n                result += chr((ord(char) - ord('a') + shift) % 26 + ord('a'))\n            else:\n                result += chr((ord(char) - ord('A') + shift) % 26 + ord('A'))\n        else:\n            result += char\n    return result", "is_solved": false, "iteration": 5, "prompt_tokens": 5432, "completion_tokens": 847, "duration": 26.87134075164795, "task_id": "HumanEval/89", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        if shift > len(x_str) // 2:\n            shift = len(x_str) - shift\n            return x_str[shift:] + x_str[:shift]\n        else:\n            return x_str[-shift:] + x_str[:-shift]", "is_solved": false, "iteration": 5, "prompt_tokens": 4115, "completion_tokens": 576, "duration": 20.619060277938843, "task_id": "HumanEval/65", "result": "failed: ", "passed": false}
{"generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        else:\n            result.append('D-' if gpa > 0 else 'E')\n    return result", "is_solved": true, "iteration": 4, "prompt_tokens": 6054, "completion_tokens": 1342, "duration": 37.89089751243591, "task_id": "HumanEval/81", "result": "passed", "passed": true}
{"generated_code": "def encode(message):\n    encoded_message = ''\n    vowels = 'aeiouAEIOU'\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr((ord(char.upper()) + 2 - ord('A')) % 26 + ord('A'))\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message", "is_solved": false, "iteration": 5, "prompt_tokens": 4595, "completion_tokens": 725, "duration": 23.240986585617065, "task_id": "HumanEval/93", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            count += 1\n        if count > 3:  # Hint: Change the condition to break early if more than 3 factors are found\n            return False\n    return count == 3", "is_solved": false, "iteration": 5, "prompt_tokens": 5008, "completion_tokens": 939, "duration": 27.326672315597534, "task_id": "HumanEval/75", "result": "failed: ", "passed": false}
{"generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences if sentence]\n    \n    count = 0\n    for sentence in sentences:\n        if sentence.startswith('I'):\n            count += 1\n    \n    return count", "is_solved": false, "iteration": 5, "prompt_tokens": 4268, "completion_tokens": 583, "duration": 23.62190008163452, "task_id": "HumanEval/91", "result": "failed: Test 2", "passed": false}
{"generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(\",\", \" \").split()]", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 25, "duration": 1.0746467113494873, "task_id": "HumanEval/101", "result": "passed", "passed": true}
{"generated_code": "def choose_num(x, y):\n    max_even = -1\n    for num in range(x, y+1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 55, "duration": 3.2499303817749023, "task_id": "HumanEval/102", "result": "passed", "passed": true}
{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 40, "duration": 2.996777057647705, "task_id": "HumanEval/103", "result": "passed", "passed": true}
{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 33, "duration": 4.210830211639404, "task_id": "HumanEval/104", "result": "passed", "passed": true}
{"generated_code": "def by_length(arr):\n    digits = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [x for x in arr if 1 <= x <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    result = [digits[x] for x in reversed_arr]\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 119, "duration": 3.765507936477661, "task_id": "HumanEval/105", "result": "passed", "passed": true}
{"generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 82, "duration": 2.168910264968872, "task_id": "HumanEval/106", "result": "passed", "passed": true}
{"generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 99, "duration": 2.3434085845947266, "task_id": "HumanEval/107", "result": "passed", "passed": true}
{"generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    n = len(arr)\n    for i in range(n):\n        if sorted_arr == arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 67, "duration": 1.888298511505127, "task_id": "HumanEval/109", "result": "passed", "passed": true}
{"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(x % 2 == 1 for x in lst1) <= sum(x % 2 == 0 for x in lst2) else \"NO\"", "is_solved": true, "iteration": 0, "prompt_tokens": 247, "completion_tokens": 51, "duration": 1.6188201904296875, "task_id": "HumanEval/110", "result": "passed", "passed": true}
{"generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 212, "completion_tokens": 39, "duration": 1.6968176364898682, "task_id": "HumanEval/112", "result": "passed", "passed": true}
{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 60, "duration": 6.022474765777588, "task_id": "HumanEval/114", "result": "passed", "passed": true}
{"generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 220, "completion_tokens": 28, "duration": 1.244821310043335, "task_id": "HumanEval/116", "result": "passed", "passed": true}
{"generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for letter in word if letter.lower() not in 'aeiou')\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 62, "duration": 2.7944095134735107, "task_id": "HumanEval/117", "result": "passed", "passed": true}
{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 98, "duration": 6.123220443725586, "task_id": "HumanEval/118", "result": "passed", "passed": true}
{"generated_code": "def get_odd_collatz(n):\n    collatz_seq = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_seq.append(n)\n    \n    return sorted([num for num in collatz_seq if num % 2 != 0])", "is_solved": true, "iteration": 0, "prompt_tokens": 281, "completion_tokens": 86, "duration": 5.043258190155029, "task_id": "HumanEval/123", "result": "passed", "passed": true}
{"generated_code": "def valid_date(date):\n    if len(date) != 10:\n        return False\n    month, day, year = date.split('-')\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    month, day, year = int(month), int(day), int(year)\n    if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    else:\n        return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 313, "completion_tokens": 192, "duration": 5.403190851211548, "task_id": "HumanEval/124", "result": "passed", "passed": true}
{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 26, "duration": 2.2351036071777344, "task_id": "HumanEval/133", "result": "passed", "passed": true}
{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt == \"\":\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and (len(txt) == 1 or txt[-2] == \" \"):\n        return True\n    else:\n        return False", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 66, "duration": 1.883793830871582, "task_id": "HumanEval/134", "result": "passed", "passed": true}
{"generated_code": "def largest_smallest_integers(lst):\n    neg_integers = [num for num in lst if num < 0]\n    pos_integers = [num for num in lst if num > 0]\n    \n    largest_neg = max(neg_integers) if neg_integers else None\n    smallest_pos = min(pos_integers) if pos_integers else None\n    \n    return (largest_neg, smallest_pos)", "is_solved": true, "iteration": 0, "prompt_tokens": 188, "completion_tokens": 90, "duration": 3.454267978668213, "task_id": "HumanEval/136", "result": "passed", "passed": true}
{"generated_code": "def is_equal_to_sum_even(n):\n    return n % 2 == 0 and n >= 8", "is_solved": true, "iteration": 0, "prompt_tokens": 127, "completion_tokens": 27, "duration": 2.1825339794158936, "task_id": "HumanEval/138", "result": "passed", "passed": true}
{"generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        factorial = 1\n        for j in range(1, i+1):\n            factorial *= j\n        result *= factorial\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 60, "duration": 5.583819150924683, "task_id": "HumanEval/139", "result": "passed", "passed": true}
{"generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 98, "duration": 3.6051621437072754, "task_id": "HumanEval/141", "result": "passed", "passed": true}
{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 46, "duration": 2.6627280712127686, "task_id": "HumanEval/142", "result": "passed", "passed": true}
{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "is_solved": true, "iteration": 0, "prompt_tokens": 197, "completion_tokens": 95, "duration": 5.373974323272705, "task_id": "HumanEval/143", "result": "passed", "passed": true}
{"generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return (x_num * n_num) % (x_den * n_den) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 59, "duration": 2.6001389026641846, "task_id": "HumanEval/144", "result": "passed", "passed": true}
{"generated_code": "def specialFilter(nums):\n    return sum(1 for num in nums if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9'])", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 67, "duration": 5.582629919052124, "task_id": "HumanEval/146", "result": "passed", "passed": true}
{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2)\n    if start_index > end_index:\n        start_index, end_index = end_index, start_index\n    return tuple(planets[start_index+1:end_index])", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 118, "duration": 3.777313470840454, "task_id": "HumanEval/148", "result": "passed", "passed": true}
{"generated_code": "def list_sort(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 237, "completion_tokens": 39, "duration": 2.606926202774048, "task_id": "HumanEval/149", "result": "failed: name 'sorted_list_sum' is not defined", "passed": false}
{"generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n+1):\n        a_i = i * i - i + 1\n        for j in range(i+1, n+1):\n            a_j = j * j - j + 1\n            for k in range(j+1, n+1):\n                a_k = k * k - k + 1\n                if (a_i + a_j + a_k) % 3 == 0:\n                    count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 123, "duration": 4.436676263809204, "task_id": "HumanEval/147", "result": "passed", "passed": true}
{"generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:] if k > 0 else []", "is_solved": true, "iteration": 1, "prompt_tokens": 1644, "completion_tokens": 82, "duration": 4.551558256149292, "task_id": "HumanEval/120", "result": "passed", "passed": true}
{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    has_zero = False\n    for num in arr:\n        if num == 0:\n            has_zero = True\n            break\n        product *= num / abs(num)\n    if has_zero:\n        return 0\n    return sum(abs(num) for num in arr) * product", "is_solved": true, "iteration": 1, "prompt_tokens": 1263, "completion_tokens": 208, "duration": 7.359524488449097, "task_id": "HumanEval/128", "result": "passed", "passed": true}
{"generated_code": "def histogram(test):\n    letters = test.split()\n    letter_count = {}\n    \n    if not letters:\n        return {}\n    \n    for letter in letters:\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n    max_count = max(letter_count.values())\n    return {letter: count for letter, count in letter_count.items() if count == max_count}", "is_solved": true, "iteration": 1, "prompt_tokens": 1382, "completion_tokens": 241, "duration": 8.96580195426941, "task_id": "HumanEval/111", "result": "passed", "passed": true}
{"generated_code": "import math\n\ndef max_fill(grid, capacity):\n    total_trips = 0\n    for row in grid:\n        current_water = 0\n        for well in row:\n            current_water += well\n            if current_water >= capacity:\n                total_trips += 1\n                current_water = 0\n        if current_water > 0:\n            total_trips += 1\n    return total_trips", "is_solved": true, "iteration": 2, "prompt_tokens": 2988, "completion_tokens": 337, "duration": 14.02975869178772, "task_id": "HumanEval/115", "result": "passed", "passed": true}
{"generated_code": "def solution(lst):\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)", "is_solved": true, "iteration": 3, "prompt_tokens": 3224, "completion_tokens": 284, "duration": 12.414815902709961, "task_id": "HumanEval/121", "result": "passed", "passed": true}
{"generated_code": "def fix_spaces(text):\n    result = \"\"\n    count = 0\n    for char in text:\n        if char == \" \":\n            count += 1\n            if count == 3:\n                result = result[:-2] + \"-\"\n            elif count > 3:\n                continue\n            else:\n                result += \"_\"\n        else:\n            count = 0\n            result += char\n    return result", "is_solved": true, "iteration": 2, "prompt_tokens": 2172, "completion_tokens": 398, "duration": 13.122987270355225, "task_id": "HumanEval/140", "result": "passed", "passed": true}
{"generated_code": "def digits(n):\n    product = 1\n    all_even = True\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            all_even = False\n    return product if not all_even else 0", "is_solved": true, "iteration": 4, "prompt_tokens": 3122, "completion_tokens": 410, "duration": 15.04882287979126, "task_id": "HumanEval/131", "result": "passed", "passed": true}
{"generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 2)\n        else:\n            stones.append(stones[-1] + 2 if stones[-1] % 2 == 1 else stones[-1] + 1)\n    return stones", "is_solved": true, "iteration": 5, "prompt_tokens": 5021, "completion_tokens": 658, "duration": 22.003971815109253, "task_id": "HumanEval/100", "result": "passed", "passed": true}
{"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "is_solved": false, "iteration": 5, "prompt_tokens": 5752, "completion_tokens": 358, "duration": 16.56748914718628, "task_id": "HumanEval/145", "result": "failed: ", "passed": false}
{"generated_code": "def count_nums(arr):\n    return sum(sum(int(d) for d in str(abs(num))) != 0 for num in arr)", "is_solved": false, "iteration": 5, "prompt_tokens": 4800, "completion_tokens": 403, "duration": 19.721540927886963, "task_id": "HumanEval/108", "result": "failed: ", "passed": false}
{"generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) and len(lst) == len(set(lst))", "is_solved": false, "iteration": 5, "prompt_tokens": 6379, "completion_tokens": 505, "duration": 21.784379243850708, "task_id": "HumanEval/126", "result": "failed: This prints if this assert fails 7 (good for debugging!)", "passed": false}
{"generated_code": "def add_elements(arr, k):\n    return sum(arr[:k])", "is_solved": false, "iteration": 5, "prompt_tokens": 4793, "completion_tokens": 439, "duration": 20.747482776641846, "task_id": "HumanEval/122", "result": "failed: ", "passed": false}
{"generated_code": "def can_arrange(arr):\n    max_index = -1\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return i\n    return max_index", "is_solved": false, "iteration": 5, "prompt_tokens": 4121, "completion_tokens": 572, "duration": 23.50158381462097, "task_id": "HumanEval/135", "result": "failed: ", "passed": false}
{"generated_code": "def is_nested(string):\n    open_brackets = []\n    for char in string:\n        if char == '[':\n            open_brackets.append(char)\n        elif char == ']':\n            if not open_brackets:\n                return False\n            open_brackets.pop()\n    return len(open_brackets) != 0", "is_solved": false, "iteration": 5, "prompt_tokens": 5394, "completion_tokens": 674, "duration": 22.264275074005127, "task_id": "HumanEval/132", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(int(digit) % 2 != 0 for digit in string), sum(int(digit) % 2 != 0 for digit in string), i+1, i+1) for i, string in enumerate(lst)]", "is_solved": false, "iteration": 5, "prompt_tokens": 5612, "completion_tokens": 559, "duration": 22.91426992416382, "task_id": "HumanEval/113", "result": "failed: Test 1", "passed": false}
{"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)", "is_solved": false, "iteration": 5, "prompt_tokens": 4634, "completion_tokens": 618, "duration": 22.4685537815094, "task_id": "HumanEval/125", "result": "failed: ", "passed": false}
{"generated_code": "def match_parens(lst):\n    count = 0\n    for s in lst:\n        for char in s:\n            count += 1 if char == '(' else -1\n            if count < 0:\n                return 'No'\n    if count == 0:\n        return 'Yes'\n    \n    return 'No'", "is_solved": false, "iteration": 5, "prompt_tokens": 5634, "completion_tokens": 720, "duration": 22.967386960983276, "task_id": "HumanEval/119", "result": "failed: ", "passed": false}
{"generated_code": "def compare_one(a, b):\n    if isinstance(a, str) and ',' in a:\n        a = a.replace(',', '.')\n    if isinstance(b, str) and ',' in b:\n        b = b.replace(',', '.')\n        \n    if type(a) == type(b) and a == b:\n        return None\n    else:\n        return max(a, b, key=lambda x: float(x) if isinstance(x, str) else x)", "is_solved": false, "iteration": 5, "prompt_tokens": 5366, "completion_tokens": 782, "duration": 26.187333345413208, "task_id": "HumanEval/137", "result": "failed: ", "passed": false}
{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    intersection_length = intersection_end - intersection_start + 1\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 5, "prompt_tokens": 7485, "completion_tokens": 1141, "duration": 31.481709241867065, "task_id": "HumanEval/127", "result": "failed: ", "passed": false}
{"generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1, 3]\n    else:\n        tribonacci = [0, 1, 3]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3])\n            else:\n                tribonacci.append(1 + i // 2)\n        return tribonacci", "is_solved": false, "iteration": 5, "prompt_tokens": 8423, "completion_tokens": 956, "duration": 135.92149591445923, "task_id": "HumanEval/130", "result": "failed: ", "passed": false}
{"generated_code": "def minPath(grid, k):\n    n = len(grid)\n    m = len(grid[0])\n    visited = [[False for _ in range(m)] for _ in range(n)]\n    \n    def dfs(i, j, path):\n        if i < 0 or i >= n or j < 0 or j >= m or visited[i][j]:\n            return\n        path.append(grid[i][j])\n        visited[i][j] = True\n        if len(path) == k:\n            return path\n        res = []\n        for x, y in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:\n            res.append(dfs(x, y, path.copy()))\n        visited[i][j] = False\n        return min(filter(None, res))\n    \n    for i in range(n):\n        for j in range(m):\n            path = dfs(i, j, [])\n            if path:\n                return path", "is_solved": false, "iteration": 5, "prompt_tokens": 13600, "completion_tokens": 1739, "duration": 41.52029776573181, "task_id": "HumanEval/129", "result": "failed: ", "passed": false}
{"generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 78, "duration": 2.0863029956817627, "task_id": "HumanEval/150", "result": "passed", "passed": true}
{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0 and isinstance(x, int))", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 39, "duration": 4.964281320571899, "task_id": "HumanEval/151", "result": "passed", "passed": true}
{"generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 39, "duration": 2.242448329925537, "task_id": "HumanEval/152", "result": "passed", "passed": true}
{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        return sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n    \n    strongest = max(extensions, key=lambda x: strength(x))\n    return f\"{class_name}.{strongest}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 71, "duration": 3.0529162883758545, "task_id": "HumanEval/153", "result": "passed", "passed": true}
{"generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',\n        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 142, "duration": 3.109078884124756, "task_id": "HumanEval/156", "result": "passed", "passed": true}
{"generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 52, "duration": 1.781921625137329, "task_id": "HumanEval/157", "result": "passed", "passed": true}
{"generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    remaining_after_meals = max(0, remaining - need)\n    return [total_eaten, remaining_after_meals]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 51, "duration": 5.194386959075928, "task_id": "HumanEval/159", "result": "passed", "passed": true}
{"generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += operator[i] + str(operand[i+1])\n    return eval(expression)", "is_solved": true, "iteration": 0, "prompt_tokens": 257, "completion_tokens": 48, "duration": 4.242655515670776, "task_id": "HumanEval/160", "result": "passed", "passed": true}
{"generated_code": "def solve(s):\n    return s.swapcase() if any(c.isalpha() for c in s) else s[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 30, "duration": 2.5408999919891357, "task_id": "HumanEval/161", "result": "passed", "passed": true}
{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 33, "duration": 2.378025531768799, "task_id": "HumanEval/162", "result": "passed", "passed": true}
{"generated_code": "def even_odd_count(num):\n    num_str = str(abs(num))\n    even_count = len([int(digit) for digit in num_str if int(digit) % 2 == 0])\n    odd_count = len([int(digit) for digit in num_str if int(digit) % 2 != 0])\n    return (even_count, odd_count)", "is_solved": true, "iteration": 1, "prompt_tokens": 1176, "completion_tokens": 195, "duration": 5.667726278305054, "task_id": "HumanEval/155", "result": "passed", "passed": true}
{"generated_code": "def find_max(words):\n    return min(words, key=lambda x: (-len(set(x)), x))", "is_solved": true, "iteration": 2, "prompt_tokens": 2466, "completion_tokens": 240, "duration": 12.049264669418335, "task_id": "HumanEval/158", "result": "passed", "passed": true}
{"generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "is_solved": false, "iteration": 5, "prompt_tokens": 4301, "completion_tokens": 475, "duration": 20.505064010620117, "task_id": "HumanEval/163", "result": "failed: Test 1", "passed": false}
{"generated_code": "def cycpattern_check(a, b):\n    return any(b in a[i:] + a[:i] for i in range(len(a))) or len(a) == len(b) and b in a * 2", "is_solved": false, "iteration": 5, "prompt_tokens": 4469, "completion_tokens": 520, "duration": 22.158695697784424, "task_id": "HumanEval/154", "result": "failed: test #3", "passed": false}
{"generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 61, "duration": 3.7889280319213867, "task_id": "HumanEval/0", "result": "passed", "passed": true}
{"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": true, "iteration": 0, "prompt_tokens": 135, "completion_tokens": 21, "duration": 3.3748176097869873, "task_id": "HumanEval/2", "result": "passed", "passed": true}
{"generated_code": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 48, "duration": 49.579845666885376, "task_id": "HumanEval/3", "result": "passed", "passed": true}
{"generated_code": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 44, "duration": 3.6765074729919434, "task_id": "HumanEval/4", "result": "passed", "passed": true}
{"generated_code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 60, "duration": 4.007699728012085, "task_id": "HumanEval/5", "result": "passed", "passed": true}
{"generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 94, "duration": 4.523579835891724, "task_id": "HumanEval/6", "result": "passed", "passed": true}
{"generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "is_solved": true, "iteration": 0, "prompt_tokens": 143, "completion_tokens": 35, "duration": 3.4425792694091797, "task_id": "HumanEval/7", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        total_sum = sum(numbers)\n        total_product = 1\n        for num in numbers:\n            total_product *= num\n        return total_sum, total_product", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 75, "duration": 4.375110387802124, "task_id": "HumanEval/8", "result": "passed", "passed": true}
{"generated_code": "def rolling_max(numbers: List[int]) -> List[int]:\n    max_numbers = []\n    max_num = float('-inf')\n    for num in numbers:\n        max_num = max(max_num, num)\n        max_numbers.append(max_num)\n    return max_numbers", "is_solved": true, "iteration": 0, "prompt_tokens": 150, "completion_tokens": 57, "duration": 3.7959132194519043, "task_id": "HumanEval/9", "result": "passed", "passed": true}
{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.5920822620391846, "task_id": "HumanEval/11", "result": "passed", "passed": true}
{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 39, "duration": 3.631875514984131, "task_id": "HumanEval/13", "result": "passed", "passed": true}
{"generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 32, "duration": 3.5267109870910645, "task_id": "HumanEval/14", "result": "passed", "passed": true}
{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 28, "duration": 3.3324170112609863, "task_id": "HumanEval/15", "result": "passed", "passed": true}
{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 3.1436092853546143, "task_id": "HumanEval/16", "result": "passed", "passed": true}
{"generated_code": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    return [durations[note] for note in notes]\n\nparse_music('o o| .| o| o| .| .| .| .| o o')", "is_solved": true, "iteration": 0, "prompt_tokens": 222, "completion_tokens": 82, "duration": 4.5098161697387695, "task_id": "HumanEval/17", "result": "passed", "passed": true}
{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 74, "duration": 4.2200727462768555, "task_id": "HumanEval/18", "result": "passed", "passed": true}
{"generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_dict[x])\n    return ' '.join(sorted_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 102, "duration": 4.697938442230225, "task_id": "HumanEval/19", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = ()\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 216, "completion_tokens": 96, "duration": 4.488142251968384, "task_id": "HumanEval/20", "result": "passed", "passed": true}
{"generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 53, "duration": 3.7702200412750244, "task_id": "HumanEval/21", "result": "passed", "passed": true}
{"generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 31, "duration": 3.5470941066741943, "task_id": "HumanEval/22", "result": "passed", "passed": true}
{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 3.0233676433563232, "task_id": "HumanEval/23", "result": "passed", "passed": true}
{"generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 43, "duration": 3.513399124145508, "task_id": "HumanEval/24", "result": "passed", "passed": true}
{"generated_code": "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 65, "duration": 3.7573485374450684, "task_id": "HumanEval/25", "result": "passed", "passed": true}
{"generated_code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 33, "duration": 3.290222644805908, "task_id": "HumanEval/26", "result": "passed", "passed": true}
{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 36, "duration": 3.3436784744262695, "task_id": "HumanEval/27", "result": "passed", "passed": true}
{"generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 20, "duration": 2.9848461151123047, "task_id": "HumanEval/28", "result": "passed", "passed": true}
{"generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 34, "duration": 3.402144432067871, "task_id": "HumanEval/29", "result": "passed", "passed": true}
{"generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 25, "duration": 1.0710422992706299, "task_id": "HumanEval/30", "result": "passed", "passed": true}
{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 56, "duration": 3.964221477508545, "task_id": "HumanEval/31", "result": "passed", "passed": true}
{"generated_code": "def find_zero(xs: list):\n    return -xs[0] / xs[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 23, "duration": 3.072744369506836, "task_id": "HumanEval/32", "result": "failed: name 'poly' is not defined", "passed": false}
{"generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 17, "duration": 3.101635456085205, "task_id": "HumanEval/34", "result": "passed", "passed": true}
{"generated_code": "def max_element(l: list):\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 16, "duration": 2.888660430908203, "task_id": "HumanEval/35", "result": "passed", "passed": true}
{"generated_code": "def sort_even(l: list):\n    return [sorted(l[::2])[i//2] if i % 2 == 0 else l[i] for i in range(len(l))]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 43, "duration": 3.5214340686798096, "task_id": "HumanEval/37", "result": "passed", "passed": true}
{"generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iteration": 0, "prompt_tokens": 208, "completion_tokens": 162, "duration": 5.722168922424316, "task_id": "HumanEval/38", "result": "passed", "passed": true}
{"generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n):\n                a, b = b, a + b\n            return b\n\n    count = 0\n    i = 1\n    while count < n:\n        i += 1\n        if is_prime(fibonacci(i)):\n            count += 1\n\n    return fibonacci(i)", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 178, "duration": 8.617135047912598, "task_id": "HumanEval/39", "result": "passed", "passed": true}
{"generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 70, "duration": 4.308423757553101, "task_id": "HumanEval/40", "result": "passed", "passed": true}
{"generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 23, "duration": 4.702202320098877, "task_id": "HumanEval/42", "result": "passed", "passed": true}
{"generated_code": "def pairs_sum_to_zero(l):\n    return any(-x in l for x in l if x != 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 28, "duration": 5.8232152462005615, "task_id": "HumanEval/43", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 22, "duration": 2.7677125930786133, "task_id": "HumanEval/45", "result": "passed", "passed": true}
{"generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n    \n    return d", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 119, "duration": 6.019763231277466, "task_id": "HumanEval/46", "result": "passed", "passed": true}
{"generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "is_solved": true, "iteration": 0, "prompt_tokens": 125, "completion_tokens": 61, "duration": 1.629913091659546, "task_id": "HumanEval/47", "result": "passed", "passed": true}
{"generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 20, "duration": 4.280380725860596, "task_id": "HumanEval/48", "result": "passed", "passed": true}
{"generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 25, "duration": 4.343328475952148, "task_id": "HumanEval/49", "result": "passed", "passed": true}
{"generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_length = max(len(s) for s in strings)\n    longest_strings = [s for s in strings if len(s) == max_length]\n    return longest_strings[0]", "is_solved": true, "iteration": 1, "prompt_tokens": 927, "completion_tokens": 149, "duration": 8.05142092704773, "task_id": "HumanEval/12", "result": "passed", "passed": true}
{"generated_code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    digits = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    result = ''\n    while x > 0:\n        result = digits[x % base] + result\n        x //= base\n    return result", "is_solved": true, "iteration": 1, "prompt_tokens": 992, "completion_tokens": 149, "duration": 9.756080627441406, "task_id": "HumanEval/44", "result": "passed", "passed": true}
{"generated_code": "def make_palindrome(string: str) -> str:\n    def is_palindrome(s):\n        return s == s[::-1]\n    \n    if not string:\n        return ''\n    \n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:len(string)-i][::-1]", "is_solved": true, "iteration": 1, "prompt_tokens": 1141, "completion_tokens": 207, "duration": 8.68124532699585, "task_id": "HumanEval/10", "result": "passed", "passed": true}
{"generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    count = 0\n    current_group = \"\"\n    for char in paren_string:\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n        current_group += char\n        if count == 0 and current_group.strip() != \"\":\n            result.append(current_group.replace(\" \", \"\"))\n            current_group = \"\"\n    return result", "is_solved": true, "iteration": 2, "prompt_tokens": 1969, "completion_tokens": 325, "duration": 12.550111293792725, "task_id": "HumanEval/1", "result": "passed", "passed": true}
{"generated_code": "def car_race_collision(n: int):\n    return n * (n - 1)", "is_solved": false, "iteration": 5, "prompt_tokens": 4028, "completion_tokens": 320, "duration": 21.048516988754272, "task_id": "HumanEval/41", "result": "failed: ", "passed": false}
{"generated_code": "def fizz_buzz(n: int):\n    return sum(1 for i in range(n) if (i % 11 == 0 or i % 13 == 0) and i % 7 == 0)", "is_solved": false, "iteration": 5, "prompt_tokens": 4573, "completion_tokens": 594, "duration": 26.272769451141357, "task_id": "HumanEval/36", "result": "failed: ", "passed": false}
{"generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": true, "iteration": 0, "prompt_tokens": 140, "completion_tokens": 82, "duration": 4.167835235595703, "task_id": "HumanEval/50", "result": "passed", "passed": true}
{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 31, "duration": 5.49226450920105, "task_id": "HumanEval/51", "result": "passed", "passed": true}
{"generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 26, "duration": 5.450874328613281, "task_id": "HumanEval/52", "result": "passed", "passed": true}
{"generated_code": "def add(x: int, y: int):\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 20, "duration": 1.7860267162322998, "task_id": "HumanEval/53", "result": "passed", "passed": true}
{"generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 38, "duration": 4.537459373474121, "task_id": "HumanEval/55", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 64, "duration": 1.595395803451538, "task_id": "HumanEval/56", "result": "passed", "passed": true}
{"generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 58, "duration": 6.372962713241577, "task_id": "HumanEval/57", "result": "passed", "passed": true}
{"generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 29, "duration": 5.793344020843506, "task_id": "HumanEval/58", "result": "passed", "passed": true}
{"generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 50, "duration": 6.514908790588379, "task_id": "HumanEval/59", "result": "passed", "passed": true}
{"generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 22, "duration": 5.250669479370117, "task_id": "HumanEval/60", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 67, "duration": 6.117987394332886, "task_id": "HumanEval/61", "result": "passed", "passed": true}
{"generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]\n\n# Test cases\nprint(derivative([3, 1, 2, 4, 5]))  # Output: [1, 4, 12, 20]\nprint(derivative([1, 2, 3]))  # Output: [2, 6]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 89, "duration": 5.635868549346924, "task_id": "HumanEval/62", "result": "passed", "passed": true}
{"generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 72, "duration": 2.085747480392456, "task_id": "HumanEval/63", "result": "passed", "passed": true}
{"generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    if s[-1].lower() == 'y':\n        return sum(1 for char in s[:-1] if char.lower() in vowels) + 1\n    else:\n        return sum(1 for char in s if char.lower() in vowels)", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 70, "duration": 6.279200553894043, "task_id": "HumanEval/64", "result": "passed", "passed": true}
{"generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 1.2910349369049072, "task_id": "HumanEval/66", "result": "passed", "passed": true}
{"generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 37, "duration": 5.683075189590454, "task_id": "HumanEval/67", "result": "passed", "passed": true}
{"generated_code": "def pluck(arr):\n    even_values = [(value, index) for index, value in enumerate(arr) if value % 2 == 0]\n    if not even_values:\n        return []\n    min_even_value = min(even_values, key=lambda x: (x[0], x[1]))\n    return [min_even_value[0], min_even_value[1]]", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 82, "duration": 5.2497780323028564, "task_id": "HumanEval/68", "result": "passed", "passed": true}
{"generated_code": "def search(lst):\n    for num in sorted(set(lst), reverse=True):\n        if lst.count(num) >= num:\n            return num\n    return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 37, "duration": 5.657253980636597, "task_id": "HumanEval/69", "result": "passed", "passed": true}
{"generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 44, "duration": 4.340230464935303, "task_id": "HumanEval/70", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 92, "duration": 2.073251247406006, "task_id": "HumanEval/71", "result": "passed", "passed": true}
{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 5.156278610229492, "task_id": "HumanEval/72", "result": "passed", "passed": true}
{"generated_code": "def smallest_change(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-1-i]:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 52, "duration": 1.6135008335113525, "task_id": "HumanEval/73", "result": "passed", "passed": true}
{"generated_code": "def total_match(lst1, lst2):\n    return lst1 if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2) else lst2", "is_solved": true, "iteration": 0, "prompt_tokens": 243, "completion_tokens": 43, "duration": 4.563444375991821, "task_id": "HumanEval/74", "result": "passed", "passed": true}
{"generated_code": "def hex_key(num):\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = sum(1 for digit in num if digit in primes)\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 49, "duration": 3.148556709289551, "task_id": "HumanEval/78", "result": "passed", "passed": true}
{"generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 29, "duration": 4.2002599239349365, "task_id": "HumanEval/79", "result": "passed", "passed": true}
{"generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 76, "duration": 2.430246591567993, "task_id": "HumanEval/80", "result": "passed", "passed": true}
{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 69, "duration": 5.953183889389038, "task_id": "HumanEval/82", "result": "passed", "passed": true}
{"generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 21, "duration": 3.9268581867218018, "task_id": "HumanEval/84", "result": "passed", "passed": true}
{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 105, "completion_tokens": 38, "duration": 4.256866216659546, "task_id": "HumanEval/85", "result": "passed", "passed": true}
{"generated_code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(word)) for word in s.split()])", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 26, "duration": 4.099725961685181, "task_id": "HumanEval/86", "result": "passed", "passed": true}
{"generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 68, "duration": 2.980239152908325, "task_id": "HumanEval/87", "result": "passed", "passed": true}
{"generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 52, "duration": 4.335091829299927, "task_id": "HumanEval/90", "result": "passed", "passed": true}
{"generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 54, "duration": 4.2294628620147705, "task_id": "HumanEval/92", "result": "passed", "passed": true}
{"generated_code": "def largest_prime_sum(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    prime_numbers = [num for num in lst if is_prime(num)]\n    largest_prime = max(prime_numbers)\n    return sum_of_digits(largest_prime)", "is_solved": true, "iteration": 0, "prompt_tokens": 336, "completion_tokens": 116, "duration": 4.039272308349609, "task_id": "HumanEval/94", "result": "failed: name 'skjkasdkd' is not defined", "passed": false}
{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 86, "duration": 4.878050327301025, "task_id": "HumanEval/96", "result": "passed", "passed": true}
{"generated_code": "def multiply(a, b):\n    return int(str(abs(a))[-1]) * int(str(abs(b))[-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 29, "duration": 3.914466619491577, "task_id": "HumanEval/97", "result": "passed", "passed": true}
{"generated_code": "def count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in 'AEIOU')", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 38, "duration": 3.995293378829956, "task_id": "HumanEval/98", "result": "passed", "passed": true}
{"generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or x == n ** int(x ** (1/n)))", "is_solved": true, "iteration": 1, "prompt_tokens": 1158, "completion_tokens": 129, "duration": 8.141426801681519, "task_id": "HumanEval/76", "result": "passed", "passed": true}
{"generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    return all(str(key).islower() for key in keys) or all(str(key).isupper() for key in keys)", "is_solved": true, "iteration": 1, "prompt_tokens": 1279, "completion_tokens": 154, "duration": 8.332320213317871, "task_id": "HumanEval/95", "result": "passed", "passed": true}
{"generated_code": "def sort_array(array):\n    sorted_array = array.copy()\n    if not sorted_array:\n        return []\n    \n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        return sorted(sorted_array, reverse=True)\n    else:\n        return sorted(sorted_array)", "is_solved": true, "iteration": 1, "prompt_tokens": 1457, "completion_tokens": 172, "duration": 8.939888715744019, "task_id": "HumanEval/88", "result": "passed", "passed": true}
{"generated_code": "def starts_one_ends(n):\n    count = 2 * 9 * 10**(n-2) if n > 1 else 1\n    return count", "is_solved": true, "iteration": 4, "prompt_tokens": 2945, "completion_tokens": 358, "duration": 17.163501024246216, "task_id": "HumanEval/83", "result": "passed", "passed": true}
{"generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences if sentence]\n    \n    count = 0\n    for sentence in sentences:\n        if sentence.startswith('I '):  # Update to check for \"I \"\n            count += 1\n    \n    return count", "is_solved": true, "iteration": 4, "prompt_tokens": 3315, "completion_tokens": 421, "duration": 16.9800283908844, "task_id": "HumanEval/91", "result": "passed", "passed": true}
{"generated_code": "def iscube(a):\n    return (a >= 0) and (round(a**(1/3))**3 == a)", "is_solved": false, "iteration": 5, "prompt_tokens": 3783, "completion_tokens": 319, "duration": 17.359010219573975, "task_id": "HumanEval/77", "result": "failed: Third test error: False", "passed": false}
{"generated_code": "def same_chars(s0: str, s1: str):\n    from collections import Counter\n    return Counter(s0) == Counter(s1)", "is_solved": false, "iteration": 5, "prompt_tokens": 4408, "completion_tokens": 328, "duration": 18.68858575820923, "task_id": "HumanEval/54", "result": "failed: ", "passed": false}
{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        if shift > len(x_str) // 2:\n            return x_str[::-1]\n        else:\n            return x_str[-shift:] + x_str[:-shift]", "is_solved": false, "iteration": 5, "prompt_tokens": 3969, "completion_tokens": 586, "duration": 19.869873046875, "task_id": "HumanEval/65", "result": "failed: ", "passed": false}
{"generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        else:\n            result.append('D-' if gpa > 0.0 else 'E')\n    return result", "is_solved": true, "iteration": 4, "prompt_tokens": 6137, "completion_tokens": 1386, "duration": 37.30658411979675, "task_id": "HumanEval/81", "result": "passed", "passed": true}
{"generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = (ord(char) - ord('a') + 2) * 2\n            if char.islower():\n                result += chr((ord('a') + (shift % 26) - ord('a')) % 26 + ord('a'))\n            else:\n                result += chr((ord('A') + (shift % 26) - ord('A')) % 26 + ord('A'))\n        else:\n            result += char\n    return result", "is_solved": false, "iteration": 5, "prompt_tokens": 5443, "completion_tokens": 826, "duration": 27.078319549560547, "task_id": "HumanEval/89", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"generated_code": "def encode(message):\n    encoded_message = ''\n    vowels = 'aeiouAEIOU'\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr((ord(char) + 2 - ord('a') if char.islower() else ord('A')) % 26 + ord('A'))\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message", "is_solved": false, "iteration": 5, "prompt_tokens": 4880, "completion_tokens": 955, "duration": 30.23172092437744, "task_id": "HumanEval/93", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"generated_code": "def sort_third(l: list):\n    return [sorted(l[i:i+3]) if i % 3 == 0 else l[i] for i in range(len(l))]\n\n# Test cases\nprint(sort_third([1, 2, 3]))\nprint(sort_third([5, 6, 3, 4, 8, 9, 2]))", "is_solved": false, "iteration": 5, "prompt_tokens": 8392, "completion_tokens": 1032, "duration": 32.63389325141907, "task_id": "HumanEval/33", "result": "failed: ", "passed": false}
{"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, a):\n        if is_prime(i):\n            while a % i == 0:\n                a //= i\n                count += 1\n            if count >= 3:\n                break\n    return count == 3", "is_solved": false, "iteration": 5, "prompt_tokens": 4970, "completion_tokens": 977, "duration": 28.283241748809814, "task_id": "HumanEval/75", "result": "failed: ", "passed": false}
{"generated_code": "def closest_integer(value):\n    value = float(value)\n    if value < 0:\n        return int(value - 0.5)\n    else:\n        return int(value + 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 45, "duration": 4.453214406967163, "task_id": "HumanEval/99", "result": "passed", "passed": true}
{"generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(\",\", \" \").split()]", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 25, "duration": 1.0746467113494873, "task_id": "HumanEval/101", "result": "passed", "passed": true}
{"generated_code": "def choose_num(x, y):\n    max_even = -1\n    for num in range(x, y+1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 55, "duration": 3.2499303817749023, "task_id": "HumanEval/102", "result": "passed", "passed": true}
{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 40, "duration": 2.996777057647705, "task_id": "HumanEval/103", "result": "passed", "passed": true}
{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 33, "duration": 4.210830211639404, "task_id": "HumanEval/104", "result": "passed", "passed": true}
{"generated_code": "def by_length(arr):\n    digits = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [x for x in arr if 1 <= x <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    result = [digits[x] for x in reversed_arr]\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 119, "duration": 3.765507936477661, "task_id": "HumanEval/105", "result": "passed", "passed": true}
{"generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 82, "duration": 2.168910264968872, "task_id": "HumanEval/106", "result": "passed", "passed": true}
{"generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 99, "duration": 2.3434085845947266, "task_id": "HumanEval/107", "result": "passed", "passed": true}
{"generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    n = len(arr)\n    for i in range(n):\n        if sorted_arr == arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 67, "duration": 1.888298511505127, "task_id": "HumanEval/109", "result": "passed", "passed": true}
{"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(x % 2 == 1 for x in lst1) <= sum(x % 2 == 0 for x in lst2) else \"NO\"", "is_solved": true, "iteration": 0, "prompt_tokens": 247, "completion_tokens": 51, "duration": 1.6188201904296875, "task_id": "HumanEval/110", "result": "passed", "passed": true}
{"generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 212, "completion_tokens": 39, "duration": 1.6968176364898682, "task_id": "HumanEval/112", "result": "passed", "passed": true}
{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 60, "duration": 6.022474765777588, "task_id": "HumanEval/114", "result": "passed", "passed": true}
{"generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 220, "completion_tokens": 28, "duration": 1.244821310043335, "task_id": "HumanEval/116", "result": "passed", "passed": true}
{"generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for letter in word if letter.lower() not in 'aeiou')\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 62, "duration": 2.7944095134735107, "task_id": "HumanEval/117", "result": "passed", "passed": true}
{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 98, "duration": 6.123220443725586, "task_id": "HumanEval/118", "result": "passed", "passed": true}
{"generated_code": "def get_odd_collatz(n):\n    collatz_seq = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_seq.append(n)\n    \n    return sorted([num for num in collatz_seq if num % 2 != 0])", "is_solved": true, "iteration": 0, "prompt_tokens": 281, "completion_tokens": 86, "duration": 5.043258190155029, "task_id": "HumanEval/123", "result": "passed", "passed": true}
{"generated_code": "def valid_date(date):\n    if len(date) != 10:\n        return False\n    month, day, year = date.split('-')\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    month, day, year = int(month), int(day), int(year)\n    if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    else:\n        return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 313, "completion_tokens": 192, "duration": 5.403190851211548, "task_id": "HumanEval/124", "result": "passed", "passed": true}
{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 26, "duration": 2.2351036071777344, "task_id": "HumanEval/133", "result": "passed", "passed": true}
{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt == \"\":\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and (len(txt) == 1 or txt[-2] == \" \"):\n        return True\n    else:\n        return False", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 66, "duration": 1.883793830871582, "task_id": "HumanEval/134", "result": "passed", "passed": true}
{"generated_code": "def largest_smallest_integers(lst):\n    neg_integers = [num for num in lst if num < 0]\n    pos_integers = [num for num in lst if num > 0]\n    \n    largest_neg = max(neg_integers) if neg_integers else None\n    smallest_pos = min(pos_integers) if pos_integers else None\n    \n    return (largest_neg, smallest_pos)", "is_solved": true, "iteration": 0, "prompt_tokens": 188, "completion_tokens": 90, "duration": 3.454267978668213, "task_id": "HumanEval/136", "result": "passed", "passed": true}
{"generated_code": "def is_equal_to_sum_even(n):\n    return n % 2 == 0 and n >= 8", "is_solved": true, "iteration": 0, "prompt_tokens": 127, "completion_tokens": 27, "duration": 2.1825339794158936, "task_id": "HumanEval/138", "result": "passed", "passed": true}
{"generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        factorial = 1\n        for j in range(1, i+1):\n            factorial *= j\n        result *= factorial\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 60, "duration": 5.583819150924683, "task_id": "HumanEval/139", "result": "passed", "passed": true}
{"generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 98, "duration": 3.6051621437072754, "task_id": "HumanEval/141", "result": "passed", "passed": true}
{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 46, "duration": 2.6627280712127686, "task_id": "HumanEval/142", "result": "passed", "passed": true}
{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "is_solved": true, "iteration": 0, "prompt_tokens": 197, "completion_tokens": 95, "duration": 5.373974323272705, "task_id": "HumanEval/143", "result": "passed", "passed": true}
{"generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return (x_num * n_num) % (x_den * n_den) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 59, "duration": 2.6001389026641846, "task_id": "HumanEval/144", "result": "passed", "passed": true}
{"generated_code": "def specialFilter(nums):\n    return sum(1 for num in nums if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9'])", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 67, "duration": 5.582629919052124, "task_id": "HumanEval/146", "result": "passed", "passed": true}
{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2)\n    if start_index > end_index:\n        start_index, end_index = end_index, start_index\n    return tuple(planets[start_index+1:end_index])", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 118, "duration": 3.777313470840454, "task_id": "HumanEval/148", "result": "passed", "passed": true}
{"generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n+1):\n        a_i = i * i - i + 1\n        for j in range(i+1, n+1):\n            a_j = j * j - j + 1\n            for k in range(j+1, n+1):\n                a_k = k * k - k + 1\n                if (a_i + a_j + a_k) % 3 == 0:\n                    count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 123, "duration": 4.436676263809204, "task_id": "HumanEval/147", "result": "passed", "passed": true}
{"generated_code": "def maximum(arr, k):\n    if k == 0:\n        return []\n    return sorted(arr)[-k:]", "is_solved": true, "iteration": 1, "prompt_tokens": 1655, "completion_tokens": 96, "duration": 4.695694446563721, "task_id": "HumanEval/120", "result": "passed", "passed": true}
{"generated_code": "def solution(lst):\n    return sum(num for i, num in enumerate(lst) if i % 2 == 0 and num % 2 != 0)", "is_solved": true, "iteration": 1, "prompt_tokens": 1111, "completion_tokens": 121, "duration": 5.848053216934204, "task_id": "HumanEval/121", "result": "passed", "passed": true}
{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    contains_zero = False\n    for num in arr:\n        if num == 0:\n            contains_zero = True\n            break\n        product *= num / abs(num)\n    if contains_zero:\n        return 0\n    return sum(abs(num) for num in arr) * product", "is_solved": true, "iteration": 1, "prompt_tokens": 1255, "completion_tokens": 200, "duration": 6.570451736450195, "task_id": "HumanEval/128", "result": "passed", "passed": true}
{"generated_code": "def histogram(test):\n    letters = test.split()\n    letter_count = {}\n    for letter in letters:\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n    if not letter_count:\n        return {}\n    max_count = max(letter_count.values())\n    return {letter: count for letter, count in letter_count.items() if count == max_count}", "is_solved": true, "iteration": 1, "prompt_tokens": 1368, "completion_tokens": 226, "duration": 8.95020079612732, "task_id": "HumanEval/111", "result": "passed", "passed": true}
{"generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if -99 < x < 100)", "is_solved": true, "iteration": 3, "prompt_tokens": 2830, "completion_tokens": 240, "duration": 12.143540859222412, "task_id": "HumanEval/122", "result": "passed", "passed": true}
{"generated_code": "def digits(n):\n    return 0 if all(int(digit) % 2 == 0 for digit in str(n)) else \\\n           1 if n == 0 else \\\n           eval('*'.join(digit for digit in str(n) if int(digit) % 2 != 0))", "is_solved": true, "iteration": 2, "prompt_tokens": 1748, "completion_tokens": 268, "duration": 12.153379917144775, "task_id": "HumanEval/131", "result": "passed", "passed": true}
{"generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 2)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones", "is_solved": true, "iteration": 3, "prompt_tokens": 3297, "completion_tokens": 460, "duration": 14.190042495727539, "task_id": "HumanEval/100", "result": "passed", "passed": true}
{"generated_code": "def can_arrange(arr):\n    max_index = -1\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            max_index = i\n    return max_index if max_index == -1 else max_index + 1", "is_solved": true, "iteration": 4, "prompt_tokens": 3224, "completion_tokens": 391, "duration": 19.126644134521484, "task_id": "HumanEval/135", "result": "passed", "passed": true}
{"generated_code": "def is_nested(string):\n    stack = []\n    nested = False\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            if len(stack) > 0:\n                nested = True\n        else:\n            return False\n    return nested and len(stack) != len(string) // 2", "is_solved": true, "iteration": 3, "prompt_tokens": 3704, "completion_tokens": 507, "duration": 17.187824249267578, "task_id": "HumanEval/132", "result": "passed", "passed": true}
{"generated_code": "def is_sorted(lst):\n    return lst == sorted(lst) and all(lst.count(num) <= 1 for num in lst)", "is_solved": false, "iteration": 5, "prompt_tokens": 6138, "completion_tokens": 292, "duration": 15.310051202774048, "task_id": "HumanEval/126", "result": "failed: This prints if this assert fails 7 (good for debugging!)", "passed": false}
{"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "is_solved": false, "iteration": 5, "prompt_tokens": 5795, "completion_tokens": 384, "duration": 16.783503770828247, "task_id": "HumanEval/145", "result": "failed: ", "passed": false}
{"generated_code": "import math\n\ndef max_fill(grid, capacity):\n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)", "is_solved": false, "iteration": 5, "prompt_tokens": 6005, "completion_tokens": 455, "duration": 18.744234323501587, "task_id": "HumanEval/115", "result": "failed: Error", "passed": false}
{"generated_code": "def count_nums(arr):\n    return sum(sum(int(digit) for digit in str(abs(num))) > 0 for num in arr)", "is_solved": false, "iteration": 5, "prompt_tokens": 5195, "completion_tokens": 508, "duration": 23.452022314071655, "task_id": "HumanEval/108", "result": "failed: ", "passed": false}
{"generated_code": "def compare_one(a, b):\n    if type(a) in (int, float) and type(b) in (int, float):\n        return a if a > b else b if b > a else None\n    elif isinstance(a, str) and ',' in a:\n        return a if isinstance(b, str) and ',' not in b else a\n    elif isinstance(b, str) and ',' in b:\n        return b\n    else:\n        return a if type(a) == type(b) and a > b else b", "is_solved": false, "iteration": 5, "prompt_tokens": 5115, "completion_tokens": 829, "duration": 25.90849733352661, "task_id": "HumanEval/137", "result": "failed: ", "passed": false}
{"generated_code": "def fix_spaces(text):\n    result = \"\"\n    count = 0\n    for i, char in enumerate(text):\n        if char == \" \":\n            count += 1\n            if count > 2 or (i == 0 and count > 0):\n                result = result[:-1] + \"-\"\n        else:\n            count = 0\n        if char != \" \":\n            result += char\n        else:\n            result += \"_\"\n    return result", "is_solved": false, "iteration": 5, "prompt_tokens": 4620, "completion_tokens": 676, "duration": 18.774534225463867, "task_id": "HumanEval/140", "result": "failed: This prints if this assert fails 4 (good for debugging!)", "passed": false}
{"generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(int(digit) % 2 != 0 for digit in string), sum(int(digit) % 2 != 0 for digit in string), i+1, i+1) for i, string in enumerate(lst)]", "is_solved": false, "iteration": 5, "prompt_tokens": 5556, "completion_tokens": 597, "duration": 20.341498374938965, "task_id": "HumanEval/113", "result": "failed: Test 1", "passed": false}
{"generated_code": "def match_parens(lst):\n    count = 0\n    for s in lst:\n        count += 1 if s == '(' else -1\n        if count < 0:\n            return 'No'\n    if count != 0:\n        return 'No'\n    return 'Yes'", "is_solved": false, "iteration": 5, "prompt_tokens": 5687, "completion_tokens": 732, "duration": 22.505897283554077, "task_id": "HumanEval/119", "result": "failed: ", "passed": false}
{"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for i in range(len(txt)-1) if txt[i].islower() and ord(txt[i]) % 2 == 1 and txt[i+1].islower() and ord(txt[i+1]) % 2 == 1) + (1 if txt[-1].islower() and ord(txt[-1]) % 2 == 1 else 0) if txt else 0", "is_solved": false, "iteration": 5, "prompt_tokens": 5422, "completion_tokens": 891, "duration": 26.50905466079712, "task_id": "HumanEval/125", "result": "failed: ", "passed": false}
{"generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1, 3]\n    tribonacci = [0, 1, 3]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2])\n        else:\n            tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3])\n    return tribonacci", "is_solved": false, "iteration": 5, "prompt_tokens": 8444, "completion_tokens": 962, "duration": 26.19322943687439, "task_id": "HumanEval/130", "result": "failed: ", "passed": false}
{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    intersection_length = intersection_end - intersection_start + 1\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 5, "prompt_tokens": 7563, "completion_tokens": 1187, "duration": 32.990779638290405, "task_id": "HumanEval/127", "result": "failed: ", "passed": false}
{"generated_code": "def minPath(grid, k):\n    n = len(grid)\n    m = len(grid[0])\n    visited = [[False for _ in range(m)] for _ in range(n)]\n    \n    def dfs(i, j, path):\n        if i < 0 or i >= n or j < 0 or j >= m or visited[i][j]:\n            return\n        path.append(grid[i][j])\n        visited[i][j] = True\n        if len(path) == k:\n            return path\n        res = []\n        for x, y in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:\n            res.append(dfs(x, y, path.copy()))\n        visited[i][j] = False\n        return min(filter(None, res))\n    \n    for i in range(n):\n        for j in range(m):\n            path = dfs(i, j, [])\n            if path:\n                return path", "is_solved": false, "iteration": 5, "prompt_tokens": 14364, "completion_tokens": 2065, "duration": 68.11420273780823, "task_id": "HumanEval/129", "result": "failed: ", "passed": false}
{"generated_code": "def list_sort(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 237, "completion_tokens": 39, "duration": 2.606926202774048, "task_id": "HumanEval/149", "result": "failed: name 'sorted_list_sum' is not defined", "passed": false}
{"generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 78, "duration": 2.0863029956817627, "task_id": "HumanEval/150", "result": "passed", "passed": true}
{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0 and isinstance(x, int))", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 39, "duration": 4.964281320571899, "task_id": "HumanEval/151", "result": "passed", "passed": true}
{"generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 39, "duration": 2.242448329925537, "task_id": "HumanEval/152", "result": "passed", "passed": true}
{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        return sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n    \n    strongest = max(extensions, key=lambda x: strength(x))\n    return f\"{class_name}.{strongest}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 71, "duration": 3.0529162883758545, "task_id": "HumanEval/153", "result": "passed", "passed": true}
{"generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',\n        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 142, "duration": 3.109078884124756, "task_id": "HumanEval/156", "result": "passed", "passed": true}
{"generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 52, "duration": 1.781921625137329, "task_id": "HumanEval/157", "result": "passed", "passed": true}
{"generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    remaining_after_meals = max(0, remaining - need)\n    return [total_eaten, remaining_after_meals]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 51, "duration": 5.194386959075928, "task_id": "HumanEval/159", "result": "passed", "passed": true}
{"generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += operator[i] + str(operand[i+1])\n    return eval(expression)", "is_solved": true, "iteration": 0, "prompt_tokens": 257, "completion_tokens": 48, "duration": 4.242655515670776, "task_id": "HumanEval/160", "result": "passed", "passed": true}
{"generated_code": "def solve(s):\n    return s.swapcase() if any(c.isalpha() for c in s) else s[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 30, "duration": 2.5408999919891357, "task_id": "HumanEval/161", "result": "passed", "passed": true}
{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 33, "duration": 2.378025531768799, "task_id": "HumanEval/162", "result": "passed", "passed": true}
{"generated_code": "def even_odd_count(num):\n    even_count = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 == 0])\n    odd_count = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 != 0])\n    return (even_count, odd_count)", "is_solved": true, "iteration": 1, "prompt_tokens": 1191, "completion_tokens": 206, "duration": 6.058010578155518, "task_id": "HumanEval/155", "result": "passed", "passed": true}
{"generated_code": "def find_max(words):\n    return max(words, key=lambda x: (sum(x.count(c) for c in set(x)), -words.index(x)))", "is_solved": false, "iteration": 5, "prompt_tokens": 5079, "completion_tokens": 381, "duration": 19.6767475605011, "task_id": "HumanEval/158", "result": "failed: t2", "passed": false}
{"generated_code": "def cycpattern_check(a, b):\n    return any(b in a[i:] + a[:i] for i in range(len(a))) or len(a) == len(b) and b in a + a", "is_solved": false, "iteration": 5, "prompt_tokens": 4542, "completion_tokens": 556, "duration": 20.59428882598877, "task_id": "HumanEval/154", "result": "failed: test #3", "passed": false}
{"generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "is_solved": false, "iteration": 5, "prompt_tokens": 4360, "completion_tokens": 492, "duration": 21.608767986297607, "task_id": "HumanEval/163", "result": "failed: Test 1", "passed": false}
