{"task_id": "HumanEval/0", "generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": true, "prompt_tokens": 174, "completions_tokens": 61, "duration": 1.6363213062286377}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_group = \"\"\n    for char in paren_string:\n        if char in \"()\":\n            current_group += char\n        elif char == \" \":\n            if current_group:\n                result.append(current_group)\n                current_group = \"\"\n        elif current_group:\n            result.append(current_group)\n            current_group = \"\"\n    if current_group:\n        result.append(current_group)\n    return result", "is_solved": false, "prompt_tokens": 3585, "completions_tokens": 640, "duration": 13.716814041137695}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": true, "prompt_tokens": 135, "completions_tokens": 21, "duration": 1.031602144241333}
{"task_id": "HumanEval/3", "generated_code": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "is_solved": true, "prompt_tokens": 169, "completions_tokens": 43, "duration": 1.2782511711120605}
{"task_id": "HumanEval/4", "generated_code": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "prompt_tokens": 167, "completions_tokens": 44, "duration": 1.2434191703796387}
{"task_id": "HumanEval/5", "generated_code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    if numbers:\n        result.append(numbers[0])\n        for num in numbers[1:]:\n            result.extend([delimeter, num])\n    return result", "is_solved": true, "prompt_tokens": 817, "completions_tokens": 153, "duration": 4.284872531890869}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result", "is_solved": true, "prompt_tokens": 162, "completions_tokens": 98, "duration": 2.251842975616455}
{"task_id": "HumanEval/7", "generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "is_solved": true, "prompt_tokens": 143, "completions_tokens": 35, "duration": 1.0766692161560059}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        total_sum = sum(numbers)\n        total_product = 1\n        for num in numbers:\n            total_product *= num\n        return total_sum, total_product", "is_solved": true, "prompt_tokens": 160, "completions_tokens": 75, "duration": 2.0665416717529297}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_numbers = []\n    current_max = float('-inf')\n    for num in numbers:\n        current_max = max(current_max, num)\n        max_numbers.append(current_max)\n    return max_numbers", "is_solved": true, "prompt_tokens": 150, "completions_tokens": 62, "duration": 1.5033888816833496}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    \n    if is_palindrome(string):\n        return string\n    \n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "is_solved": false, "prompt_tokens": 3478, "completions_tokens": 725, "duration": 15.430053234100342}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "is_solved": true, "prompt_tokens": 126, "completions_tokens": 40, "duration": 1.2215847969055176}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), -strings.index(x)))", "is_solved": true, "prompt_tokens": 773, "completions_tokens": 149, "duration": 4.5541627407073975}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "is_solved": true, "prompt_tokens": 120, "completions_tokens": 39, "duration": 1.2116470336914062}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "prompt_tokens": 109, "completions_tokens": 32, "duration": 1.2182559967041016}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "is_solved": true, "prompt_tokens": 118, "completions_tokens": 27, "duration": 0.8841378688812256}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "prompt_tokens": 120, "completions_tokens": 23, "duration": 0.8262736797332764}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    notes = {'o': 4, 'o|': 2, '.|': 1}\n    return [notes[note] for note in music_string.split()]", "is_solved": true, "prompt_tokens": 222, "completions_tokens": 53, "duration": 1.5015060901641846}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        index = string.find(substring, start)\n        if index == -1:\n            break\n        count += 1\n        start = index + 1\n    return count", "is_solved": true, "prompt_tokens": 138, "completions_tokens": 76, "duration": 1.9599473476409912}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_dict[x])\n    return ' '.join(sorted_numbers)", "is_solved": true, "prompt_tokens": 155, "completions_tokens": 102, "duration": 2.2529356479644775}
{"task_id": "HumanEval/20", "generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result", "is_solved": true, "prompt_tokens": 216, "completions_tokens": 94, "duration": 2.1040573120117188}
{"task_id": "HumanEval/21", "generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "is_solved": true, "prompt_tokens": 173, "completions_tokens": 53, "duration": 1.5082197189331055}
{"task_id": "HumanEval/22", "generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]", "is_solved": true, "prompt_tokens": 141, "completions_tokens": 31, "duration": 0.8291459083557129}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "prompt_tokens": 93, "completions_tokens": 18, "duration": 0.7640814781188965}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "is_solved": true, "prompt_tokens": 102, "completions_tokens": 43, "duration": 1.695934772491455}
{"task_id": "HumanEval/25", "generated_code": "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "is_solved": true, "prompt_tokens": 176, "completions_tokens": 65, "duration": 1.7680563926696777}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "is_solved": true, "prompt_tokens": 134, "completions_tokens": 38, "duration": 1.0352272987365723}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "is_solved": true, "prompt_tokens": 98, "completions_tokens": 36, "duration": 0.9848370552062988}
{"task_id": "HumanEval/28", "generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "is_solved": true, "prompt_tokens": 107, "completions_tokens": 20, "duration": 0.7656235694885254}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "prompt_tokens": 137, "completions_tokens": 34, "duration": 1.286344051361084}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "is_solved": true, "prompt_tokens": 163, "completions_tokens": 25, "duration": 0.9311985969543457}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "is_solved": true, "prompt_tokens": 149, "completions_tokens": 56, "duration": 1.2747104167938232}
{"task_id": "HumanEval/32", "generated_code": "def find_zero(xs: list):\n    return -xs[0] / xs[1]", "is_solved": true, "prompt_tokens": 309, "completions_tokens": 23, "duration": 0.77860426902771}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    return [sorted(l[i] for i in range(len(l)) if (i+1) % 3 == 0) if (i+1) % 3 == 0 else l[i] for i in range(len(l))]\n\n# Test cases\nprint(sort_third([1, 2, 3]))  # [1, 2, 3]\nprint(sort_third([5, 6, 3, 4, 8, 9, 2]))  # [2, 6, 3, 4, 8, 9, 5]", "is_solved": false, "prompt_tokens": 6111, "completions_tokens": 803, "duration": 17.79505968093872}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "is_solved": true, "prompt_tokens": 123, "completions_tokens": 17, "duration": 0.6403083801269531}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "is_solved": true, "prompt_tokens": 132, "completions_tokens": 16, "duration": 0.8376641273498535}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0 or '7' in str(i):\n            count += 1\n    return count", "is_solved": false, "prompt_tokens": 3257, "completions_tokens": 551, "duration": 12.820309162139893}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    return [sorted(l[::2])[i//2] if i % 2 == 0 else l[i] for i in range(len(l))]", "is_solved": true, "prompt_tokens": 173, "completions_tokens": 43, "duration": 1.2875185012817383}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[2] + group[:2]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "prompt_tokens": 208, "completions_tokens": 162, "duration": 3.0498831272125244}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n):\n                a, b = b, a + b\n            return b\n\n    count = 0\n    i = 0\n    while count < n:\n        i += 1\n        if is_prime(fibonacci(i)):\n            count += 1\n    return fibonacci(i)", "is_solved": true, "prompt_tokens": 147, "completions_tokens": 178, "duration": 3.8787262439727783}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "is_solved": true, "prompt_tokens": 209, "completions_tokens": 70, "duration": 47.676952838897705}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n * n", "is_solved": true, "prompt_tokens": 2884, "completions_tokens": 341, "duration": 10.833692789077759}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "is_solved": true, "prompt_tokens": 158, "completions_tokens": 23, "duration": 0.8157403469085693}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    return any(-x in l for x in l if x != 0)", "is_solved": true, "prompt_tokens": 207, "completions_tokens": 28, "duration": 0.9979028701782227}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    \n    digits = []\n    while x > 0:\n        digits.insert(0, str(x % base))\n        x //= base\n    \n    return ''.join(digits)", "is_solved": true, "prompt_tokens": 822, "completions_tokens": 158, "duration": 3.8910210132598877}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "is_solved": true, "prompt_tokens": 96, "completions_tokens": 22, "duration": 0.8290226459503174}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(3, n+1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return c", "is_solved": true, "prompt_tokens": 2629, "completions_tokens": 555, "duration": 12.111470937728882}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "is_solved": true, "prompt_tokens": 125, "completions_tokens": 61, "duration": 1.4607365131378174}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "is_solved": true, "prompt_tokens": 121, "completions_tokens": 20, "duration": 0.7798421382904053}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "is_solved": true, "prompt_tokens": 155, "completions_tokens": 25, "duration": 1.173722505569458}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": true, "prompt_tokens": 140, "completions_tokens": 82, "duration": 1.9279217720031738}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])", "is_solved": true, "prompt_tokens": 172, "completions_tokens": 31, "duration": 0.9941167831420898}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "is_solved": true, "prompt_tokens": 129, "completions_tokens": 26, "duration": 0.9537045955657959}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "is_solved": true, "prompt_tokens": 103, "completions_tokens": 20, "duration": 0.978264570236206}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)", "is_solved": true, "prompt_tokens": 3280, "completions_tokens": 360, "duration": 12.342605352401733}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "is_solved": true, "prompt_tokens": 102, "completions_tokens": 38, "duration": 1.15921950340271}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "prompt_tokens": 142, "completions_tokens": 64, "duration": 1.5508794784545898}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "prompt_tokens": 137, "completions_tokens": 54, "duration": 1.4494824409484863}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "is_solved": true, "prompt_tokens": 164, "completions_tokens": 29, "duration": 1.0105257034301758}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "is_solved": true, "prompt_tokens": 113, "completions_tokens": 50, "duration": 1.2568631172180176}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "is_solved": true, "prompt_tokens": 144, "completions_tokens": 22, "duration": 0.9931232929229736}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "prompt_tokens": 139, "completions_tokens": 67, "duration": 1.6814403533935547}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]", "is_solved": true, "prompt_tokens": 158, "completions_tokens": 26, "duration": 1.0703351497650146}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "is_solved": true, "prompt_tokens": 199, "completions_tokens": 72, "duration": 1.8827199935913086}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    if s[-1].lower() == 'y':\n        return sum(1 for char in s[:-1] if char.lower() in vowels) + 1\n    else:\n        return sum(1 for char in s if char.lower() in vowels)", "is_solved": true, "prompt_tokens": 176, "completions_tokens": 70, "duration": 1.6602518558502197}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "is_solved": false, "prompt_tokens": 2843, "completions_tokens": 549, "duration": 14.761382818222046}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "is_solved": true, "prompt_tokens": 162, "completions_tokens": 24, "duration": 1.0939209461212158}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "is_solved": true, "prompt_tokens": 260, "completions_tokens": 37, "duration": 1.0937528610229492}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    even_values = [num for num in arr if num % 2 == 0]\n    if not even_values:\n        return []\n    min_even_value = min(even_values)\n    min_even_index = arr.index(min_even_value)\n    return [min_even_value, min_even_index]", "is_solved": true, "prompt_tokens": 362, "completions_tokens": 69, "duration": 1.708775520324707}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    for num in sorted(set(lst), reverse=True):\n        if lst.count(num) >= num and num > 0:\n            return num\n    return -1", "is_solved": true, "prompt_tokens": 215, "completions_tokens": 42, "duration": 1.3564631938934326}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "is_solved": true, "prompt_tokens": 174, "completions_tokens": 44, "duration": 1.3448264598846436}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "is_solved": true, "prompt_tokens": 171, "completions_tokens": 92, "duration": 2.4005892276763916}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "prompt_tokens": 280, "completions_tokens": 28, "duration": 1.0300109386444092}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            count += 1\n    return count", "is_solved": true, "prompt_tokens": 207, "completions_tokens": 55, "duration": 1.9457080364227295}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    return lst1 if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2) else lst2", "is_solved": true, "prompt_tokens": 243, "completions_tokens": 43, "duration": 1.5498013496398926}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if is_prime(a):\n        return False\n\n    prime_factors = []\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            prime_factors.append(i)\n    \n    return len(prime_factors) == 3", "is_solved": false, "prompt_tokens": 3881, "completions_tokens": 867, "duration": 18.43133568763733}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or x == n ** int(x ** (1/n)))", "is_solved": true, "prompt_tokens": 970, "completions_tokens": 127, "duration": 3.863976001739502}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (a >= 0) and (round(a ** (1/3)) ** 3 == a)", "is_solved": false, "prompt_tokens": 2659, "completions_tokens": 292, "duration": 9.03115439414978}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = sum(1 for digit in num if digit in primes)\n    return count", "is_solved": true, "prompt_tokens": 349, "completions_tokens": 49, "duration": 1.5101921558380127}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'", "is_solved": true, "prompt_tokens": 189, "completions_tokens": 29, "duration": 0.9563894271850586}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    return len(s) >= 3 and all(s[i] != s[i+1] and s[i] != s[i+2] and s[i+1] != s[i+2] for i in range(len(s) - 2))", "is_solved": true, "prompt_tokens": 171, "completions_tokens": 62, "duration": 1.5566563606262207}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa >= 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "is_solved": false, "prompt_tokens": 6060, "completions_tokens": 1565, "duration": 46.554128646850586}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "prompt_tokens": 131, "completions_tokens": 70, "duration": 3.2015693187713623}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "is_solved": true, "prompt_tokens": 94, "completions_tokens": 64, "duration": 1.9447550773620605}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "is_solved": true, "prompt_tokens": 183, "completions_tokens": 21, "duration": 1.0175197124481201}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "is_solved": true, "prompt_tokens": 105, "completions_tokens": 34, "duration": 1.0488276481628418}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(word)) for word in s.split()])", "is_solved": true, "prompt_tokens": 180, "completions_tokens": 26, "duration": 1.1244702339172363}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "prompt_tokens": 309, "completions_tokens": 68, "duration": 1.7450809478759766}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    if not array:\n        return []\n    \n    sorted_array = array.copy()\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        return sorted(sorted_array, reverse=True)\n    else:\n        return sorted(sorted_array)", "is_solved": true, "prompt_tokens": 1272, "completions_tokens": 172, "duration": 19.028613805770874}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = \"\"\n    shift = 4\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += chr((ord('a') + (ord(char) - ord('a') + shift) % 26))\n            else:\n                result += chr((ord('A') + (ord(char) - ord('A') + shift) % 26))\n        else:\n            result += char\n    return result", "is_solved": true, "prompt_tokens": 4213, "completions_tokens": 708, "duration": 15.779470682144165}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "is_solved": true, "prompt_tokens": 174, "completions_tokens": 52, "duration": 1.3647513389587402}
{"task_id": "HumanEval/91", "generated_code": "import re\n\ndef is_bored(S):\n    sentences = re.split('[.!?]', S)\n    sentences = [sentence.strip() for sentence in sentences if sentence]\n    sentences = [sentence for sentence in sentences if 'I' in sentence]\n    return len(sentences)", "is_solved": false, "prompt_tokens": 3174, "completions_tokens": 480, "duration": 12.446865797042847}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "is_solved": true, "prompt_tokens": 185, "completions_tokens": 54, "duration": 1.5603387355804443}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    vowels = \"aeiouAEIOU\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr((ord(char) + 2 - ord('a' if char.islower() else 'A')) % 26 + ord('A' if char.isupper() else 'a'))\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message.upper()", "is_solved": false, "prompt_tokens": 3571, "completions_tokens": 699, "duration": 15.077919960021973}
{"task_id": "HumanEval/94", "generated_code": "def largest_prime_sum(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    primes = [num for num in lst if is_prime(num)]\n    if not primes:\n        return 0\n    max_prime = max(primes)\n    return sum_of_digits(max_prime)", "is_solved": true, "prompt_tokens": 336, "completions_tokens": 123, "duration": 2.524893283843994}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    return all(isinstance(key, str) and key.islower() for key in keys) or all(isinstance(key, str) and key.isupper() for key in keys)", "is_solved": true, "prompt_tokens": 1095, "completions_tokens": 164, "duration": 4.25235915184021}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "is_solved": true, "prompt_tokens": 195, "completions_tokens": 86, "duration": 1.8670825958251953}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return abs((a % 10) * (b % 10))", "is_solved": true, "prompt_tokens": 838, "completions_tokens": 92, "duration": 2.912809133529663}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in 'AEIOU')", "is_solved": true, "prompt_tokens": 122, "completions_tokens": 38, "duration": 1.1235902309417725}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    value = float(value)\n    if value >= 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)", "is_solved": true, "prompt_tokens": 206, "completions_tokens": 45, "duration": 1.269803762435913}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 1)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones", "is_solved": false, "prompt_tokens": 3547, "completions_tokens": 536, "duration": 12.41236925125122}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(',', ' ').split()]", "is_solved": true, "prompt_tokens": 166, "completions_tokens": 25, "duration": 1.1067922115325928}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    return max([i for i in range(x, y+1) if i % 2 == 0] + [-1])", "is_solved": true, "prompt_tokens": 144, "completions_tokens": 39, "duration": 1.1353645324707031}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "is_solved": true, "prompt_tokens": 190, "completions_tokens": 40, "duration": 1.4114840030670166}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "prompt_tokens": 152, "completions_tokens": 33, "duration": 1.0860581398010254}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    digits = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [x for x in arr if 1 <= x <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    result = [digits[x] for x in reversed_arr]\n    return result", "is_solved": true, "prompt_tokens": 326, "completions_tokens": 119, "duration": 2.242547035217285}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "is_solved": true, "prompt_tokens": 174, "completions_tokens": 82, "duration": 1.563063144683838}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "is_solved": true, "prompt_tokens": 261, "completions_tokens": 99, "duration": 2.1754753589630127}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if any(digit == '0' for digit in str(abs(num))):\n            count += 1\n    return count", "is_solved": false, "prompt_tokens": 3730, "completions_tokens": 446, "duration": 11.74397611618042}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    n = len(arr)\n    for i in range(n):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "is_solved": true, "prompt_tokens": 349, "completions_tokens": 67, "duration": 1.679642915725708}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if any(x % 2 != y % 2 for x, y in zip(lst1, lst2)) else \"NO\"", "is_solved": false, "prompt_tokens": 4429, "completions_tokens": 495, "duration": 13.657413482666016}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    if not test:\n        return {}\n    \n    letters = test.split()\n    counts = {}\n    for letter in letters:\n        counts[letter] = counts.get(letter, 0) + 1\n    max_count = max(counts.values())\n    return {letter: count for letter, count in counts.items() if count == max_count}", "is_solved": true, "prompt_tokens": 1168, "completions_tokens": 212, "duration": 5.556959867477417}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return result, result == result[::-1]", "is_solved": true, "prompt_tokens": 212, "completions_tokens": 38, "duration": 1.0607280731201172}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {} in the str{}ng {} of the {}nput.\".format(sum(int(digit) % 2 != 0 for digit in s), i, i, i) for i, s in enumerate(lst, 1)]", "is_solved": false, "prompt_tokens": 4206, "completions_tokens": 495, "duration": 13.900065660476685}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": true, "prompt_tokens": 138, "completions_tokens": 60, "duration": 1.518991231918335}
{"task_id": "HumanEval/115", "generated_code": "import math\n\ndef max_fill(grid, capacity):\n    total_ops = 0\n    for row in grid:\n        for well in row:\n            if well > capacity:\n                total_ops += math.ceil(well / capacity)\n            else:\n                total_ops += 1\n    return total_ops", "is_solved": false, "prompt_tokens": 4731, "completions_tokens": 426, "duration": 10.929911851882935}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": true, "prompt_tokens": 220, "completions_tokens": 28, "duration": 1.005751132965088}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for letter in word if letter.lower() not in 'aeiou')\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "is_solved": true, "prompt_tokens": 231, "completions_tokens": 62, "duration": 1.6094169616699219}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "is_solved": true, "prompt_tokens": 199, "completions_tokens": 98, "duration": 2.2279117107391357}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    count = 0\n    for s in lst:\n        for char in s:\n            if char == '(':\n                count += 1\n            else:\n                if count == 0:\n                    return 'No'\n                count -= 1\n    if count == 0:\n        return 'Yes'\n    \n    return 'No'", "is_solved": false, "prompt_tokens": 4457, "completions_tokens": 618, "duration": 15.504085063934326}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    if k == 0:\n        return []\n    return sorted(arr)[-k:]", "is_solved": true, "prompt_tokens": 1462, "completions_tokens": 89, "duration": 3.215217351913452}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if i % 2 == 1 and lst[i] % 2 != 0)", "is_solved": false, "prompt_tokens": 3343, "completions_tokens": 462, "duration": 12.190516710281372}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num <= 99)", "is_solved": false, "prompt_tokens": 3310, "completions_tokens": 361, "duration": 9.957375764846802}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    collatz = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    return sorted(list(set([num for num in collatz if num % 2 != 0])))", "is_solved": true, "prompt_tokens": 281, "completions_tokens": 84, "duration": 2.149287700653076}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if len(date) != 10:\n        return False\n    month, day, year = date.split('-')\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    month, day, year = int(month), int(day), int(year)\n    if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    return True", "is_solved": true, "prompt_tokens": 313, "completions_tokens": 185, "duration": 3.9534318447113037}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        words = [word for word in txt.split(',') if word]\n        return words if words else sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)", "is_solved": false, "prompt_tokens": 3686, "completions_tokens": 663, "duration": 14.402473211288452}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1) if lst[i] != lst[i+1])", "is_solved": false, "prompt_tokens": 4969, "completions_tokens": 407, "duration": 11.267352819442749}
{"task_id": "HumanEval/127", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    start = max(start1, start2)\n    end = min(end1, end2)\n    \n    if start > end:\n        return \"NO\"\n    \n    length = end - start + 1\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "prompt_tokens": 6065, "completions_tokens": 951, "duration": 20.120589017868042}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        if num > 0:\n            product *= 1\n        elif num < 0:\n            product *= -1\n        else:\n            product = 0\n        sum_magnitudes += abs(num)\n    return product * sum_magnitudes", "is_solved": true, "prompt_tokens": 1100, "completions_tokens": 228, "duration": 5.667314767837524}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    n = len(grid)\n    visited = [[False for _ in range(n)] for _ in range(n)]\n    \n    def dfs(i, j, path):\n        if len(path) == k:\n            return path\n        \n        visited[i][j] = True\n        neighbors = [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]\n        neighbors.sort(key=lambda x: grid[x[0]][x[1]] if 0 <= x[0] < n and 0 <= x[1] < n and not visited[x[0]][x[1]] else float('inf'))\n        \n        for ni, nj in neighbors:\n            if 0 <= ni < n and 0 <= nj < n and not visited[ni][nj]:\n                res = dfs(ni, nj, path + [grid[ni][nj]])\n                if res:\n                    return res\n        \n        visited[i][j] = False\n        return None\n    \n    for i in range(n):\n        for j in range(n):\n            path = dfs(i, j, [grid[i][j]])\n            if path and len(path) == k:\n                return path\n    return []", "is_solved": false, "prompt_tokens": 11374, "completions_tokens": 1533, "duration": 31.774049282073975}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [0, 1, 3]\n    else:\n        tribonacci = [0, 1, 3]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3])\n            else:\n                tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i])\n        return tribonacci", "is_solved": false, "prompt_tokens": 7140, "completions_tokens": 916, "duration": 25.955793857574463}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    has_odd_digit = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd_digit = True\n    return product if has_odd_digit else 0", "is_solved": true, "prompt_tokens": 742, "completions_tokens": 160, "duration": 4.233182668685913}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack and stack[-1] == '[':\n            stack.pop()\n    return len(stack) > 0", "is_solved": false, "prompt_tokens": 4029, "completions_tokens": 556, "duration": 13.568870544433594}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)", "is_solved": true, "prompt_tokens": 207, "completions_tokens": 26, "duration": 1.2497987747192383}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt == \"\":\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and (len(txt) == 1 or txt[-2] == \" \"):\n        return True\n    else:\n        return False", "is_solved": true, "prompt_tokens": 187, "completions_tokens": 66, "duration": 1.8453147411346436}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i\n    return max_index", "is_solved": true, "prompt_tokens": 1615, "completions_tokens": 276, "duration": 6.941246032714844}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg_integers = [num for num in lst if num < 0]\n    pos_integers = [num for num in lst if num > 0]\n    \n    largest_neg = max(neg_integers) if neg_integers else None\n    smallest_pos = min(pos_integers) if pos_integers else None\n    \n    return (largest_neg, smallest_pos)", "is_solved": true, "prompt_tokens": 188, "completions_tokens": 90, "duration": 2.148735284805298}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    def convert_to_float(val):\n        if isinstance(val, (int, float)):\n            return float(val)\n        elif isinstance(val, str):\n            val = val.replace(',', '.')\n            try:\n                return float(val)\n            except ValueError:\n                return val\n        else:\n            return val\n\n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n\n    if a_float > b_float:\n        return a\n    elif b_float > a_float:\n        return b\n    else:\n        return None", "is_solved": true, "prompt_tokens": 2811, "completions_tokens": 542, "duration": 12.64093017578125}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n % 2 == 0 and n >= 8", "is_solved": true, "prompt_tokens": 127, "completions_tokens": 27, "duration": 1.1626930236816406}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        factorial = 1\n        for j in range(1, i+1):\n            factorial *= j\n        result *= factorial\n    return result", "is_solved": true, "prompt_tokens": 145, "completions_tokens": 55, "duration": 1.3571290969848633}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    result = \"\"\n    count = 0\n    for char in text:\n        if char == \" \":\n            count += 1\n            if count > 2:\n                result = result[:-2] + \"-\"\n                count = 1\n            else:\n                result += \"_\"\n        else:\n            count = 0\n            result += char\n    return result", "is_solved": true, "prompt_tokens": 977, "completions_tokens": 239, "duration": 52.05078148841858}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n    return 'Yes'", "is_solved": true, "prompt_tokens": 264, "completions_tokens": 98, "duration": 2.115149974822998}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": true, "prompt_tokens": 219, "completions_tokens": 46, "duration": 1.2292120456695557}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "is_solved": true, "prompt_tokens": 197, "completions_tokens": 95, "duration": 2.433868408203125}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n    result = x_num * n_num / (x_denom * n_denom)\n    return result.is_integer()", "is_solved": true, "prompt_tokens": 205, "completions_tokens": 64, "duration": 1.6126008033752441}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    return sorted(nums, key=lambda x: (sum_of_digits(abs(x)), nums.index(x), x))", "is_solved": false, "prompt_tokens": 4692, "completions_tokens": 448, "duration": 11.849796056747437}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    return sum(1 for num in nums if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9'])", "is_solved": true, "prompt_tokens": 169, "completions_tokens": 67, "duration": 1.9064807891845703}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "is_solved": true, "prompt_tokens": 215, "completions_tokens": 94, "duration": 2.107259511947632}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    if start_idx > end_idx:\n        start_idx, end_idx = end_idx, start_idx\n    return tuple(planets[start_idx+1:end_idx])", "is_solved": true, "prompt_tokens": 261, "completions_tokens": 118, "duration": 2.503286600112915}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "is_solved": true, "prompt_tokens": 237, "completions_tokens": 40, "duration": 1.2279529571533203}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "is_solved": true, "prompt_tokens": 136, "completions_tokens": 79, "duration": 2.0495011806488037}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0 and isinstance(x, int))", "is_solved": true, "prompt_tokens": 187, "completions_tokens": 39, "duration": 1.134246587753296}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "is_solved": true, "prompt_tokens": 280, "completions_tokens": 28, "duration": 0.9545083045959473}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        return sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n\n    strongest = max(extensions, key=strength)\n    return f\"{class_name}.{strongest}\"", "is_solved": true, "prompt_tokens": 327, "completions_tokens": 67, "duration": 1.5091373920440674}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in a * 2\n\n# Test cases\nprint(cycpattern_check(\"abcd\", \"abd\"))  # False\nprint(cycpattern_check(\"hello\", \"ell\"))  # True\nprint(cycpattern_check(\"whassup\", \"psus\"))  # False\nprint(cycpattern_check(\"abab\", \"baa\"))  # True\nprint(cycpattern_check(\"efef\", \"eeff\"))  # False\nprint(cycpattern_check(\"himenss\", \"simen\"))  # True", "is_solved": false, "prompt_tokens": 3878, "completions_tokens": 923, "duration": 21.304152250289917}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    num_str = str(abs(num))\n    even_count = len([int(digit) for digit in num_str if int(digit) % 2 == 0])\n    odd_count = len([int(digit) for digit in num_str if int(digit) % 2 != 0])\n    return (even_count, odd_count)", "is_solved": true, "prompt_tokens": 991, "completions_tokens": 196, "duration": 4.32031774520874}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',\n        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()", "is_solved": true, "prompt_tokens": 151, "completions_tokens": 142, "duration": 3.002103328704834}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2", "is_solved": true, "prompt_tokens": 158, "completions_tokens": 52, "duration": 1.4007797241210938}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n\n    max_unique_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = unique_chars\n            max_word = word\n\n    return max_word", "is_solved": true, "prompt_tokens": 170, "completions_tokens": 91, "duration": 1.9899592399597168}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    carrots_left = max(0, remaining - need)\n    return [total_eaten, carrots_left]", "is_solved": true, "prompt_tokens": 327, "completions_tokens": 47, "duration": 1.4360129833221436}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += operator[i] + str(operand[i+1])\n    return eval(expression)", "is_solved": true, "prompt_tokens": 257, "completions_tokens": 48, "duration": 1.2540903091430664}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    return s.swapcase() if any(c.isalpha() for c in s) else s[::-1]", "is_solved": true, "prompt_tokens": 157, "completions_tokens": 30, "duration": 0.880037784576416}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "prompt_tokens": 126, "completions_tokens": 33, "duration": 1.5730595588684082}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    start = min(a, b)\n    end = max(a, b)\n    return [i for i in range(start, end+1) if i % 2 == 0]", "is_solved": false, "prompt_tokens": 3281, "completions_tokens": 498, "duration": 12.557196855545044}
