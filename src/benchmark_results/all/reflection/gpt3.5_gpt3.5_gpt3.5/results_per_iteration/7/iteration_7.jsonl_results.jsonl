{"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": true, "iteration": 0, "prompt_tokens": 135, "completion_tokens": 21, "duration": 3.3748176097869873, "task_id": "HumanEval/2", "result": "passed", "passed": true}
{"generated_code": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 44, "duration": 3.6765074729919434, "task_id": "HumanEval/4", "result": "passed", "passed": true}
{"generated_code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 60, "duration": 4.007699728012085, "task_id": "HumanEval/5", "result": "passed", "passed": true}
{"generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 94, "duration": 4.523579835891724, "task_id": "HumanEval/6", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        total_sum = sum(numbers)\n        total_product = 1\n        for num in numbers:\n            total_product *= num\n        return total_sum, total_product", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 75, "duration": 4.375110387802124, "task_id": "HumanEval/8", "result": "passed", "passed": true}
{"generated_code": "def rolling_max(numbers: List[int]) -> List[int]:\n    max_numbers = []\n    max_num = float('-inf')\n    for num in numbers:\n        max_num = max(max_num, num)\n        max_numbers.append(max_num)\n    return max_numbers", "is_solved": true, "iteration": 0, "prompt_tokens": 150, "completion_tokens": 57, "duration": 3.7959132194519043, "task_id": "HumanEval/9", "result": "passed", "passed": true}
{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.5920822620391846, "task_id": "HumanEval/11", "result": "passed", "passed": true}
{"generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 39, "duration": 3.9178173542022705, "task_id": "HumanEval/12", "result": "failed: ", "passed": false}
{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 39, "duration": 3.631875514984131, "task_id": "HumanEval/13", "result": "passed", "passed": true}
{"generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 32, "duration": 3.5267109870910645, "task_id": "HumanEval/14", "result": "passed", "passed": true}
{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 28, "duration": 3.3324170112609863, "task_id": "HumanEval/15", "result": "passed", "passed": true}
{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 3.1436092853546143, "task_id": "HumanEval/16", "result": "passed", "passed": true}
{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 74, "duration": 4.2200727462768555, "task_id": "HumanEval/18", "result": "passed", "passed": true}
{"generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_dict[x])\n    return ' '.join(sorted_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 102, "duration": 4.697938442230225, "task_id": "HumanEval/19", "result": "passed", "passed": true}
{"generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 31, "duration": 3.5470941066741943, "task_id": "HumanEval/22", "result": "passed", "passed": true}
{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 3.0233676433563232, "task_id": "HumanEval/23", "result": "passed", "passed": true}
{"generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 43, "duration": 3.513399124145508, "task_id": "HumanEval/24", "result": "passed", "passed": true}
{"generated_code": "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 65, "duration": 3.7573485374450684, "task_id": "HumanEval/25", "result": "passed", "passed": true}
{"generated_code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 33, "duration": 3.290222644805908, "task_id": "HumanEval/26", "result": "passed", "passed": true}
{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 36, "duration": 3.3436784744262695, "task_id": "HumanEval/27", "result": "passed", "passed": true}
{"generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 20, "duration": 2.9848461151123047, "task_id": "HumanEval/28", "result": "passed", "passed": true}
{"generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 34, "duration": 3.402144432067871, "task_id": "HumanEval/29", "result": "passed", "passed": true}
{"generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 25, "duration": 1.0710422992706299, "task_id": "HumanEval/30", "result": "passed", "passed": true}
{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 56, "duration": 3.964221477508545, "task_id": "HumanEval/31", "result": "passed", "passed": true}
{"generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 17, "duration": 3.101635456085205, "task_id": "HumanEval/34", "result": "passed", "passed": true}
{"generated_code": "def max_element(l: list):\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 16, "duration": 2.888660430908203, "task_id": "HumanEval/35", "result": "passed", "passed": true}
{"generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iteration": 0, "prompt_tokens": 208, "completion_tokens": 162, "duration": 5.722168922424316, "task_id": "HumanEval/38", "result": "passed", "passed": true}
{"generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n):\n                a, b = b, a + b\n            return b\n\n    count = 0\n    i = 1\n    while count < n:\n        i += 1\n        if is_prime(fibonacci(i)):\n            count += 1\n\n    return fibonacci(i)", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 178, "duration": 8.617135047912598, "task_id": "HumanEval/39", "result": "passed", "passed": true}
{"generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 70, "duration": 4.308423757553101, "task_id": "HumanEval/40", "result": "passed", "passed": true}
{"generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 23, "duration": 4.702202320098877, "task_id": "HumanEval/42", "result": "passed", "passed": true}
{"generated_code": "def pairs_sum_to_zero(l):\n    return any(-x in l for x in l if x != 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 28, "duration": 5.8232152462005615, "task_id": "HumanEval/43", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 22, "duration": 2.7677125930786133, "task_id": "HumanEval/45", "result": "passed", "passed": true}
{"generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n    \n    return d", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 119, "duration": 6.019763231277466, "task_id": "HumanEval/46", "result": "passed", "passed": true}
{"generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 20, "duration": 4.280380725860596, "task_id": "HumanEval/48", "result": "passed", "passed": true}
{"generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 25, "duration": 4.343328475952148, "task_id": "HumanEval/49", "result": "passed", "passed": true}
{"generated_code": "def car_race_collision(n: int):\n    return n", "is_solved": true, "iteration": 1, "prompt_tokens": 1013, "completion_tokens": 100, "duration": 9.350790977478027, "task_id": "HumanEval/41", "result": "failed: ", "passed": false}
{"generated_code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(reversed(digits))", "is_solved": true, "iteration": 1, "prompt_tokens": 897, "completion_tokens": 128, "duration": 8.653769731521606, "task_id": "HumanEval/44", "result": "passed", "passed": true}
{"generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_group = \"\"\n    for char in paren_string:\n        current_group += char\n        if char == ')' and current_group.count('(') == current_group.count(')'):\n            result.append(current_group.replace(\" \", \"\"))\n            current_group = \"\"\n    return result", "is_solved": true, "iteration": 1, "prompt_tokens": 1083, "completion_tokens": 203, "duration": 8.296526908874512, "task_id": "HumanEval/1", "result": "passed", "passed": true}
{"generated_code": "def sort_even(l: list):\n    return [sorted(l[::2])[i//2] if i % 2 == 0 else l[i] for i in range(len(l))]", "is_solved": false, "iteration": 7, "prompt_tokens": 5512, "completion_tokens": 527, "duration": 22.06183934211731, "task_id": "HumanEval/37", "result": "passed", "passed": true}
{"generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "is_solved": false, "iteration": 7, "prompt_tokens": 5297, "completion_tokens": 549, "duration": 24.609788417816162, "task_id": "HumanEval/7", "result": "passed", "passed": true}
{"generated_code": "def find_zero(xs: list):\n    degree = len(xs) - 1\n    return max([-coeff / xs[degree] for coeff in xs[:-1]])", "is_solved": false, "iteration": 7, "prompt_tokens": 6153, "completion_tokens": 624, "duration": 25.13476800918579, "task_id": "HumanEval/32", "result": "failed: name 'poly' is not defined", "passed": false}
{"generated_code": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "is_solved": false, "iteration": 7, "prompt_tokens": 5518, "completion_tokens": 653, "duration": 69.52916240692139, "task_id": "HumanEval/3", "result": "passed", "passed": true}
{"generated_code": "def median(l: list):\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    if n % 2 == 0:\n        return (sorted_l[n//2 - 1] + sorted_l[n//2]) / 2\n    else:\n        return sorted_l[n//2]", "is_solved": false, "iteration": 7, "prompt_tokens": 5052, "completion_tokens": 740, "duration": 23.674036741256714, "task_id": "HumanEval/47", "result": "passed", "passed": true}
{"generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num < 0:\n        range_val = max_num - min_num\n        return [(num - min_num) / range_val for num in numbers]\n    else:\n        return [(num - min_num) / (max_num - min_num) for num in numbers]", "is_solved": false, "iteration": 7, "prompt_tokens": 6873, "completion_tokens": 834, "duration": 26.777995109558105, "task_id": "HumanEval/21", "result": "passed", "passed": true}
{"generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    sorted_numbers = sorted(numbers)\n    for i in range(len(sorted_numbers)-1):\n        if abs(sorted_numbers[i] - sorted_numbers[i+1]) < threshold:\n            return True\n    return False", "is_solved": false, "iteration": 7, "prompt_tokens": 6524, "completion_tokens": 750, "duration": 27.389240741729736, "task_id": "HumanEval/0", "result": "passed", "passed": true}
{"generated_code": "def fizz_buzz(n: int):\n    return sum(1 for i in range(n) if ('7' in str(i) and (i % 11 == 0 or i % 13 == 0)))", "is_solved": false, "iteration": 7, "prompt_tokens": 5619, "completion_tokens": 785, "duration": 31.53655457496643, "task_id": "HumanEval/36", "result": "failed: ", "passed": false}
{"generated_code": "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    \n    for i in range(len(string), 0, -1):\n        if string[:i] == string[:i][::-1]:\n            if i == len(string):  # Input string is already a palindrome\n                return string\n            return string + string[i-1::-1]", "is_solved": false, "iteration": 7, "prompt_tokens": 5591, "completion_tokens": 854, "duration": 28.576879262924194, "task_id": "HumanEval/10", "result": "failed: ", "passed": false}
{"generated_code": "def parse_music(music_string: str) -> List[int]:\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    return [durations.get(note, 0) for note in notes]\n\nparse_music('o o| .| o| o| .| .| .| .| o o')", "is_solved": false, "iteration": 7, "prompt_tokens": 8428, "completion_tokens": 890, "duration": 28.880192756652832, "task_id": "HumanEval/17", "result": "passed", "passed": true}
{"generated_code": "def sort_third(l: list):\n    return [sorted(l[i:i+3]) if i % 3 == 0 else l[i] for i in range(len(l))]\n\n# Test cases\nprint(sort_third([1, 2, 3]))\nprint(sort_third([5, 6, 3, 4, 8, 9, 2]))", "is_solved": false, "iteration": 7, "prompt_tokens": 6753, "completion_tokens": 785, "duration": 27.90294122695923, "task_id": "HumanEval/33", "result": "failed: ", "passed": false}
{"generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = []\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = [(numbers[i], numbers[i+1])]\n        elif diff == min_diff:\n            result.append((numbers[i], numbers[i+1]))\n    return result[0]  # Return the first pair found", "is_solved": false, "iteration": 7, "prompt_tokens": 8426, "completion_tokens": 1351, "duration": 36.03400707244873, "task_id": "HumanEval/20", "result": "passed", "passed": true}
{"generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": true, "iteration": 0, "prompt_tokens": 140, "completion_tokens": 82, "duration": 4.167835235595703, "task_id": "HumanEval/50", "result": "passed", "passed": true}
{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 31, "duration": 5.49226450920105, "task_id": "HumanEval/51", "result": "passed", "passed": true}
{"generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 26, "duration": 5.450874328613281, "task_id": "HumanEval/52", "result": "passed", "passed": true}
{"generated_code": "def add(x: int, y: int):\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 20, "duration": 1.7860267162322998, "task_id": "HumanEval/53", "result": "passed", "passed": true}
{"generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 38, "duration": 4.537459373474121, "task_id": "HumanEval/55", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 64, "duration": 1.595395803451538, "task_id": "HumanEval/56", "result": "passed", "passed": true}
{"generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 58, "duration": 6.372962713241577, "task_id": "HumanEval/57", "result": "passed", "passed": true}
{"generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 29, "duration": 5.793344020843506, "task_id": "HumanEval/58", "result": "passed", "passed": true}
{"generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 50, "duration": 6.514908790588379, "task_id": "HumanEval/59", "result": "passed", "passed": true}
{"generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 22, "duration": 5.250669479370117, "task_id": "HumanEval/60", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 67, "duration": 6.117987394332886, "task_id": "HumanEval/61", "result": "passed", "passed": true}
{"generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]\n\n# Test cases\nprint(derivative([3, 1, 2, 4, 5]))  # Output: [1, 4, 12, 20]\nprint(derivative([1, 2, 3]))  # Output: [2, 6]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 89, "duration": 5.635868549346924, "task_id": "HumanEval/62", "result": "passed", "passed": true}
{"generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 72, "duration": 2.085747480392456, "task_id": "HumanEval/63", "result": "passed", "passed": true}
{"generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    if s[-1].lower() == 'y':\n        return sum(1 for char in s[:-1] if char.lower() in vowels) + 1\n    else:\n        return sum(1 for char in s if char.lower() in vowels)", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 70, "duration": 6.279200553894043, "task_id": "HumanEval/64", "result": "passed", "passed": true}
{"generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 1.2910349369049072, "task_id": "HumanEval/66", "result": "passed", "passed": true}
{"generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 37, "duration": 5.683075189590454, "task_id": "HumanEval/67", "result": "passed", "passed": true}
{"generated_code": "def pluck(arr):\n    even_values = [(value, index) for index, value in enumerate(arr) if value % 2 == 0]\n    if not even_values:\n        return []\n    min_even_value = min(even_values, key=lambda x: (x[0], x[1]))\n    return [min_even_value[0], min_even_value[1]]", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 82, "duration": 5.2497780323028564, "task_id": "HumanEval/68", "result": "passed", "passed": true}
{"generated_code": "def search(lst):\n    for num in sorted(set(lst), reverse=True):\n        if lst.count(num) >= num:\n            return num\n    return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 37, "duration": 5.657253980636597, "task_id": "HumanEval/69", "result": "passed", "passed": true}
{"generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 44, "duration": 4.340230464935303, "task_id": "HumanEval/70", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 92, "duration": 2.073251247406006, "task_id": "HumanEval/71", "result": "passed", "passed": true}
{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 5.156278610229492, "task_id": "HumanEval/72", "result": "passed", "passed": true}
{"generated_code": "def smallest_change(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-1-i]:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 52, "duration": 1.6135008335113525, "task_id": "HumanEval/73", "result": "passed", "passed": true}
{"generated_code": "def total_match(lst1, lst2):\n    return lst1 if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2) else lst2", "is_solved": true, "iteration": 0, "prompt_tokens": 243, "completion_tokens": 43, "duration": 4.563444375991821, "task_id": "HumanEval/74", "result": "passed", "passed": true}
{"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            count += 1\n    return count == 3", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 106, "duration": 5.258728504180908, "task_id": "HumanEval/75", "result": "failed: ", "passed": false}
{"generated_code": "def iscube(a):\n    return (a >= 0) and (round(a**(1/3))**3 == a)", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 31, "duration": 4.989458799362183, "task_id": "HumanEval/77", "result": "failed: Third test error: False", "passed": false}
{"generated_code": "def hex_key(num):\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = sum(1 for digit in num if digit in primes)\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 49, "duration": 3.148556709289551, "task_id": "HumanEval/78", "result": "passed", "passed": true}
{"generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 29, "duration": 4.2002599239349365, "task_id": "HumanEval/79", "result": "passed", "passed": true}
{"generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 76, "duration": 2.430246591567993, "task_id": "HumanEval/80", "result": "passed", "passed": true}
{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 69, "duration": 5.953183889389038, "task_id": "HumanEval/82", "result": "passed", "passed": true}
{"generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 21, "duration": 3.9268581867218018, "task_id": "HumanEval/84", "result": "passed", "passed": true}
{"generated_code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(word)) for word in s.split()])", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 26, "duration": 4.099725961685181, "task_id": "HumanEval/86", "result": "passed", "passed": true}
{"generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 68, "duration": 2.980239152908325, "task_id": "HumanEval/87", "result": "passed", "passed": true}
{"generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 52, "duration": 4.335091829299927, "task_id": "HumanEval/90", "result": "passed", "passed": true}
{"generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 54, "duration": 4.2294628620147705, "task_id": "HumanEval/92", "result": "passed", "passed": true}
{"generated_code": "def encode(message):\n    encoded_message = ''\n    vowels = 'aeiouAEIOU'\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr((ord(char) + 2 - ord('a')) % 26 + ord('A'))\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message", "is_solved": true, "iteration": 0, "prompt_tokens": 159, "completion_tokens": 93, "duration": 5.514516592025757, "task_id": "HumanEval/93", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    return all(key.islower() for key in keys) or all(key.isupper() for key in keys)", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 49, "duration": 4.356325626373291, "task_id": "HumanEval/95", "result": "failed: 'int' object has no attribute 'islower'", "passed": false}
{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 86, "duration": 4.878050327301025, "task_id": "HumanEval/96", "result": "passed", "passed": true}
{"generated_code": "def multiply(a, b):\n    return int(str(abs(a))[-1]) * int(str(abs(b))[-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 29, "duration": 3.914466619491577, "task_id": "HumanEval/97", "result": "passed", "passed": true}
{"generated_code": "def count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in 'AEIOU')", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 38, "duration": 3.995293378829956, "task_id": "HumanEval/98", "result": "passed", "passed": true}
{"generated_code": "def closest_integer(value):\n    value = float(value)\n    if value < 0:\n        return int(value - 0.5)\n    else:\n        return int(value + 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 45, "duration": 4.453214406967163, "task_id": "HumanEval/99", "result": "passed", "passed": true}
{"generated_code": "def sort_array(array):\n    if not array:\n        return []\n    sorted_array = array.copy()\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        return sorted(sorted_array, reverse=True)\n    else:\n        return sorted(sorted_array)", "is_solved": true, "iteration": 1, "prompt_tokens": 1268, "completion_tokens": 153, "duration": 7.287449598312378, "task_id": "HumanEval/88", "result": "passed", "passed": true}
{"generated_code": "def is_simple_power(x, n):\n    if x == 1:\n        return True\n    return x > 0 and n > 0 and x == n ** round(x ** (1/n))", "is_solved": true, "iteration": 4, "prompt_tokens": 3316, "completion_tokens": 387, "duration": 16.118639945983887, "task_id": "HumanEval/76", "result": "passed", "passed": true}
{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2 == 0)", "is_solved": false, "iteration": 7, "prompt_tokens": 4978, "completion_tokens": 451, "duration": 22.151386260986328, "task_id": "HumanEval/85", "result": "passed", "passed": true}
{"generated_code": "def same_chars(s0: str, s1: str):\n    return all(s0.count(char) == s1.count(char) for char in set(s0) | set(s1))", "is_solved": false, "iteration": 7, "prompt_tokens": 5591, "completion_tokens": 540, "duration": 24.75495719909668, "task_id": "HumanEval/54", "result": "failed: ", "passed": false}
{"generated_code": "def starts_one_ends(n):\n    count = 9 * 10**(n-1) + 10**(n-1) - 10**(n-2)\n    return count if n > 1 else 1", "is_solved": false, "iteration": 7, "prompt_tokens": 4706, "completion_tokens": 595, "duration": 23.957120180130005, "task_id": "HumanEval/83", "result": "failed: ", "passed": false}
{"generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = (ord(char) - ord('a') + 2) * 2\n            if char.islower():\n                result += chr((ord('a') + shift - ord('a')) % 26 + ord('a'))\n            else:\n                result += chr((ord('A') + shift - ord('A')) % 26 + ord('A'))\n        else:\n            result += char\n    return result", "is_solved": false, "iteration": 7, "prompt_tokens": 5940, "completion_tokens": 1015, "duration": 29.031641721725464, "task_id": "HumanEval/89", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift] if shift < len(x_str) else x_str[::-1]", "is_solved": false, "iteration": 7, "prompt_tokens": 5548, "completion_tokens": 791, "duration": 25.945770025253296, "task_id": "HumanEval/65", "result": "failed: ", "passed": false}
{"generated_code": "def is_bored(S):\n    sentences = re.split('[.!?]', S)\n    sentences = [sentence.strip() for sentence in sentences if sentence]\n    \n    count = 0\n    for sentence in sentences:\n        if sentence.startswith('I') or ' I ' in sentence or sentence.endswith(' I'):\n            count += 1\n    \n    return count\nimport re", "is_solved": false, "iteration": 7, "prompt_tokens": 5879, "completion_tokens": 930, "duration": 31.228046655654907, "task_id": "HumanEval/91", "result": "failed: Test 2", "passed": false}
{"generated_code": "def largest_prime_sum(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    prime_numbers = [num for num in lst if is_prime(num)]\n    largest_prime = max(prime_numbers)\n    return sum_of_digits(largest_prime)", "is_solved": false, "iteration": 7, "prompt_tokens": 8371, "completion_tokens": 1201, "duration": 34.1983208656311, "task_id": "HumanEval/94", "result": "failed: name 'skjkasdkd' is not defined", "passed": false}
{"generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        else:\n            result.append('E')\n    return result", "is_solved": false, "iteration": 7, "prompt_tokens": 10042, "completion_tokens": 2035, "duration": 46.95533490180969, "task_id": "HumanEval/81", "result": "failed: ", "passed": false}
{"generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(\",\", \" \").split()]", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 25, "duration": 1.0746467113494873, "task_id": "HumanEval/101", "result": "passed", "passed": true}
{"generated_code": "def choose_num(x, y):\n    max_even = -1\n    for num in range(x, y+1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 55, "duration": 3.2499303817749023, "task_id": "HumanEval/102", "result": "passed", "passed": true}
{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 40, "duration": 2.996777057647705, "task_id": "HumanEval/103", "result": "passed", "passed": true}
{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 33, "duration": 4.210830211639404, "task_id": "HumanEval/104", "result": "passed", "passed": true}
{"generated_code": "def by_length(arr):\n    digits = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [x for x in arr if 1 <= x <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    result = [digits[x] for x in reversed_arr]\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 119, "duration": 3.765507936477661, "task_id": "HumanEval/105", "result": "passed", "passed": true}
{"generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 82, "duration": 2.168910264968872, "task_id": "HumanEval/106", "result": "passed", "passed": true}
{"generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    n = len(arr)\n    for i in range(n):\n        if sorted_arr == arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 67, "duration": 1.888298511505127, "task_id": "HumanEval/109", "result": "passed", "passed": true}
{"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(x % 2 == 1 for x in lst1) <= sum(x % 2 == 0 for x in lst2) else \"NO\"", "is_solved": true, "iteration": 0, "prompt_tokens": 247, "completion_tokens": 51, "duration": 1.6188201904296875, "task_id": "HumanEval/110", "result": "passed", "passed": true}
{"generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 212, "completion_tokens": 39, "duration": 1.6968176364898682, "task_id": "HumanEval/112", "result": "passed", "passed": true}
{"generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for letter in word if letter.lower() not in 'aeiou')\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 62, "duration": 2.7944095134735107, "task_id": "HumanEval/117", "result": "passed", "passed": true}
{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 98, "duration": 6.123220443725586, "task_id": "HumanEval/118", "result": "passed", "passed": true}
{"generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "is_solved": true, "iteration": 0, "prompt_tokens": 267, "completion_tokens": 17, "duration": 1.1640126705169678, "task_id": "HumanEval/120", "result": "failed: ", "passed": false}
{"generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) and all(lst.count(num) <= 1 for num in lst)", "is_solved": true, "iteration": 0, "prompt_tokens": 299, "completion_tokens": 44, "duration": 3.082533597946167, "task_id": "HumanEval/126", "result": "failed: This prints if this assert fails 7 (good for debugging!)", "passed": false}
{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 26, "duration": 2.2351036071777344, "task_id": "HumanEval/133", "result": "passed", "passed": true}
{"generated_code": "def is_equal_to_sum_even(n):\n    return n % 2 == 0 and n >= 8", "is_solved": true, "iteration": 0, "prompt_tokens": 127, "completion_tokens": 27, "duration": 2.1825339794158936, "task_id": "HumanEval/138", "result": "passed", "passed": true}
{"generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        factorial = 1\n        for j in range(1, i+1):\n            factorial *= j\n        result *= factorial\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 60, "duration": 5.583819150924683, "task_id": "HumanEval/139", "result": "passed", "passed": true}
{"generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 98, "duration": 3.6051621437072754, "task_id": "HumanEval/141", "result": "passed", "passed": true}
{"generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return (x_num * n_num) % (x_den * n_den) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 59, "duration": 2.6001389026641846, "task_id": "HumanEval/144", "result": "passed", "passed": true}
{"generated_code": "def specialFilter(nums):\n    return sum(1 for num in nums if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9'])", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 67, "duration": 5.582629919052124, "task_id": "HumanEval/146", "result": "passed", "passed": true}
{"generated_code": "import math\n\ndef max_fill(grid, capacity):\n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)", "is_solved": true, "iteration": 1, "prompt_tokens": 1517, "completion_tokens": 105, "duration": 7.188834190368652, "task_id": "HumanEval/115", "result": "failed: Error", "passed": false}
{"generated_code": "def histogram(test):\n    if not test:\n        return {}\n    \n    letters = test.split()\n    letter_count = {}\n    for letter in letters:\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n    max_count = max(letter_count.values())\n    return {letter: count for letter, count in letter_count.items() if count == max_count}", "is_solved": true, "iteration": 1, "prompt_tokens": 1173, "completion_tokens": 235, "duration": 8.528214454650879, "task_id": "HumanEval/111", "result": "passed", "passed": true}
{"generated_code": "def is_nested(string):\n    stack = []\n    nested = False\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            if len(stack) > 0:\n                nested = True\n    return nested", "is_solved": true, "iteration": 1, "prompt_tokens": 1202, "completion_tokens": 275, "duration": 9.621065855026245, "task_id": "HumanEval/132", "result": "failed: ", "passed": false}
{"generated_code": "def valid_date(date):\n    if len(date) != 10:\n        return False\n    if '-' not in date:\n        return False\n    month, day, year = date.split('-')\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    month, day, year = int(month), int(day), int(year)\n    if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    else:\n        return False\n    return True", "is_solved": true, "iteration": 1, "prompt_tokens": 1597, "completion_tokens": 447, "duration": 12.172878503799438, "task_id": "HumanEval/124", "result": "passed", "passed": true}
{"generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 2)  # Change from +1 to +2\n        else:\n            stones.append(stones[-1] + 2)\n    return stones", "is_solved": true, "iteration": 2, "prompt_tokens": 2017, "completion_tokens": 330, "duration": 12.359298706054688, "task_id": "HumanEval/100", "result": "passed", "passed": true}
{"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    elif txt.isdigit():\n        return len(txt)\n    else:\n        return [word for word in txt.split() if word]", "is_solved": true, "iteration": 4, "prompt_tokens": 3483, "completion_tokens": 478, "duration": 18.113759517669678, "task_id": "HumanEval/125", "result": "failed: ", "passed": false}
{"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "is_solved": false, "iteration": 7, "prompt_tokens": 4954, "completion_tokens": 457, "duration": 21.891814947128296, "task_id": "HumanEval/145", "result": "failed: ", "passed": false}
{"generated_code": "def count_nums(arr):\n    return sum(all(int(d) != 0 for d in str(num).replace('-', '')) for num in arr)", "is_solved": false, "iteration": 7, "prompt_tokens": 5048, "completion_tokens": 509, "duration": 26.611334562301636, "task_id": "HumanEval/108", "result": "failed: ", "passed": false}
{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    total_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n        total_sum += num\n    if total_sum < 0:\n        return min_sum\n    return min(nums)", "is_solved": true, "iteration": 6, "prompt_tokens": 5120, "completion_tokens": 718, "duration": 32.10360646247864, "task_id": "HumanEval/114", "result": "failed: ", "passed": false}
{"generated_code": "def add_elements(arr, k):\n    return sum(arr[:k])", "is_solved": false, "iteration": 7, "prompt_tokens": 6298, "completion_tokens": 527, "duration": 25.410290956497192, "task_id": "HumanEval/122", "result": "failed: ", "passed": false}
{"generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": false, "iteration": 7, "prompt_tokens": 6152, "completion_tokens": 454, "duration": 28.142212629318237, "task_id": "HumanEval/116", "result": "passed", "passed": true}
{"generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(int(digit) % 2 != 0 for digit in string), sum(int(digit) % 2 != 0 for digit in string), i+1, i+1) for i, string in enumerate(lst)]", "is_solved": false, "iteration": 7, "prompt_tokens": 6067, "completion_tokens": 719, "duration": 28.709290266036987, "task_id": "HumanEval/113", "result": "failed: Test 1", "passed": false}
{"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if i % 2 == 0 and lst[i] % 2 != 0)", "is_solved": false, "iteration": 7, "prompt_tokens": 5312, "completion_tokens": 577, "duration": 24.023800373077393, "task_id": "HumanEval/121", "result": "failed: ", "passed": false}
{"generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "is_solved": false, "iteration": 7, "prompt_tokens": 6294, "completion_tokens": 623, "duration": 24.61390233039856, "task_id": "HumanEval/149", "result": "passed", "passed": true}
{"generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1, 3]\n    else:\n        tribonacci = [0, 1, 3]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tribonacci.append(1 + i // 2)\n            else:\n                tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1])\n        return tribonacci", "is_solved": false, "iteration": 7, "prompt_tokens": 6990, "completion_tokens": 1248, "duration": 34.23556923866272, "task_id": "HumanEval/130", "result": "failed: list index out of range", "passed": false}
{"generated_code": "def largest_smallest_integers(lst):\n    neg_integers = [num for num in lst if num < 0]\n    pos_integers = [num for num in lst if num > 0]\n    \n    largest_neg = max(neg_integers) if neg_integers else None\n    smallest_pos = min(pos_integers) if pos_integers else None\n    \n    if not neg_integers:\n        largest_neg = None\n    if not pos_integers:\n        smallest_pos = None\n    \n    return (largest_neg, smallest_pos)", "is_solved": false, "iteration": 7, "prompt_tokens": 6589, "completion_tokens": 1268, "duration": 38.22647476196289, "task_id": "HumanEval/136", "result": "passed", "passed": true}
{"generated_code": "def can_arrange(arr):\n    max_len = 0\n    curr_len = 0\n    max_index = -1\n\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            curr_len += 1\n            if curr_len > max_len:\n                max_len = curr_len\n                max_index = i - 1\n        else:\n            curr_len = 0\n\n    return max_index", "is_solved": false, "iteration": 7, "prompt_tokens": 6113, "completion_tokens": 1037, "duration": 35.736165046691895, "task_id": "HumanEval/135", "result": "failed: ", "passed": false}
{"generated_code": "def get_odd_collatz(n):\n    collatz_seq = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_seq.append(n)\n    \n    return sorted([num for num in collatz_seq if num % 2 != 0 or num == 1])", "is_solved": false, "iteration": 7, "prompt_tokens": 7327, "completion_tokens": 1075, "duration": 36.04001975059509, "task_id": "HumanEval/123", "result": "passed", "passed": true}
{"generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a == b:\n            return None\n        return a if a > b else b\n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        return a if a > b else b\n    return a if isinstance(a, (int, float)) else b", "is_solved": false, "iteration": 7, "prompt_tokens": 6265, "completion_tokens": 831, "duration": 33.875118255615234, "task_id": "HumanEval/137", "result": "failed: ", "passed": false}
{"generated_code": "def match_parens(lst):\n    left, right = 0, 0\n    for s in lst:\n        if s == '(':\n            left += 1\n        else:\n            if left == 0:\n                right += 1\n            else:\n                left -= 1\n    return 'Yes' if left == 0 and right <= 1 else 'No'", "is_solved": false, "iteration": 7, "prompt_tokens": 6166, "completion_tokens": 874, "duration": 30.975383043289185, "task_id": "HumanEval/119", "result": "failed: ", "passed": false}
{"generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "is_solved": false, "iteration": 7, "prompt_tokens": 6711, "completion_tokens": 1199, "duration": 34.81717228889465, "task_id": "HumanEval/107", "result": "passed", "passed": true}
{"generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n+1):\n        a_i = i * i - i + 1\n        for j in range(i+1, n+1):\n            a_j = j * j - j + 1\n            for k in range(j+1, n+1):\n                a_k = k * k - k + 1\n                if (a_i + a_j + a_k) % 3 == 0:\n                    count += 1\n    return count // 3", "is_solved": false, "iteration": 7, "prompt_tokens": 6564, "completion_tokens": 1260, "duration": 37.127761125564575, "task_id": "HumanEval/147", "result": "failed: ", "passed": false}
{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 7, "prompt_tokens": 6498, "completion_tokens": 894, "duration": 31.695169925689697, "task_id": "HumanEval/142", "result": "failed: ", "passed": false}
{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    zero_count = 0\n    for num in arr:\n        if num == 0:\n            zero_count += 1\n        else:\n            product *= num / abs(num)\n    if zero_count > 1:\n        return 0\n    return sum(abs(num) for num in arr) * product", "is_solved": false, "iteration": 7, "prompt_tokens": 5945, "completion_tokens": 1042, "duration": 34.02316761016846, "task_id": "HumanEval/128", "result": "failed: ", "passed": false}
{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt or txt[-1].isalpha() and (len(txt) == 1 or txt[-2] != \" \"):\n        return True\n    return False", "is_solved": false, "iteration": 7, "prompt_tokens": 5961, "completion_tokens": 700, "duration": 27.958509922027588, "task_id": "HumanEval/134", "result": "failed: ", "passed": false}
{"generated_code": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product if product != 1 or n == 0 else 0", "is_solved": false, "iteration": 7, "prompt_tokens": 4840, "completion_tokens": 663, "duration": 27.39633059501648, "task_id": "HumanEval/131", "result": "failed: ", "passed": false}
{"generated_code": "def fix_spaces(text):\n    result = \"\"\n    count = 0\n    for char in text:\n        if char == \" \":\n            count += 1\n            if count > 2:\n                if result[-1] != \"-\":\n                    result += \"-\"\n        else:\n            count = 0\n        if char != \" \":\n            result += char\n        else:\n            result += \"_\"\n    return result", "is_solved": false, "iteration": 7, "prompt_tokens": 5794, "completion_tokens": 1023, "duration": 32.898184299468994, "task_id": "HumanEval/140", "result": "failed: This prints if this assert fails 4 (good for debugging!)", "passed": false}
{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2)\n    if start_index == end_index:\n        return ()\n    start_index, end_index = min(start_index, end_index), max(start_index, end_index)\n    return tuple(planets[start_index+1:end_index])", "is_solved": false, "iteration": 7, "prompt_tokens": 7161, "completion_tokens": 1285, "duration": 41.76797366142273, "task_id": "HumanEval/148", "result": "passed", "passed": true}
{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    if intersection_end < intersection_start:\n        return \"NO\"\n    \n    return \"YES\" if is_prime(intersection_end - intersection_start + 1) else \"NO\"", "is_solved": false, "iteration": 7, "prompt_tokens": 7751, "completion_tokens": 1516, "duration": 49.182263135910034, "task_id": "HumanEval/127", "result": "failed: ", "passed": false}
{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_prime_word(word):\n        return is_prime(len(word))\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime_word(word)]\n    return ' '.join(prime_words)", "is_solved": false, "iteration": 7, "prompt_tokens": 6249, "completion_tokens": 1181, "duration": 41.24597406387329, "task_id": "HumanEval/143", "result": "passed", "passed": true}
{"generated_code": "def minPath(grid, k):\n    n = len(grid)\n    m = len(grid[0])\n    visited = [[False for _ in range(m)] for _ in range(n)]\n    result = []\n    \n    def dfs(i, j, path):\n        if i < 0 or i >= n or j < 0 or j >= m or visited[i][j]:\n            return\n        path.append(grid[i][j])\n        visited[i][j] = True\n        if len(path) == k:\n            result.append(path.copy())\n        else:\n            for x, y in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:\n                dfs(x, y, path)\n        visited[i][j] = False\n    \n    for i in range(n):\n        for j in range(m):\n            dfs(i, j, [])\n    \n    return min(result)", "is_solved": false, "iteration": 7, "prompt_tokens": 9443, "completion_tokens": 2036, "duration": 46.963114738464355, "task_id": "HumanEval/129", "result": "failed: ", "passed": false}
{"generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 78, "duration": 2.0863029956817627, "task_id": "HumanEval/150", "result": "passed", "passed": true}
{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0 and isinstance(x, int))", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 39, "duration": 4.964281320571899, "task_id": "HumanEval/151", "result": "passed", "passed": true}
{"generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 39, "duration": 2.242448329925537, "task_id": "HumanEval/152", "result": "passed", "passed": true}
{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        return sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n    \n    strongest = max(extensions, key=lambda x: strength(x))\n    return f\"{class_name}.{strongest}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 71, "duration": 3.0529162883758545, "task_id": "HumanEval/153", "result": "passed", "passed": true}
{"generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',\n        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 142, "duration": 3.109078884124756, "task_id": "HumanEval/156", "result": "passed", "passed": true}
{"generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 52, "duration": 1.781921625137329, "task_id": "HumanEval/157", "result": "passed", "passed": true}
{"generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    remaining_after_meals = max(0, remaining - need)\n    return [total_eaten, remaining_after_meals]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 51, "duration": 5.194386959075928, "task_id": "HumanEval/159", "result": "passed", "passed": true}
{"generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += operator[i] + str(operand[i+1])\n    return eval(expression)", "is_solved": true, "iteration": 0, "prompt_tokens": 257, "completion_tokens": 48, "duration": 4.242655515670776, "task_id": "HumanEval/160", "result": "passed", "passed": true}
{"generated_code": "def solve(s):\n    return s.swapcase() if any(c.isalpha() for c in s) else s[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 30, "duration": 2.5408999919891357, "task_id": "HumanEval/161", "result": "passed", "passed": true}
{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 33, "duration": 2.378025531768799, "task_id": "HumanEval/162", "result": "passed", "passed": true}
{"generated_code": "def even_odd_count(num):\n    even_count = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 == 0])\n    odd_count = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 != 0])\n    return (even_count, odd_count)", "is_solved": true, "iteration": 1, "prompt_tokens": 913, "completion_tokens": 178, "duration": 4.978322505950928, "task_id": "HumanEval/155", "result": "passed", "passed": true}
{"generated_code": "def find_max(words):\n    return min(sorted(words, key=lambda x: (-len(set(x)), x)))", "is_solved": false, "iteration": 7, "prompt_tokens": 5087, "completion_tokens": 433, "duration": 21.34272575378418, "task_id": "HumanEval/158", "result": "failed: t1", "passed": false}
{"generated_code": "def cycpattern_check(a, b):\n    return any(b in a[i:] + a[:i] for i in range(len(a))) or any(b in a[-i:] + a[:-i] for i in range(len(a)))", "is_solved": false, "iteration": 7, "prompt_tokens": 5771, "completion_tokens": 706, "duration": 24.992259979248047, "task_id": "HumanEval/154", "result": "failed: test #3", "passed": false}
{"generated_code": "def generate_integers(a, b):\n    start, end = min(a, b), max(a, b)\n    return [i for i in range(start, end+1) if i % 2 == 0]", "is_solved": false, "iteration": 7, "prompt_tokens": 5242, "completion_tokens": 644, "duration": 25.861634016036987, "task_id": "HumanEval/163", "result": "failed: Test 1", "passed": false}
{"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": true, "iteration": 0, "prompt_tokens": 135, "completion_tokens": 21, "duration": 3.3748176097869873, "task_id": "HumanEval/2", "result": "passed", "passed": true}
{"generated_code": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 44, "duration": 3.6765074729919434, "task_id": "HumanEval/4", "result": "passed", "passed": true}
{"generated_code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 60, "duration": 4.007699728012085, "task_id": "HumanEval/5", "result": "passed", "passed": true}
{"generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 94, "duration": 4.523579835891724, "task_id": "HumanEval/6", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        total_sum = sum(numbers)\n        total_product = 1\n        for num in numbers:\n            total_product *= num\n        return total_sum, total_product", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 75, "duration": 4.375110387802124, "task_id": "HumanEval/8", "result": "passed", "passed": true}
{"generated_code": "def rolling_max(numbers: List[int]) -> List[int]:\n    max_numbers = []\n    max_num = float('-inf')\n    for num in numbers:\n        max_num = max(max_num, num)\n        max_numbers.append(max_num)\n    return max_numbers", "is_solved": true, "iteration": 0, "prompt_tokens": 150, "completion_tokens": 57, "duration": 3.7959132194519043, "task_id": "HumanEval/9", "result": "passed", "passed": true}
{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.5920822620391846, "task_id": "HumanEval/11", "result": "passed", "passed": true}
{"generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 39, "duration": 3.9178173542022705, "task_id": "HumanEval/12", "result": "failed: ", "passed": false}
{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 39, "duration": 3.631875514984131, "task_id": "HumanEval/13", "result": "passed", "passed": true}
{"generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 32, "duration": 3.5267109870910645, "task_id": "HumanEval/14", "result": "passed", "passed": true}
{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 28, "duration": 3.3324170112609863, "task_id": "HumanEval/15", "result": "passed", "passed": true}
{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 3.1436092853546143, "task_id": "HumanEval/16", "result": "passed", "passed": true}
{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 74, "duration": 4.2200727462768555, "task_id": "HumanEval/18", "result": "passed", "passed": true}
{"generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_dict[x])\n    return ' '.join(sorted_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 102, "duration": 4.697938442230225, "task_id": "HumanEval/19", "result": "passed", "passed": true}
{"generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 31, "duration": 3.5470941066741943, "task_id": "HumanEval/22", "result": "passed", "passed": true}
{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 3.0233676433563232, "task_id": "HumanEval/23", "result": "passed", "passed": true}
{"generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 43, "duration": 3.513399124145508, "task_id": "HumanEval/24", "result": "passed", "passed": true}
{"generated_code": "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 65, "duration": 3.7573485374450684, "task_id": "HumanEval/25", "result": "passed", "passed": true}
{"generated_code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 33, "duration": 3.290222644805908, "task_id": "HumanEval/26", "result": "passed", "passed": true}
{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 36, "duration": 3.3436784744262695, "task_id": "HumanEval/27", "result": "passed", "passed": true}
{"generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 20, "duration": 2.9848461151123047, "task_id": "HumanEval/28", "result": "passed", "passed": true}
{"generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 34, "duration": 3.402144432067871, "task_id": "HumanEval/29", "result": "passed", "passed": true}
{"generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 25, "duration": 1.0710422992706299, "task_id": "HumanEval/30", "result": "passed", "passed": true}
{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 56, "duration": 3.964221477508545, "task_id": "HumanEval/31", "result": "passed", "passed": true}
{"generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 17, "duration": 3.101635456085205, "task_id": "HumanEval/34", "result": "passed", "passed": true}
{"generated_code": "def max_element(l: list):\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 16, "duration": 2.888660430908203, "task_id": "HumanEval/35", "result": "passed", "passed": true}
{"generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iteration": 0, "prompt_tokens": 208, "completion_tokens": 162, "duration": 5.722168922424316, "task_id": "HumanEval/38", "result": "passed", "passed": true}
{"generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n):\n                a, b = b, a + b\n            return b\n\n    count = 0\n    i = 1\n    while count < n:\n        i += 1\n        if is_prime(fibonacci(i)):\n            count += 1\n\n    return fibonacci(i)", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 178, "duration": 8.617135047912598, "task_id": "HumanEval/39", "result": "passed", "passed": true}
{"generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 70, "duration": 4.308423757553101, "task_id": "HumanEval/40", "result": "passed", "passed": true}
{"generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 23, "duration": 4.702202320098877, "task_id": "HumanEval/42", "result": "passed", "passed": true}
{"generated_code": "def pairs_sum_to_zero(l):\n    return any(-x in l for x in l if x != 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 28, "duration": 5.8232152462005615, "task_id": "HumanEval/43", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 22, "duration": 2.7677125930786133, "task_id": "HumanEval/45", "result": "passed", "passed": true}
{"generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n    \n    return d", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 119, "duration": 6.019763231277466, "task_id": "HumanEval/46", "result": "passed", "passed": true}
{"generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 20, "duration": 4.280380725860596, "task_id": "HumanEval/48", "result": "passed", "passed": true}
{"generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 25, "duration": 4.343328475952148, "task_id": "HumanEval/49", "result": "passed", "passed": true}
{"generated_code": "def car_race_collision(n: int):\n    return n", "is_solved": true, "iteration": 1, "prompt_tokens": 1010, "completion_tokens": 97, "duration": 9.421023607254028, "task_id": "HumanEval/41", "result": "failed: ", "passed": false}
{"generated_code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    \n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    \n    return ''.join(digits[::-1])", "is_solved": true, "iteration": 1, "prompt_tokens": 913, "completion_tokens": 145, "duration": 9.99294924736023, "task_id": "HumanEval/44", "result": "passed", "passed": true}
{"generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False", "is_solved": true, "iteration": 1, "prompt_tokens": 1266, "completion_tokens": 235, "duration": 10.059654474258423, "task_id": "HumanEval/0", "result": "passed", "passed": true}
{"generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    count = 0\n    current_group = \"\"\n    for char in paren_string.replace(\" \", \"\"):\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n        current_group += char\n        if count == 0:\n            result.append(current_group)\n            current_group = \"\"\n    return result", "is_solved": true, "iteration": 2, "prompt_tokens": 2039, "completion_tokens": 388, "duration": 13.610037326812744, "task_id": "HumanEval/1", "result": "passed", "passed": true}
{"generated_code": "def sort_even(l: list):\n    return [sorted(l[::2])[i//2] if i % 2 == 0 else l[i] for i in range(len(l))]", "is_solved": false, "iteration": 7, "prompt_tokens": 5486, "completion_tokens": 522, "duration": 21.86084008216858, "task_id": "HumanEval/37", "result": "passed", "passed": true}
{"generated_code": "def below_zero(operations: List[int]) -> bool:\n    return any(sum(operations[:i]) < 0 for i in range(1, len(operations) + 1))", "is_solved": false, "iteration": 7, "prompt_tokens": 5575, "completion_tokens": 634, "duration": 71.94787788391113, "task_id": "HumanEval/3", "result": "passed", "passed": true}
{"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "is_solved": false, "iteration": 7, "prompt_tokens": 5265, "completion_tokens": 758, "duration": 29.850987195968628, "task_id": "HumanEval/36", "result": "failed: ", "passed": false}
{"generated_code": "def median(l: list):\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    if n % 2 == 0:\n        return (sorted_l[n//2 - 1] + sorted_l[n//2]) / 2\n    else:\n        return sorted_l[n//2]", "is_solved": false, "iteration": 7, "prompt_tokens": 5123, "completion_tokens": 776, "duration": 25.264813899993896, "task_id": "HumanEval/47", "result": "passed", "passed": true}
{"generated_code": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    return [durations.get(note, 0) for note in notes]\n\nparse_music('o o| .| o| o| .| .| .| .| o o')", "is_solved": false, "iteration": 7, "prompt_tokens": 8474, "completion_tokens": 915, "duration": 28.134907960891724, "task_id": "HumanEval/17", "result": "passed", "passed": true}
{"generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num if range_num != 0 else 0.5 for num in numbers]", "is_solved": false, "iteration": 7, "prompt_tokens": 6637, "completion_tokens": 744, "duration": 27.806222438812256, "task_id": "HumanEval/21", "result": "passed", "passed": true}
{"generated_code": "def make_palindrome(string: str) -> str:\n    def is_palindrome(s):\n        return s == s[::-1]\n\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[i-1::-1]", "is_solved": false, "iteration": 7, "prompt_tokens": 5948, "completion_tokens": 1015, "duration": 33.724685192108154, "task_id": "HumanEval/10", "result": "failed: ", "passed": false}
{"generated_code": "def sort_third(l: list):\n    return [l[i] if i % 3 != 0 else sorted(l[i:i+3])[0] for i in range(len(l))]\n\n# Test cases\nprint(sort_third([1, 2, 3]))\nprint(sort_third([5, 6, 3, 4, 8, 9, 2]))", "is_solved": false, "iteration": 7, "prompt_tokens": 7441, "completion_tokens": 1098, "duration": 37.074002742767334, "task_id": "HumanEval/33", "result": "failed: ", "passed": false}
{"generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = []\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = [(numbers[i], numbers[i+1])]\n        elif diff == min_diff:\n            result.append((numbers[i], numbers[i+1]))\n    return result[0]  # Return the first pair found", "is_solved": false, "iteration": 7, "prompt_tokens": 8010, "completion_tokens": 1223, "duration": 34.81167459487915, "task_id": "HumanEval/20", "result": "passed", "passed": true}
{"generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "is_solved": false, "iteration": 7, "prompt_tokens": 5464, "completion_tokens": 569, "duration": 90.61204385757446, "task_id": "HumanEval/7", "result": "passed", "passed": true}
{"generated_code": "def find_zero(xs: list):\n    return -xs[-2] / xs[-1]", "is_solved": false, "iteration": 7, "prompt_tokens": 6070, "completion_tokens": 668, "duration": 72.8910608291626, "task_id": "HumanEval/32", "result": "failed: name 'poly' is not defined", "passed": false}
{"generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": true, "iteration": 0, "prompt_tokens": 140, "completion_tokens": 82, "duration": 4.167835235595703, "task_id": "HumanEval/50", "result": "passed", "passed": true}
{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 31, "duration": 5.49226450920105, "task_id": "HumanEval/51", "result": "passed", "passed": true}
{"generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 26, "duration": 5.450874328613281, "task_id": "HumanEval/52", "result": "passed", "passed": true}
{"generated_code": "def add(x: int, y: int):\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 20, "duration": 1.7860267162322998, "task_id": "HumanEval/53", "result": "passed", "passed": true}
{"generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 38, "duration": 4.537459373474121, "task_id": "HumanEval/55", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 64, "duration": 1.595395803451538, "task_id": "HumanEval/56", "result": "passed", "passed": true}
{"generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 58, "duration": 6.372962713241577, "task_id": "HumanEval/57", "result": "passed", "passed": true}
{"generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 29, "duration": 5.793344020843506, "task_id": "HumanEval/58", "result": "passed", "passed": true}
{"generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 50, "duration": 6.514908790588379, "task_id": "HumanEval/59", "result": "passed", "passed": true}
{"generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 22, "duration": 5.250669479370117, "task_id": "HumanEval/60", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 67, "duration": 6.117987394332886, "task_id": "HumanEval/61", "result": "passed", "passed": true}
{"generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]\n\n# Test cases\nprint(derivative([3, 1, 2, 4, 5]))  # Output: [1, 4, 12, 20]\nprint(derivative([1, 2, 3]))  # Output: [2, 6]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 89, "duration": 5.635868549346924, "task_id": "HumanEval/62", "result": "passed", "passed": true}
{"generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 72, "duration": 2.085747480392456, "task_id": "HumanEval/63", "result": "passed", "passed": true}
{"generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    if s[-1].lower() == 'y':\n        return sum(1 for char in s[:-1] if char.lower() in vowels) + 1\n    else:\n        return sum(1 for char in s if char.lower() in vowels)", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 70, "duration": 6.279200553894043, "task_id": "HumanEval/64", "result": "passed", "passed": true}
{"generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 1.2910349369049072, "task_id": "HumanEval/66", "result": "passed", "passed": true}
{"generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 37, "duration": 5.683075189590454, "task_id": "HumanEval/67", "result": "passed", "passed": true}
{"generated_code": "def pluck(arr):\n    even_values = [(value, index) for index, value in enumerate(arr) if value % 2 == 0]\n    if not even_values:\n        return []\n    min_even_value = min(even_values, key=lambda x: (x[0], x[1]))\n    return [min_even_value[0], min_even_value[1]]", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 82, "duration": 5.2497780323028564, "task_id": "HumanEval/68", "result": "passed", "passed": true}
{"generated_code": "def search(lst):\n    for num in sorted(set(lst), reverse=True):\n        if lst.count(num) >= num:\n            return num\n    return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 37, "duration": 5.657253980636597, "task_id": "HumanEval/69", "result": "passed", "passed": true}
{"generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 44, "duration": 4.340230464935303, "task_id": "HumanEval/70", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 92, "duration": 2.073251247406006, "task_id": "HumanEval/71", "result": "passed", "passed": true}
{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 5.156278610229492, "task_id": "HumanEval/72", "result": "passed", "passed": true}
{"generated_code": "def smallest_change(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-1-i]:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 52, "duration": 1.6135008335113525, "task_id": "HumanEval/73", "result": "passed", "passed": true}
{"generated_code": "def total_match(lst1, lst2):\n    return lst1 if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2) else lst2", "is_solved": true, "iteration": 0, "prompt_tokens": 243, "completion_tokens": 43, "duration": 4.563444375991821, "task_id": "HumanEval/74", "result": "passed", "passed": true}
{"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            count += 1\n    return count == 3", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 106, "duration": 5.258728504180908, "task_id": "HumanEval/75", "result": "failed: ", "passed": false}
{"generated_code": "def iscube(a):\n    return (a >= 0) and (round(a**(1/3))**3 == a)", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 31, "duration": 4.989458799362183, "task_id": "HumanEval/77", "result": "failed: Third test error: False", "passed": false}
{"generated_code": "def hex_key(num):\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = sum(1 for digit in num if digit in primes)\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 49, "duration": 3.148556709289551, "task_id": "HumanEval/78", "result": "passed", "passed": true}
{"generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 29, "duration": 4.2002599239349365, "task_id": "HumanEval/79", "result": "passed", "passed": true}
{"generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 76, "duration": 2.430246591567993, "task_id": "HumanEval/80", "result": "passed", "passed": true}
{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 69, "duration": 5.953183889389038, "task_id": "HumanEval/82", "result": "passed", "passed": true}
{"generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 21, "duration": 3.9268581867218018, "task_id": "HumanEval/84", "result": "passed", "passed": true}
{"generated_code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(word)) for word in s.split()])", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 26, "duration": 4.099725961685181, "task_id": "HumanEval/86", "result": "passed", "passed": true}
{"generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 68, "duration": 2.980239152908325, "task_id": "HumanEval/87", "result": "passed", "passed": true}
{"generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 52, "duration": 4.335091829299927, "task_id": "HumanEval/90", "result": "passed", "passed": true}
{"generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 54, "duration": 4.2294628620147705, "task_id": "HumanEval/92", "result": "passed", "passed": true}
{"generated_code": "def encode(message):\n    encoded_message = ''\n    vowels = 'aeiouAEIOU'\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr((ord(char) + 2 - ord('a')) % 26 + ord('A'))\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message", "is_solved": true, "iteration": 0, "prompt_tokens": 159, "completion_tokens": 93, "duration": 5.514516592025757, "task_id": "HumanEval/93", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    return all(key.islower() for key in keys) or all(key.isupper() for key in keys)", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 49, "duration": 4.356325626373291, "task_id": "HumanEval/95", "result": "failed: 'int' object has no attribute 'islower'", "passed": false}
{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 86, "duration": 4.878050327301025, "task_id": "HumanEval/96", "result": "passed", "passed": true}
{"generated_code": "def multiply(a, b):\n    return int(str(abs(a))[-1]) * int(str(abs(b))[-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 29, "duration": 3.914466619491577, "task_id": "HumanEval/97", "result": "passed", "passed": true}
{"generated_code": "def count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in 'AEIOU')", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 38, "duration": 3.995293378829956, "task_id": "HumanEval/98", "result": "passed", "passed": true}
{"generated_code": "def closest_integer(value):\n    value = float(value)\n    if value < 0:\n        return int(value - 0.5)\n    else:\n        return int(value + 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 45, "duration": 4.453214406967163, "task_id": "HumanEval/99", "result": "passed", "passed": true}
{"generated_code": "def sort_array(array):\n    if not array:\n        return []\n    \n    sorted_array = array.copy()\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        return sorted(sorted_array, reverse=True)\n    else:\n        return sorted(sorted_array)", "is_solved": true, "iteration": 1, "prompt_tokens": 1273, "completion_tokens": 159, "duration": 7.72651219367981, "task_id": "HumanEval/88", "result": "passed", "passed": true}
{"generated_code": "def is_simple_power(x, n):\n    if x == 1:\n        return True\n    return x > 0 and n > 0 and x == n ** int(round(x ** (1/n)))", "is_solved": true, "iteration": 6, "prompt_tokens": 4731, "completion_tokens": 483, "duration": 21.114765882492065, "task_id": "HumanEval/76", "result": "passed", "passed": true}
{"generated_code": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1) and len(s0) == len(s1)", "is_solved": false, "iteration": 7, "prompt_tokens": 5553, "completion_tokens": 472, "duration": 23.851668119430542, "task_id": "HumanEval/54", "result": "failed: ", "passed": false}
{"generated_code": "def starts_one_ends(n):\n    count = 9 * 10**(n-1) + 10**(n-1) - 10**(n-2)\n    return count if n > 1 else 1", "is_solved": false, "iteration": 7, "prompt_tokens": 4804, "completion_tokens": 648, "duration": 26.504315853118896, "task_id": "HumanEval/83", "result": "failed: ", "passed": false}
{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "is_solved": false, "iteration": 7, "prompt_tokens": 5154, "completion_tokens": 544, "duration": 28.516050338745117, "task_id": "HumanEval/85", "result": "passed", "passed": true}
{"generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences if sentence]\n    \n    count = 0\n    for sentence in sentences:\n        if sentence.startswith('I'):\n            count += 1\n    \n    return count", "is_solved": false, "iteration": 7, "prompt_tokens": 5706, "completion_tokens": 708, "duration": 27.504422426223755, "task_id": "HumanEval/91", "result": "failed: Test 2", "passed": false}
{"generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = (ord(char) - ord('a') + 4) % 26\n            if char.islower():\n                result += chr(shift + ord('a'))\n            else:\n                result += chr(shift + ord('A'))\n        else:\n            result += char\n    return result", "is_solved": true, "iteration": 7, "prompt_tokens": 6280, "completion_tokens": 1101, "duration": 32.114959478378296, "task_id": "HumanEval/89", "result": "passed", "passed": true}
{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    \n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift] if shift <= len(x_str) // 2 else x_str[-shift:] + x_str[:-shift] if shift > len(x_str) // 2 else x_str[::-1]", "is_solved": false, "iteration": 7, "prompt_tokens": 5739, "completion_tokens": 940, "duration": 27.911163568496704, "task_id": "HumanEval/65", "result": "failed: ", "passed": false}
{"generated_code": "def largest_prime_sum(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    prime_numbers = [num for num in lst if is_prime(num)]\n    largest_prime = max(prime_numbers)\n    return sum_of_digits(largest_prime)", "is_solved": false, "iteration": 7, "prompt_tokens": 8454, "completion_tokens": 1253, "duration": 33.730490922927856, "task_id": "HumanEval/94", "result": "failed: name 'skjkasdkd' is not defined", "passed": false}
{"generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        else:\n            result.append('D-')\n    return result", "is_solved": false, "iteration": 7, "prompt_tokens": 10003, "completion_tokens": 2003, "duration": 45.97444009780884, "task_id": "HumanEval/81", "result": "failed: ", "passed": false}
{"generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(\",\", \" \").split()]", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 25, "duration": 1.0746467113494873, "task_id": "HumanEval/101", "result": "passed", "passed": true}
{"generated_code": "def choose_num(x, y):\n    max_even = -1\n    for num in range(x, y+1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 55, "duration": 3.2499303817749023, "task_id": "HumanEval/102", "result": "passed", "passed": true}
{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 40, "duration": 2.996777057647705, "task_id": "HumanEval/103", "result": "passed", "passed": true}
{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 33, "duration": 4.210830211639404, "task_id": "HumanEval/104", "result": "passed", "passed": true}
{"generated_code": "def by_length(arr):\n    digits = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [x for x in arr if 1 <= x <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    result = [digits[x] for x in reversed_arr]\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 119, "duration": 3.765507936477661, "task_id": "HumanEval/105", "result": "passed", "passed": true}
{"generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 82, "duration": 2.168910264968872, "task_id": "HumanEval/106", "result": "passed", "passed": true}
{"generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    n = len(arr)\n    for i in range(n):\n        if sorted_arr == arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 67, "duration": 1.888298511505127, "task_id": "HumanEval/109", "result": "passed", "passed": true}
{"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(x % 2 == 1 for x in lst1) <= sum(x % 2 == 0 for x in lst2) else \"NO\"", "is_solved": true, "iteration": 0, "prompt_tokens": 247, "completion_tokens": 51, "duration": 1.6188201904296875, "task_id": "HumanEval/110", "result": "passed", "passed": true}
{"generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 212, "completion_tokens": 39, "duration": 1.6968176364898682, "task_id": "HumanEval/112", "result": "passed", "passed": true}
{"generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for letter in word if letter.lower() not in 'aeiou')\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 62, "duration": 2.7944095134735107, "task_id": "HumanEval/117", "result": "passed", "passed": true}
{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 98, "duration": 6.123220443725586, "task_id": "HumanEval/118", "result": "passed", "passed": true}
{"generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "is_solved": true, "iteration": 0, "prompt_tokens": 267, "completion_tokens": 17, "duration": 1.1640126705169678, "task_id": "HumanEval/120", "result": "failed: ", "passed": false}
{"generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) and all(lst.count(num) <= 1 for num in lst)", "is_solved": true, "iteration": 0, "prompt_tokens": 299, "completion_tokens": 44, "duration": 3.082533597946167, "task_id": "HumanEval/126", "result": "failed: This prints if this assert fails 7 (good for debugging!)", "passed": false}
{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 26, "duration": 2.2351036071777344, "task_id": "HumanEval/133", "result": "passed", "passed": true}
{"generated_code": "def is_equal_to_sum_even(n):\n    return n % 2 == 0 and n >= 8", "is_solved": true, "iteration": 0, "prompt_tokens": 127, "completion_tokens": 27, "duration": 2.1825339794158936, "task_id": "HumanEval/138", "result": "passed", "passed": true}
{"generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        factorial = 1\n        for j in range(1, i+1):\n            factorial *= j\n        result *= factorial\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 60, "duration": 5.583819150924683, "task_id": "HumanEval/139", "result": "passed", "passed": true}
{"generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 98, "duration": 3.6051621437072754, "task_id": "HumanEval/141", "result": "passed", "passed": true}
{"generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return (x_num * n_num) % (x_den * n_den) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 59, "duration": 2.6001389026641846, "task_id": "HumanEval/144", "result": "passed", "passed": true}
{"generated_code": "def specialFilter(nums):\n    return sum(1 for num in nums if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9'])", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 67, "duration": 5.582629919052124, "task_id": "HumanEval/146", "result": "passed", "passed": true}
{"generated_code": "import math\n\ndef max_fill(grid, capacity):\n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)", "is_solved": true, "iteration": 1, "prompt_tokens": 1522, "completion_tokens": 110, "duration": 8.365165948867798, "task_id": "HumanEval/115", "result": "failed: Error", "passed": false}
{"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    elif txt.isdigit():\n        return len(txt)\n    else:\n        return [txt]", "is_solved": true, "iteration": 1, "prompt_tokens": 1080, "completion_tokens": 173, "duration": 8.809325456619263, "task_id": "HumanEval/125", "result": "failed: ", "passed": false}
{"generated_code": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product if product != 1 or n % 2 != 0 else 0", "is_solved": true, "iteration": 1, "prompt_tokens": 860, "completion_tokens": 155, "duration": 8.25637674331665, "task_id": "HumanEval/131", "result": "failed: ", "passed": false}
{"generated_code": "def histogram(test):\n    letters = test.split()\n    letter_count = {}\n    for letter in letters:\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n    \n    if not letter_count:  # Check if the dictionary is empty\n        return {}\n\n    max_count = max(letter_count.values())\n    return {letter: count for letter, count in letter_count.items() if count == max_count}", "is_solved": true, "iteration": 1, "prompt_tokens": 1179, "completion_tokens": 250, "duration": 9.564497470855713, "task_id": "HumanEval/111", "result": "passed", "passed": true}
{"generated_code": "def valid_date(date):\n    if len(date) != 10:\n        return False\n    if '-' not in date:\n        return False\n    \n    month, day, year = date.split('-')\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    \n    month, day, year = int(month), int(day), int(year)\n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    else:\n        return False\n    \n    return True", "is_solved": true, "iteration": 1, "prompt_tokens": 1607, "completion_tokens": 457, "duration": 13.359225749969482, "task_id": "HumanEval/124", "result": "passed", "passed": true}
{"generated_code": "def match_parens(lst):\n    count = 0\n    for s in lst:\n        for char in s:\n            count += 1 if char == '(' else -1\n            if count < 0:\n                return 'No'\n    \n    if count == 0:\n        return 'Yes'\n    \n    return 'No'", "is_solved": true, "iteration": 2, "prompt_tokens": 2138, "completion_tokens": 358, "duration": 11.744993686676025, "task_id": "HumanEval/119", "result": "failed: ", "passed": false}
{"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "is_solved": true, "iteration": 3, "prompt_tokens": 2251, "completion_tokens": 298, "duration": 13.173795461654663, "task_id": "HumanEval/121", "result": "passed", "passed": true}
{"generated_code": "def fix_spaces(text):\n    result = \"\"\n    count = 0\n    for char in text:\n        if char == \" \":\n            count += 1\n            if count == 1:\n                result += \"_\"\n            elif count > 2:\n                result = result.rstrip(\"_\") + \"-\"\n        else:\n            count = 0\n            result += char\n    return result", "is_solved": true, "iteration": 4, "prompt_tokens": 3215, "completion_tokens": 519, "duration": 15.540142297744751, "task_id": "HumanEval/140", "result": "failed: This prints if this assert fails 3 (good for debugging!)", "passed": false}
{"generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 2)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones", "is_solved": true, "iteration": 5, "prompt_tokens": 4287, "completion_tokens": 611, "duration": 20.24433922767639, "task_id": "HumanEval/100", "result": "passed", "passed": true}
{"generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": false, "iteration": 7, "prompt_tokens": 6140, "completion_tokens": 456, "duration": 21.96551823616028, "task_id": "HumanEval/116", "result": "passed", "passed": true}
{"generated_code": "def count_nums(arr):\n    return sum(sum(int(d) for d in str(num) if d != '-') > 0 for num in arr)", "is_solved": false, "iteration": 7, "prompt_tokens": 4952, "completion_tokens": 460, "duration": 23.48611307144165, "task_id": "HumanEval/108", "result": "failed: ", "passed": false}
{"generated_code": "def is_nested(string):\n    stack = []\n    nested_found = False\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack and stack[-1] == '[':\n            stack.pop()\n            if len(stack) > 0:\n                nested_found = True\n    return nested_found", "is_solved": true, "iteration": 7, "prompt_tokens": 5601, "completion_tokens": 839, "duration": 29.686755657196045, "task_id": "HumanEval/132", "result": "failed: ", "passed": false}
{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n        \n    if min_sum > 0:\n        return min(nums)\n    return min_sum", "is_solved": false, "iteration": 7, "prompt_tokens": 5837, "completion_tokens": 812, "duration": 31.517757415771484, "task_id": "HumanEval/114", "result": "passed", "passed": true}
{"generated_code": "def add_elements(arr, k):\n    return sum(arr[:k])", "is_solved": false, "iteration": 7, "prompt_tokens": 6540, "completion_tokens": 505, "duration": 26.21304965019226, "task_id": "HumanEval/122", "result": "failed: ", "passed": false}
{"generated_code": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i-1\n    return max_index", "is_solved": false, "iteration": 7, "prompt_tokens": 5581, "completion_tokens": 765, "duration": 27.461762189865112, "task_id": "HumanEval/135", "result": "failed: ", "passed": false}
{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 and i % 3 != 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 7, "prompt_tokens": 6398, "completion_tokens": 648, "duration": 27.31888175010681, "task_id": "HumanEval/142", "result": "passed", "passed": true}
{"generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "is_solved": false, "iteration": 7, "prompt_tokens": 6337, "completion_tokens": 490, "duration": 25.902711153030396, "task_id": "HumanEval/149", "result": "passed", "passed": true}
{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    for num in arr:\n        if num == 0:\n            return 0\n        product *= num / abs(num)\n    return sum(abs(num) for num in arr) * product", "is_solved": false, "iteration": 7, "prompt_tokens": 5729, "completion_tokens": 891, "duration": 30.659708976745605, "task_id": "HumanEval/128", "result": "passed", "passed": true}
{"generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    def is_even(num):\n        return num % 2 == 0\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if is_even(i):\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "is_solved": false, "iteration": 7, "prompt_tokens": 6858, "completion_tokens": 1133, "duration": 33.54109025001526, "task_id": "HumanEval/107", "result": "passed", "passed": true}
{"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "is_solved": false, "iteration": 7, "prompt_tokens": 5044, "completion_tokens": 503, "duration": 21.865991353988647, "task_id": "HumanEval/145", "result": "failed: ", "passed": false}
{"generated_code": "def get_odd_collatz(n):\n    collatz_seq = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_seq.append(n)\n    \n    return sorted([num for num in collatz_seq if num % 2 != 0 or num == 1])", "is_solved": false, "iteration": 7, "prompt_tokens": 7368, "completion_tokens": 1042, "duration": 33.52258849143982, "task_id": "HumanEval/123", "result": "passed", "passed": true}
{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_prime_word(word):\n        return is_prime(len(word))\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime_word(word)]\n    return ' '.join(prime_words)", "is_solved": false, "iteration": 7, "prompt_tokens": 6241, "completion_tokens": 1155, "duration": 37.05520796775818, "task_id": "HumanEval/143", "result": "passed", "passed": true}
{"generated_code": "def compare_one(a, b):\n    if type(a) != type(b):\n        if isinstance(a, (int, float)):\n            a = float(a)\n        if isinstance(b, (int, float)):\n            b = float(b)\n    return a if a == b else max(a, b)", "is_solved": false, "iteration": 7, "prompt_tokens": 6221, "completion_tokens": 877, "duration": 32.56785249710083, "task_id": "HumanEval/137", "result": "failed: '>' not supported between instances of 'str' and 'float'", "passed": false}
{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt == \"\":\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and (len(txt) == 1 or not txt[-2].isalnum()):\n        return True\n    else:\n        return False", "is_solved": false, "iteration": 7, "prompt_tokens": 5895, "completion_tokens": 796, "duration": 28.690164804458618, "task_id": "HumanEval/134", "result": "passed", "passed": true}
{"generated_code": "def tri(n):\n    tribonacci = [3] if n == 0 else [1, 3] if n == 1 else [0, 1, 3]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3])\n    return tribonacci", "is_solved": false, "iteration": 7, "prompt_tokens": 6824, "completion_tokens": 1172, "duration": 34.45571970939636, "task_id": "HumanEval/130", "result": "failed: ", "passed": false}
{"generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(int(digit) % 2 != 0 for digit in string), sum(int(digit) % 2 != 0 for digit in string), i+1, i+1) for i, string in enumerate(lst)]", "is_solved": false, "iteration": 7, "prompt_tokens": 6017, "completion_tokens": 774, "duration": 25.43585991859436, "task_id": "HumanEval/113", "result": "failed: Test 1", "passed": false}
{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2)\n    \n    if start_index > end_index:\n        start_index, end_index = end_index, start_index\n    \n    return tuple(planets[start_index+1:end_index]) if start_index < end_index else tuple(planets[end_index+1:start_index])", "is_solved": false, "iteration": 7, "prompt_tokens": 6853, "completion_tokens": 1293, "duration": 34.95451855659485, "task_id": "HumanEval/148", "result": "passed", "passed": true}
{"generated_code": "def largest_smallest_integers(lst):\n    neg_integers = [num for num in lst if num < 0]\n    pos_integers = [num for num in lst if num > 0]\n    \n    largest_neg = None\n    smallest_pos = None\n    \n    for num in lst:\n        if num < 0 and (largest_neg is None or num > largest_neg):\n            largest_neg = num\n        elif num > 0 and (smallest_pos is None or num < smallest_pos):\n            smallest_pos = num\n    \n    return (largest_neg, smallest_pos)", "is_solved": false, "iteration": 7, "prompt_tokens": 6718, "completion_tokens": 1099, "duration": 35.6384539604187, "task_id": "HumanEval/136", "result": "passed", "passed": true}
{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    intersection_length = intersection_end - intersection_start + 1\n    \n    if intersection_length < 1:\n        return \"NO\"\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 7, "prompt_tokens": 7729, "completion_tokens": 1481, "duration": 39.80737066268921, "task_id": "HumanEval/127", "result": "failed: ", "passed": false}
{"generated_code": "def get_max_triples(n):\n    count = 0\n    remainder_count = [0, 0, 0]\n    \n    for i in range(1, n+1):\n        remainder_count[(i * i) % 3] += 1\n        \n    count = (remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2)) // 6\n    count += (remainder_count[1] * (remainder_count[1] - 1) * (remainder_count[1] - 2)) // 6\n    count += (remainder_count[2] * (remainder_count[2] - 1) * (remainder_count[2] - 2)) // 6\n    \n    count += (remainder_count[0] * remainder_count[1] * remainder_count[2])\n    \n    return count", "is_solved": false, "iteration": 7, "prompt_tokens": 6892, "completion_tokens": 1645, "duration": 44.94718647003174, "task_id": "HumanEval/147", "result": "failed: ", "passed": false}
{"generated_code": "def minPath(grid, k):\n    n = len(grid)\n    m = len(grid[0])\n    visited = [[False for _ in range(m)] for _ in range(n)]\n    \n    def dfs(i, j, path):\n        if i < 0 or i >= n or j < 0 or j >= m or visited[i][j]:\n            return\n        path.append(grid[i][j])\n        visited[i][j] = True\n        if len(path) == k:\n            return path\n        res = []\n        for x, y in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:\n            res.append(dfs(x, y, path.copy()))\n        visited[i][j] = False\n        return min(filter(None, res))\n    \n    for i in range(n):\n        for j in range(m):\n            path = dfs(i, j, [])\n            if path:\n                return path", "is_solved": false, "iteration": 7, "prompt_tokens": 12356, "completion_tokens": 2780, "duration": 56.56681180000305, "task_id": "HumanEval/129", "result": "failed: ", "passed": false}
{"generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 78, "duration": 2.0863029956817627, "task_id": "HumanEval/150", "result": "passed", "passed": true}
{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0 and isinstance(x, int))", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 39, "duration": 4.964281320571899, "task_id": "HumanEval/151", "result": "passed", "passed": true}
{"generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 39, "duration": 2.242448329925537, "task_id": "HumanEval/152", "result": "passed", "passed": true}
{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        return sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n    \n    strongest = max(extensions, key=lambda x: strength(x))\n    return f\"{class_name}.{strongest}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 71, "duration": 3.0529162883758545, "task_id": "HumanEval/153", "result": "passed", "passed": true}
{"generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',\n        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 142, "duration": 3.109078884124756, "task_id": "HumanEval/156", "result": "passed", "passed": true}
{"generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 52, "duration": 1.781921625137329, "task_id": "HumanEval/157", "result": "passed", "passed": true}
{"generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    remaining_after_meals = max(0, remaining - need)\n    return [total_eaten, remaining_after_meals]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 51, "duration": 5.194386959075928, "task_id": "HumanEval/159", "result": "passed", "passed": true}
{"generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += operator[i] + str(operand[i+1])\n    return eval(expression)", "is_solved": true, "iteration": 0, "prompt_tokens": 257, "completion_tokens": 48, "duration": 4.242655515670776, "task_id": "HumanEval/160", "result": "passed", "passed": true}
{"generated_code": "def solve(s):\n    return s.swapcase() if any(c.isalpha() for c in s) else s[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 30, "duration": 2.5408999919891357, "task_id": "HumanEval/161", "result": "passed", "passed": true}
{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 33, "duration": 2.378025531768799, "task_id": "HumanEval/162", "result": "passed", "passed": true}
{"generated_code": "def even_odd_count(num):\n    even_count = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 == 0])\n    odd_count = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 != 0])\n    return (even_count, odd_count)", "is_solved": true, "iteration": 1, "prompt_tokens": 922, "completion_tokens": 187, "duration": 5.2606329917907715, "task_id": "HumanEval/155", "result": "passed", "passed": true}
{"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in a + a", "is_solved": false, "iteration": 7, "prompt_tokens": 5559, "completion_tokens": 601, "duration": 23.70889139175415, "task_id": "HumanEval/154", "result": "failed: test #1", "passed": false}
{"generated_code": "def find_max(words):\n    return min(words, key=lambda x: (-len(set(x)), words.index(x)))", "is_solved": false, "iteration": 7, "prompt_tokens": 5543, "completion_tokens": 515, "duration": 23.745434999465942, "task_id": "HumanEval/158", "result": "failed: t2", "passed": false}
{"generated_code": "def generate_integers(a, b):\n    start = min(a, b)\n    end = max(a, b)\n    return [i for i in range(start, end + 1) if i % 2 == 0]", "is_solved": false, "iteration": 7, "prompt_tokens": 5306, "completion_tokens": 655, "duration": 26.654518604278564, "task_id": "HumanEval/163", "result": "failed: Test 1", "passed": false}
{"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": true, "iteration": 0, "prompt_tokens": 135, "completion_tokens": 21, "duration": 3.3748176097869873, "task_id": "HumanEval/2", "result": "passed", "passed": true}
{"generated_code": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 44, "duration": 3.6765074729919434, "task_id": "HumanEval/4", "result": "passed", "passed": true}
{"generated_code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 60, "duration": 4.007699728012085, "task_id": "HumanEval/5", "result": "passed", "passed": true}
{"generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 94, "duration": 4.523579835891724, "task_id": "HumanEval/6", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        total_sum = sum(numbers)\n        total_product = 1\n        for num in numbers:\n            total_product *= num\n        return total_sum, total_product", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 75, "duration": 4.375110387802124, "task_id": "HumanEval/8", "result": "passed", "passed": true}
{"generated_code": "def rolling_max(numbers: List[int]) -> List[int]:\n    max_numbers = []\n    max_num = float('-inf')\n    for num in numbers:\n        max_num = max(max_num, num)\n        max_numbers.append(max_num)\n    return max_numbers", "is_solved": true, "iteration": 0, "prompt_tokens": 150, "completion_tokens": 57, "duration": 3.7959132194519043, "task_id": "HumanEval/9", "result": "passed", "passed": true}
{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.5920822620391846, "task_id": "HumanEval/11", "result": "passed", "passed": true}
{"generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 39, "duration": 3.9178173542022705, "task_id": "HumanEval/12", "result": "failed: ", "passed": false}
{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 39, "duration": 3.631875514984131, "task_id": "HumanEval/13", "result": "passed", "passed": true}
{"generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 32, "duration": 3.5267109870910645, "task_id": "HumanEval/14", "result": "passed", "passed": true}
{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 28, "duration": 3.3324170112609863, "task_id": "HumanEval/15", "result": "passed", "passed": true}
{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 3.1436092853546143, "task_id": "HumanEval/16", "result": "passed", "passed": true}
{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 74, "duration": 4.2200727462768555, "task_id": "HumanEval/18", "result": "passed", "passed": true}
{"generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_dict[x])\n    return ' '.join(sorted_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 102, "duration": 4.697938442230225, "task_id": "HumanEval/19", "result": "passed", "passed": true}
{"generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 31, "duration": 3.5470941066741943, "task_id": "HumanEval/22", "result": "passed", "passed": true}
{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 3.0233676433563232, "task_id": "HumanEval/23", "result": "passed", "passed": true}
{"generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 43, "duration": 3.513399124145508, "task_id": "HumanEval/24", "result": "passed", "passed": true}
{"generated_code": "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 65, "duration": 3.7573485374450684, "task_id": "HumanEval/25", "result": "passed", "passed": true}
{"generated_code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 33, "duration": 3.290222644805908, "task_id": "HumanEval/26", "result": "passed", "passed": true}
{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 36, "duration": 3.3436784744262695, "task_id": "HumanEval/27", "result": "passed", "passed": true}
{"generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 20, "duration": 2.9848461151123047, "task_id": "HumanEval/28", "result": "passed", "passed": true}
{"generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 34, "duration": 3.402144432067871, "task_id": "HumanEval/29", "result": "passed", "passed": true}
{"generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 25, "duration": 1.0710422992706299, "task_id": "HumanEval/30", "result": "passed", "passed": true}
{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 56, "duration": 3.964221477508545, "task_id": "HumanEval/31", "result": "passed", "passed": true}
{"generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 17, "duration": 3.101635456085205, "task_id": "HumanEval/34", "result": "passed", "passed": true}
{"generated_code": "def max_element(l: list):\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 16, "duration": 2.888660430908203, "task_id": "HumanEval/35", "result": "passed", "passed": true}
{"generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iteration": 0, "prompt_tokens": 208, "completion_tokens": 162, "duration": 5.722168922424316, "task_id": "HumanEval/38", "result": "passed", "passed": true}
{"generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n):\n                a, b = b, a + b\n            return b\n\n    count = 0\n    i = 1\n    while count < n:\n        i += 1\n        if is_prime(fibonacci(i)):\n            count += 1\n\n    return fibonacci(i)", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 178, "duration": 8.617135047912598, "task_id": "HumanEval/39", "result": "passed", "passed": true}
{"generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 70, "duration": 4.308423757553101, "task_id": "HumanEval/40", "result": "passed", "passed": true}
{"generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 23, "duration": 4.702202320098877, "task_id": "HumanEval/42", "result": "passed", "passed": true}
{"generated_code": "def pairs_sum_to_zero(l):\n    return any(-x in l for x in l if x != 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 28, "duration": 5.8232152462005615, "task_id": "HumanEval/43", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 22, "duration": 2.7677125930786133, "task_id": "HumanEval/45", "result": "passed", "passed": true}
{"generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n    \n    return d", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 119, "duration": 6.019763231277466, "task_id": "HumanEval/46", "result": "passed", "passed": true}
{"generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 20, "duration": 4.280380725860596, "task_id": "HumanEval/48", "result": "passed", "passed": true}
{"generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 25, "duration": 4.343328475952148, "task_id": "HumanEval/49", "result": "passed", "passed": true}
{"generated_code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    \n    result = ''\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n    \n    return result", "is_solved": true, "iteration": 1, "prompt_tokens": 910, "completion_tokens": 152, "duration": 9.668097019195557, "task_id": "HumanEval/44", "result": "passed", "passed": true}
{"generated_code": "def car_race_collision(n: int):\n    return n", "is_solved": true, "iteration": 2, "prompt_tokens": 1838, "completion_tokens": 193, "duration": 12.261474132537842, "task_id": "HumanEval/41", "result": "failed: ", "passed": false}
{"generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "is_solved": false, "iteration": 7, "prompt_tokens": 5235, "completion_tokens": 511, "duration": 23.291479349136353, "task_id": "HumanEval/7", "result": "passed", "passed": true}
{"generated_code": "def find_zero(xs: list):\n    return -xs[0] / xs[-1]", "is_solved": false, "iteration": 7, "prompt_tokens": 6056, "completion_tokens": 521, "duration": 23.47716236114502, "task_id": "HumanEval/32", "result": "failed: name 'poly' is not defined", "passed": false}
{"generated_code": "def sort_even(l: list):\n    return [sorted(l[::2])[i//2] if i % 2 == 0 else l[i] for i in range(len(l))]", "is_solved": false, "iteration": 7, "prompt_tokens": 5531, "completion_tokens": 559, "duration": 23.636754035949707, "task_id": "HumanEval/37", "result": "passed", "passed": true}
{"generated_code": "def sort_third(l: list):\n    return [value for index, value in sorted(enumerate(l), key=lambda x: (x[0] // 3, x[0]))]", "is_solved": false, "iteration": 7, "prompt_tokens": 5744, "completion_tokens": 645, "duration": 27.018914461135864, "task_id": "HumanEval/33", "result": "failed: ", "passed": false}
{"generated_code": "def fizz_buzz(n: int):\n    return sum(1 for i in range(n) if ((i % 11 == 0 or i % 13 == 0) and '7' in str(i)) or (i % 11 == 0 and i % 13 == 0))", "is_solved": false, "iteration": 7, "prompt_tokens": 4942, "completion_tokens": 719, "duration": 29.82843041419983, "task_id": "HumanEval/36", "result": "failed: ", "passed": false}
{"generated_code": "def median(l: list):\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    if n % 2 == 0:\n        return (sorted_l[n//2 - 1] + sorted_l[n//2]) / 2\n    else:\n        return sorted_l[n//2]", "is_solved": false, "iteration": 7, "prompt_tokens": 5080, "completion_tokens": 756, "duration": 24.841721773147583, "task_id": "HumanEval/47", "result": "passed", "passed": true}
{"generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    sorted_numbers = sorted(numbers)\n    for i in range(len(sorted_numbers) - 1):\n        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold:\n            return True\n    return False", "is_solved": false, "iteration": 7, "prompt_tokens": 6586, "completion_tokens": 753, "duration": 28.26099991798401, "task_id": "HumanEval/0", "result": "passed", "passed": true}
{"generated_code": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "is_solved": false, "iteration": 7, "prompt_tokens": 5641, "completion_tokens": 732, "duration": 73.52537751197815, "task_id": "HumanEval/3", "result": "passed", "passed": true}
{"generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num for num in numbers]", "is_solved": false, "iteration": 7, "prompt_tokens": 6498, "completion_tokens": 690, "duration": 31.285865306854248, "task_id": "HumanEval/21", "result": "passed", "passed": true}
{"generated_code": "def make_palindrome(string: str) -> str:\n    def is_palindrome(s):\n        return s == s[::-1]\n    \n    if not string:\n        return ''\n    \n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:len(string)-i][::-1]", "is_solved": false, "iteration": 7, "prompt_tokens": 5928, "completion_tokens": 962, "duration": 30.93419623374939, "task_id": "HumanEval/10", "result": "passed", "passed": true}
{"generated_code": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    return [durations.get(note, 1) for note in notes]\n\nparse_music('o o| .| o| o| .| .| .| .| o o')", "is_solved": false, "iteration": 7, "prompt_tokens": 8544, "completion_tokens": 956, "duration": 31.758477687835693, "task_id": "HumanEval/17", "result": "passed", "passed": true}
{"generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_group = \"\"\n    for char in paren_string:\n        if char in \"()\":\n            current_group += char\n        elif current_group and not current_group.isspace():\n            result.append(current_group.replace(\" \", \"\"))\n            current_group = \"\"\n    if current_group and not current_group.isspace():\n        result.append(current_group.replace(\" \", \"\"))\n    return result", "is_solved": false, "iteration": 7, "prompt_tokens": 5932, "completion_tokens": 994, "duration": 31.67550826072693, "task_id": "HumanEval/1", "result": "failed: ", "passed": false}
{"generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = []\n    \n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = [(numbers[i], numbers[i+1])]\n        elif diff == min_diff:\n            result.append((numbers[i], numbers[i+1]))\n    \n    return min(result)", "is_solved": false, "iteration": 7, "prompt_tokens": 8020, "completion_tokens": 1286, "duration": 36.71053862571716, "task_id": "HumanEval/20", "result": "passed", "passed": true}
{"generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": true, "iteration": 0, "prompt_tokens": 140, "completion_tokens": 82, "duration": 4.167835235595703, "task_id": "HumanEval/50", "result": "passed", "passed": true}
{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 31, "duration": 5.49226450920105, "task_id": "HumanEval/51", "result": "passed", "passed": true}
{"generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 26, "duration": 5.450874328613281, "task_id": "HumanEval/52", "result": "passed", "passed": true}
{"generated_code": "def add(x: int, y: int):\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 20, "duration": 1.7860267162322998, "task_id": "HumanEval/53", "result": "passed", "passed": true}
{"generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 38, "duration": 4.537459373474121, "task_id": "HumanEval/55", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 64, "duration": 1.595395803451538, "task_id": "HumanEval/56", "result": "passed", "passed": true}
{"generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 58, "duration": 6.372962713241577, "task_id": "HumanEval/57", "result": "passed", "passed": true}
{"generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 29, "duration": 5.793344020843506, "task_id": "HumanEval/58", "result": "passed", "passed": true}
{"generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 50, "duration": 6.514908790588379, "task_id": "HumanEval/59", "result": "passed", "passed": true}
{"generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 22, "duration": 5.250669479370117, "task_id": "HumanEval/60", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 67, "duration": 6.117987394332886, "task_id": "HumanEval/61", "result": "passed", "passed": true}
{"generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]\n\n# Test cases\nprint(derivative([3, 1, 2, 4, 5]))  # Output: [1, 4, 12, 20]\nprint(derivative([1, 2, 3]))  # Output: [2, 6]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 89, "duration": 5.635868549346924, "task_id": "HumanEval/62", "result": "passed", "passed": true}
{"generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 72, "duration": 2.085747480392456, "task_id": "HumanEval/63", "result": "passed", "passed": true}
{"generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    if s[-1].lower() == 'y':\n        return sum(1 for char in s[:-1] if char.lower() in vowels) + 1\n    else:\n        return sum(1 for char in s if char.lower() in vowels)", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 70, "duration": 6.279200553894043, "task_id": "HumanEval/64", "result": "passed", "passed": true}
{"generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 1.2910349369049072, "task_id": "HumanEval/66", "result": "passed", "passed": true}
{"generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 37, "duration": 5.683075189590454, "task_id": "HumanEval/67", "result": "passed", "passed": true}
{"generated_code": "def pluck(arr):\n    even_values = [(value, index) for index, value in enumerate(arr) if value % 2 == 0]\n    if not even_values:\n        return []\n    min_even_value = min(even_values, key=lambda x: (x[0], x[1]))\n    return [min_even_value[0], min_even_value[1]]", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 82, "duration": 5.2497780323028564, "task_id": "HumanEval/68", "result": "passed", "passed": true}
{"generated_code": "def search(lst):\n    for num in sorted(set(lst), reverse=True):\n        if lst.count(num) >= num:\n            return num\n    return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 37, "duration": 5.657253980636597, "task_id": "HumanEval/69", "result": "passed", "passed": true}
{"generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 44, "duration": 4.340230464935303, "task_id": "HumanEval/70", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 92, "duration": 2.073251247406006, "task_id": "HumanEval/71", "result": "passed", "passed": true}
{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 5.156278610229492, "task_id": "HumanEval/72", "result": "passed", "passed": true}
{"generated_code": "def smallest_change(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-1-i]:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 52, "duration": 1.6135008335113525, "task_id": "HumanEval/73", "result": "passed", "passed": true}
{"generated_code": "def total_match(lst1, lst2):\n    return lst1 if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2) else lst2", "is_solved": true, "iteration": 0, "prompt_tokens": 243, "completion_tokens": 43, "duration": 4.563444375991821, "task_id": "HumanEval/74", "result": "passed", "passed": true}
{"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            count += 1\n    return count == 3", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 106, "duration": 5.258728504180908, "task_id": "HumanEval/75", "result": "failed: ", "passed": false}
{"generated_code": "def iscube(a):\n    return (a >= 0) and (round(a**(1/3))**3 == a)", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 31, "duration": 4.989458799362183, "task_id": "HumanEval/77", "result": "failed: Third test error: False", "passed": false}
{"generated_code": "def hex_key(num):\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = sum(1 for digit in num if digit in primes)\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 49, "duration": 3.148556709289551, "task_id": "HumanEval/78", "result": "passed", "passed": true}
{"generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 29, "duration": 4.2002599239349365, "task_id": "HumanEval/79", "result": "passed", "passed": true}
{"generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 76, "duration": 2.430246591567993, "task_id": "HumanEval/80", "result": "passed", "passed": true}
{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 69, "duration": 5.953183889389038, "task_id": "HumanEval/82", "result": "passed", "passed": true}
{"generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 21, "duration": 3.9268581867218018, "task_id": "HumanEval/84", "result": "passed", "passed": true}
{"generated_code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(word)) for word in s.split()])", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 26, "duration": 4.099725961685181, "task_id": "HumanEval/86", "result": "passed", "passed": true}
{"generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 68, "duration": 2.980239152908325, "task_id": "HumanEval/87", "result": "passed", "passed": true}
{"generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 52, "duration": 4.335091829299927, "task_id": "HumanEval/90", "result": "passed", "passed": true}
{"generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 54, "duration": 4.2294628620147705, "task_id": "HumanEval/92", "result": "passed", "passed": true}
{"generated_code": "def encode(message):\n    encoded_message = ''\n    vowels = 'aeiouAEIOU'\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr((ord(char) + 2 - ord('a')) % 26 + ord('A'))\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message", "is_solved": true, "iteration": 0, "prompt_tokens": 159, "completion_tokens": 93, "duration": 5.514516592025757, "task_id": "HumanEval/93", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    return all(key.islower() for key in keys) or all(key.isupper() for key in keys)", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 49, "duration": 4.356325626373291, "task_id": "HumanEval/95", "result": "failed: 'int' object has no attribute 'islower'", "passed": false}
{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 86, "duration": 4.878050327301025, "task_id": "HumanEval/96", "result": "passed", "passed": true}
{"generated_code": "def multiply(a, b):\n    return int(str(abs(a))[-1]) * int(str(abs(b))[-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 29, "duration": 3.914466619491577, "task_id": "HumanEval/97", "result": "passed", "passed": true}
{"generated_code": "def count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in 'AEIOU')", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 38, "duration": 3.995293378829956, "task_id": "HumanEval/98", "result": "passed", "passed": true}
{"generated_code": "def closest_integer(value):\n    value = float(value)\n    if value < 0:\n        return int(value - 0.5)\n    else:\n        return int(value + 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 45, "duration": 4.453214406967163, "task_id": "HumanEval/99", "result": "passed", "passed": true}
{"generated_code": "def sort_array(array):\n    sorted_array = array.copy()\n    if len(sorted_array) == 0:\n        return sorted_array\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        return sorted(sorted_array, reverse=True)\n    else:\n        return sorted(sorted_array)", "is_solved": true, "iteration": 1, "prompt_tokens": 1280, "completion_tokens": 172, "duration": 8.066587448120117, "task_id": "HumanEval/88", "result": "passed", "passed": true}
{"generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or x == n ** round(x ** (1/n)))", "is_solved": true, "iteration": 3, "prompt_tokens": 2652, "completion_tokens": 297, "duration": 15.303650379180908, "task_id": "HumanEval/76", "result": "passed", "passed": true}
{"generated_code": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)", "is_solved": true, "iteration": 5, "prompt_tokens": 4023, "completion_tokens": 385, "duration": 20.205671072006226, "task_id": "HumanEval/54", "result": "passed", "passed": true}
{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if i % 2 == 1 and lst[i] % 2 == 0)", "is_solved": false, "iteration": 7, "prompt_tokens": 5093, "completion_tokens": 483, "duration": 23.62422227859497, "task_id": "HumanEval/85", "result": "passed", "passed": true}
{"generated_code": "def starts_one_ends(n):\n    if n == 1:\n        return 1\n    count = 2 * 9 * 10**(n-2) + 10**(n-2) - 10**(n-3)\n    return count", "is_solved": false, "iteration": 7, "prompt_tokens": 4767, "completion_tokens": 657, "duration": 25.89993143081665, "task_id": "HumanEval/83", "result": "failed: ", "passed": false}
{"generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences if sentence]\n    \n    count = 0\n    for sentence in sentences:\n        if sentence.startswith('I '):\n            count += 1\n    \n    return count", "is_solved": false, "iteration": 7, "prompt_tokens": 5657, "completion_tokens": 725, "duration": 26.21713876724243, "task_id": "HumanEval/91", "result": "passed", "passed": true}
{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift] if shift < len(x_str) else x_str[::-1]", "is_solved": false, "iteration": 7, "prompt_tokens": 5570, "completion_tokens": 854, "duration": 26.647558450698853, "task_id": "HumanEval/65", "result": "failed: ", "passed": false}
{"generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = (ord(char) - ord('a') + 2) * 2\n            if char.islower():\n                result += chr((ord('a') + shift - ord('a')) % 26 + ord('a'))\n            else:\n                result += chr((ord('A') + shift - ord('A')) % 26 + ord('A'))\n        else:\n            result += char\n    return result", "is_solved": false, "iteration": 7, "prompt_tokens": 6304, "completion_tokens": 1107, "duration": 33.43392992019653, "task_id": "HumanEval/89", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"generated_code": "def largest_prime_sum(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    prime_numbers = [num for num in lst if is_prime(num)]\n    largest_prime = max(prime_numbers)\n    return sum_of_digits(largest_prime)", "is_solved": false, "iteration": 7, "prompt_tokens": 8392, "completion_tokens": 1227, "duration": 32.33215403556824, "task_id": "HumanEval/94", "result": "failed: name 'skjkasdkd' is not defined", "passed": false}
{"generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        else:\n            result.append('E')\n    return result", "is_solved": false, "iteration": 7, "prompt_tokens": 10152, "completion_tokens": 2040, "duration": 50.77384901046753, "task_id": "HumanEval/81", "result": "failed: ", "passed": false}
{"generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(\",\", \" \").split()]", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 25, "duration": 1.0746467113494873, "task_id": "HumanEval/101", "result": "passed", "passed": true}
{"generated_code": "def choose_num(x, y):\n    max_even = -1\n    for num in range(x, y+1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 55, "duration": 3.2499303817749023, "task_id": "HumanEval/102", "result": "passed", "passed": true}
{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 40, "duration": 2.996777057647705, "task_id": "HumanEval/103", "result": "passed", "passed": true}
{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 33, "duration": 4.210830211639404, "task_id": "HumanEval/104", "result": "passed", "passed": true}
{"generated_code": "def by_length(arr):\n    digits = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [x for x in arr if 1 <= x <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    result = [digits[x] for x in reversed_arr]\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 119, "duration": 3.765507936477661, "task_id": "HumanEval/105", "result": "passed", "passed": true}
{"generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 82, "duration": 2.168910264968872, "task_id": "HumanEval/106", "result": "passed", "passed": true}
{"generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    n = len(arr)\n    for i in range(n):\n        if sorted_arr == arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 67, "duration": 1.888298511505127, "task_id": "HumanEval/109", "result": "passed", "passed": true}
{"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(x % 2 == 1 for x in lst1) <= sum(x % 2 == 0 for x in lst2) else \"NO\"", "is_solved": true, "iteration": 0, "prompt_tokens": 247, "completion_tokens": 51, "duration": 1.6188201904296875, "task_id": "HumanEval/110", "result": "passed", "passed": true}
{"generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 212, "completion_tokens": 39, "duration": 1.6968176364898682, "task_id": "HumanEval/112", "result": "passed", "passed": true}
{"generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for letter in word if letter.lower() not in 'aeiou')\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 62, "duration": 2.7944095134735107, "task_id": "HumanEval/117", "result": "passed", "passed": true}
{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 98, "duration": 6.123220443725586, "task_id": "HumanEval/118", "result": "passed", "passed": true}
{"generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "is_solved": true, "iteration": 0, "prompt_tokens": 267, "completion_tokens": 17, "duration": 1.1640126705169678, "task_id": "HumanEval/120", "result": "failed: ", "passed": false}
{"generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) and all(lst.count(num) <= 1 for num in lst)", "is_solved": true, "iteration": 0, "prompt_tokens": 299, "completion_tokens": 44, "duration": 3.082533597946167, "task_id": "HumanEval/126", "result": "failed: This prints if this assert fails 7 (good for debugging!)", "passed": false}
{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 26, "duration": 2.2351036071777344, "task_id": "HumanEval/133", "result": "passed", "passed": true}
{"generated_code": "def is_equal_to_sum_even(n):\n    return n % 2 == 0 and n >= 8", "is_solved": true, "iteration": 0, "prompt_tokens": 127, "completion_tokens": 27, "duration": 2.1825339794158936, "task_id": "HumanEval/138", "result": "passed", "passed": true}
{"generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        factorial = 1\n        for j in range(1, i+1):\n            factorial *= j\n        result *= factorial\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 60, "duration": 5.583819150924683, "task_id": "HumanEval/139", "result": "passed", "passed": true}
{"generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 98, "duration": 3.6051621437072754, "task_id": "HumanEval/141", "result": "passed", "passed": true}
{"generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return (x_num * n_num) % (x_den * n_den) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 59, "duration": 2.6001389026641846, "task_id": "HumanEval/144", "result": "passed", "passed": true}
{"generated_code": "def specialFilter(nums):\n    return sum(1 for num in nums if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9'])", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 67, "duration": 5.582629919052124, "task_id": "HumanEval/146", "result": "passed", "passed": true}
{"generated_code": "def max_fill(grid, capacity):\n    import math\n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)", "is_solved": true, "iteration": 1, "prompt_tokens": 1526, "completion_tokens": 115, "duration": 7.298279523849487, "task_id": "HumanEval/115", "result": "failed: Error", "passed": false}
{"generated_code": "def fix_spaces(text):\n    result = \"\"\n    count = 0\n    for char in text:\n        if char == \" \":\n            count += 1\n            if count > 2:\n                result = result[:-2] + \"-\"\n                count = 1\n            else:\n                result += \"_\"\n        else:\n            count = 0\n            result += char\n    return result", "is_solved": true, "iteration": 1, "prompt_tokens": 1051, "completion_tokens": 231, "duration": 7.166333198547363, "task_id": "HumanEval/140", "result": "passed", "passed": true}
{"generated_code": "def histogram(test):\n    letters = test.split()\n    letter_count = {}\n    for letter in letters:\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n    if not letter_count:  # Check if the dictionary is empty\n        return {}\n    max_count = max(letter_count.values())\n    return {letter: count for letter, count in letter_count.items() if count == max_count}", "is_solved": true, "iteration": 1, "prompt_tokens": 1164, "completion_tokens": 235, "duration": 10.080946445465088, "task_id": "HumanEval/111", "result": "passed", "passed": true}
{"generated_code": "def valid_date(date):\n    if len(date) != 10:\n        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n    \n    if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    else:\n        return False\n    \n    return True", "is_solved": true, "iteration": 1, "prompt_tokens": 1617, "completion_tokens": 434, "duration": 12.984601736068726, "task_id": "HumanEval/124", "result": "passed", "passed": true}
{"generated_code": "def is_nested(string):\n    count = 0\n    for char in string:\n        if char == '[':\n            count += 1\n        elif char == ']':\n            count -= 1\n        if count > 1:\n            return True\n    return False", "is_solved": true, "iteration": 2, "prompt_tokens": 1994, "completion_tokens": 344, "duration": 12.03535532951355, "task_id": "HumanEval/132", "result": "failed: ", "passed": false}
{"generated_code": "def match_parens(lst):\n    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if stack and stack[-1] == '(':\n                    stack.pop()\n                else:\n                    return 'No'\n    return 'Yes' if not stack else 'No'", "is_solved": true, "iteration": 2, "prompt_tokens": 2101, "completion_tokens": 332, "duration": 12.166881322860718, "task_id": "HumanEval/119", "result": "failed: ", "passed": false}
{"generated_code": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product if product != 1 or n == 0 else 0 if len(str(n)) != 1 else int(str(n)) % 2", "is_solved": true, "iteration": 4, "prompt_tokens": 2971, "completion_tokens": 468, "duration": 19.66301131248474, "task_id": "HumanEval/131", "result": "failed: ", "passed": false}
{"generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": false, "iteration": 7, "prompt_tokens": 6117, "completion_tokens": 449, "duration": 24.128867149353027, "task_id": "HumanEval/116", "result": "passed", "passed": true}
{"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    elif txt.isalpha():\n        return [txt]\n    elif any(char.isdigit() for char in txt):\n        return len([char for char in txt if char.isdigit()])\n    else:\n        return [char for char in txt if char.islower() and ord(char) % 2 == 1]", "is_solved": true, "iteration": 6, "prompt_tokens": 5062, "completion_tokens": 720, "duration": 30.612159252166748, "task_id": "HumanEval/125", "result": "failed: ", "passed": false}
{"generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "is_solved": false, "iteration": 7, "prompt_tokens": 6341, "completion_tokens": 549, "duration": 29.32216191291809, "task_id": "HumanEval/149", "result": "passed", "passed": true}
{"generated_code": "def count_nums(arr):\n    return sum(sum(int(d) != 0 for d in str(abs(num))) > 0 for num in arr)", "is_solved": false, "iteration": 7, "prompt_tokens": 5322, "completion_tokens": 633, "duration": 29.9354727268219, "task_id": "HumanEval/108", "result": "failed: ", "passed": false}
{"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(x)), nums.index(x)))", "is_solved": false, "iteration": 7, "prompt_tokens": 5059, "completion_tokens": 465, "duration": 25.34611439704895, "task_id": "HumanEval/145", "result": "failed: invalid literal for int() with base 10: '-'", "passed": false}
{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    total_sum = 0\n    \n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n        total_sum += num\n\n    return min(min_sum, total_sum)", "is_solved": false, "iteration": 7, "prompt_tokens": 5766, "completion_tokens": 811, "duration": 34.779526472091675, "task_id": "HumanEval/114", "result": "passed", "passed": true}
{"generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 1)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones", "is_solved": false, "iteration": 7, "prompt_tokens": 5829, "completion_tokens": 811, "duration": 28.42194676399231, "task_id": "HumanEval/100", "result": "failed: Test 4", "passed": false}
{"generated_code": "def add_elements(arr, k):\n    return sum(arr[:k])", "is_solved": false, "iteration": 7, "prompt_tokens": 6108, "completion_tokens": 423, "duration": 23.9711434841156, "task_id": "HumanEval/122", "result": "failed: ", "passed": false}
{"generated_code": "def get_odd_collatz(n):\n    collatz_seq = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_seq.append(n)\n    \n    return sorted(list(set(collatz_seq) & set([num for num in collatz_seq if num % 2 != 0])))", "is_solved": false, "iteration": 7, "prompt_tokens": 7384, "completion_tokens": 944, "duration": 32.322285175323486, "task_id": "HumanEval/123", "result": "passed", "passed": true}
{"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if i % 2 == 0 and lst[i] % 2 != 0)", "is_solved": false, "iteration": 7, "prompt_tokens": 5325, "completion_tokens": 589, "duration": 25.758053064346313, "task_id": "HumanEval/121", "result": "failed: ", "passed": false}
{"generated_code": "def can_arrange(arr):\n    max_index = -1\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i+1]:\n            max_index = i\n    return max_index", "is_solved": false, "iteration": 7, "prompt_tokens": 5907, "completion_tokens": 769, "duration": 32.059650182724, "task_id": "HumanEval/135", "result": "failed: ", "passed": false}
{"generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(int(digit) % 2 != 0 for digit in string), sum(int(digit) % 2 != 0 for digit in string), i+1, i+1) for i, string in enumerate(lst)]", "is_solved": false, "iteration": 7, "prompt_tokens": 5993, "completion_tokens": 726, "duration": 26.596718788146973, "task_id": "HumanEval/113", "result": "failed: Test 1", "passed": false}
{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt == \"\":\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and (len(txt) == 1 or txt[-2] == \" \" or not txt[-2].isalnum()):\n        return True\n    else:\n        return False", "is_solved": false, "iteration": 7, "prompt_tokens": 5918, "completion_tokens": 828, "duration": 34.012500524520874, "task_id": "HumanEval/134", "result": "passed", "passed": true}
{"generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    elif isinstance(a, str) and isinstance(b, str):\n        return a if ',' in a else b\n    elif isinstance(a, str):\n        a = a.replace(',', '.')\n        return float(a) if '.' in a else int(a)\n    elif isinstance(b, str):\n        b = b.replace(',', '.')\n        return float(b) if '.' in b else int(b)\n    else:\n        return a if a > b else b", "is_solved": false, "iteration": 7, "prompt_tokens": 6852, "completion_tokens": 1168, "duration": 38.842814445495605, "task_id": "HumanEval/137", "result": "failed: ", "passed": false}
{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_prime_word(word):\n        word_len = len(word)\n        if word_len < 2:\n            return False\n        return is_prime(word_len)\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime_word(word)]\n    return ' '.join(prime_words)", "is_solved": false, "iteration": 7, "prompt_tokens": 6402, "completion_tokens": 1292, "duration": 39.466625928878784, "task_id": "HumanEval/143", "result": "passed", "passed": true}
{"generated_code": "def tri(n):\n    if n == 0:\n        return [3]\n    elif n == 1:\n        return [1, 3]\n    else:\n        tribonacci = [0, 1, 3]\n        for i in range(3, n):\n            if i % 2 == 0:\n                tribonacci.append(1 + i // 2)\n            else:\n                tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3])\n        return tribonacci", "is_solved": false, "iteration": 7, "prompt_tokens": 6764, "completion_tokens": 1161, "duration": 35.279762506484985, "task_id": "HumanEval/130", "result": "failed: ", "passed": false}
{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 and i % 3 != 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 7, "prompt_tokens": 6420, "completion_tokens": 676, "duration": 29.414832592010498, "task_id": "HumanEval/142", "result": "passed", "passed": true}
{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    all_positive = all(num > 0 for num in arr)\n    all_negative = all(num < 0 for num in arr)\n    \n    if all_positive or all_negative:\n        product = 1 if all_positive else -1\n    else:\n        product = 0\n    \n    return sum(abs(num) for num in arr) * product", "is_solved": false, "iteration": 7, "prompt_tokens": 6086, "completion_tokens": 998, "duration": 33.223281145095825, "task_id": "HumanEval/128", "result": "failed: ", "passed": false}
{"generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n+1):\n        a_i = i * i - i + 1\n        for j in range(i+1, n+1):\n            a_j = j * j - j + 1\n            for k in range(j+1, n+1):\n                a_k = k * k - k + 1\n                if (a_i + a_j + a_k) % 3 == 0:\n                    count += 1\n    return count // 6", "is_solved": false, "iteration": 7, "prompt_tokens": 6557, "completion_tokens": 1299, "duration": 38.51524782180786, "task_id": "HumanEval/147", "result": "failed: ", "passed": false}
{"generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "is_solved": false, "iteration": 7, "prompt_tokens": 7104, "completion_tokens": 1168, "duration": 38.67570877075195, "task_id": "HumanEval/107", "result": "passed", "passed": true}
{"generated_code": "def largest_smallest_integers(lst):\n    neg_integers = [num for num in lst if num < 0]\n    pos_integers = [num for num in lst if num > 0]\n    \n    largest_neg = max(neg_integers) if neg_integers else None\n    smallest_pos = min(pos_integers) if pos_integers else None\n    \n    if not neg_integers:\n        largest_neg = None\n    if not pos_integers:\n        smallest_pos = None\n    \n    return (largest_neg, smallest_pos)", "is_solved": false, "iteration": 7, "prompt_tokens": 6595, "completion_tokens": 1191, "duration": 44.94076991081238, "task_id": "HumanEval/136", "result": "passed", "passed": true}
{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2)\n    \n    if start_index > end_index:\n        start_index, end_index = end_index, start_index\n    \n    return tuple(planets[start_index+1:end_index]) if start_index < end_index - 1 else ()", "is_solved": false, "iteration": 7, "prompt_tokens": 6912, "completion_tokens": 1338, "duration": 39.93316626548767, "task_id": "HumanEval/148", "result": "passed", "passed": true}
{"generated_code": "def intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    if intersection_end < intersection_start:\n        return \"NO\"\n    \n    intersection_length = intersection_end - intersection_start + 1\n    \n    if intersection_length < 2:\n        return \"NO\"\n    \n    for i in range(2, int(intersection_length ** 0.5) + 1):\n        if intersection_length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "is_solved": false, "iteration": 7, "prompt_tokens": 7904, "completion_tokens": 1627, "duration": 61.44768977165222, "task_id": "HumanEval/127", "result": "failed: ", "passed": false}
{"generated_code": "def minPath(grid, k):\n    n = len(grid)\n    m = len(grid[0])\n    visited = [[False for _ in range(m)] for _ in range(n)]\n    \n    def dfs(i, j, path):\n        if i < 0 or i >= n or j < 0 or j >= m or visited[i][j]:\n            return\n        path.append(grid[i][j])\n        visited[i][j] = True\n        if len(path) == k:\n            return path\n        res = []\n        for x, y in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:\n            res.append(dfs(x, y, path.copy()))\n        visited[i][j] = False\n        return min(filter(None, res))\n    \n    for i in range(n):\n        for j in range(m):\n            path = dfs(i, j, [])\n            if path:\n                return path", "is_solved": false, "iteration": 7, "prompt_tokens": 9536, "completion_tokens": 1992, "duration": 51.26832175254822, "task_id": "HumanEval/129", "result": "failed: ", "passed": false}
{"generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 78, "duration": 2.0863029956817627, "task_id": "HumanEval/150", "result": "passed", "passed": true}
{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0 and isinstance(x, int))", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 39, "duration": 4.964281320571899, "task_id": "HumanEval/151", "result": "passed", "passed": true}
{"generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 39, "duration": 2.242448329925537, "task_id": "HumanEval/152", "result": "passed", "passed": true}
{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        return sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n    \n    strongest = max(extensions, key=lambda x: strength(x))\n    return f\"{class_name}.{strongest}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 71, "duration": 3.0529162883758545, "task_id": "HumanEval/153", "result": "passed", "passed": true}
{"generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',\n        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 142, "duration": 3.109078884124756, "task_id": "HumanEval/156", "result": "passed", "passed": true}
{"generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 52, "duration": 1.781921625137329, "task_id": "HumanEval/157", "result": "passed", "passed": true}
{"generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    remaining_after_meals = max(0, remaining - need)\n    return [total_eaten, remaining_after_meals]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 51, "duration": 5.194386959075928, "task_id": "HumanEval/159", "result": "passed", "passed": true}
{"generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += operator[i] + str(operand[i+1])\n    return eval(expression)", "is_solved": true, "iteration": 0, "prompt_tokens": 257, "completion_tokens": 48, "duration": 4.242655515670776, "task_id": "HumanEval/160", "result": "passed", "passed": true}
{"generated_code": "def solve(s):\n    return s.swapcase() if any(c.isalpha() for c in s) else s[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 30, "duration": 2.5408999919891357, "task_id": "HumanEval/161", "result": "passed", "passed": true}
{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 33, "duration": 2.378025531768799, "task_id": "HumanEval/162", "result": "passed", "passed": true}
{"generated_code": "def even_odd_count(num):\n    num_str = str(abs(num))  # Convert the absolute value of num to a string\n    even_count = len([int(digit) for digit in num_str if int(digit) % 2 == 0])\n    odd_count = len([int(digit) for digit in num_str if int(digit) % 2 != 0])\n    return (even_count, odd_count)", "is_solved": true, "iteration": 1, "prompt_tokens": 935, "completion_tokens": 216, "duration": 5.825049161911011, "task_id": "HumanEval/155", "result": "passed", "passed": true}
{"generated_code": "def generate_integers(a, b):\n    start, end = min(a, b), max(a, b)\n    return [i for i in range(start, end+1) if i % 2 == 0]", "is_solved": false, "iteration": 7, "prompt_tokens": 5197, "completion_tokens": 666, "duration": 25.03627610206604, "task_id": "HumanEval/163", "result": "failed: Test 1", "passed": false}
{"generated_code": "def find_max(words):\n    return min(words, key=lambda x: (-len(set(x)), x))", "is_solved": true, "iteration": 7, "prompt_tokens": 6964, "completion_tokens": 894, "duration": 33.69497752189636, "task_id": "HumanEval/158", "result": "passed", "passed": true}
{"generated_code": "def cycpattern_check(a, b):\n    return any(b in a[i:] + a[:i] for i in range(len(a))) or any(b in a[-i:] + a[:-i] for i in range(len(a)))\n\n# Test cases\nprint(cycpattern_check(\"abcd\", \"abd\"))  # False\nprint(cycpattern_check(\"hello\", \"ell\"))  # True\nprint(cycpattern_check(\"whassup\", \"psus\"))  # False\nprint(cycpattern_check(\"abab\", \"baa\"))  # True\nprint(cycpattern_check(\"efef\", \"eeff\"))  # False\nprint(cycpattern_check(\"himenss\", \"simen\"))  # True", "is_solved": false, "iteration": 7, "prompt_tokens": 6630, "completion_tokens": 1122, "duration": 31.152498722076416, "task_id": "HumanEval/154", "result": "failed: test #3", "passed": false}
{"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": true, "iteration": 0, "prompt_tokens": 135, "completion_tokens": 21, "duration": 3.3748176097869873, "task_id": "HumanEval/2", "result": "passed", "passed": true}
{"generated_code": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 44, "duration": 3.6765074729919434, "task_id": "HumanEval/4", "result": "passed", "passed": true}
{"generated_code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 60, "duration": 4.007699728012085, "task_id": "HumanEval/5", "result": "passed", "passed": true}
{"generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 94, "duration": 4.523579835891724, "task_id": "HumanEval/6", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        total_sum = sum(numbers)\n        total_product = 1\n        for num in numbers:\n            total_product *= num\n        return total_sum, total_product", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 75, "duration": 4.375110387802124, "task_id": "HumanEval/8", "result": "passed", "passed": true}
{"generated_code": "def rolling_max(numbers: List[int]) -> List[int]:\n    max_numbers = []\n    max_num = float('-inf')\n    for num in numbers:\n        max_num = max(max_num, num)\n        max_numbers.append(max_num)\n    return max_numbers", "is_solved": true, "iteration": 0, "prompt_tokens": 150, "completion_tokens": 57, "duration": 3.7959132194519043, "task_id": "HumanEval/9", "result": "passed", "passed": true}
{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.5920822620391846, "task_id": "HumanEval/11", "result": "passed", "passed": true}
{"generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 39, "duration": 3.9178173542022705, "task_id": "HumanEval/12", "result": "failed: ", "passed": false}
{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 39, "duration": 3.631875514984131, "task_id": "HumanEval/13", "result": "passed", "passed": true}
{"generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 32, "duration": 3.5267109870910645, "task_id": "HumanEval/14", "result": "passed", "passed": true}
{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 28, "duration": 3.3324170112609863, "task_id": "HumanEval/15", "result": "passed", "passed": true}
{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 3.1436092853546143, "task_id": "HumanEval/16", "result": "passed", "passed": true}
{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 74, "duration": 4.2200727462768555, "task_id": "HumanEval/18", "result": "passed", "passed": true}
{"generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_dict[x])\n    return ' '.join(sorted_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 102, "duration": 4.697938442230225, "task_id": "HumanEval/19", "result": "passed", "passed": true}
{"generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 31, "duration": 3.5470941066741943, "task_id": "HumanEval/22", "result": "passed", "passed": true}
{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 3.0233676433563232, "task_id": "HumanEval/23", "result": "passed", "passed": true}
{"generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 43, "duration": 3.513399124145508, "task_id": "HumanEval/24", "result": "passed", "passed": true}
{"generated_code": "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 65, "duration": 3.7573485374450684, "task_id": "HumanEval/25", "result": "passed", "passed": true}
{"generated_code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 33, "duration": 3.290222644805908, "task_id": "HumanEval/26", "result": "passed", "passed": true}
{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 36, "duration": 3.3436784744262695, "task_id": "HumanEval/27", "result": "passed", "passed": true}
{"generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 20, "duration": 2.9848461151123047, "task_id": "HumanEval/28", "result": "passed", "passed": true}
{"generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 34, "duration": 3.402144432067871, "task_id": "HumanEval/29", "result": "passed", "passed": true}
{"generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 25, "duration": 1.0710422992706299, "task_id": "HumanEval/30", "result": "passed", "passed": true}
{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 56, "duration": 3.964221477508545, "task_id": "HumanEval/31", "result": "passed", "passed": true}
{"generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 17, "duration": 3.101635456085205, "task_id": "HumanEval/34", "result": "passed", "passed": true}
{"generated_code": "def max_element(l: list):\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 16, "duration": 2.888660430908203, "task_id": "HumanEval/35", "result": "passed", "passed": true}
{"generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iteration": 0, "prompt_tokens": 208, "completion_tokens": 162, "duration": 5.722168922424316, "task_id": "HumanEval/38", "result": "passed", "passed": true}
{"generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n):\n                a, b = b, a + b\n            return b\n\n    count = 0\n    i = 1\n    while count < n:\n        i += 1\n        if is_prime(fibonacci(i)):\n            count += 1\n\n    return fibonacci(i)", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 178, "duration": 8.617135047912598, "task_id": "HumanEval/39", "result": "passed", "passed": true}
{"generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 70, "duration": 4.308423757553101, "task_id": "HumanEval/40", "result": "passed", "passed": true}
{"generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 23, "duration": 4.702202320098877, "task_id": "HumanEval/42", "result": "passed", "passed": true}
{"generated_code": "def pairs_sum_to_zero(l):\n    return any(-x in l for x in l if x != 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 28, "duration": 5.8232152462005615, "task_id": "HumanEval/43", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 22, "duration": 2.7677125930786133, "task_id": "HumanEval/45", "result": "passed", "passed": true}
{"generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n    \n    return d", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 119, "duration": 6.019763231277466, "task_id": "HumanEval/46", "result": "passed", "passed": true}
{"generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 20, "duration": 4.280380725860596, "task_id": "HumanEval/48", "result": "passed", "passed": true}
{"generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 25, "duration": 4.343328475952148, "task_id": "HumanEval/49", "result": "passed", "passed": true}
{"generated_code": "def car_race_collision(n: int):\n    return n if n > 0 else 0", "is_solved": true, "iteration": 1, "prompt_tokens": 1027, "completion_tokens": 122, "duration": 9.404791116714478, "task_id": "HumanEval/41", "result": "failed: ", "passed": false}
{"generated_code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    digits = '0123456789'\n    result = ''\n    while x:\n        result = digits[x % base] + result\n        x //= base\n    return result", "is_solved": true, "iteration": 1, "prompt_tokens": 944, "completion_tokens": 183, "duration": 10.308532953262329, "task_id": "HumanEval/44", "result": "passed", "passed": true}
{"generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    count = 0\n    current_group = \"\"\n    for char in paren_string:\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n        current_group += char\n        if count == 0 and current_group.strip():\n            result.append(current_group.replace(\" \", \"\"))\n            current_group = \"\"\n    return result", "is_solved": true, "iteration": 2, "prompt_tokens": 1731, "completion_tokens": 338, "duration": 12.613828659057617, "task_id": "HumanEval/1", "result": "passed", "passed": true}
{"generated_code": "def find_zero(xs: list):\n    if len(xs) == 2:\n        return -xs[0] / xs[1]\n    else:\n        return max([i for i in range(1, len(xs))], key=lambda x: abs(xs[x]))  # Find index of the largest non-zero coefficient", "is_solved": true, "iteration": 5, "prompt_tokens": 4469, "completion_tokens": 541, "duration": 23.388534784317017, "task_id": "HumanEval/32", "result": "failed: name 'poly' is not defined", "passed": false}
{"generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "is_solved": false, "iteration": 7, "prompt_tokens": 5259, "completion_tokens": 549, "duration": 23.971771717071533, "task_id": "HumanEval/7", "result": "passed", "passed": true}
{"generated_code": "def sort_even(l: list):\n    return [sorted(l[::2])[i//2] if i % 2 == 0 else l[i] for i in range(len(l))]", "is_solved": false, "iteration": 7, "prompt_tokens": 5602, "completion_tokens": 589, "duration": 23.94013261795044, "task_id": "HumanEval/37", "result": "passed", "passed": true}
{"generated_code": "def sort_third(l: list):\n    return [val if idx % 3 != 0 else sorted(l[idx-idx%3:idx-idx%3+3])[idx % 3] for idx, val in enumerate(l)]", "is_solved": false, "iteration": 7, "prompt_tokens": 6133, "completion_tokens": 723, "duration": 27.987554788589478, "task_id": "HumanEval/33", "result": "failed: ", "passed": false}
{"generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": false, "iteration": 7, "prompt_tokens": 6627, "completion_tokens": 767, "duration": 28.945545434951782, "task_id": "HumanEval/0", "result": "passed", "passed": true}
{"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "is_solved": false, "iteration": 7, "prompt_tokens": 5076, "completion_tokens": 706, "duration": 30.676801681518555, "task_id": "HumanEval/36", "result": "failed: ", "passed": false}
{"generated_code": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    min_balance = 0\n    for operation in operations:\n        balance += operation\n        min_balance = min(min_balance, balance)\n    return min_balance < 0", "is_solved": false, "iteration": 7, "prompt_tokens": 5635, "completion_tokens": 646, "duration": 73.2345118522644, "task_id": "HumanEval/3", "result": "passed", "passed": true}
{"generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num for num in numbers]", "is_solved": false, "iteration": 7, "prompt_tokens": 6487, "completion_tokens": 688, "duration": 24.93163013458252, "task_id": "HumanEval/21", "result": "passed", "passed": true}
{"generated_code": "def median(l: list):\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    if n % 2 == 0:\n        return (sorted_l[n//2 - 1] + sorted_l[n//2]) / 2\n    else:\n        return sorted_l[n//2]", "is_solved": false, "iteration": 7, "prompt_tokens": 5107, "completion_tokens": 820, "duration": 26.037089347839355, "task_id": "HumanEval/47", "result": "passed", "passed": true}
{"generated_code": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    return [durations.get(note, 1) for note in notes]\n\nparse_music('o o| .| o| o| .| .| .| .| o o')", "is_solved": false, "iteration": 7, "prompt_tokens": 8428, "completion_tokens": 939, "duration": 31.882364749908447, "task_id": "HumanEval/17", "result": "passed", "passed": true}
{"generated_code": "def make_palindrome(string: str) -> str:\n    def is_palindrome(s):\n        return s == s[::-1]\n    \n    if not string:\n        return ''\n    \n    if is_palindrome(string):\n        return string\n    \n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i][::-1]  # Fix: Include the palindrome part in the reversed concatenation", "is_solved": false, "iteration": 7, "prompt_tokens": 6120, "completion_tokens": 1072, "duration": 33.39744567871094, "task_id": "HumanEval/10", "result": "failed: ", "passed": false}
{"generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = ()\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff == min_diff:\n            return (numbers[i], numbers[i+1])\n    return result", "is_solved": false, "iteration": 7, "prompt_tokens": 9292, "completion_tokens": 1532, "duration": 42.24602389335632, "task_id": "HumanEval/20", "result": "passed", "passed": true}
{"generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": true, "iteration": 0, "prompt_tokens": 140, "completion_tokens": 82, "duration": 4.167835235595703, "task_id": "HumanEval/50", "result": "passed", "passed": true}
{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 31, "duration": 5.49226450920105, "task_id": "HumanEval/51", "result": "passed", "passed": true}
{"generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 26, "duration": 5.450874328613281, "task_id": "HumanEval/52", "result": "passed", "passed": true}
{"generated_code": "def add(x: int, y: int):\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 20, "duration": 1.7860267162322998, "task_id": "HumanEval/53", "result": "passed", "passed": true}
{"generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 38, "duration": 4.537459373474121, "task_id": "HumanEval/55", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 64, "duration": 1.595395803451538, "task_id": "HumanEval/56", "result": "passed", "passed": true}
{"generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 58, "duration": 6.372962713241577, "task_id": "HumanEval/57", "result": "passed", "passed": true}
{"generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 29, "duration": 5.793344020843506, "task_id": "HumanEval/58", "result": "passed", "passed": true}
{"generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 50, "duration": 6.514908790588379, "task_id": "HumanEval/59", "result": "passed", "passed": true}
{"generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 22, "duration": 5.250669479370117, "task_id": "HumanEval/60", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 67, "duration": 6.117987394332886, "task_id": "HumanEval/61", "result": "passed", "passed": true}
{"generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]\n\n# Test cases\nprint(derivative([3, 1, 2, 4, 5]))  # Output: [1, 4, 12, 20]\nprint(derivative([1, 2, 3]))  # Output: [2, 6]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 89, "duration": 5.635868549346924, "task_id": "HumanEval/62", "result": "passed", "passed": true}
{"generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 72, "duration": 2.085747480392456, "task_id": "HumanEval/63", "result": "passed", "passed": true}
{"generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    if s[-1].lower() == 'y':\n        return sum(1 for char in s[:-1] if char.lower() in vowels) + 1\n    else:\n        return sum(1 for char in s if char.lower() in vowels)", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 70, "duration": 6.279200553894043, "task_id": "HumanEval/64", "result": "passed", "passed": true}
{"generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 1.2910349369049072, "task_id": "HumanEval/66", "result": "passed", "passed": true}
{"generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 37, "duration": 5.683075189590454, "task_id": "HumanEval/67", "result": "passed", "passed": true}
{"generated_code": "def pluck(arr):\n    even_values = [(value, index) for index, value in enumerate(arr) if value % 2 == 0]\n    if not even_values:\n        return []\n    min_even_value = min(even_values, key=lambda x: (x[0], x[1]))\n    return [min_even_value[0], min_even_value[1]]", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 82, "duration": 5.2497780323028564, "task_id": "HumanEval/68", "result": "passed", "passed": true}
{"generated_code": "def search(lst):\n    for num in sorted(set(lst), reverse=True):\n        if lst.count(num) >= num:\n            return num\n    return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 37, "duration": 5.657253980636597, "task_id": "HumanEval/69", "result": "passed", "passed": true}
{"generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 44, "duration": 4.340230464935303, "task_id": "HumanEval/70", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 92, "duration": 2.073251247406006, "task_id": "HumanEval/71", "result": "passed", "passed": true}
{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 5.156278610229492, "task_id": "HumanEval/72", "result": "passed", "passed": true}
{"generated_code": "def smallest_change(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-1-i]:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 52, "duration": 1.6135008335113525, "task_id": "HumanEval/73", "result": "passed", "passed": true}
{"generated_code": "def total_match(lst1, lst2):\n    return lst1 if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2) else lst2", "is_solved": true, "iteration": 0, "prompt_tokens": 243, "completion_tokens": 43, "duration": 4.563444375991821, "task_id": "HumanEval/74", "result": "passed", "passed": true}
{"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            count += 1\n    return count == 3", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 106, "duration": 5.258728504180908, "task_id": "HumanEval/75", "result": "failed: ", "passed": false}
{"generated_code": "def iscube(a):\n    return (a >= 0) and (round(a**(1/3))**3 == a)", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 31, "duration": 4.989458799362183, "task_id": "HumanEval/77", "result": "failed: Third test error: False", "passed": false}
{"generated_code": "def hex_key(num):\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = sum(1 for digit in num if digit in primes)\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 49, "duration": 3.148556709289551, "task_id": "HumanEval/78", "result": "passed", "passed": true}
{"generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 29, "duration": 4.2002599239349365, "task_id": "HumanEval/79", "result": "passed", "passed": true}
{"generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 76, "duration": 2.430246591567993, "task_id": "HumanEval/80", "result": "passed", "passed": true}
{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 69, "duration": 5.953183889389038, "task_id": "HumanEval/82", "result": "passed", "passed": true}
{"generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 21, "duration": 3.9268581867218018, "task_id": "HumanEval/84", "result": "passed", "passed": true}
{"generated_code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(word)) for word in s.split()])", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 26, "duration": 4.099725961685181, "task_id": "HumanEval/86", "result": "passed", "passed": true}
{"generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 68, "duration": 2.980239152908325, "task_id": "HumanEval/87", "result": "passed", "passed": true}
{"generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 52, "duration": 4.335091829299927, "task_id": "HumanEval/90", "result": "passed", "passed": true}
{"generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 54, "duration": 4.2294628620147705, "task_id": "HumanEval/92", "result": "passed", "passed": true}
{"generated_code": "def encode(message):\n    encoded_message = ''\n    vowels = 'aeiouAEIOU'\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr((ord(char) + 2 - ord('a')) % 26 + ord('A'))\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message", "is_solved": true, "iteration": 0, "prompt_tokens": 159, "completion_tokens": 93, "duration": 5.514516592025757, "task_id": "HumanEval/93", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    return all(key.islower() for key in keys) or all(key.isupper() for key in keys)", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 49, "duration": 4.356325626373291, "task_id": "HumanEval/95", "result": "failed: 'int' object has no attribute 'islower'", "passed": false}
{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 86, "duration": 4.878050327301025, "task_id": "HumanEval/96", "result": "passed", "passed": true}
{"generated_code": "def multiply(a, b):\n    return int(str(abs(a))[-1]) * int(str(abs(b))[-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 29, "duration": 3.914466619491577, "task_id": "HumanEval/97", "result": "passed", "passed": true}
{"generated_code": "def count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in 'AEIOU')", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 38, "duration": 3.995293378829956, "task_id": "HumanEval/98", "result": "passed", "passed": true}
{"generated_code": "def closest_integer(value):\n    value = float(value)\n    if value < 0:\n        return int(value - 0.5)\n    else:\n        return int(value + 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 45, "duration": 4.453214406967163, "task_id": "HumanEval/99", "result": "passed", "passed": true}
{"generated_code": "def sort_array(array):\n    sorted_array = array.copy()\n    if not sorted_array:\n        return []\n    \n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        return sorted(sorted_array, reverse=True)\n    else:\n        return sorted(sorted_array)", "is_solved": true, "iteration": 1, "prompt_tokens": 1278, "completion_tokens": 165, "duration": 8.026491165161133, "task_id": "HumanEval/88", "result": "passed", "passed": true}
{"generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == n**round(x**(1/n)) or x == 1)", "is_solved": true, "iteration": 3, "prompt_tokens": 2695, "completion_tokens": 340, "duration": 14.266719579696655, "task_id": "HumanEval/76", "result": "passed", "passed": true}
{"generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1) and len(s0) == len(s1)", "is_solved": false, "iteration": 7, "prompt_tokens": 5518, "completion_tokens": 500, "duration": 25.75398540496826, "task_id": "HumanEval/54", "result": "failed: ", "passed": false}
{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2 == 0)", "is_solved": false, "iteration": 7, "prompt_tokens": 5044, "completion_tokens": 478, "duration": 24.617502450942993, "task_id": "HumanEval/85", "result": "passed", "passed": true}
{"generated_code": "def is_bored(S):\n    return sum(1 for sentence in S.split('.') + S.split('?') + S.split('!') if sentence.strip().lower().startswith('i'))", "is_solved": false, "iteration": 7, "prompt_tokens": 5729, "completion_tokens": 650, "duration": 24.826547384262085, "task_id": "HumanEval/91", "result": "failed: Test 2", "passed": false}
{"generated_code": "def starts_one_ends(n):\n    count = 9 * 10**(n-1) + 10**(n-1) - 10**(n-2)\n    return count", "is_solved": false, "iteration": 7, "prompt_tokens": 4680, "completion_tokens": 553, "duration": 24.144145250320435, "task_id": "HumanEval/83", "result": "failed: ", "passed": false}
{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    return x_str[-shift:] + x_str[:-shift] if shift < len(x_str) else x_str[::-1]", "is_solved": false, "iteration": 7, "prompt_tokens": 5400, "completion_tokens": 755, "duration": 23.82203221321106, "task_id": "HumanEval/65", "result": "failed: ", "passed": false}
{"generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = (ord(char) - ord('a') + 2) * 2\n            if char.islower():\n                result += chr((ord('a') + shift - ord('a')) % 26 + ord('a'))\n            else:\n                result += chr((ord('A') + shift - ord('A')) % 26 + ord('A'))\n        else:\n            result += char\n    return result", "is_solved": false, "iteration": 7, "prompt_tokens": 5976, "completion_tokens": 1040, "duration": 30.52228331565857, "task_id": "HumanEval/89", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"generated_code": "def largest_prime_sum(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    prime_numbers = [num for num in lst if is_prime(num)]\n    largest_prime = max(prime_numbers)\n    return sum_of_digits(largest_prime)", "is_solved": false, "iteration": 7, "prompt_tokens": 8370, "completion_tokens": 1260, "duration": 32.07105875015259, "task_id": "HumanEval/94", "result": "failed: name 'skjkasdkd' is not defined", "passed": false}
{"generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa >= 0.0:\n            result.append('D-')\n    return result\n\n# Improved Implementation\ndef numerical_letter_grade(grades):\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        else:\n            result.append('D-')\n    return result", "is_solved": false, "iteration": 7, "prompt_tokens": 12190, "completion_tokens": 2333, "duration": 52.46790909767151, "task_id": "HumanEval/81", "result": "failed: ", "passed": false}
{"generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(\",\", \" \").split()]", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 25, "duration": 1.0746467113494873, "task_id": "HumanEval/101", "result": "passed", "passed": true}
{"generated_code": "def choose_num(x, y):\n    max_even = -1\n    for num in range(x, y+1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 55, "duration": 3.2499303817749023, "task_id": "HumanEval/102", "result": "passed", "passed": true}
{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 40, "duration": 2.996777057647705, "task_id": "HumanEval/103", "result": "passed", "passed": true}
{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 33, "duration": 4.210830211639404, "task_id": "HumanEval/104", "result": "passed", "passed": true}
{"generated_code": "def by_length(arr):\n    digits = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [x for x in arr if 1 <= x <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    result = [digits[x] for x in reversed_arr]\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 119, "duration": 3.765507936477661, "task_id": "HumanEval/105", "result": "passed", "passed": true}
{"generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 82, "duration": 2.168910264968872, "task_id": "HumanEval/106", "result": "passed", "passed": true}
{"generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    n = len(arr)\n    for i in range(n):\n        if sorted_arr == arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 67, "duration": 1.888298511505127, "task_id": "HumanEval/109", "result": "passed", "passed": true}
{"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(x % 2 == 1 for x in lst1) <= sum(x % 2 == 0 for x in lst2) else \"NO\"", "is_solved": true, "iteration": 0, "prompt_tokens": 247, "completion_tokens": 51, "duration": 1.6188201904296875, "task_id": "HumanEval/110", "result": "passed", "passed": true}
{"generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 212, "completion_tokens": 39, "duration": 1.6968176364898682, "task_id": "HumanEval/112", "result": "passed", "passed": true}
{"generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for letter in word if letter.lower() not in 'aeiou')\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 62, "duration": 2.7944095134735107, "task_id": "HumanEval/117", "result": "passed", "passed": true}
{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 98, "duration": 6.123220443725586, "task_id": "HumanEval/118", "result": "passed", "passed": true}
{"generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "is_solved": true, "iteration": 0, "prompt_tokens": 267, "completion_tokens": 17, "duration": 1.1640126705169678, "task_id": "HumanEval/120", "result": "failed: ", "passed": false}
{"generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) and all(lst.count(num) <= 1 for num in lst)", "is_solved": true, "iteration": 0, "prompt_tokens": 299, "completion_tokens": 44, "duration": 3.082533597946167, "task_id": "HumanEval/126", "result": "failed: This prints if this assert fails 7 (good for debugging!)", "passed": false}
{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 26, "duration": 2.2351036071777344, "task_id": "HumanEval/133", "result": "passed", "passed": true}
{"generated_code": "def is_equal_to_sum_even(n):\n    return n % 2 == 0 and n >= 8", "is_solved": true, "iteration": 0, "prompt_tokens": 127, "completion_tokens": 27, "duration": 2.1825339794158936, "task_id": "HumanEval/138", "result": "passed", "passed": true}
{"generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        factorial = 1\n        for j in range(1, i+1):\n            factorial *= j\n        result *= factorial\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 60, "duration": 5.583819150924683, "task_id": "HumanEval/139", "result": "passed", "passed": true}
{"generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 98, "duration": 3.6051621437072754, "task_id": "HumanEval/141", "result": "passed", "passed": true}
{"generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return (x_num * n_num) % (x_den * n_den) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 59, "duration": 2.6001389026641846, "task_id": "HumanEval/144", "result": "passed", "passed": true}
{"generated_code": "def specialFilter(nums):\n    return sum(1 for num in nums if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9'])", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 67, "duration": 5.582629919052124, "task_id": "HumanEval/146", "result": "passed", "passed": true}
{"generated_code": "import math\n\ndef max_fill(grid, capacity):\n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)", "is_solved": true, "iteration": 1, "prompt_tokens": 1525, "completion_tokens": 113, "duration": 7.2640790939331055, "task_id": "HumanEval/115", "result": "failed: Error", "passed": false}
{"generated_code": "def is_nested(string):\n    stack = []\n    nested = False\n    for char in string:\n        if char == '[':\n            stack.append(char)\n            if len(stack) > 1:\n                nested = True\n        elif char == ']' and stack:\n            stack.pop()\n    return nested", "is_solved": true, "iteration": 1, "prompt_tokens": 1171, "completion_tokens": 244, "duration": 8.704225540161133, "task_id": "HumanEval/132", "result": "failed: ", "passed": false}
{"generated_code": "def compare_one(a, b):\n    a_num = float(a.replace(',', '.')) if isinstance(a, str) else a\n    b_num = float(b.replace(',', '.')) if isinstance(b, str) else b\n    \n    if a_num > b_num:\n        return a\n    elif b_num > a_num:\n        return b\n    else:\n        return None", "is_solved": true, "iteration": 1, "prompt_tokens": 1170, "completion_tokens": 226, "duration": 10.05045485496521, "task_id": "HumanEval/137", "result": "passed", "passed": true}
{"generated_code": "def histogram(test):\n    letters = test.split()\n    letter_count = {}\n    for letter in letters:\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n    if not letter_count:\n        return {}\n    max_count = max(letter_count.values())\n    return {letter: count for letter, count in letter_count.items() if count == max_count}", "is_solved": true, "iteration": 1, "prompt_tokens": 1177, "completion_tokens": 239, "duration": 9.485573053359985, "task_id": "HumanEval/111", "result": "passed", "passed": true}
{"generated_code": "def match_parens(lst):\n    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(':\n                stack.append('(')\n            elif char == ')':\n                if not stack or stack[-1] != '(':\n                    return 'No'\n                stack.pop()\n    if not stack:\n        return 'Yes'\n    else:\n        return 'No'", "is_solved": true, "iteration": 2, "prompt_tokens": 2085, "completion_tokens": 342, "duration": 11.775882959365845, "task_id": "HumanEval/119", "result": "failed: ", "passed": false}
{"generated_code": "def valid_date(date):\n    if len(date) != 10:\n        return False\n    if \"-\" not in date:\n        return False\n    month, day, year = date.split('-')\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    month, day, year = int(month), int(day), int(year)\n    if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    else:\n        return False\n    return True", "is_solved": true, "iteration": 2, "prompt_tokens": 2907, "completion_tokens": 717, "duration": 18.840588808059692, "task_id": "HumanEval/124", "result": "passed", "passed": true}
{"generated_code": "def digits(n):\n    product = 1\n    all_even = True\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            all_even = False\n    return product if not all_even else 0", "is_solved": true, "iteration": 4, "prompt_tokens": 3019, "completion_tokens": 504, "duration": 18.606220960617065, "task_id": "HumanEval/131", "result": "passed", "passed": true}
{"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if i % 2 == 0 and lst[i] % 2 != 0)", "is_solved": true, "iteration": 6, "prompt_tokens": 4374, "completion_tokens": 535, "duration": 26.370749473571777, "task_id": "HumanEval/121", "result": "passed", "passed": true}
{"generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": false, "iteration": 7, "prompt_tokens": 6141, "completion_tokens": 469, "duration": 21.40370225906372, "task_id": "HumanEval/116", "result": "passed", "passed": true}
{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt and txt[-1].isalpha() and (len(txt) == 1 or not txt[-2].isalpha() and txt[-2] != ' '):\n        return True\n    return False", "is_solved": true, "iteration": 6, "prompt_tokens": 5049, "completion_tokens": 615, "duration": 22.606597900390625, "task_id": "HumanEval/134", "result": "failed: ", "passed": false}
{"generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "is_solved": false, "iteration": 7, "prompt_tokens": 6355, "completion_tokens": 574, "duration": 24.08910894393921, "task_id": "HumanEval/149", "result": "passed", "passed": true}
{"generated_code": "def add_elements(arr, k):\n    return sum(arr[:k])", "is_solved": false, "iteration": 7, "prompt_tokens": 6634, "completion_tokens": 558, "duration": 26.384289264678955, "task_id": "HumanEval/122", "result": "failed: ", "passed": false}
{"generated_code": "def count_nums(arr):\n    return sum(sum(int(d) for d in str(abs(num))) > 0 for num in arr if num != 0)", "is_solved": false, "iteration": 7, "prompt_tokens": 5078, "completion_tokens": 499, "duration": 31.22747564315796, "task_id": "HumanEval/108", "result": "failed: ", "passed": false}
{"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return [word for word in txt.split(',') if word]", "is_solved": false, "iteration": 7, "prompt_tokens": 5574, "completion_tokens": 701, "duration": 28.993515253067017, "task_id": "HumanEval/125", "result": "failed: ", "passed": false}
{"generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 1)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones", "is_solved": false, "iteration": 7, "prompt_tokens": 5857, "completion_tokens": 806, "duration": 27.730703115463257, "task_id": "HumanEval/100", "result": "failed: Test 4", "passed": false}
{"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))", "is_solved": false, "iteration": 7, "prompt_tokens": 5005, "completion_tokens": 488, "duration": 25.070346117019653, "task_id": "HumanEval/145", "result": "failed: ", "passed": false}
{"generated_code": "def can_arrange(arr):\n    max_index = -1\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            max_index = i\n    return max_index", "is_solved": false, "iteration": 7, "prompt_tokens": 5684, "completion_tokens": 785, "duration": 32.72508764266968, "task_id": "HumanEval/135", "result": "failed: ", "passed": false}
{"generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(int(digit) % 2 != 0 for digit in string), sum(int(digit) % 2 != 0 for digit in string), i+1, i+1) for i, string in enumerate(lst)]", "is_solved": false, "iteration": 7, "prompt_tokens": 6039, "completion_tokens": 765, "duration": 26.692910194396973, "task_id": "HumanEval/113", "result": "failed: Test 1", "passed": false}
{"generated_code": "def fix_spaces(text):\n    result = \"\"\n    count = 0\n    for char in text:\n        if char == \" \":\n            count += 1\n            if count > 2:\n                result = result[:-1] + \"-\"\n            else:\n                result += \"_\"\n        else:\n            count = 0\n            result += char\n    return result", "is_solved": false, "iteration": 7, "prompt_tokens": 5580, "completion_tokens": 894, "duration": 27.252440929412842, "task_id": "HumanEval/140", "result": "failed: This prints if this assert fails 4 (good for debugging!)", "passed": false}
{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    contains_zero = False\n    for num in arr:\n        if num == 0:\n            contains_zero = True\n        else:\n            product *= num / abs(num)\n    if contains_zero:\n        return 0\n    return sum(abs(num) for num in arr) * product", "is_solved": false, "iteration": 7, "prompt_tokens": 5922, "completion_tokens": 890, "duration": 30.595306396484375, "task_id": "HumanEval/128", "result": "passed", "passed": true}
{"generated_code": "def get_odd_collatz(n):\n    collatz_seq = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        if n % 2 != 0:\n            collatz_seq.append(n)\n    \n    return sorted([num for num in collatz_seq if num % 2 != 0])", "is_solved": false, "iteration": 7, "prompt_tokens": 7339, "completion_tokens": 929, "duration": 30.449071168899536, "task_id": "HumanEval/123", "result": "passed", "passed": true}
{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum", "is_solved": false, "iteration": 7, "prompt_tokens": 5926, "completion_tokens": 893, "duration": 38.71063208580017, "task_id": "HumanEval/114", "result": "passed", "passed": true}
{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2)\n    if start_index > end_index:\n        start_index, end_index = end_index, start_index\n    return tuple(planets[start_index+1:end_index]) if start_index + 1 != end_index else ()", "is_solved": false, "iteration": 7, "prompt_tokens": 6789, "completion_tokens": 1253, "duration": 34.16024351119995, "task_id": "HumanEval/148", "result": "passed", "passed": true}
{"generated_code": "def largest_smallest_integers(lst):\n    neg_integers = [num for num in lst if num < 0]\n    pos_integers = [num for num in lst if num > 0]\n    \n    largest_neg = max(neg_integers) if neg_integers else None\n    smallest_pos = min(pos_integers) if pos_integers else None\n    \n    if not neg_integers:\n        largest_neg = None\n    if not pos_integers:\n        smallest_pos = None\n    \n    return (largest_neg, smallest_pos)", "is_solved": false, "iteration": 7, "prompt_tokens": 6737, "completion_tokens": 1212, "duration": 34.411489963531494, "task_id": "HumanEval/136", "result": "passed", "passed": true}
{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word)) and len(word) > 1]\n    return ' '.join(prime_words)", "is_solved": false, "iteration": 7, "prompt_tokens": 6186, "completion_tokens": 1116, "duration": 40.0507128238678, "task_id": "HumanEval/143", "result": "passed", "passed": true}
{"generated_code": "def tri(n):\n    if n == 0:\n        return [3]\n    elif n == 1:\n        return [3, 1]\n    else:\n        tribonacci = [0, 1, 3]\n        for i in range(3, n):\n            if i % 2 == 0:\n                tribonacci.append(1 + i // 2)\n            else:\n                tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3])\n        return tribonacci", "is_solved": false, "iteration": 7, "prompt_tokens": 6854, "completion_tokens": 1205, "duration": 35.539278745651245, "task_id": "HumanEval/130", "result": "failed: ", "passed": false}
{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 7, "prompt_tokens": 6491, "completion_tokens": 686, "duration": 34.12547445297241, "task_id": "HumanEval/142", "result": "failed: ", "passed": false}
{"generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n+1):\n        a_i = i * i - i + 1\n        for j in range(i+1, n+1):\n            a_j = j * j - j + 1\n            for k in range(j+1, n+1):\n                a_k = k * k - k + 1\n                if (a_i + a_j + a_k) % 3 == 0:\n                    count += 1\n    return count // 6", "is_solved": false, "iteration": 7, "prompt_tokens": 6554, "completion_tokens": 1484, "duration": 43.93698692321777, "task_id": "HumanEval/147", "result": "failed: ", "passed": false}
{"generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "is_solved": false, "iteration": 7, "prompt_tokens": 7000, "completion_tokens": 1097, "duration": 36.56232047080994, "task_id": "HumanEval/107", "result": "passed", "passed": true}
{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    intersection_length = intersection_end - intersection_start + 1\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 7, "prompt_tokens": 7948, "completion_tokens": 1565, "duration": 46.328999519348145, "task_id": "HumanEval/127", "result": "failed: ", "passed": false}
{"generated_code": "def minPath(grid, k):\n    n = len(grid)\n    m = len(grid[0])\n    visited = [[False for _ in range(m)] for _ in range(n)]\n    \n    def dfs(i, j, path):\n        if i < 0 or i >= n or j < 0 or j >= m or visited[i][j]:\n            return\n        path.append(grid[i][j])\n        visited[i][j] = True\n        if len(path) == k:\n            return path\n        res = []\n        for x, y in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:\n            res.append(dfs(x, y, path.copy()))\n        visited[i][j] = False\n        return min(filter(None, res))\n    \n    for i in range(n):\n        for j in range(m):\n            path = dfs(i, j, [])\n            if path:\n                return path", "is_solved": false, "iteration": 7, "prompt_tokens": 11008, "completion_tokens": 2425, "duration": 51.55460453033447, "task_id": "HumanEval/129", "result": "failed: ", "passed": false}
{"generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 78, "duration": 2.0863029956817627, "task_id": "HumanEval/150", "result": "passed", "passed": true}
{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0 and isinstance(x, int))", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 39, "duration": 4.964281320571899, "task_id": "HumanEval/151", "result": "passed", "passed": true}
{"generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 39, "duration": 2.242448329925537, "task_id": "HumanEval/152", "result": "passed", "passed": true}
{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        return sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n    \n    strongest = max(extensions, key=lambda x: strength(x))\n    return f\"{class_name}.{strongest}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 71, "duration": 3.0529162883758545, "task_id": "HumanEval/153", "result": "passed", "passed": true}
{"generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',\n        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 142, "duration": 3.109078884124756, "task_id": "HumanEval/156", "result": "passed", "passed": true}
{"generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 52, "duration": 1.781921625137329, "task_id": "HumanEval/157", "result": "passed", "passed": true}
{"generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    remaining_after_meals = max(0, remaining - need)\n    return [total_eaten, remaining_after_meals]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 51, "duration": 5.194386959075928, "task_id": "HumanEval/159", "result": "passed", "passed": true}
{"generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += operator[i] + str(operand[i+1])\n    return eval(expression)", "is_solved": true, "iteration": 0, "prompt_tokens": 257, "completion_tokens": 48, "duration": 4.242655515670776, "task_id": "HumanEval/160", "result": "passed", "passed": true}
{"generated_code": "def solve(s):\n    return s.swapcase() if any(c.isalpha() for c in s) else s[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 30, "duration": 2.5408999919891357, "task_id": "HumanEval/161", "result": "passed", "passed": true}
{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 33, "duration": 2.378025531768799, "task_id": "HumanEval/162", "result": "passed", "passed": true}
{"generated_code": "def even_odd_count(num):\n    even_count = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 == 0])\n    odd_count = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 != 0])\n    return (even_count, odd_count)", "is_solved": true, "iteration": 1, "prompt_tokens": 918, "completion_tokens": 183, "duration": 5.389604091644287, "task_id": "HumanEval/155", "result": "passed", "passed": true}
{"generated_code": "def find_max(words):\n    return max(sorted(words, key=lambda x: (-len(set(x)), x)))", "is_solved": false, "iteration": 7, "prompt_tokens": 5134, "completion_tokens": 458, "duration": 22.05441951751709, "task_id": "HumanEval/158", "result": "failed: t2", "passed": false}
{"generated_code": "def cycpattern_check(a, b):\n    return any(b in a[i:] + a[:i] for i in range(len(a))) or any(b in a[i:] + a[:i] for i in range(1, len(a)))", "is_solved": false, "iteration": 7, "prompt_tokens": 5867, "completion_tokens": 795, "duration": 27.629116773605347, "task_id": "HumanEval/154", "result": "failed: test #3", "passed": false}
{"generated_code": "def generate_integers(a, b):\n    start = min(a, b)\n    end = max(a, b)\n    return [i for i in range(start, end+1) if i % 2 == 0]", "is_solved": false, "iteration": 7, "prompt_tokens": 5330, "completion_tokens": 630, "duration": 28.216655731201172, "task_id": "HumanEval/163", "result": "failed: Test 1", "passed": false}
{"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": true, "iteration": 0, "prompt_tokens": 135, "completion_tokens": 21, "duration": 3.3748176097869873, "task_id": "HumanEval/2", "result": "passed", "passed": true}
{"generated_code": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 44, "duration": 3.6765074729919434, "task_id": "HumanEval/4", "result": "passed", "passed": true}
{"generated_code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 60, "duration": 4.007699728012085, "task_id": "HumanEval/5", "result": "passed", "passed": true}
{"generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 94, "duration": 4.523579835891724, "task_id": "HumanEval/6", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        total_sum = sum(numbers)\n        total_product = 1\n        for num in numbers:\n            total_product *= num\n        return total_sum, total_product", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 75, "duration": 4.375110387802124, "task_id": "HumanEval/8", "result": "passed", "passed": true}
{"generated_code": "def rolling_max(numbers: List[int]) -> List[int]:\n    max_numbers = []\n    max_num = float('-inf')\n    for num in numbers:\n        max_num = max(max_num, num)\n        max_numbers.append(max_num)\n    return max_numbers", "is_solved": true, "iteration": 0, "prompt_tokens": 150, "completion_tokens": 57, "duration": 3.7959132194519043, "task_id": "HumanEval/9", "result": "passed", "passed": true}
{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.5920822620391846, "task_id": "HumanEval/11", "result": "passed", "passed": true}
{"generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 39, "duration": 3.9178173542022705, "task_id": "HumanEval/12", "result": "failed: ", "passed": false}
{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 39, "duration": 3.631875514984131, "task_id": "HumanEval/13", "result": "passed", "passed": true}
{"generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 32, "duration": 3.5267109870910645, "task_id": "HumanEval/14", "result": "passed", "passed": true}
{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 28, "duration": 3.3324170112609863, "task_id": "HumanEval/15", "result": "passed", "passed": true}
{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 3.1436092853546143, "task_id": "HumanEval/16", "result": "passed", "passed": true}
{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 74, "duration": 4.2200727462768555, "task_id": "HumanEval/18", "result": "passed", "passed": true}
{"generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_dict[x])\n    return ' '.join(sorted_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 102, "duration": 4.697938442230225, "task_id": "HumanEval/19", "result": "passed", "passed": true}
{"generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 31, "duration": 3.5470941066741943, "task_id": "HumanEval/22", "result": "passed", "passed": true}
{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 3.0233676433563232, "task_id": "HumanEval/23", "result": "passed", "passed": true}
{"generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 43, "duration": 3.513399124145508, "task_id": "HumanEval/24", "result": "passed", "passed": true}
{"generated_code": "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 65, "duration": 3.7573485374450684, "task_id": "HumanEval/25", "result": "passed", "passed": true}
{"generated_code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 33, "duration": 3.290222644805908, "task_id": "HumanEval/26", "result": "passed", "passed": true}
{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 36, "duration": 3.3436784744262695, "task_id": "HumanEval/27", "result": "passed", "passed": true}
{"generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 20, "duration": 2.9848461151123047, "task_id": "HumanEval/28", "result": "passed", "passed": true}
{"generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 34, "duration": 3.402144432067871, "task_id": "HumanEval/29", "result": "passed", "passed": true}
{"generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 25, "duration": 1.0710422992706299, "task_id": "HumanEval/30", "result": "passed", "passed": true}
{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 56, "duration": 3.964221477508545, "task_id": "HumanEval/31", "result": "passed", "passed": true}
{"generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 17, "duration": 3.101635456085205, "task_id": "HumanEval/34", "result": "passed", "passed": true}
{"generated_code": "def max_element(l: list):\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 16, "duration": 2.888660430908203, "task_id": "HumanEval/35", "result": "passed", "passed": true}
{"generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iteration": 0, "prompt_tokens": 208, "completion_tokens": 162, "duration": 5.722168922424316, "task_id": "HumanEval/38", "result": "passed", "passed": true}
{"generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n):\n                a, b = b, a + b\n            return b\n\n    count = 0\n    i = 1\n    while count < n:\n        i += 1\n        if is_prime(fibonacci(i)):\n            count += 1\n\n    return fibonacci(i)", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 178, "duration": 8.617135047912598, "task_id": "HumanEval/39", "result": "passed", "passed": true}
{"generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 70, "duration": 4.308423757553101, "task_id": "HumanEval/40", "result": "passed", "passed": true}
{"generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 23, "duration": 4.702202320098877, "task_id": "HumanEval/42", "result": "passed", "passed": true}
{"generated_code": "def pairs_sum_to_zero(l):\n    return any(-x in l for x in l if x != 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 28, "duration": 5.8232152462005615, "task_id": "HumanEval/43", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 22, "duration": 2.7677125930786133, "task_id": "HumanEval/45", "result": "passed", "passed": true}
{"generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n    \n    return d", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 119, "duration": 6.019763231277466, "task_id": "HumanEval/46", "result": "passed", "passed": true}
{"generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 20, "duration": 4.280380725860596, "task_id": "HumanEval/48", "result": "passed", "passed": true}
{"generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 25, "duration": 4.343328475952148, "task_id": "HumanEval/49", "result": "passed", "passed": true}
{"generated_code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "is_solved": true, "iteration": 1, "prompt_tokens": 923, "completion_tokens": 154, "duration": 9.449043035507202, "task_id": "HumanEval/44", "result": "passed", "passed": true}
{"generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_group = \"\"\n    count = 0\n    for char in paren_string:\n        if char == '(':\n            count += 1\n        current_group += char\n        if char == ')' and count > 0:\n            count -= 1\n            if count == 0:\n                result.append(current_group.replace(\" \", \"\"))\n                current_group = \"\"\n    return result", "is_solved": true, "iteration": 2, "prompt_tokens": 1998, "completion_tokens": 353, "duration": 12.313884735107422, "task_id": "HumanEval/1", "result": "passed", "passed": true}
{"generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": true, "iteration": 0, "prompt_tokens": 140, "completion_tokens": 82, "duration": 4.167835235595703, "task_id": "HumanEval/50", "result": "passed", "passed": true}
{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 31, "duration": 5.49226450920105, "task_id": "HumanEval/51", "result": "passed", "passed": true}
{"generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 26, "duration": 5.450874328613281, "task_id": "HumanEval/52", "result": "passed", "passed": true}
{"generated_code": "def add(x: int, y: int):\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 20, "duration": 1.7860267162322998, "task_id": "HumanEval/53", "result": "passed", "passed": true}
{"generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 38, "duration": 4.537459373474121, "task_id": "HumanEval/55", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 64, "duration": 1.595395803451538, "task_id": "HumanEval/56", "result": "passed", "passed": true}
{"generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 58, "duration": 6.372962713241577, "task_id": "HumanEval/57", "result": "passed", "passed": true}
{"generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 29, "duration": 5.793344020843506, "task_id": "HumanEval/58", "result": "passed", "passed": true}
{"generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 50, "duration": 6.514908790588379, "task_id": "HumanEval/59", "result": "passed", "passed": true}
{"generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 22, "duration": 5.250669479370117, "task_id": "HumanEval/60", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 67, "duration": 6.117987394332886, "task_id": "HumanEval/61", "result": "passed", "passed": true}
{"generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]\n\n# Test cases\nprint(derivative([3, 1, 2, 4, 5]))  # Output: [1, 4, 12, 20]\nprint(derivative([1, 2, 3]))  # Output: [2, 6]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 89, "duration": 5.635868549346924, "task_id": "HumanEval/62", "result": "passed", "passed": true}
{"generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 72, "duration": 2.085747480392456, "task_id": "HumanEval/63", "result": "passed", "passed": true}
{"generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    if s[-1].lower() == 'y':\n        return sum(1 for char in s[:-1] if char.lower() in vowels) + 1\n    else:\n        return sum(1 for char in s if char.lower() in vowels)", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 70, "duration": 6.279200553894043, "task_id": "HumanEval/64", "result": "passed", "passed": true}
{"generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 1.2910349369049072, "task_id": "HumanEval/66", "result": "passed", "passed": true}
{"generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 37, "duration": 5.683075189590454, "task_id": "HumanEval/67", "result": "passed", "passed": true}
{"generated_code": "def pluck(arr):\n    even_values = [(value, index) for index, value in enumerate(arr) if value % 2 == 0]\n    if not even_values:\n        return []\n    min_even_value = min(even_values, key=lambda x: (x[0], x[1]))\n    return [min_even_value[0], min_even_value[1]]", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 82, "duration": 5.2497780323028564, "task_id": "HumanEval/68", "result": "passed", "passed": true}
{"generated_code": "def search(lst):\n    for num in sorted(set(lst), reverse=True):\n        if lst.count(num) >= num:\n            return num\n    return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 37, "duration": 5.657253980636597, "task_id": "HumanEval/69", "result": "passed", "passed": true}
{"generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 44, "duration": 4.340230464935303, "task_id": "HumanEval/70", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 92, "duration": 2.073251247406006, "task_id": "HumanEval/71", "result": "passed", "passed": true}
{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 5.156278610229492, "task_id": "HumanEval/72", "result": "passed", "passed": true}
{"generated_code": "def smallest_change(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-1-i]:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 52, "duration": 1.6135008335113525, "task_id": "HumanEval/73", "result": "passed", "passed": true}
{"generated_code": "def total_match(lst1, lst2):\n    return lst1 if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2) else lst2", "is_solved": true, "iteration": 0, "prompt_tokens": 243, "completion_tokens": 43, "duration": 4.563444375991821, "task_id": "HumanEval/74", "result": "passed", "passed": true}
{"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            count += 1\n    return count == 3", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 106, "duration": 5.258728504180908, "task_id": "HumanEval/75", "result": "failed: ", "passed": false}
{"generated_code": "def iscube(a):\n    return (a >= 0) and (round(a**(1/3))**3 == a)", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 31, "duration": 4.989458799362183, "task_id": "HumanEval/77", "result": "failed: Third test error: False", "passed": false}
{"generated_code": "def hex_key(num):\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = sum(1 for digit in num if digit in primes)\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 49, "duration": 3.148556709289551, "task_id": "HumanEval/78", "result": "passed", "passed": true}
{"generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 29, "duration": 4.2002599239349365, "task_id": "HumanEval/79", "result": "passed", "passed": true}
{"generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 76, "duration": 2.430246591567993, "task_id": "HumanEval/80", "result": "passed", "passed": true}
{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 69, "duration": 5.953183889389038, "task_id": "HumanEval/82", "result": "passed", "passed": true}
{"generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 21, "duration": 3.9268581867218018, "task_id": "HumanEval/84", "result": "passed", "passed": true}
{"generated_code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(word)) for word in s.split()])", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 26, "duration": 4.099725961685181, "task_id": "HumanEval/86", "result": "passed", "passed": true}
{"generated_code": "def make_palindrome(string: str) -> str:\n    def is_palindrome(s):\n        return s == s[::-1]\n    \n    if is_palindrome(string):\n        return string\n    \n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]", "is_solved": true, "iteration": 1, "prompt_tokens": 1095, "completion_tokens": 224, "duration": 10.003506898880005, "task_id": "HumanEval/10", "result": "passed", "passed": true}
{"generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or (x != 1 and x == n ** round(x ** (1/n))))", "is_solved": true, "iteration": 2, "prompt_tokens": 1857, "completion_tokens": 246, "duration": 11.682995557785034, "task_id": "HumanEval/76", "result": "passed", "passed": true}
{"generated_code": "def car_race_collision(n: int):\n    return n", "is_solved": true, "iteration": 6, "prompt_tokens": 4806, "completion_tokens": 463, "duration": 23.893875122070312, "task_id": "HumanEval/41", "result": "failed: ", "passed": false}
{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2 == 0)", "is_solved": false, "iteration": 7, "prompt_tokens": 4973, "completion_tokens": 478, "duration": 21.04323649406433, "task_id": "HumanEval/85", "result": "passed", "passed": true}
{"generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1) and Counter(s0) == Counter(s1)", "is_solved": false, "iteration": 7, "prompt_tokens": 5507, "completion_tokens": 511, "duration": 25.588605403900146, "task_id": "HumanEval/54", "result": "failed: ", "passed": false}
{"generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "is_solved": false, "iteration": 7, "prompt_tokens": 5495, "completion_tokens": 573, "duration": 24.687891006469727, "task_id": "HumanEval/7", "result": "passed", "passed": true}
{"generated_code": "def fizz_buzz(n: int):\n    return sum(1 for i in range(n) if (i % 11 == 0 or i % 13 == 0) and '7' in str(i))", "is_solved": false, "iteration": 7, "prompt_tokens": 5002, "completion_tokens": 672, "duration": 28.236254453659058, "task_id": "HumanEval/36", "result": "failed: ", "passed": false}
{"generated_code": "def starts_one_ends(n):\n    count = 9 * 10**(n-1) + 10**(n-1) - 10**(n-2)\n    return count", "is_solved": false, "iteration": 7, "prompt_tokens": 4732, "completion_tokens": 607, "duration": 26.38511347770691, "task_id": "HumanEval/83", "result": "failed: ", "passed": false}
{"generated_code": "def sort_even(l: list):\n    return [sorted(l[::2])[i//2] if i % 2 == 0 else l[i] for i in range(len(l))]", "is_solved": false, "iteration": 7, "prompt_tokens": 5534, "completion_tokens": 580, "duration": 27.238385915756226, "task_id": "HumanEval/37", "result": "passed", "passed": true}
{"generated_code": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    min_balance = 0\n    for operation in operations:\n        balance += operation\n        min_balance = min(min_balance, balance)\n    return min_balance < 0", "is_solved": false, "iteration": 7, "prompt_tokens": 5742, "completion_tokens": 735, "duration": 72.91456747055054, "task_id": "HumanEval/3", "result": "passed", "passed": true}
{"generated_code": "def median(l: list):\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 0:\n        return (sorted_list[n//2 - 1] + sorted_list[n//2]) / 2\n    else:\n        return sorted_list[n//2]", "is_solved": false, "iteration": 7, "prompt_tokens": 5120, "completion_tokens": 785, "duration": 25.038245677947998, "task_id": "HumanEval/47", "result": "passed", "passed": true}
{"generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()  # Sort the list of numbers first\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False", "is_solved": false, "iteration": 7, "prompt_tokens": 6605, "completion_tokens": 766, "duration": 28.281624794006348, "task_id": "HumanEval/0", "result": "passed", "passed": true}
{"generated_code": "def find_zero(xs: list):\n    return -xs[-2] / xs[-1]", "is_solved": false, "iteration": 7, "prompt_tokens": 6060, "completion_tokens": 807, "duration": 26.814656734466553, "task_id": "HumanEval/32", "result": "failed: name 'poly' is not defined", "passed": false}
{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "is_solved": false, "iteration": 7, "prompt_tokens": 5154, "completion_tokens": 774, "duration": 23.965215921401978, "task_id": "HumanEval/65", "result": "failed: ", "passed": false}
{"generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_diff = max_num - min_num\n    return [(num - min_num) / range_diff if range_diff != 0 else 0 for num in numbers]", "is_solved": false, "iteration": 7, "prompt_tokens": 6673, "completion_tokens": 786, "duration": 26.485775232315063, "task_id": "HumanEval/21", "result": "passed", "passed": true}
{"generated_code": "def sort_third(l: list):\n    return [l[i] if i % 3 != 0 else sorted(l[i:i+3])[j] for i in range(0, len(l), 3) for j in range(3) if j < len(l[i:i+3])]\n\n# Test cases\nprint(sort_third([1, 2, 3]))\nprint(sort_third([5, 6, 3, 4, 8, 9, 2]))", "is_solved": false, "iteration": 7, "prompt_tokens": 6835, "completion_tokens": 1026, "duration": 31.260852813720703, "task_id": "HumanEval/33", "result": "failed: ", "passed": false}
{"generated_code": "def parse_music(music_string: str) -> List[int]:\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    return [durations.get(note, 0) for note in music_string.split()]\n\nparse_music('o o| .| o| o| .| .| .| .| o o')", "is_solved": false, "iteration": 7, "prompt_tokens": 8430, "completion_tokens": 908, "duration": 32.86421251296997, "task_id": "HumanEval/17", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = ()\n    closest_pair = (numbers[0], numbers[1])\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair", "is_solved": false, "iteration": 7, "prompt_tokens": 7759, "completion_tokens": 1220, "duration": 30.375033855438232, "task_id": "HumanEval/20", "result": "passed", "passed": true}
{"generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        else:\n            result.append('D-')\n    return result", "is_solved": false, "iteration": 7, "prompt_tokens": 10075, "completion_tokens": 2052, "duration": 51.535401821136475, "task_id": "HumanEval/81", "result": "failed: ", "passed": false}
{"generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 68, "duration": 2.980239152908325, "task_id": "HumanEval/87", "result": "passed", "passed": true}
{"generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 52, "duration": 4.335091829299927, "task_id": "HumanEval/90", "result": "passed", "passed": true}
{"generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 54, "duration": 4.2294628620147705, "task_id": "HumanEval/92", "result": "passed", "passed": true}
{"generated_code": "def encode(message):\n    encoded_message = ''\n    vowels = 'aeiouAEIOU'\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr((ord(char) + 2 - ord('a')) % 26 + ord('A'))\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message", "is_solved": true, "iteration": 0, "prompt_tokens": 159, "completion_tokens": 93, "duration": 5.514516592025757, "task_id": "HumanEval/93", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    return all(key.islower() for key in keys) or all(key.isupper() for key in keys)", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 49, "duration": 4.356325626373291, "task_id": "HumanEval/95", "result": "failed: 'int' object has no attribute 'islower'", "passed": false}
{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 86, "duration": 4.878050327301025, "task_id": "HumanEval/96", "result": "passed", "passed": true}
{"generated_code": "def multiply(a, b):\n    return int(str(abs(a))[-1]) * int(str(abs(b))[-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 29, "duration": 3.914466619491577, "task_id": "HumanEval/97", "result": "passed", "passed": true}
{"generated_code": "def count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in 'AEIOU')", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 38, "duration": 3.995293378829956, "task_id": "HumanEval/98", "result": "passed", "passed": true}
{"generated_code": "def closest_integer(value):\n    value = float(value)\n    if value < 0:\n        return int(value - 0.5)\n    else:\n        return int(value + 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 45, "duration": 4.453214406967163, "task_id": "HumanEval/99", "result": "passed", "passed": true}
{"generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(\",\", \" \").split()]", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 25, "duration": 1.0746467113494873, "task_id": "HumanEval/101", "result": "passed", "passed": true}
{"generated_code": "def choose_num(x, y):\n    max_even = -1\n    for num in range(x, y+1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 55, "duration": 3.2499303817749023, "task_id": "HumanEval/102", "result": "passed", "passed": true}
{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 40, "duration": 2.996777057647705, "task_id": "HumanEval/103", "result": "passed", "passed": true}
{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 33, "duration": 4.210830211639404, "task_id": "HumanEval/104", "result": "passed", "passed": true}
{"generated_code": "def by_length(arr):\n    digits = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [x for x in arr if 1 <= x <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    result = [digits[x] for x in reversed_arr]\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 119, "duration": 3.765507936477661, "task_id": "HumanEval/105", "result": "passed", "passed": true}
{"generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 82, "duration": 2.168910264968872, "task_id": "HumanEval/106", "result": "passed", "passed": true}
{"generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    n = len(arr)\n    for i in range(n):\n        if sorted_arr == arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 67, "duration": 1.888298511505127, "task_id": "HumanEval/109", "result": "passed", "passed": true}
{"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(x % 2 == 1 for x in lst1) <= sum(x % 2 == 0 for x in lst2) else \"NO\"", "is_solved": true, "iteration": 0, "prompt_tokens": 247, "completion_tokens": 51, "duration": 1.6188201904296875, "task_id": "HumanEval/110", "result": "passed", "passed": true}
{"generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 212, "completion_tokens": 39, "duration": 1.6968176364898682, "task_id": "HumanEval/112", "result": "passed", "passed": true}
{"generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for letter in word if letter.lower() not in 'aeiou')\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 62, "duration": 2.7944095134735107, "task_id": "HumanEval/117", "result": "passed", "passed": true}
{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 98, "duration": 6.123220443725586, "task_id": "HumanEval/118", "result": "passed", "passed": true}
{"generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "is_solved": true, "iteration": 0, "prompt_tokens": 267, "completion_tokens": 17, "duration": 1.1640126705169678, "task_id": "HumanEval/120", "result": "failed: ", "passed": false}
{"generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) and all(lst.count(num) <= 1 for num in lst)", "is_solved": true, "iteration": 0, "prompt_tokens": 299, "completion_tokens": 44, "duration": 3.082533597946167, "task_id": "HumanEval/126", "result": "failed: This prints if this assert fails 7 (good for debugging!)", "passed": false}
{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 26, "duration": 2.2351036071777344, "task_id": "HumanEval/133", "result": "passed", "passed": true}
{"generated_code": "import math\n\ndef max_fill(grid, capacity):\n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)", "is_solved": true, "iteration": 1, "prompt_tokens": 1534, "completion_tokens": 122, "duration": 7.641227722167969, "task_id": "HumanEval/115", "result": "failed: Error", "passed": false}
{"generated_code": "def histogram(test):\n    letters = test.split()\n    letter_count = {}\n    for letter in letters:\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n    if not letter_count:  # Check if the dictionary is empty\n        return {}\n    max_count = max(letter_count.values())\n    return {letter: count for letter, count in letter_count.items() if count == max_count}", "is_solved": true, "iteration": 1, "prompt_tokens": 1162, "completion_tokens": 233, "duration": 7.9237165451049805, "task_id": "HumanEval/111", "result": "passed", "passed": true}
{"generated_code": "def sort_array(array):\n    if not array:\n        return []\n    \n    sorted_array = array.copy()\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        return sorted(sorted_array, reverse=True)\n    else:\n        return sorted(sorted_array)", "is_solved": true, "iteration": 1, "prompt_tokens": 1284, "completion_tokens": 170, "duration": 10.490901708602905, "task_id": "HumanEval/88", "result": "passed", "passed": true}
{"generated_code": "def valid_date(date):\n    if len(date) != 10:\n        return False\n    if '-' not in date:\n        return False\n    month, day, year = date.split('-')\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    month, day, year = int(month), int(day), int(year)\n    if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    else:\n        return False\n    return True", "is_solved": true, "iteration": 1, "prompt_tokens": 1641, "completion_tokens": 491, "duration": 12.536921501159668, "task_id": "HumanEval/124", "result": "passed", "passed": true}
{"generated_code": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product if product != 1 or any(digit % 2 != 0 for digit in map(int, str(n))) else 0", "is_solved": true, "iteration": 2, "prompt_tokens": 1644, "completion_tokens": 299, "duration": 11.916228294372559, "task_id": "HumanEval/131", "result": "passed", "passed": true}
{"generated_code": "def is_nested(string):\n    stack = []\n    nested = False\n    for char in string:\n        if char == '[':\n            stack.append(char)\n            if len(stack) > 1:  # Check for nested brackets\n                nested = True\n        elif char == ']' and stack:\n            stack.pop()\n        else:\n            return False\n    return nested", "is_solved": true, "iteration": 4, "prompt_tokens": 3501, "completion_tokens": 586, "duration": 20.439193964004517, "task_id": "HumanEval/132", "result": "failed: ", "passed": false}
{"generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            base = ord('a') if char.islower() else ord('A')\n            result += chr((ord(char) - base + 2 * 2) % 26 + base)\n        else:\n            result += char\n    return result", "is_solved": true, "iteration": 3, "prompt_tokens": 2728, "completion_tokens": 479, "duration": 27.18725848197937, "task_id": "HumanEval/89", "result": "passed", "passed": true}
{"generated_code": "def match_parens(lst):\n    stack = []\n    \n    for s in lst:\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            else:\n                if not stack or stack[-1] != '(':\n                    return 'No'\n                stack.pop()\n    \n    if not stack:\n        return 'Yes'\n    else:\n        return 'No'", "is_solved": true, "iteration": 5, "prompt_tokens": 4677, "completion_tokens": 697, "duration": 23.843109846115112, "task_id": "HumanEval/119", "result": "failed: ", "passed": false}
{"generated_code": "def add_elements(arr, k):\n    return sum(arr[:k])", "is_solved": false, "iteration": 7, "prompt_tokens": 6238, "completion_tokens": 504, "duration": 26.552767276763916, "task_id": "HumanEval/122", "result": "failed: ", "passed": false}
{"generated_code": "def count_nums(arr):\n    return sum(sum(int(d) for d in str(abs(num)) if d.isdigit()) > 0 for num in arr)", "is_solved": false, "iteration": 7, "prompt_tokens": 5113, "completion_tokens": 546, "duration": 24.220892190933228, "task_id": "HumanEval/108", "result": "failed: ", "passed": false}
{"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if i % 2 == 0 and lst[i] % 2 != 0)", "is_solved": false, "iteration": 7, "prompt_tokens": 4969, "completion_tokens": 598, "duration": 23.7056827545166, "task_id": "HumanEval/121", "result": "failed: ", "passed": false}
{"generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": false, "iteration": 7, "prompt_tokens": 6197, "completion_tokens": 498, "duration": 26.572938919067383, "task_id": "HumanEval/116", "result": "passed", "passed": true}
{"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return [word for word in txt.split(',') if word]", "is_solved": false, "iteration": 7, "prompt_tokens": 5428, "completion_tokens": 628, "duration": 23.825746536254883, "task_id": "HumanEval/125", "result": "failed: ", "passed": false}
{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt and txt[-1].isalpha() and not txt[-1].isalnum():\n        return True\n    return False", "is_solved": false, "iteration": 7, "prompt_tokens": 5634, "completion_tokens": 598, "duration": 24.58725595474243, "task_id": "HumanEval/134", "result": "failed: ", "passed": false}
{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    product = 1\n    for num in arr:\n        if num == 0:\n            return 0\n        product *= num / abs(num)\n    return sum(abs(num) for num in arr) * product", "is_solved": false, "iteration": 7, "prompt_tokens": 5718, "completion_tokens": 847, "duration": 30.974852561950684, "task_id": "HumanEval/128", "result": "passed", "passed": true}
{"generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(n-1):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 1)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones", "is_solved": false, "iteration": 7, "prompt_tokens": 5889, "completion_tokens": 795, "duration": 28.447274208068848, "task_id": "HumanEval/100", "result": "failed: Test 4", "passed": false}
{"generated_code": "def can_arrange(arr):\n    max_index = -1\n    current_max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            current_max_index = i-1\n        max_index = max(max_index, current_max_index)\n    return max_index", "is_solved": false, "iteration": 7, "prompt_tokens": 6174, "completion_tokens": 919, "duration": 31.9732449054718, "task_id": "HumanEval/135", "result": "failed: ", "passed": false}
{"generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences if sentence]\n    \n    count = 0\n    for sentence in sentences:\n        if sentence.startswith('I'):\n            count += 1\n    \n    return count", "is_solved": false, "iteration": 7, "prompt_tokens": 5647, "completion_tokens": 703, "duration": 33.491997480392456, "task_id": "HumanEval/91", "result": "failed: Test 2", "passed": false}
{"generated_code": "def get_odd_collatz(n):\n    collatz_seq = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_seq.append(n)\n    \n    return sorted([num for num in collatz_seq if num % 2 != 0 or num == 1])", "is_solved": false, "iteration": 7, "prompt_tokens": 7298, "completion_tokens": 921, "duration": 31.88750457763672, "task_id": "HumanEval/123", "result": "passed", "passed": true}
{"generated_code": "def largest_prime_sum(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    prime_numbers = [num for num in lst if is_prime(num)]\n    largest_prime = max(prime_numbers)\n    return sum_of_digits(largest_prime)", "is_solved": false, "iteration": 7, "prompt_tokens": 8513, "completion_tokens": 1295, "duration": 38.046016454696655, "task_id": "HumanEval/94", "result": "failed: name 'skjkasdkd' is not defined", "passed": false}
{"generated_code": "def largest_smallest_integers(lst):\n    neg_integers = [num for num in lst if num < 0]\n    pos_integers = [num for num in lst if num > 0]\n    \n    largest_neg = max(neg_integers) if neg_integers else None\n    smallest_pos = min(pos_integers) if pos_integers else None\n    \n    if not neg_integers:\n        largest_neg = None\n    \n    return (largest_neg, smallest_pos)", "is_solved": false, "iteration": 7, "prompt_tokens": 6477, "completion_tokens": 1114, "duration": 34.253175020217896, "task_id": "HumanEval/136", "result": "passed", "passed": true}
{"generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(int(digit) % 2 != 0 for digit in string), sum(int(digit) % 2 != 0 for digit in string), i+1, i+1) for i, string in enumerate(lst)]", "is_solved": false, "iteration": 7, "prompt_tokens": 5995, "completion_tokens": 728, "duration": 29.633608102798462, "task_id": "HumanEval/113", "result": "failed: Test 1", "passed": false}
{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    total_sum = 0\n    for num in nums:\n        total_sum += num\n        min_sum = min(min_sum, total_sum)\n        if total_sum > 0:\n            total_sum = 0\n    return min_sum", "is_solved": false, "iteration": 7, "prompt_tokens": 5828, "completion_tokens": 785, "duration": 34.639325857162476, "task_id": "HumanEval/114", "result": "passed", "passed": true}
{"generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1, 3]\n    else:\n        tribonacci = [0, 1, 3]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tribonacci.append(1 + i // 2)\n            else:\n                tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1])\n        return tribonacci", "is_solved": false, "iteration": 7, "prompt_tokens": 6922, "completion_tokens": 1214, "duration": 37.44919800758362, "task_id": "HumanEval/130", "result": "failed: list index out of range", "passed": false}
{"generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "is_solved": false, "iteration": 7, "prompt_tokens": 6724, "completion_tokens": 1056, "duration": 36.254398345947266, "task_id": "HumanEval/107", "result": "passed", "passed": true}
{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    intersection_length = intersection_end - intersection_start + 1\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 7, "prompt_tokens": 7963, "completion_tokens": 1709, "duration": 44.807215452194214, "task_id": "HumanEval/127", "result": "failed: ", "passed": false}
{"generated_code": "def minPath(grid, k):\n    n = len(grid)\n    m = len(grid[0])\n    visited = [[False for _ in range(m)] for _ in range(n)]\n    \n    def dfs(i, j, path):\n        if i < 0 or i >= n or j < 0 or j >= m or visited[i][j]:\n            return\n        path.append(grid[i][j])\n        visited[i][j] = True\n        if len(path) == k:\n            return path\n        res = []\n        for x, y in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:\n            res.append(dfs(x, y, path.copy()))\n        visited[i][j] = False\n        return min(filter(None, res))\n    \n    for i in range(n):\n        for j in range(m):\n            path = dfs(i, j, [])\n            if path:\n                return path", "is_solved": false, "iteration": 7, "prompt_tokens": 11617, "completion_tokens": 2598, "duration": 59.15727496147156, "task_id": "HumanEval/129", "result": "failed: ", "passed": false}
{"generated_code": "def is_equal_to_sum_even(n):\n    return n % 2 == 0 and n >= 8", "is_solved": true, "iteration": 0, "prompt_tokens": 127, "completion_tokens": 27, "duration": 2.1825339794158936, "task_id": "HumanEval/138", "result": "passed", "passed": true}
{"generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        factorial = 1\n        for j in range(1, i+1):\n            factorial *= j\n        result *= factorial\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 60, "duration": 5.583819150924683, "task_id": "HumanEval/139", "result": "passed", "passed": true}
{"generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 98, "duration": 3.6051621437072754, "task_id": "HumanEval/141", "result": "passed", "passed": true}
{"generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return (x_num * n_num) % (x_den * n_den) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 59, "duration": 2.6001389026641846, "task_id": "HumanEval/144", "result": "passed", "passed": true}
{"generated_code": "def specialFilter(nums):\n    return sum(1 for num in nums if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9'])", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 67, "duration": 5.582629919052124, "task_id": "HumanEval/146", "result": "passed", "passed": true}
{"generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 78, "duration": 2.0863029956817627, "task_id": "HumanEval/150", "result": "passed", "passed": true}
{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0 and isinstance(x, int))", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 39, "duration": 4.964281320571899, "task_id": "HumanEval/151", "result": "passed", "passed": true}
{"generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 39, "duration": 2.242448329925537, "task_id": "HumanEval/152", "result": "passed", "passed": true}
{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        return sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n    \n    strongest = max(extensions, key=lambda x: strength(x))\n    return f\"{class_name}.{strongest}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 71, "duration": 3.0529162883758545, "task_id": "HumanEval/153", "result": "passed", "passed": true}
{"generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',\n        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 142, "duration": 3.109078884124756, "task_id": "HumanEval/156", "result": "passed", "passed": true}
{"generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 52, "duration": 1.781921625137329, "task_id": "HumanEval/157", "result": "passed", "passed": true}
{"generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    remaining_after_meals = max(0, remaining - need)\n    return [total_eaten, remaining_after_meals]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 51, "duration": 5.194386959075928, "task_id": "HumanEval/159", "result": "passed", "passed": true}
{"generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += operator[i] + str(operand[i+1])\n    return eval(expression)", "is_solved": true, "iteration": 0, "prompt_tokens": 257, "completion_tokens": 48, "duration": 4.242655515670776, "task_id": "HumanEval/160", "result": "passed", "passed": true}
{"generated_code": "def solve(s):\n    return s.swapcase() if any(c.isalpha() for c in s) else s[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 30, "duration": 2.5408999919891357, "task_id": "HumanEval/161", "result": "passed", "passed": true}
{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 33, "duration": 2.378025531768799, "task_id": "HumanEval/162", "result": "passed", "passed": true}
{"generated_code": "def find_max(words):\n    return min(words, key=lambda x: (-len(set(x)), x))", "is_solved": true, "iteration": 1, "prompt_tokens": 953, "completion_tokens": 97, "duration": 6.723110914230347, "task_id": "HumanEval/158", "result": "passed", "passed": true}
{"generated_code": "def even_odd_count(num):\n    num_str = str(abs(num))\n    even_count = sum(1 for digit in num_str if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in num_str if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "is_solved": true, "iteration": 1, "prompt_tokens": 920, "completion_tokens": 183, "duration": 5.154185771942139, "task_id": "HumanEval/155", "result": "passed", "passed": true}
{"generated_code": "def generate_integers(a, b):\n    start, end = min(a, b), max(a, b)\n    return [i for i in range(start, end+1) if all(int(digit) % 2 == 0 for digit in str(i))]", "is_solved": true, "iteration": 6, "prompt_tokens": 4741, "completion_tokens": 626, "duration": 26.16407871246338, "task_id": "HumanEval/163", "result": "failed: Test 3", "passed": false}
{"generated_code": "def cycpattern_check(a, b):\n    return any(b in a[i:] + a[:i] for i in range(len(a)))\n\n# Improved implementation\ndef cycpattern_check(a, b):\n    return any(b in a[i:] + a[:i] for i in range(len(a))) or any(b in a[i:] + a[:i] for i in range(len(a)))", "is_solved": false, "iteration": 7, "prompt_tokens": 5979, "completion_tokens": 606, "duration": 22.740353107452393, "task_id": "HumanEval/154", "result": "failed: test #3", "passed": false}
{"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "is_solved": false, "iteration": 7, "prompt_tokens": 5056, "completion_tokens": 525, "duration": 20.61507248878479, "task_id": "HumanEval/145", "result": "failed: ", "passed": false}
{"generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "is_solved": false, "iteration": 7, "prompt_tokens": 6477, "completion_tokens": 550, "duration": 24.208912134170532, "task_id": "HumanEval/149", "result": "passed", "passed": true}
{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i) % 3 == 0 else x**3 if (i) % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 7, "prompt_tokens": 6801, "completion_tokens": 727, "duration": 26.85825514793396, "task_id": "HumanEval/142", "result": "passed", "passed": true}
{"generated_code": "def fix_spaces(text):\n    result = \"\"\n    count = 0\n    for char in text:\n        if char == \" \":\n            count += 1\n            if count > 1:\n                result = result[:-1] + \"-\"\n        else:\n            count = 0\n        if char != \" \":\n            result += char\n        else:\n            result += \"_\"\n    return result", "is_solved": false, "iteration": 7, "prompt_tokens": 5612, "completion_tokens": 923, "duration": 26.91594409942627, "task_id": "HumanEval/140", "result": "failed: This prints if this assert fails 3 (good for debugging!)", "passed": false}
{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "is_solved": false, "iteration": 7, "prompt_tokens": 6043, "completion_tokens": 995, "duration": 30.528159141540527, "task_id": "HumanEval/143", "result": "passed", "passed": true}
{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2)\n    if start_index > end_index:\n        start_index, end_index = end_index, start_index\n    return tuple([planet for planet in planets if start_index < planets.index(planet) < end_index])", "is_solved": false, "iteration": 7, "prompt_tokens": 6958, "completion_tokens": 1372, "duration": 34.36117696762085, "task_id": "HumanEval/148", "result": "passed", "passed": true}
{"generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n+1):\n        a_i = i * i - i + 1\n        for j in range(i+1, n+1):\n            a_j = j * j - j + 1\n            for k in range(j+1, n+1):\n                a_k = k * k - k + 1\n                if (a_i + a_j + a_k) % 3 == 0:\n                    count += 1\n    return count // 3", "is_solved": false, "iteration": 7, "prompt_tokens": 6535, "completion_tokens": 1288, "duration": 37.10934615135193, "task_id": "HumanEval/147", "result": "failed: ", "passed": false}
{"generated_code": "def compare_one(a, b):\n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        return a if a > b else b if b > a else None\n    elif (isinstance(a, str) and any(char.isdigit() for char in a)) or (isinstance(b, str) and any(char.isdigit() for char in b)):\n        a_num = float(a.replace(',', '.')) if isinstance(a, str) else a\n        b_num = float(b.replace(',', '.')) if isinstance(b, str) else b\n        return a_num if a_num > b_num else b_num if b_num > a_num else None\n    else:\n        return a if isinstance(a, (int, float)) else b", "is_solved": false, "iteration": 7, "prompt_tokens": 6951, "completion_tokens": 1343, "duration": 35.296616077423096, "task_id": "HumanEval/137", "result": "failed: ", "passed": false}
